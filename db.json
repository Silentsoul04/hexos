{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/frame-zhifubao-002.png","path":"images/frame-zhifubao-002.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-025.png","path":"images/frame-zhifubao-025.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-030.jpeg","path":"images/frame-zhifubao-030.jpeg","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-031.jpeg","path":"images/frame-zhifubao-031.jpeg","modified":0,"renderable":0},{"_id":"source/images/default_avatar.jpg","path":"images/default_avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/jenkins-maven-001.png","path":"images/jenkins-maven-001.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-maven-002.png","path":"images/jenkins-maven-002.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-maven-003.png","path":"images/jenkins-maven-003.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-maven-004.png","path":"images/jenkins-maven-004.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-maven-005.png","path":"images/jenkins-maven-005.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-maven-006.png","path":"images/jenkins-maven-006.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-maven-007.png","path":"images/jenkins-maven-007.png","modified":0,"renderable":0},{"_id":"source/images/project-004.jpg","path":"images/project-004.jpg","modified":0,"renderable":0},{"_id":"source/images/rap-002.png","path":"images/rap-002.png","modified":0,"renderable":0},{"_id":"source/images/project-111.png","path":"images/project-111.png","modified":0,"renderable":0},{"_id":"source/images/rap-001.png","path":"images/rap-001.png","modified":0,"renderable":0},{"_id":"source/images/rap-003.png","path":"images/rap-003.png","modified":0,"renderable":0},{"_id":"source/images/rap-004.png","path":"images/rap-004.png","modified":0,"renderable":0},{"_id":"source/images/rap-006.png","path":"images/rap-006.png","modified":0,"renderable":0},{"_id":"source/images/rap-007.png","path":"images/rap-007.png","modified":0,"renderable":0},{"_id":"source/images/rap-005.png","path":"images/rap-005.png","modified":0,"renderable":0},{"_id":"source/images/rap-008.png","path":"images/rap-008.png","modified":0,"renderable":0},{"_id":"source/images/rap-009.png","path":"images/rap-009.png","modified":0,"renderable":0},{"_id":"source/images/react-002.png","path":"images/react-002.png","modified":0,"renderable":0},{"_id":"source/images/react-001.png","path":"images/react-001.png","modified":0,"renderable":0},{"_id":"source/images/react-003.png","path":"images/react-003.png","modified":0,"renderable":0},{"_id":"source/images/react-004.png","path":"images/react-004.png","modified":0,"renderable":0},{"_id":"source/images/react-005.png","path":"images/react-005.png","modified":0,"renderable":0},{"_id":"source/images/react-006.png","path":"images/react-006.png","modified":0,"renderable":0},{"_id":"source/images/react-007.png","path":"images/react-007.png","modified":0,"renderable":0},{"_id":"source/images/version.png","path":"images/version.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-006.png","path":"images/frame-zhifubao-006.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-012.png","path":"images/frame-zhifubao-012.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-013.png","path":"images/frame-zhifubao-013.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-021.png","path":"images/frame-zhifubao-021.png","modified":0,"renderable":0},{"_id":"source/images/introduce-2-2.png","path":"images/introduce-2-2.png","modified":0,"renderable":0},{"_id":"source/images/java-spring-aop.png","path":"images/java-spring-aop.png","modified":0,"renderable":0},{"_id":"source/images/java-web.png","path":"images/java-web.png","modified":0,"renderable":0},{"_id":"source/images/project-005.png","path":"images/project-005.png","modified":0,"renderable":0},{"_id":"source/images/project-002.jpg","path":"images/project-002.jpg","modified":0,"renderable":0},{"_id":"source/images/transaction-001.png","path":"images/transaction-001.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-003.png","path":"images/frame-zhifubao-003.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-007.png","path":"images/frame-zhifubao-007.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-016.png","path":"images/frame-zhifubao-016.png","modified":0,"renderable":0},{"_id":"source/images/java-monitor.png","path":"images/java-monitor.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-002.png","path":"images/jenkins-002.png","modified":0,"renderable":0},{"_id":"source/images/project-001.jpg","path":"images/project-001.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0,"renderable":1},{"_id":"source/images/frame-zhifubao-004.png","path":"images/frame-zhifubao-004.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-023.png","path":"images/frame-zhifubao-023.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-026.png","path":"images/frame-zhifubao-026.png","modified":0,"renderable":0},{"_id":"source/images/java+io.png","path":"images/java+io.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-001.png","path":"images/jenkins-001.png","modified":0,"renderable":0},{"_id":"source/images/project-110.png","path":"images/project-110.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"source/images/frame-zhifubao-005.png","path":"images/frame-zhifubao-005.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-010.png","path":"images/frame-zhifubao-010.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-011.png","path":"images/frame-zhifubao-011.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-018.png","path":"images/frame-zhifubao-018.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-029.png","path":"images/frame-zhifubao-029.png","modified":0,"renderable":0},{"_id":"source/images/jenkins-003.png","path":"images/jenkins-003.png","modified":0,"renderable":0},{"_id":"source/images/project-003.png","path":"images/project-003.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"source/images/frame-zhifubao-008.png","path":"images/frame-zhifubao-008.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-009.png","path":"images/frame-zhifubao-009.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-014.png","path":"images/frame-zhifubao-014.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-015.png","path":"images/frame-zhifubao-015.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-019.png","path":"images/frame-zhifubao-019.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-022.png","path":"images/frame-zhifubao-022.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-028.png","path":"images/frame-zhifubao-028.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/images/frame-zhifubao-017.png","path":"images/frame-zhifubao-017.png","modified":0,"renderable":0},{"_id":"source/images/frame-zhifubao-020.png","path":"images/frame-zhifubao-020.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/frame-zhifubao-027.png","path":"images/frame-zhifubao-027.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/images/frame-zhifubao-001.png","path":"images/frame-zhifubao-001.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"source/images/frame-zhifubao-024.png","path":"images/frame-zhifubao-024.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/test.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925613},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1455940924890},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1455940924892},{"_id":"themes/next/.javascript_ignore","hash":"a44fc7feb9e41c99053d2abda1b0cd6306543d52","modified":1455940924900},{"_id":"themes/next/.hound.yml","hash":"db672ad0100d3802539ae5ffa3a270f71e107d58","modified":1455940924898},{"_id":"themes/next/.jshintrc","hash":"49b54f7b862f20d15edb1b172ef341a048ec4a9f","modified":1455940924903},{"_id":"themes/next/.gitignore","hash":"f9b9e6ccc15e4a649e017e78b13b1d1494231a99","modified":1455940924895},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1455940924907},{"_id":"themes/next/README.md","hash":"b2499c61ef9cf6ee31ed5606ed43ef247c73de63","modified":1455940924910},{"_id":"themes/next/_config.yml","hash":"299e80f4f279d44d35c2194e4e735d2c12634b0f","modified":1455940924913},{"_id":"themes/next/bower.json","hash":"d46717b4a025790cda33d78339780c8749aee7fd","modified":1455940924917},{"_id":"source/_posts/Java-中int和Integer的区别.md","hash":"cc17e681cd866988bc49f1d8ae72904771f79c8c","modified":1470656006578},{"_id":"source/_posts/SOA分布式事务解决方案.md","hash":"a5f4882579c0531e1461000cfe9d3c1db79a63a6","modified":1470842157203},{"_id":"source/_posts/Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目.md","hash":"294a8086f8550cd8b1c9960ef5b94b7216914468","modified":1464790154708},{"_id":"source/_posts/What-s-the-simplest-way-to-print-a-Java-array.md","hash":"07b0233e562a34cb9a12e3569431ef174f9207e7","modified":1470656006582},{"_id":"source/_posts/How-to-synchronize-ArrayList-in-java-with-example.md","hash":"f258c07c3073c03a9ea8d1880a185263d2c547e4","modified":1469717875280},{"_id":"source/_posts/Springboot应用中如何针对springmvc的controller写单元测试.md","hash":"eb2dddc4cdd3c33521b3da3394d3cd18572983b1","modified":1469250106330},{"_id":"source/_posts/api-version-4种在springmvc中进行api版本控制的处理方法.md","hash":"6da4a06a63de7cea31591ff48833755cfc05d4fd","modified":1467302219038},{"_id":"source/_posts/centos6下安装配置mysql，并开启mysql的远程登录.md","hash":"04879f260199ea205ab459e87968676b868eb77c","modified":1461589456768},{"_id":"source/_posts/centos6环境下配置mysql主从同步.md","hash":"ed975ade6b61c63e6fcb24ab5b2ad1d824ab555c","modified":1461590733126},{"_id":"source/_posts/Windows下开启React-Native征途.md","hash":"358a806ae976bb3625ef4a042f80e85b27ac88ef","modified":1465007161845},{"_id":"source/_posts/Transform-objects-with-guava-使用Guava库转换对象.md","hash":"7fb64bcdee4dc118cefc4ef6ac6bf9b532b665bf","modified":1469250420563},{"_id":"source/_posts/git-git常用-把本地项目提交到github.md","hash":"1253ca309586ce518e60e0423b3f0b042ec34edf","modified":1455940924710},{"_id":"source/_posts/dev-collect-2016-06-collect-of-dev.md","hash":"60cbdf3c78db25500aaf59db6a6cb4b5a6b22ffe","modified":1468239321828},{"_id":"source/_posts/git-git分支使用和管理.md","hash":"687ec93033d3c93d5b6629b12bdbb9e947ae9c22","modified":1465218382607},{"_id":"source/_posts/dev-collect-2016-06-06-collect-of-im-netty-android-etc.md","hash":"8fd53cf548630720b6fcca3eb3ab009077ce5eac","modified":1465218462450},{"_id":"source/_posts/dev-collect-2016-07-collect-of-dev.md","hash":"e3483db3af6be9cb250d7dc83bdb6c57ae9f5503","modified":1470235356539},{"_id":"source/_posts/java-design-pattern-java设计模式之Builder模式.md","hash":"5ae27af8b350722972a5ef4934ae3d5cf9bd5b01","modified":1462698012177},{"_id":"source/_posts/java-io体系整理.md","hash":"852f0984ffca5f03e9cec31eeb3d74044ecf3768","modified":1455943198973},{"_id":"source/_posts/java-static-关键字总结.md","hash":"d9ff757d52f3aca87b5abd14eab1f9718051563e","modified":1462724055474},{"_id":"source/_posts/java-从代码中去除if-else.md","hash":"c1df7bdd72854b22b1c00ac9706cc761aa7a5945","modified":1455940924715},{"_id":"source/_posts/hello-world.md","hash":"f2d681d071e06495eb62c9435a4c6c7bd84cd4cd","modified":1455940924711},{"_id":"source/_posts/spring-aop-知识体系整理.md","hash":"eb118d12df125da77e87bcb8260134872cdbdf67","modified":1455943896224},{"_id":"source/_posts/java-enum-典型用法.md","hash":"d86ab73346b38a67dd0e324da411c6cdd12e4b80","modified":1462723635203},{"_id":"source/_posts/java-web知识体系.md","hash":"997e0ddfae392299fc0a37d6b8b9cc5cac048a88","modified":1462374433154},{"_id":"source/_posts/jquery-validate常用用法总结.md","hash":"c4ce8e38ba1737176393776cf1f12fa6345d7130","modified":1455940924719},{"_id":"source/_posts/springboot-items-项目使用实践-springboot-get-started.md","hash":"3199e94996c3d3db8afa97bd3a5719dbd198635c","modified":1455940924723},{"_id":"source/_posts/【转】-支付宝架构与技术.md","hash":"b601d2bcc061a2c9ea508054ddcfcaf19c5a3528","modified":1470842300132},{"_id":"source/_posts/springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro.md","hash":"2897ecec759bdb619abbf5e6840d3f1dd24547f9","modified":1460241867345},{"_id":"source/_posts/springmvc-rest-api-versioning.md","hash":"76860d3947d6777ac35f278d52f6b85a16f6c918","modified":1462289858979},{"_id":"source/_posts/为你的项目做合理的版本控制管理.md","hash":"d8a7af1d7c942f8e25a1297c6775cebbe2a00810","modified":1460043821330},{"_id":"source/_posts/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存.md","hash":"a02632a3511ffeb403778fae1272775105735162","modified":1460172357600},{"_id":"source/_posts/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用.md","hash":"185e052d7ac21bd22a70c598b5935e52d522ea9a","modified":1460176203524},{"_id":"source/_posts/使用RAP作为接口管理和调试的工具.md","hash":"ae4bdc1f7933942f79f332d09892b48148d97f3d","modified":1468238937865},{"_id":"source/_posts/使用hexo-deploy直接发布到github.md","hash":"818610d597c08dbc4ea32c797336108d1caaf87e","modified":1455940924726},{"_id":"source/_posts/使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用.md","hash":"0eaaebfc7d9942b9b5f0b9af6e087c31a100dd14","modified":1468243820548},{"_id":"source/_posts/关于java项目中如何读取配置文件.md","hash":"9f6b1902af401cd53669a3633d2b4bbd8b209f08","modified":1469196283942},{"_id":"source/_posts/系统分布式情况下最终一致性方案梳理.md","hash":"168424874e19d2a58d0cda70d7dd6dd29b3d335d","modified":1470842157211},{"_id":"source/_posts/在linux下部署spring-boot项目过程记录.md","hash":"93280eb03394fa70d91fd1155c7eda6b596b0609","modified":1460042916659},{"_id":"source/_posts/多版本部署如何使用nginx根据url参数api-version值进行路由.md","hash":"f0937513b5656762b0bb22dc0c9149069c2c0e1c","modified":1469542886520},{"_id":"source/_posts/使用Jenkins配置Git和Maven的自动化构建Tomcat项目.md","hash":"733e0454d854cf23213b19a8685062f8b1bfce74","modified":1464620726125},{"_id":"source/_posts/集群监控初步整理.md","hash":"c99726e3f1b259727e488c3e9d05aa9fae7fd10f","modified":1457755756055},{"_id":"source/tags/index.md","hash":"195ac93007dc6de96e3d11cf0d70d2fc11ed1827","modified":1455940924732},{"_id":"source/images/frame-zhifubao-002.png","hash":"a512d6e799ad379dfc35369367d074437257d2e8","modified":1470842157218},{"_id":"source/_posts/在单服务器上安装部署FastDFS-Nginx.md","hash":"947004a063d82d83aa577a18dc95018d5def326e","modified":1467900259326},{"_id":"source/_posts/如何使用github-pages和hexo搭建简单blog.md","hash":"1f2d80eb7d7b8c3eaa79afca32768a6fa1b0e6ed","modified":1455940924729},{"_id":"source/images/frame-zhifubao-025.png","hash":"7c693a9022ef18ea1df8addab9bf9bfd92f6a455","modified":1470842157288},{"_id":"source/images/frame-zhifubao-030.jpeg","hash":"c33706562b896515af1aab415ae2a9e72df83730","modified":1470842157307},{"_id":"source/images/frame-zhifubao-031.jpeg","hash":"6608d9c2bef7a78909bf499125d5f28a40050656","modified":1470842157311},{"_id":"source/_posts/项目管理建议.md","hash":"7ae4b5a58ec048733614b85e00e1f79f7138e37a","modified":1467900259329},{"_id":"source/images/default_avatar.jpg","hash":"d691cdfbb0b969c1de50b94d35371fee64287cae","modified":1460242378660},{"_id":"source/images/jenkins-maven-001.png","hash":"af088cbb859501fc70ec4b16c49b4fe7e21dce5d","modified":1464786953175},{"_id":"source/images/jenkins-maven-002.png","hash":"e332c729c8d2803f26c3687eb5f734bb454ab528","modified":1464786953177},{"_id":"source/images/jenkins-maven-003.png","hash":"b108d0cdb5baeec16c1f72ef25636cff67f9a2b5","modified":1464786953178},{"_id":"source/images/jenkins-maven-004.png","hash":"1f0afdeb4d232e7109966ff6b6a47417efd8c381","modified":1464786953179},{"_id":"source/images/jenkins-maven-005.png","hash":"6e10df6bdc2cb256ba98025f7b0c52b463d16e33","modified":1464786953181},{"_id":"source/images/jenkins-maven-006.png","hash":"76b4d166cb227049fda0fcbfbceaa42ca05c6352","modified":1464786953182},{"_id":"source/images/jenkins-maven-007.png","hash":"bc49291f05ff432c835d1be7fb9906d474f8452c","modified":1464788558856},{"_id":"source/images/project-004.jpg","hash":"f113d1b139db0087243a0e27ed37b1a2889855d1","modified":1467511080934},{"_id":"source/images/rap-002.png","hash":"71b8d6aaea273c2659260186acdeb6dd5d3f9ee9","modified":1468238937872},{"_id":"source/images/project-111.png","hash":"06265ebd8f641701edc1f3b900d055124dff5573","modified":1468238937870},{"_id":"source/images/rap-001.png","hash":"2b82c3b377f766e3d8c8e290e3397a63df90a2c1","modified":1468238937871},{"_id":"source/images/rap-003.png","hash":"ce5ccc665a0d552cc461e43236d690ae0a9df158","modified":1468238937873},{"_id":"source/images/rap-004.png","hash":"baa2f76303f26f5a90cc59c414e18778b4dfd6e2","modified":1468238937874},{"_id":"source/images/rap-006.png","hash":"d435997ffb7fb61f19c662c945db5ef08a3456af","modified":1468238937877},{"_id":"source/images/rap-007.png","hash":"9e71e103c64dbde351e1649c8c54481cfc5cbe5e","modified":1468238937878},{"_id":"source/images/rap-005.png","hash":"db58b4073d4e39a713450cdafb6936c9e53162b8","modified":1468238937876},{"_id":"source/images/rap-008.png","hash":"ecc3c58cba8ebbce42d4a0784a4679c990a0633c","modified":1468238937879},{"_id":"source/images/rap-009.png","hash":"30521d8625f15ace936e4400f38bd36357e230ac","modified":1468238937881},{"_id":"source/images/react-002.png","hash":"052ffb65d91a0a846b44ae45d69f3932133ded5d","modified":1465006230063},{"_id":"source/images/react-001.png","hash":"d6f1b6f721bd34891e700e056d51b180c911a932","modified":1465005907704},{"_id":"source/images/react-003.png","hash":"af89843f48b7b8e6686c5dc444c7772f2db4329a","modified":1465006247917},{"_id":"source/images/react-004.png","hash":"4966fcea781dd0aff04a6be2028da5aedc971568","modified":1465006267803},{"_id":"source/images/react-005.png","hash":"defd51b0d7343e103ee62469705495c472f1c3fe","modified":1465006490849},{"_id":"source/images/react-006.png","hash":"6baa6b39976d095d71fd5f0eddea76713ed3cbf1","modified":1465006625134},{"_id":"source/images/react-007.png","hash":"9b3a0f9c5f3cac5646527dd1c6e098ede9aafcaa","modified":1465006696833},{"_id":"source/images/version.png","hash":"ed57e84198ae33dd00dfbc8ca048b8caf9862d24","modified":1460172587674},{"_id":"themes/next/languages/default.yml","hash":"982bfffdb6ab495867255e79d852a9adb68bd10c","modified":1455940924923},{"_id":"themes/next/languages/de.yml","hash":"3af67eda28640a99e17d06eec0c664e54e95fb2d","modified":1455940924920},{"_id":"themes/next/languages/en.yml","hash":"982bfffdb6ab495867255e79d852a9adb68bd10c","modified":1455940924924},{"_id":"themes/next/languages/fr-FR.yml","hash":"eb05b50f49a29d46e90e45fabb12a14be6d7631d","modified":1455940924927},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ba22a703638a23fce2cc51fcdfb1ba4dd7bcd114","modified":1455940924939},{"_id":"themes/next/languages/ru.yml","hash":"4d1c2d4f4040d447a3511da51dc9fea7b177a7a6","modified":1455940924933},{"_id":"themes/next/languages/pt.yml","hash":"e32711ad646d05911b515cc30e14c57f534a0045","modified":1455940924930},{"_id":"themes/next/languages/zh-hk.yml","hash":"f80a494ecf23166152011cb5f4e9174fefa9197c","modified":1455940924942},{"_id":"themes/next/languages/zh-tw.yml","hash":"f60af901f90fab657a1d27f981ad3381069842d0","modified":1455940924946},{"_id":"themes/next/layout/_layout.swig","hash":"43dc8e01ca4d2e508db830250f2dcba7ded94830","modified":1455940924949},{"_id":"themes/next/layout/index.swig","hash":"56a70d0cd51ce739787da3e07638969ccb6abd2f","modified":1455940925091},{"_id":"themes/next/layout/category.swig","hash":"c777432e1587826ccad5a4aa50309763a82df52b","modified":1455940925088},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1455940925095},{"_id":"themes/next/layout/post.swig","hash":"e67a6aabe4d71cbcf01a4cace652424bd49acc9b","modified":1455940925095},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1455940925095},{"_id":"themes/next/layout/archive.swig","hash":"40e899e690172d8dd19317b17ec7be94406f114f","modified":1455940925083},{"_id":"themes/next/layout/tag.swig","hash":"06417b0b050c66d816323b6178c9376ba2e58dd9","modified":1455940925095},{"_id":"source/images/frame-zhifubao-006.png","hash":"d6aa19f5f358267fac4e5bcbcaadc10fa0f905a9","modified":1470842157229},{"_id":"source/images/frame-zhifubao-012.png","hash":"5500683062269a4ec9183b519797dae30bc09fbb","modified":1470842157247},{"_id":"source/images/frame-zhifubao-013.png","hash":"b06c6ad5a9b025f0eea567d32e17bca3f71a602e","modified":1470842157249},{"_id":"source/images/frame-zhifubao-021.png","hash":"17d782adcac73bf0eef7813074fa1fefcedc09dc","modified":1470842157276},{"_id":"source/images/introduce-2-2.png","hash":"b6ce9da78d1dd597c76d61f9cab047aff41d1baa","modified":1467510911329},{"_id":"source/images/java-spring-aop.png","hash":"9c8c398fa913196dce6c5f480798d8c5afe76293","modified":1455943863131},{"_id":"source/images/java-web.png","hash":"2129f154eff906515903c96639e48ab076024bd2","modified":1462374215616},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1455940925616},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1455940925621},{"_id":"source/images/project-005.png","hash":"383af846ce2608b4501f677efd37657a1c83f633","modified":1467511140280},{"_id":"source/images/project-002.jpg","hash":"1e0807295d3464bf956d94d91ef089da0ebf3c03","modified":1467510954242},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1455940925627},{"_id":"source/images/transaction-001.png","hash":"e22e36a5f86485f6a13c6e33ffc10e7718260be1","modified":1470842157314},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925287},{"_id":"source/images/frame-zhifubao-003.png","hash":"e21ace37d5305e9d27a8c007c340074db0535ca9","modified":1470842157220},{"_id":"source/images/frame-zhifubao-007.png","hash":"1110e6bdba9aaf6dbf06480ab0b167bde0a3860b","modified":1470842157231},{"_id":"source/images/frame-zhifubao-016.png","hash":"927892af29e9e878e498110561a64875f48de215","modified":1470842157259},{"_id":"source/images/java-monitor.png","hash":"4915f75253878f92fd57b0c9dbe8f542951a9570","modified":1457755756057},{"_id":"source/images/jenkins-002.png","hash":"3da279a40ea23dd0c279491671f8e4af20c832ce","modified":1464620054532},{"_id":"source/images/project-001.jpg","hash":"b132cddf404d1ae32a8490f3e3200778c7675647","modified":1467508829537},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"60766ca0cf5ba834d445c3304695d1a7ce0e1a36","modified":1455940924953},{"_id":"themes/next/layout/_macro/post.swig","hash":"affea948ef5ad04dd089350340af722bcb2e7892","modified":1455940924957},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1455940924967},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"c0f68851e8835b41fb60e7a78f096235067f7754","modified":1455940924961},{"_id":"themes/next/layout/_partials/footer.swig","hash":"779fc2ec44464d66cadcc85913c49b2d8aad3d22","modified":1455940924970},{"_id":"themes/next/layout/_partials/comments.swig","hash":"93055fc8e034037321280c182997a2a726e10c41","modified":1455940924965},{"_id":"themes/next/layout/_partials/header.swig","hash":"8c8ae71c41722815540950ccefac47d6876d0413","modified":1455940924979},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1455940924985},{"_id":"themes/next/layout/_partials/search.swig","hash":"1b86eb85017599392071d1230171e900045f8e69","modified":1455940924988},{"_id":"themes/next/layout/_partials/head.swig","hash":"471e197800829e9704ba9bb8f2d8f342c3e65c44","modified":1455940924976},{"_id":"themes/next/layout/_partials/old-browsers.swig","hash":"3c4d930d34c234725065173780a23673e1c574f5","modified":1455940924982},{"_id":"themes/next/layout/_scripts/analytics.swig","hash":"5e1b2b547a8f07ea0e3ab2a97dac9cc7d1e13c9a","modified":1455940925008},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","hash":"0aad8d447567b683108b274c841c536b2daa176d","modified":1455940925031},{"_id":"themes/next/layout/_scripts/helpers.swig","hash":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1455940925050},{"_id":"themes/next/layout/_scripts/baidushare.swig","hash":"640d4dda003f54a0dffa4508fba4d91ac0dcfa6e","modified":1455940925028},{"_id":"themes/next/layout/_scripts/motion.swig","hash":"de1fc505acbe8dc84f7376fe6ae9871f22d5582e","modified":1455940925061},{"_id":"themes/next/scripts/filters/sticky.js","hash":"4e4c9a837e186f94f256bd6eabb89b138cfc0db6","modified":1455940925095},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1455940925114},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1455940925117},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1455940925122},{"_id":"themes/next/layout/_scripts/fancy-box.swig","hash":"701dfc53d750635de2f08f08d072d6ceb83b636c","modified":1455940925047},{"_id":"themes/next/layout/_scripts/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1455940925077},{"_id":"themes/next/source/css/main.styl","hash":"6bb842ad45a575774299bed3848d46475820fb9f","modified":1455940925286},{"_id":"themes/next/layout/_scripts/mathjax.swig","hash":"8eecd19c756df615afb3f5ec6a527cd7bd06d20c","modified":1455940925057},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1455940925290},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1455940925298},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1455940925294},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1455940925301},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1455940925304},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1455940925310},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1455940925310},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1455940925309},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1455940925311},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1455940925308},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1455940925312},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1455940925313},{"_id":"themes/next/source/js/bootstrap.js","hash":"5a963f40fb81d265a31679f8f543e50ffdcc7485","modified":1455940925313},{"_id":"themes/next/source/js/fancy-box.js","hash":"fbeabc936667a9e15556c8defb5fcd582add8067","modified":1455940925315},{"_id":"themes/next/source/js/hook-duoshuo.js","hash":"ccb32e0a1acf798337c9697e1aab5484b52f9df4","modified":1455940925317},{"_id":"themes/next/source/js/helpers.js","hash":"69d8ae9b686a82e3a4397b61a477eb8da68bd153","modified":1455940925316},{"_id":"source/images/frame-zhifubao-004.png","hash":"e7b7975e9c1fe61155885d6a6e448d0c5c62ee10","modified":1470842157223},{"_id":"source/images/frame-zhifubao-023.png","hash":"722bcba989c19b80254bbd33e49cb7bc02075214","modified":1470842157283},{"_id":"source/images/frame-zhifubao-026.png","hash":"57a94be3b1e300c5134ecb15ac59356fc1d5c820","modified":1470842157291},{"_id":"source/images/java+io.png","hash":"71047dc8f77224270787c3c74beeab77f99ae6f1","modified":1455941821110},{"_id":"source/images/jenkins-001.png","hash":"cd5717677538c32515d05c9edc19e849158122d7","modified":1464620012714},{"_id":"source/images/project-110.png","hash":"40f9b142781860af0154b25c8a0c7bd689a15144","modified":1468238937869},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","hash":"97640be11a524b203781c1a03f623ef0b9195a02","modified":1455940925314},{"_id":"themes/next/source/js/motion.js","hash":"a9327a3c0a5df289799c5ffe3e8bf7dd6e407797","modified":1455940925317},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925237},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925240},{"_id":"themes/next/source/css/_mixins/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925241},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925280},{"_id":"source/images/frame-zhifubao-005.png","hash":"28ecd95d1b212e356223af2875b06ad54e003fac","modified":1470842157227},{"_id":"source/images/frame-zhifubao-010.png","hash":"7276723a5aab070a73d0c9cde69a28a11bd1dcbb","modified":1470842157242},{"_id":"source/images/frame-zhifubao-011.png","hash":"32da9064cdd2a7e1344aa3332ed6d2765d22aab4","modified":1470842157245},{"_id":"source/images/frame-zhifubao-018.png","hash":"a628af82e067c27c7c5d0e11218392a3188a717d","modified":1470842157267},{"_id":"source/images/frame-zhifubao-029.png","hash":"23f9eb423894d253cdc6a5f97472ddaf482b80d4","modified":1470842157301},{"_id":"source/images/jenkins-003.png","hash":"70e0c22b81b099d4e5005f97fb2be4c3eeef0a0c","modified":1464620081934},{"_id":"source/images/project-003.png","hash":"f3b12d92757164334be71d0b071b4cc67740b5f5","modified":1467510991467},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1455940924997},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1455940925000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"73e8294939bbbb46755798215c605ebe5af5918f","modified":1455940924994},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1455940925005},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1455940925013},{"_id":"themes/next/layout/_scripts/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1455940925018},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1455940925036},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","hash":"b03b2f596b7b9795f63dc4174329bf14aee7a48c","modified":1455940925044},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1455940925236},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1455940925240},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1455940925023},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"ac600616e83e23ee446a646c57500706936bb45e","modified":1455940925071},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"932cb9c53d64b086638adca05dcf4e2df239a8f9","modified":1455940925273},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9bc1cad0c7a9f4fdfa665098fb5c542dc9e640db","modified":1455940925280},{"_id":"themes/next/source/js/ua-parser.min.js","hash":"fc57202d8d952fceb3f1ad5b6e7183f47a3f1a0e","modified":1455940925374},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1455940925380},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1455940925283},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1455940925377},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1455940925426},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1455940925418},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1455940925444},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1455940925417},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1455940925422},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1455940925448},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1455940925452},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1455940925449},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1455940925546},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1455940925550},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1455940925553},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1455940925556},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1455940925515},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1455940925566},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1455940925569},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1455940925562},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1455940925563},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1455940925606},{"_id":"source/images/frame-zhifubao-008.png","hash":"895ac38cbc05552cc395a833e8ad5220c59998cb","modified":1470842157235},{"_id":"source/images/frame-zhifubao-009.png","hash":"31ec39e073c508e4061f62de0c237343c05a2c6f","modified":1470842157239},{"_id":"source/images/frame-zhifubao-014.png","hash":"ce735cfefe399bfa33541a1d0433e6f924aca75b","modified":1470842157253},{"_id":"source/images/frame-zhifubao-015.png","hash":"4690b7633ddfea9ef7b50769d3f63cfb79c7d494","modified":1470842157256},{"_id":"source/images/frame-zhifubao-019.png","hash":"cd97690d87d261f63892fafcaa506667c16958fc","modified":1470842157270},{"_id":"source/images/frame-zhifubao-022.png","hash":"c1849018e73832aee84d868c48ed09bb3ddb87c6","modified":1470842157280},{"_id":"source/images/frame-zhifubao-028.png","hash":"bd1a3a020fc30c59560c60a1848d1ff7adaea331","modified":1470842157298},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1455940925441},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1455940925599},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1455940925613},{"_id":"themes/next/source/css/_common/_page/home.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925205},{"_id":"source/images/frame-zhifubao-017.png","hash":"1bd0feecb884cb60a1f2874f66377d744b5ee305","modified":1470842157263},{"_id":"source/images/frame-zhifubao-020.png","hash":"f026ab6e8ca1e19eeeec02dec20328b0ed434bda","modified":1470842157274},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","hash":"dac21141c7893ab9de697a8183d3b3f4eb7f0a5a","modified":1455940925126},{"_id":"themes/next/source/css/_common/_component/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1455940925129},{"_id":"themes/next/source/css/_common/_component/buttons.styl","hash":"0a1730773478d843e123404ab4dae24d7cb0f2b7","modified":1455940925132},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","hash":"cd2ec04433d6c98a0994945475fb47155d1015c0","modified":1455940925139},{"_id":"themes/next/source/css/_common/_component/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1455940925135},{"_id":"themes/next/source/css/_common/_component/group-pictures.styl","hash":"70d7c3b5f8f2485dcce1a27e2c9b43df988fbc6f","modified":1455940925145},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1455940925148},{"_id":"themes/next/source/css/_common/_component/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1455940925151},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","hash":"8909298333c6dfc6e3686d85e4d98c76dfcf75c9","modified":1455940925154},{"_id":"themes/next/source/css/_common/_component/gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1455940925143},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","hash":"008d5f951144c7fe5c7e66dac330d5fb715a0a83","modified":1455940925157},{"_id":"themes/next/source/css/_common/_component/posts.styl","hash":"52badf0e8a0a44bb67f16486ada44d945b1aba6b","modified":1455940925164},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","hash":"f28f00b2acb0df0343e77400bcc8246b40ac046c","modified":1455940925160},{"_id":"themes/next/source/css/_common/_core/helpers.styl","hash":"b8e1b52b7aaa94b7c52d1681225e80f1af1219fa","modified":1455940925173},{"_id":"themes/next/source/css/_common/_core/base.styl","hash":"90a36892f5f595dda58a86901782b1addbdb3b46","modified":1455940925169},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1455940925166},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","hash":"3702c4c350524622f7dd658b05449fc425a819ef","modified":1455940925180},{"_id":"themes/next/source/css/_common/_core/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1455940925176},{"_id":"themes/next/source/css/_common/_core/tables.styl","hash":"16a98866f5025c050c56e52312228355a16d00d9","modified":1455940925183},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","hash":"c46d16429b85570347373fd11db8c222f6ff914e","modified":1455940925186},{"_id":"themes/next/source/css/_common/_page/archive.styl","hash":"df9e5a418f6e54abe69c1ab84649be46fb0c51a6","modified":1455940925202},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","hash":"7bdc92a55f2eee20b6b546e93e4566696b459b9d","modified":1455940925189},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","hash":"dbb0843ea5aa7c2ac2755a2d1ce60fa662f1b939","modified":1455940925192},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","hash":"a9f5260198225801eb5c16345a69a7e3cab904fe","modified":1455940925199},{"_id":"themes/next/source/css/_common/_page/categories.styl","hash":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1455940925205},{"_id":"themes/next/source/css/_common/_section/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1455940925214},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1455940925208},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","hash":"692c01dcdc612c3e1e245cf93d0ace0a4e2aaf3f","modified":1455940925195},{"_id":"themes/next/source/css/_common/_section/layout.styl","hash":"9a9630b7aae08b5008f3a0ff1152bdca427ff644","modified":1455940925220},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","hash":"406b78061c45bda0376ce2360ff2932262f5f2f0","modified":1455940925227},{"_id":"themes/next/source/css/_common/_section/media.styl","hash":"482784c04c0cd15a3f0d86444966fe306af7d13a","modified":1455940925223},{"_id":"themes/next/source/css/_common/_section/body.styl","hash":"6eaa5d9cb08ecfb2d377a475e541e41fbfe4c1b6","modified":1455940925211},{"_id":"themes/next/source/css/_common/_section/header.styl","hash":"cd6527e4877f62f08e8668b020ec9f9e53f625a9","modified":1455940925217},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"452e71caf2c37fa5a06f8d9ada81337a57485885","modified":1455940925247},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"3b0a186e8d9d5cfe30dd611456b61053ea535d7b","modified":1455940925253},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"e4b5b56e1a035c99ebd50d00e93d89e2e8d0b735","modified":1455940925244},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1455940925256},{"_id":"themes/next/source/css/_schemes/default/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1455940925262},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"f10be4b0c642104a6f533b94ac09e22019aa640e","modified":1455940925259},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","hash":"dd667be3f5f24cebdc15d0262c7d397f23d751c5","modified":1455940925265},{"_id":"themes/next/source/css/_schemes/default/_search.styl","hash":"e315ee6f604c2bcc44a5ef9078f5ce420c153a4b","modified":1455940925268},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1455940925381},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1455940925250},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455940925382},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1455940925384},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455940925383},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1455940925385},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1455940925386},{"_id":"themes/next/source/css/_schemes/default/index.styl","hash":"ecd76494cea5fbf592cc13ba1e4ccdfedbc5bf1b","modified":1455940925271},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1455940925394},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1455940925432},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1455940925404},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1455940925456},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1455940925413},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1455940925459},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1455940925463},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1455940925512},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1455940925542},{"_id":"source/images/frame-zhifubao-027.png","hash":"a18b0f2f3943d81b3a09d5f9dc3a943fa36f7c60","modified":1470842157295},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1455940925438},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1455940925470},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1455940925486},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1455940925586},{"_id":"source/images/frame-zhifubao-001.png","hash":"476af3a6e32b0079ebd3e55df7fadad4a939de4e","modified":1470842157216},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1455940925508},{"_id":"source/images/frame-zhifubao-024.png","hash":"50fcb2ab435443a5caf11ab491b4cd781310ab72","modified":1470842157287},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1455940925387},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1455940925390},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","hash":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1455940925234},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","hash":"627cdd38b34b15c9fc17f4dc332b1be928f8ed0d","modified":1455940925231},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1455940925393},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1455940925504},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1455940925392},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1455940925391},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1455940925393},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1455940925499},{"_id":"public/atom.xml","hash":"8b50914d62c66e3e59d4b773e1bc90c7eef93cef","modified":1470842510955},{"_id":"public/sitemap.xml","hash":"4f1ccb1b0382061b2959a4611aa21094c88def82","modified":1470842511183},{"_id":"public/tags/index.html","hash":"532af1f7e77a0b7168f70e28bc610b0800e2938d","modified":1470842511277},{"_id":"public/archives/index.html","hash":"5c5913722f82964ca0ef28683d97294da33c6d64","modified":1470842511277},{"_id":"public/archives/page/2/index.html","hash":"a7fb054e4e20a1952dae91ef7dbe53a81b975c2b","modified":1470842511278},{"_id":"public/archives/page/3/index.html","hash":"2283bfd591d4fb422c1568bb48da466c1fc17126","modified":1470842511278},{"_id":"public/archives/page/4/index.html","hash":"cad460eca5d1a81dd120177b2f5a271a43ab568a","modified":1470842511278},{"_id":"public/archives/page/5/index.html","hash":"c3bfb9dfb72a083449afa0d07611ecb1b985e698","modified":1470842511279},{"_id":"public/archives/2015/index.html","hash":"f08916eb4a9801a74dc00dc2b5913b1bb4042523","modified":1470842511279},{"_id":"public/archives/2015/12/index.html","hash":"a7df459384eda16145f91e7f8d99fe49a764a710","modified":1470842511280},{"_id":"public/archives/2016/index.html","hash":"41ac858ee0d0c28396f68326bd343c4a301f7b48","modified":1470842511280},{"_id":"public/archives/2016/page/2/index.html","hash":"28d6d3345d1e3cdbd2fbe26e38c0cf671e047c46","modified":1470842511281},{"_id":"public/archives/2016/page/3/index.html","hash":"51ff60c6ac2095269f7c83a2841207cbe29ab185","modified":1470842511281},{"_id":"public/archives/2016/page/4/index.html","hash":"ec18bd675389ba3ac6b5b7c784dfa8f681bb64f9","modified":1470842511281},{"_id":"public/archives/2016/page/5/index.html","hash":"206a73b1e39970b39ded05a2bfdc0b4479b84e20","modified":1470842511282},{"_id":"public/archives/2016/01/index.html","hash":"753b99274bbf6be3613147a77b29009d286eea06","modified":1470842511282},{"_id":"public/archives/2016/02/index.html","hash":"90eee3815bd1d0882e559e5a37cc5736d944fbbc","modified":1470842511283},{"_id":"public/archives/2016/03/index.html","hash":"240f9c9b718d2d4b380023e432a9fe6261e1ce2b","modified":1470842511283},{"_id":"public/archives/2016/04/index.html","hash":"1bd9d8d4ce631e78ae8b043c85723c6e34b1f7e9","modified":1470842511283},{"_id":"public/archives/2016/05/index.html","hash":"c746ee5ee27bdb62e8ac7424eef1d1374993ae96","modified":1470842511284},{"_id":"public/archives/2016/06/index.html","hash":"0f001562bf71eb85f0df1d2b731a44b6680108a3","modified":1470842511284},{"_id":"public/archives/2016/07/index.html","hash":"42421f0928acbdfe57a97d282bd2d8e867e76f2b","modified":1470842511284},{"_id":"public/archives/2016/08/index.html","hash":"6ff3b7a80127db0d1874b92df83edc54e7798136","modified":1470842511285},{"_id":"public/tags/java/index.html","hash":"1aeddbdc75bd13226c63bfd064877908639ec8f9","modified":1470842511285},{"_id":"public/tags/java/page/2/index.html","hash":"b9297035c510803df30b78c1bf98faadf50d3033","modified":1470842511286},{"_id":"public/tags/java/page/3/index.html","hash":"6baaa830c24e8fc0c47e6041402b02fbd56f9083","modified":1470842511286},{"_id":"public/tags/int/index.html","hash":"a5a6661c84baef733a4c94c07417c74edac0b86c","modified":1470842511286},{"_id":"public/tags/Integer/index.html","hash":"c9d318c8d8b54fd3c9c27c08d486144c06461dde","modified":1470842511287},{"_id":"public/tags/j2se/index.html","hash":"076997bf30506d10a5214c39e394a0d56da3c52c","modified":1470842511287},{"_id":"public/tags/SOA/index.html","hash":"55d4881b9bc13b76d7e8745ff68a68a836a63fb4","modified":1470842511288},{"_id":"public/tags/分布式事务/index.html","hash":"bbf3aa1af5aa7423eac36c7074d6bfb9da021f05","modified":1470842511288},{"_id":"public/tags/柔性事务/index.html","hash":"4417b1aac691b41198379457373b223576855075","modified":1470842511288},{"_id":"public/tags/消息事务/index.html","hash":"d024c00f52a77738a0d39c38cb4571bf307c7999","modified":1470842511289},{"_id":"public/tags/array/index.html","hash":"b10576b4ef1d83835cd7323bfc93848a1e2d2ee8","modified":1470842511289},{"_id":"public/tags/print/index.html","hash":"3d7fc10d231fb3a8dfd5e36dcb5053e819c2c589","modified":1470842511290},{"_id":"public/tags/synchronize/index.html","hash":"ef5eee074310052a212a9833d85b46b7c393b28c","modified":1470842511290},{"_id":"public/tags/ArrayList/index.html","hash":"5117665b485f3190e6a8da95d4499402edc52466","modified":1470842511290},{"_id":"public/tags/spring-boot/index.html","hash":"6eaf3f08378cb2bcf8d34984f02897683cfca855","modified":1470842511291},{"_id":"public/tags/junit/index.html","hash":"97bec73fef6b7e3f7c77df35792ecb59f9470713","modified":1470842511291},{"_id":"public/tags/测试，-spring-mvc/index.html","hash":"1c9989382bef807b923b001909786b011d13c2f3","modified":1470842511291},{"_id":"public/tags/Springboot应用中如何针对springmvc的controller写单元测试/index.html","hash":"f833a9d8da4fcd98c104eb1b5d5eaaf37ec3ffa1","modified":1470842511292},{"_id":"public/tags/api-verion/index.html","hash":"c27a835c7a13ecb593ed55277dc167bb120c94bb","modified":1470842511292},{"_id":"public/tags/spring-mvc/index.html","hash":"f592eba80080abf2098be4e08effb2b62d96c636","modified":1470842511293},{"_id":"public/tags/mysql/index.html","hash":"dacf4c75224197c87cc705f7f196cf9b70472929","modified":1470842511293},{"_id":"public/tags/install/index.html","hash":"853e946a8ef004f75e808e20c5d798484f06739e","modified":1470842511293},{"_id":"public/tags/database/index.html","hash":"bef5f7623f3cbaf0104a8346f21b6b6b7c10c57b","modified":1470842511294},{"_id":"public/tags/数据库/index.html","hash":"6f041eead53dc65c6a788bbd6ac5d9ebf34c182a","modified":1470842511294},{"_id":"public/tags/主从同步/index.html","hash":"6ea193ff378b88c007e0cbe932996d2d884021f3","modified":1470842511294},{"_id":"public/tags/master-slave/index.html","hash":"95cf924ba8dbd1d6da1075d88213bcaf37e76ef8","modified":1470842511295},{"_id":"public/tags/react/index.html","hash":"ddbcfce13c1678a29cd391899c88840032f7b6e9","modified":1470842511295},{"_id":"public/tags/react-native/index.html","hash":"f9ece50bcb6caa83d43d6a7ecf52abf9e48b5742","modified":1470842511296},{"_id":"public/tags/nodejs/index.html","hash":"0dd82e01117bc939bf9ff9dd1d20afbff03bb3ac","modified":1470842511296},{"_id":"public/tags/android/index.html","hash":"770a5da16e98ce80f375fa90aad37bd2e5a5a470","modified":1470842511297},{"_id":"public/tags/windows/index.html","hash":"2ab05dbd78f4ef7687c99bfd874ac61ad27831a8","modified":1470842511297},{"_id":"public/tags/guava/index.html","hash":"d008ca1bbe665dbefb233cf256dbd74586f662c2","modified":1470842511297},{"_id":"public/tags/transform-objects/index.html","hash":"27dc82d42adc8b3d4f3dfa7d36b685bafc13d9d0","modified":1470842511298},{"_id":"public/tags/convert/index.html","hash":"a4c4a934690d401c09afe1ca74e7e5d173400b12","modified":1470842511298},{"_id":"public/tags/对象转换/index.html","hash":"c819ff1c0674d5c848962309bf8e6b94b4c1d230","modified":1470842511299},{"_id":"public/tags/git/index.html","hash":"eaa2eac431790541526f7a20ac9437c5d2d58791","modified":1470842511299},{"_id":"public/tags/collect/index.html","hash":"8b5f3fa4f30fe93164e1321cf7753e7f6dc078d6","modified":1470842511300},{"_id":"public/tags/dev/index.html","hash":"f2a8797f802c245a2fa288f64d7879bde32e0ba3","modified":1470842511300},{"_id":"public/tags/branch/index.html","hash":"8d0c2aca433496f61601a35e0892307f6c9f9776","modified":1470842511300},{"_id":"public/tags/collect-of-dev/index.html","hash":"f764f00d05ddcbbfbf91cd18fb3a858683133657","modified":1470842511301},{"_id":"public/tags/版本控制/index.html","hash":"c6fb0dc1e85b036340ae6f5a026705848a97a781","modified":1470842511301},{"_id":"public/tags/分支管理/index.html","hash":"811aaa8657214181e21bf91d739d310fddbff24e","modified":1470842511302},{"_id":"public/tags/post/index.html","hash":"0621c414752fe958173127d511b32ccc51062e8c","modified":1470842511302},{"_id":"public/tags/resouce/index.html","hash":"24d7f19104499e9ad7ee1c73c07e01d6ee9c41a2","modified":1470842511302},{"_id":"public/tags/设计模式/index.html","hash":"57802bd81a7eb0ee3922e2f203192ca67c5692c1","modified":1470842511303},{"_id":"public/tags/Builder/index.html","hash":"fd093f82bc643380d59b1839e21d7f817053c8a1","modified":1470842511303},{"_id":"public/tags/design-pattern/index.html","hash":"0c0fab7ed787ca742448217f4baa742ee87709ab","modified":1470842511304},{"_id":"public/tags/io/index.html","hash":"c3768c5a92b7f4a527ef9f3f3689f60792fbd121","modified":1470842511304},{"_id":"public/tags/整理/index.html","hash":"e527219c9b43cfc8c5de583d94c23ecea3a9a687","modified":1470842511305},{"_id":"public/tags/思维导图/index.html","hash":"7871a6aa66b08186bc1af2b74b369be2e7e816c7","modified":1470842511305},{"_id":"public/tags/static关键字/index.html","hash":"7fd7a08be5ae1d09230a8a25a94e4d5b9046d62c","modified":1470842511305},{"_id":"public/tags/patten/index.html","hash":"beebc35cabd42ae2be55d371ac5780fd323c9a2b","modified":1470842511306},{"_id":"public/tags/coding/index.html","hash":"6687cbcd6f36494de75f4e9e838a550cade5a00c","modified":1470842511307},{"_id":"public/tags/spring/index.html","hash":"19ac4c4849ca703f482d6ee23e21064a7dad9b69","modified":1470842511307},{"_id":"public/tags/aop/index.html","hash":"c54a337a676083d6367e3df9a4a4c3bee9bd3419","modified":1470842511307},{"_id":"public/tags/enum/index.html","hash":"aa3f3ae9a13921b0c66125198ffa793a413a8db8","modified":1470842511308},{"_id":"public/tags/web/index.html","hash":"7be87670dad8c0554c445ffd3d38cac68bf72ee7","modified":1470842511308},{"_id":"public/tags/java-web/index.html","hash":"e48c76e329624ddd4978ee89fc176d6417c16a70","modified":1470842511309},{"_id":"public/tags/jquery/index.html","hash":"f5ec77be29332cd82eae0dc879adee113b210cc3","modified":1470842511309},{"_id":"public/tags/validate/index.html","hash":"77f6aaae322d6f68984f44d708ee20afe62e8b9c","modified":1470842511310},{"_id":"public/tags/springboot/index.html","hash":"f5a2031620d8c5366fd6d358b653f97606ee8269","modified":1470842511310},{"_id":"public/tags/itime/index.html","hash":"c93d3a8cf8a17f6d6964d4c8334902e984b898eb","modified":1470842511310},{"_id":"public/tags/支付宝/index.html","hash":"c666341fb8b4ef66c5beb524cbc63bb358ab8d30","modified":1470842511311},{"_id":"public/tags/架构/index.html","hash":"c9ad0218bf4f82e385dfc35a059c4fa503b4923e","modified":1470842511311},{"_id":"public/tags/shiro/index.html","hash":"71b1172015dbe17675aa66fc959db07dd9a7d780","modified":1470842511312},{"_id":"public/tags/rest/index.html","hash":"b533374c067392178d3d1c1b6f269d49311ba67b","modified":1470842511312},{"_id":"public/tags/api/index.html","hash":"8c5302e2ffc1fc0ad28421b01443abd6885ad8a4","modified":1470842511312},{"_id":"public/tags/versioning/index.html","hash":"66e93fb83bc67373ddd436109bc8d8278c573044","modified":1470842511313},{"_id":"public/tags/springmvc/index.html","hash":"5d6bb31e740de9b052b8d855cdc724a4abe8d258","modified":1470842511313},{"_id":"public/tags/svn/index.html","hash":"763700df2cf0cb843cc1ae4b246e3899167c65a3","modified":1470842511314},{"_id":"public/tags/spring-cache/index.html","hash":"4751f9aa34db970565b2ccc3d4b9d5b64413c93c","modified":1470842511314},{"_id":"public/tags/redis/index.html","hash":"447a1a378381beda42817d379a235d29ac514a52","modified":1470842511314},{"_id":"public/tags/注解/index.html","hash":"e1de54dbc4115f1f10d34115391e12889c1a7cf6","modified":1470842511315},{"_id":"public/tags/spring-data-jpa/index.html","hash":"0e0b97d940ed4d85425398bbfeb6606152685dfd","modified":1470842511315},{"_id":"public/tags/mybatis/index.html","hash":"33f932865eb88d73277e77f6c2c4dda3cffb419f","modified":1470842511316},{"_id":"public/tags/接口文档/index.html","hash":"fbbeec89c55aba5ca063f3e941e8667796f8f829","modified":1470842511316},{"_id":"public/tags/RAP/index.html","hash":"bb02e70c2881daa762a5a6485051adc7b313deb6","modified":1470842511316},{"_id":"public/tags/mock/index.html","hash":"0a96f5f91ff1333a6813823d84872374f55ffcd6","modified":1470842511317},{"_id":"public/tags/hexo/index.html","hash":"d3d9fe7d196c314786f278546af1afa59aa65473","modified":1470842511317},{"_id":"public/tags/deploy/index.html","hash":"5f1b60f3f5f783f3b5cde82d17dd1baece713003","modified":1470842511318},{"_id":"public/tags/spring-cloud/index.html","hash":"029bc549fe928a5ae1797c1a260b991a20f4be5f","modified":1470842511318},{"_id":"public/tags/微服务/index.html","hash":"22a1aad04e7cac2d494c02d76dd4918ef9846697","modified":1470842511319},{"_id":"public/tags/使用spring-boot-spring-cloud一步步搭建微服务架构/index.html","hash":"12b056115d232f6bd1571dba708d075a8e575f08","modified":1470842511320},{"_id":"public/tags/读取配置文件/index.html","hash":"617dd798a37b54f2fbfe4bada03fe32236f264b5","modified":1470842511320},{"_id":"public/tags/property-file/index.html","hash":"72295943188b607821341ff0501a5a7e2b349b79","modified":1470842511321},{"_id":"public/tags/linux/index.html","hash":"163996c3aee223316c765ecf8cc4f5fda88ab6b6","modified":1470842511321},{"_id":"public/tags/centos/index.html","hash":"75028cc4fb542ee4574e792443075ae5f5d54f49","modified":1470842511321},{"_id":"public/tags/部署/index.html","hash":"4f4bc31b4c6bd9a3c1b4fbe381ffb65acf5f8a0d","modified":1470842511322},{"_id":"public/tags/冗余部署/index.html","hash":"1041e48a425d055a2aa7c9d9b2d4b24b6684abe5","modified":1470842511322},{"_id":"public/tags/nginx/index.html","hash":"6a5f630eab26930171adfc6af213c139f44f8ffc","modified":1470842511323},{"_id":"public/tags/api-version/index.html","hash":"1a2cff48b9deb28438dc1f5947476a4da4776885","modified":1470842511323},{"_id":"public/tags/路由/index.html","hash":"0f01e87ae0f37a83e5ccb788ac91e4193dd1a0d0","modified":1470842511323},{"_id":"public/tags/jenkins/index.html","hash":"afd5ee4c77e32a1fbf49cc9c34f058e76dff47da","modified":1470842511324},{"_id":"public/tags/持续集成/index.html","hash":"7a3920e0c4d00bce9bbef5bcd3b22e50f5bceb54","modified":1470842511324},{"_id":"public/tags/自动化构建/index.html","hash":"244d0d4d590d5eff276ab376acf7fc633dc6bc16","modified":1470842511325},{"_id":"public/tags/监控/index.html","hash":"378dc2e12c0ce7618dd7f55e6e068777cbe230a0","modified":1470842511325},{"_id":"public/tags/集群/index.html","hash":"ffbe61b7a2cea4a51f44b25306536614230954b0","modified":1470842511325},{"_id":"public/tags/monitor/index.html","hash":"fa415f5d4fa1cd46f1bc2eab3fca5b31caf9030d","modified":1470842511326},{"_id":"public/tags/FastDFS/index.html","hash":"eb38e82d27821f5002dde600f6eb218fa6f1c47a","modified":1470842511326},{"_id":"public/tags/Nginx/index.html","hash":"b0a396b125160c8a8f8e00cc72cf81dcbddb4e82","modified":1470842511327},{"_id":"public/tags/图片服务器/index.html","hash":"5fb17206389606fd1e28c0ad6ea7846f83837915","modified":1470842511327},{"_id":"public/tags/github-pages/index.html","hash":"18b9f6cb274f43a491f2c5ec36b167533c23388b","modified":1470842511327},{"_id":"public/tags/blog/index.html","hash":"c00f1252d120c79d60211f68fb255b35beed23c6","modified":1470842511328},{"_id":"public/tags/manager/index.html","hash":"1a8f441942d0a03bb6c02f7bfa53f037a2bcd84a","modified":1470842511328},{"_id":"public/tags/项目管理/index.html","hash":"4010d7ad47db4576f058c1428a0297bf76be076c","modified":1470842511328},{"_id":"public/tags/Worktile/index.html","hash":"3e7b0111504ff159958139754d24d3504043e27d","modified":1470842511329},{"_id":"public/2016/08/10/【转】-支付宝架构与技术/index.html","hash":"cc4d039c489979e1eff543b921b8dafb804b0a47","modified":1470842511330},{"_id":"public/2016/08/10/系统分布式情况下最终一致性方案梳理/index.html","hash":"b83b2c4acec449db89e215d5d158330b1f4d3739","modified":1470842511330},{"_id":"public/2016/08/10/SOA分布式事务解决方案/index.html","hash":"d903ffe80b9112c23d60c024b681a8292cd39a20","modified":1470842511332},{"_id":"public/2016/08/08/What-s-the-simplest-way-to-print-a-Java-array/index.html","hash":"f644a0aa89a01f45dfb728a1da2741e26455fd03","modified":1470842511332},{"_id":"public/2016/08/04/Java-中int和Integer的区别/index.html","hash":"60d4ad37b6b9a883c734c86b268aaacea29800d1","modified":1470842511342},{"_id":"public/2016/07/28/How-to-synchronize-ArrayList-in-java-with-example/index.html","hash":"11378054c293860dcbebac1e303698d8c3a72503","modified":1470842511342},{"_id":"public/2016/08/03/dev-collect-2016-07-collect-of-dev/index.html","hash":"5430fc8fcc5862d93aedaf6b61af8a9283a5de63","modified":1470842511343},{"_id":"public/2016/07/26/多版本部署如何使用nginx根据url参数api-version值进行路由/index.html","hash":"b36744f92559c58623c2ed13ef0ad396cf6f8bce","modified":1470842511343},{"_id":"public/2016/07/23/Transform-objects-with-guava-使用Guava库转换对象/index.html","hash":"029d063e77cdecfbc885d8be2f3d91704b64367a","modified":1470842511344},{"_id":"public/2016/07/23/Springboot应用中如何针对springmvc的controller写单元测试/index.html","hash":"a0871cb34e6a25a5ec86d5c23494f3264df315a4","modified":1470842511346},{"_id":"public/2016/07/22/关于java项目中如何读取配置文件/index.html","hash":"9cb8bb83510b08813da32fcc86bf9dc08852c690","modified":1470842511346},{"_id":"public/2016/07/11/使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用/index.html","hash":"6110277e5b21a55dd968b4c0e9a9dd13a6bd1644","modified":1470842511347},{"_id":"public/2016/07/08/使用RAP作为接口管理和调试的工具/index.html","hash":"7ed0e2e037b97b74f65514e3695ce729b71be399","modified":1470842511347},{"_id":"public/2016/07/07/dev-collect-2016-06-collect-of-dev/index.html","hash":"df592bc89f9114ae6c7593d81b4a5fa41dd53b8c","modified":1470842511348},{"_id":"public/2016/07/07/在单服务器上安装部署FastDFS-Nginx/index.html","hash":"bad01da296af7b541c1e32e639f2fd5551025868","modified":1470842511348},{"_id":"public/2016/07/01/项目管理建议/index.html","hash":"96ee840f3dd559cd0530ce8abd56fcb04f483e9b","modified":1470842511348},{"_id":"public/2016/06/28/api-version-4种在springmvc中进行api版本控制的处理方法/index.html","hash":"1e2b8869fc4e2beb8e2522c22281bd4ec725af5d","modified":1470842511349},{"_id":"public/2016/06/06/dev-collect-2016-06-06-collect-of-im-netty-android-etc/index.html","hash":"8a4d6fdde541b6fe2f589c2ccdb7212c9c55ac53","modified":1470842511349},{"_id":"public/2016/06/06/git-git分支使用和管理/index.html","hash":"6fc5ba7e1dba7298e51c85d256960fd6a49c7f27","modified":1470842511350},{"_id":"public/2016/06/04/Windows下开启React-Native征途/index.html","hash":"9151afd61e47bf59b6b4ae847324bfc6f20a232c","modified":1470842511350},{"_id":"public/2016/06/01/Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目/index.html","hash":"da9a2360e8aa4b7568721ef036c1da48fe661982","modified":1470842511351},{"_id":"public/2016/05/30/使用Jenkins配置Git和Maven的自动化构建Tomcat项目/index.html","hash":"26daa1d25f2a82189c77e8a04d255c638e1ee1f6","modified":1470842511351},{"_id":"public/2016/05/09/java-static-关键字总结/index.html","hash":"36d62c1ae053d1b559458969b044a0e048f22972","modified":1470842511351},{"_id":"public/2016/05/08/java-enum-典型用法/index.html","hash":"467caa6e12dfec31d2a5b6cae9f30bdaf6281172","modified":1470842511352},{"_id":"public/2016/05/08/java-design-pattern-java设计模式之Builder模式/index.html","hash":"00e9147daec2648afcf85204bfedb31f08cdccc1","modified":1470842511352},{"_id":"public/2016/05/04/java-web知识体系/index.html","hash":"1749fa36dc827b45079eb6b6f90e7c043bb54a62","modified":1470842511353},{"_id":"public/2016/05/03/springmvc-rest-api-versioning/index.html","hash":"e21258204fae5655a952d6f8bdac1bc0d303e847","modified":1470842511353},{"_id":"public/2016/04/25/centos6环境下配置mysql主从同步/index.html","hash":"3f5933374d6ddb067ff0142fb3067572a196537d","modified":1470842511353},{"_id":"public/2016/04/25/centos6下安装配置mysql，并开启mysql的远程登录/index.html","hash":"bdd629526142a5e4f04e9ef472f23a064982676b","modified":1470842511354},{"_id":"public/2016/04/09/springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro/index.html","hash":"9a3089bb22f9ec57e02ce75924dc7d58812b7416","modified":1470842511354},{"_id":"public/2016/04/09/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用/index.html","hash":"afc2c6bf314d743c706ef5a5a223ef6a60ec7e51","modified":1470842511355},{"_id":"public/2016/04/09/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存/index.html","hash":"4ac9f9872d8051cce936d1775822e2af298f7eda","modified":1470842511355},{"_id":"public/2016/04/07/为你的项目做合理的版本控制管理/index.html","hash":"3ff9d7c9f1e6e9a4954d3d41e0afb89516f6094a","modified":1470842511356},{"_id":"public/2016/03/21/在linux下部署spring-boot项目过程记录/index.html","hash":"e8e71d641c74d1db9bcc341c029886233628279c","modified":1470842511356},{"_id":"public/2016/03/11/集群监控初步整理/index.html","hash":"bb2c77087ade338c3fd6c1806efc3ad0f9ba2855","modified":1470842511357},{"_id":"public/2016/02/20/spring-aop-知识体系整理/index.html","hash":"c474e1f89a8bfadb282de2e7d1aa84ffc832426e","modified":1470842511358},{"_id":"public/2016/02/20/java-io体系整理/index.html","hash":"f879726c622c54954322262c17c7d34094b1f3b2","modified":1470842511358},{"_id":"public/2016/02/20/hello-world/index.html","hash":"3c43ff00f8c6e21da990ee0cd61d7c38c8161736","modified":1470842511358},{"_id":"public/2016/02/02/java-从代码中去除if-else/index.html","hash":"f6524ec67b9ef7beac9c79dc0cda63a4086be7fd","modified":1470842511359},{"_id":"public/2016/02/01/springboot-items-项目使用实践-springboot-get-started/index.html","hash":"85e07ebd730c65c4b0e5273432dcb52c3e39baa1","modified":1470842511359},{"_id":"public/2016/01/04/jquery-validate常用用法总结/index.html","hash":"eedbbb0a709298487f3da23fc81523e519e70268","modified":1470842511360},{"_id":"public/2015/12/31/git-git常用-把本地项目提交到github/index.html","hash":"295d703addeeeedeab6e654806b0773a70965594","modified":1470842511360},{"_id":"public/2015/12/31/使用hexo-deploy直接发布到github/index.html","hash":"49672fab7c00cf6bc8240bce5c01488dedef0b0d","modified":1470842511361},{"_id":"public/2015/12/31/如何使用github-pages和hexo搭建简单blog/index.html","hash":"80d6621c58be580841191fcf96921d136ec13e0e","modified":1470842511361},{"_id":"public/index.html","hash":"2f2ca87f090e15f5bbc7007dfe0cb9f57165fa69","modified":1470842511362},{"_id":"public/page/2/index.html","hash":"7994bf3642187abc1c60c2d4ef6bf9baaaf68ca9","modified":1470842511362},{"_id":"public/page/3/index.html","hash":"94fd5097a898925e0a06388a1e8f9771442f2181","modified":1470842511363},{"_id":"public/page/4/index.html","hash":"b34b1441373afdd8849a190e2f6e47706f15b048","modified":1470842511363},{"_id":"public/page/5/index.html","hash":"6322095db45be99479c24cf67edcf43a2c22023c","modified":1470842511364},{"_id":"public/images/frame-zhifubao-002.png","hash":"a512d6e799ad379dfc35369367d074437257d2e8","modified":1470842511659},{"_id":"public/images/frame-zhifubao-025.png","hash":"7c693a9022ef18ea1df8addab9bf9bfd92f6a455","modified":1470842511659},{"_id":"public/images/frame-zhifubao-030.jpeg","hash":"c33706562b896515af1aab415ae2a9e72df83730","modified":1470842511660},{"_id":"public/images/frame-zhifubao-031.jpeg","hash":"6608d9c2bef7a78909bf499125d5f28a40050656","modified":1470842511660},{"_id":"public/images/frame-zhifubao-006.png","hash":"d6aa19f5f358267fac4e5bcbcaadc10fa0f905a9","modified":1470842511716},{"_id":"public/images/frame-zhifubao-012.png","hash":"5500683062269a4ec9183b519797dae30bc09fbb","modified":1470842511716},{"_id":"public/images/frame-zhifubao-013.png","hash":"b06c6ad5a9b025f0eea567d32e17bca3f71a602e","modified":1470842511724},{"_id":"public/images/frame-zhifubao-021.png","hash":"17d782adcac73bf0eef7813074fa1fefcedc09dc","modified":1470842511725},{"_id":"public/images/transaction-001.png","hash":"e22e36a5f86485f6a13c6e33ffc10e7718260be1","modified":1470842511726},{"_id":"public/images/frame-zhifubao-003.png","hash":"e21ace37d5305e9d27a8c007c340074db0535ca9","modified":1470842511768},{"_id":"public/images/frame-zhifubao-007.png","hash":"1110e6bdba9aaf6dbf06480ab0b167bde0a3860b","modified":1470842511768},{"_id":"public/images/frame-zhifubao-016.png","hash":"927892af29e9e878e498110561a64875f48de215","modified":1470842511769},{"_id":"public/images/frame-zhifubao-023.png","hash":"722bcba989c19b80254bbd33e49cb7bc02075214","modified":1470842514687},{"_id":"public/images/frame-zhifubao-026.png","hash":"57a94be3b1e300c5134ecb15ac59356fc1d5c820","modified":1470842514687},{"_id":"public/images/frame-zhifubao-004.png","hash":"e7b7975e9c1fe61155885d6a6e448d0c5c62ee10","modified":1470842514688},{"_id":"public/images/frame-zhifubao-010.png","hash":"7276723a5aab070a73d0c9cde69a28a11bd1dcbb","modified":1470842514691},{"_id":"public/images/frame-zhifubao-005.png","hash":"28ecd95d1b212e356223af2875b06ad54e003fac","modified":1470842514691},{"_id":"public/images/frame-zhifubao-011.png","hash":"32da9064cdd2a7e1344aa3332ed6d2765d22aab4","modified":1470842514692},{"_id":"public/images/frame-zhifubao-029.png","hash":"23f9eb423894d253cdc6a5f97472ddaf482b80d4","modified":1470842514692},{"_id":"public/images/frame-zhifubao-018.png","hash":"a628af82e067c27c7c5d0e11218392a3188a717d","modified":1470842514692},{"_id":"public/images/frame-zhifubao-008.png","hash":"895ac38cbc05552cc395a833e8ad5220c59998cb","modified":1470842514762},{"_id":"public/images/frame-zhifubao-009.png","hash":"31ec39e073c508e4061f62de0c237343c05a2c6f","modified":1470842514762},{"_id":"public/images/frame-zhifubao-014.png","hash":"ce735cfefe399bfa33541a1d0433e6f924aca75b","modified":1470842514763},{"_id":"public/images/frame-zhifubao-015.png","hash":"4690b7633ddfea9ef7b50769d3f63cfb79c7d494","modified":1470842514764},{"_id":"public/images/frame-zhifubao-019.png","hash":"cd97690d87d261f63892fafcaa506667c16958fc","modified":1470842514764},{"_id":"public/images/frame-zhifubao-028.png","hash":"bd1a3a020fc30c59560c60a1848d1ff7adaea331","modified":1470842514765},{"_id":"public/images/frame-zhifubao-022.png","hash":"c1849018e73832aee84d868c48ed09bb3ddb87c6","modified":1470842514765},{"_id":"public/images/frame-zhifubao-017.png","hash":"1bd0feecb884cb60a1f2874f66377d744b5ee305","modified":1470842514769},{"_id":"public/images/frame-zhifubao-020.png","hash":"f026ab6e8ca1e19eeeec02dec20328b0ed434bda","modified":1470842514769},{"_id":"public/images/frame-zhifubao-027.png","hash":"a18b0f2f3943d81b3a09d5f9dc3a943fa36f7c60","modified":1470842514771},{"_id":"public/images/frame-zhifubao-001.png","hash":"476af3a6e32b0079ebd3e55df7fadad4a939de4e","modified":1470842514776},{"_id":"public/images/frame-zhifubao-024.png","hash":"50fcb2ab435443a5caf11ab491b4cd781310ab72","modified":1470842514776}],"Category":[],"Data":[],"Page":[{"title":"All tags","date":"2016-01-04T07:25:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-01-04 15:25:00\ntype: \"tags\"\n---\n","updated":"2016-02-20T04:02:04.732Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cirp1ghgp000130ngcn0x7nwp","content":"","excerpt":"","more":""}],"Post":[{"title":"Java 中int和Integer的区别","date":"2016-08-04T03:41:57.000Z","_content":"\n# Java中int和Integer的区别\n\n## Java各种数据类型详细介绍及其区别\n\n- 基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。\n\nJava中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：\n\n实数：double、float\n\n整数：byte、short、int、long\n\n字符：char\n\n布尔值：boolean\n\n复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。\n\n- Java的简单数据讲解列表如下：\n\nint：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。\n\nshort：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。\n\nlong：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。\n\nbyte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。\n\nfloat：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。\n\ndouble：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。\n\nchar：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为'u0000'。\n\nboolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。\n\nInteger是int的封装类，里面有很多进行处理的静态方法\n\nInteger是对象而int不是，内存的分配位置也不一样\n\nInteger的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！\n\njdk1.5以后可以从int自动装箱Integer类。\n\nint是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。\n\nInteger是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。\n\njdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。\n\nint是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。\n\n实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；\n\n另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。\n\nint 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。\n\n- 原始类型 封装类\n\nboolean Boolean\n\nchar Character\n\nbyte Byte\n\nshort Short\n\nint Integer\n\nlong Long\n\nfloat Float\n\ndouble Double\n\n引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。\n\n## 1 、Boolean VS boolean\n\npublic final class Boolean extends Object  implementsSerializable,Comparable\n\nBoolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。\n\n## 2、 Byte VS byte\n\npublic final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。\n\n## 3、 Character VS char\n\npublic final class Character extends Object  implements Serializable, Comparable\n\nCharacter类在对象中包装一个基本类型char的值。\n\nCharacter类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。\n\n## 4 、Double VS double\n\npublic final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。\n\n## 5、 Float VS float\n\npublic final class Float extends Number implements Comparable\n\nFloat类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。\n\n## 6、 Integer VS int\n\npublic final class Integer extends Number implements Comparable\n\nInteger类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。\n\n此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。\n\n## 7 Long VS long\n\npublic final class Long extends Number implements Comparable\n\nLong类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。\n\n此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。\n\n## 8、 Short VS short\n\npublic final class Short extends Number implements Comparable\n\nShort类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。\n\n## 9、public final class Voidextends Object\n\nVoid 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。\n\n类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。\n\n","source":"_posts/Java-中int和Integer的区别.md","raw":"---\ntitle: Java 中int和Integer的区别\ndate: 2016-08-04 11:41:57\ntags: [java, int, Integer, j2se]\n---\n\n# Java中int和Integer的区别\n\n## Java各种数据类型详细介绍及其区别\n\n- 基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。\n\nJava中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：\n\n实数：double、float\n\n整数：byte、short、int、long\n\n字符：char\n\n布尔值：boolean\n\n复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。\n\n- Java的简单数据讲解列表如下：\n\nint：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。\n\nshort：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。\n\nlong：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。\n\nbyte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。\n\nfloat：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。\n\ndouble：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。\n\nchar：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为'u0000'。\n\nboolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。\n\nInteger是int的封装类，里面有很多进行处理的静态方法\n\nInteger是对象而int不是，内存的分配位置也不一样\n\nInteger的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！\n\njdk1.5以后可以从int自动装箱Integer类。\n\nint是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。\n\nInteger是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。\n\njdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。\n\nint是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。\n\n实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；\n\n另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。\n\nint 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。\n\n- 原始类型 封装类\n\nboolean Boolean\n\nchar Character\n\nbyte Byte\n\nshort Short\n\nint Integer\n\nlong Long\n\nfloat Float\n\ndouble Double\n\n引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。\n\n## 1 、Boolean VS boolean\n\npublic final class Boolean extends Object  implementsSerializable,Comparable\n\nBoolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。\n\n## 2、 Byte VS byte\n\npublic final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。\n\n## 3、 Character VS char\n\npublic final class Character extends Object  implements Serializable, Comparable\n\nCharacter类在对象中包装一个基本类型char的值。\n\nCharacter类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。\n\n## 4 、Double VS double\n\npublic final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。\n\n## 5、 Float VS float\n\npublic final class Float extends Number implements Comparable\n\nFloat类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。\n\n## 6、 Integer VS int\n\npublic final class Integer extends Number implements Comparable\n\nInteger类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。\n\n此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。\n\n## 7 Long VS long\n\npublic final class Long extends Number implements Comparable\n\nLong类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。\n\n此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。\n\n## 8、 Short VS short\n\npublic final class Short extends Number implements Comparable\n\nShort类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。\n\n## 9、public final class Voidextends Object\n\nVoid 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。\n\n类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。\n\n","slug":"Java-中int和Integer的区别","published":1,"updated":"2016-08-08T11:33:26.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghgf000030ngdh9y93xt","content":"<h1 id=\"Java中int和Integer的区别\"><a href=\"#Java中int和Integer的区别\" class=\"headerlink\" title=\"Java中int和Integer的区别\"></a>Java中int和Integer的区别</h1><h2 id=\"Java各种数据类型详细介绍及其区别\"><a href=\"#Java各种数据类型详细介绍及其区别\" class=\"headerlink\" title=\"Java各种数据类型详细介绍及其区别\"></a>Java各种数据类型详细介绍及其区别</h2><ul>\n<li>基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。</li>\n</ul>\n<p>Java中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：</p>\n<p>实数：double、float</p>\n<p>整数：byte、short、int、long</p>\n<p>字符：char</p>\n<p>布尔值：boolean</p>\n<p>复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。</p>\n<ul>\n<li>Java的简单数据讲解列表如下：</li>\n</ul>\n<p>int：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。</p>\n<p>short：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。</p>\n<p>long：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。</p>\n<p>byte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。</p>\n<p>float：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。</p>\n<p>double：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。</p>\n<p>char：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为’u0000’。</p>\n<p>boolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。</p>\n<p>Integer是int的封装类，里面有很多进行处理的静态方法</p>\n<p>Integer是对象而int不是，内存的分配位置也不一样</p>\n<p>Integer的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！</p>\n<p>jdk1.5以后可以从int自动装箱Integer类。</p>\n<p>int是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。</p>\n<p>Integer是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。</p>\n<p>jdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。</p>\n<p>int是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。</p>\n<p>实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；</p>\n<p>另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。</p>\n<p>int 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。</p>\n<ul>\n<li>原始类型 封装类</li>\n</ul>\n<p>boolean Boolean</p>\n<p>char Character</p>\n<p>byte Byte</p>\n<p>short Short</p>\n<p>int Integer</p>\n<p>long Long</p>\n<p>float Float</p>\n<p>double Double</p>\n<p>引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。</p>\n<h2 id=\"1-、Boolean-VS-boolean\"><a href=\"#1-、Boolean-VS-boolean\" class=\"headerlink\" title=\"1 、Boolean VS boolean\"></a>1 、Boolean VS boolean</h2><p>public final class Boolean extends Object  implementsSerializable,Comparable</p>\n<p>Boolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。</p>\n<h2 id=\"2、-Byte-VS-byte\"><a href=\"#2、-Byte-VS-byte\" class=\"headerlink\" title=\"2、 Byte VS byte\"></a>2、 Byte VS byte</h2><p>public final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。</p>\n<h2 id=\"3、-Character-VS-char\"><a href=\"#3、-Character-VS-char\" class=\"headerlink\" title=\"3、 Character VS char\"></a>3、 Character VS char</h2><p>public final class Character extends Object  implements Serializable, Comparable</p>\n<p>Character类在对象中包装一个基本类型char的值。</p>\n<p>Character类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。</p>\n<h2 id=\"4-、Double-VS-double\"><a href=\"#4-、Double-VS-double\" class=\"headerlink\" title=\"4 、Double VS double\"></a>4 、Double VS double</h2><p>public final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。</p>\n<h2 id=\"5、-Float-VS-float\"><a href=\"#5、-Float-VS-float\" class=\"headerlink\" title=\"5、 Float VS float\"></a>5、 Float VS float</h2><p>public final class Float extends Number implements Comparable</p>\n<p>Float类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"6、-Integer-VS-int\"><a href=\"#6、-Integer-VS-int\" class=\"headerlink\" title=\"6、 Integer VS int\"></a>6、 Integer VS int</h2><p>public final class Integer extends Number implements Comparable</p>\n<p>Integer类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。</p>\n<p>此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"7-Long-VS-long\"><a href=\"#7-Long-VS-long\" class=\"headerlink\" title=\"7 Long VS long\"></a>7 Long VS long</h2><p>public final class Long extends Number implements Comparable</p>\n<p>Long类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。</p>\n<p>此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。</p>\n<h2 id=\"8、-Short-VS-short\"><a href=\"#8、-Short-VS-short\" class=\"headerlink\" title=\"8、 Short VS short\"></a>8、 Short VS short</h2><p>public final class Short extends Number implements Comparable</p>\n<p>Short类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。</p>\n<h2 id=\"9、public-final-class-Voidextends-Object\"><a href=\"#9、public-final-class-Voidextends-Object\" class=\"headerlink\" title=\"9、public final class Voidextends Object\"></a>9、public final class Voidextends Object</h2><p>Void 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。</p>\n<p>类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。</p>\n","excerpt":"","more":"<h1 id=\"Java中int和Integer的区别\"><a href=\"#Java中int和Integer的区别\" class=\"headerlink\" title=\"Java中int和Integer的区别\"></a>Java中int和Integer的区别</h1><h2 id=\"Java各种数据类型详细介绍及其区别\"><a href=\"#Java各种数据类型详细介绍及其区别\" class=\"headerlink\" title=\"Java各种数据类型详细介绍及其区别\"></a>Java各种数据类型详细介绍及其区别</h2><ul>\n<li>基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。</li>\n</ul>\n<p>Java中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：</p>\n<p>实数：double、float</p>\n<p>整数：byte、short、int、long</p>\n<p>字符：char</p>\n<p>布尔值：boolean</p>\n<p>复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。</p>\n<ul>\n<li>Java的简单数据讲解列表如下：</li>\n</ul>\n<p>int：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。</p>\n<p>short：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。</p>\n<p>long：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。</p>\n<p>byte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。</p>\n<p>float：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。</p>\n<p>double：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。</p>\n<p>char：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为’u0000’。</p>\n<p>boolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。</p>\n<p>Integer是int的封装类，里面有很多进行处理的静态方法</p>\n<p>Integer是对象而int不是，内存的分配位置也不一样</p>\n<p>Integer的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！</p>\n<p>jdk1.5以后可以从int自动装箱Integer类。</p>\n<p>int是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。</p>\n<p>Integer是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。</p>\n<p>jdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。</p>\n<p>int是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。</p>\n<p>实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；</p>\n<p>另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。</p>\n<p>int 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。</p>\n<ul>\n<li>原始类型 封装类</li>\n</ul>\n<p>boolean Boolean</p>\n<p>char Character</p>\n<p>byte Byte</p>\n<p>short Short</p>\n<p>int Integer</p>\n<p>long Long</p>\n<p>float Float</p>\n<p>double Double</p>\n<p>引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。</p>\n<h2 id=\"1-、Boolean-VS-boolean\"><a href=\"#1-、Boolean-VS-boolean\" class=\"headerlink\" title=\"1 、Boolean VS boolean\"></a>1 、Boolean VS boolean</h2><p>public final class Boolean extends Object  implementsSerializable,Comparable</p>\n<p>Boolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。</p>\n<h2 id=\"2、-Byte-VS-byte\"><a href=\"#2、-Byte-VS-byte\" class=\"headerlink\" title=\"2、 Byte VS byte\"></a>2、 Byte VS byte</h2><p>public final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。</p>\n<h2 id=\"3、-Character-VS-char\"><a href=\"#3、-Character-VS-char\" class=\"headerlink\" title=\"3、 Character VS char\"></a>3、 Character VS char</h2><p>public final class Character extends Object  implements Serializable, Comparable</p>\n<p>Character类在对象中包装一个基本类型char的值。</p>\n<p>Character类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。</p>\n<h2 id=\"4-、Double-VS-double\"><a href=\"#4-、Double-VS-double\" class=\"headerlink\" title=\"4 、Double VS double\"></a>4 、Double VS double</h2><p>public final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。</p>\n<h2 id=\"5、-Float-VS-float\"><a href=\"#5、-Float-VS-float\" class=\"headerlink\" title=\"5、 Float VS float\"></a>5、 Float VS float</h2><p>public final class Float extends Number implements Comparable</p>\n<p>Float类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"6、-Integer-VS-int\"><a href=\"#6、-Integer-VS-int\" class=\"headerlink\" title=\"6、 Integer VS int\"></a>6、 Integer VS int</h2><p>public final class Integer extends Number implements Comparable</p>\n<p>Integer类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。</p>\n<p>此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"7-Long-VS-long\"><a href=\"#7-Long-VS-long\" class=\"headerlink\" title=\"7 Long VS long\"></a>7 Long VS long</h2><p>public final class Long extends Number implements Comparable</p>\n<p>Long类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。</p>\n<p>此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。</p>\n<h2 id=\"8、-Short-VS-short\"><a href=\"#8、-Short-VS-short\" class=\"headerlink\" title=\"8、 Short VS short\"></a>8、 Short VS short</h2><p>public final class Short extends Number implements Comparable</p>\n<p>Short类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。</p>\n<h2 id=\"9、public-final-class-Voidextends-Object\"><a href=\"#9、public-final-class-Voidextends-Object\" class=\"headerlink\" title=\"9、public final class Voidextends Object\"></a>9、public final class Voidextends Object</h2><p>Void 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。</p>\n<p>类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。</p>\n","sticky":0},{"title":"[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目","date":"2016-06-01T10:56:42.000Z","_content":"\n\n[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目\n\n### 目标\n\n#### 场景\nJenkins部署在服务器192.168.1.119:8080.\n有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.\n现在，我们需要使用Jenkins自动化部署实现这个目标.\n\n#### 为什么是springboot？\nSprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n#### 如何实现？\n1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n2-建立目标项目的maven打包项目。build。\n3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n\n### 实现步骤\n下面是具体操作\n#### 1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n由于要区分不同的部署环境，所以这里先建一个dev环境的项目组\n![](/images/jenkins-maven-001.png)\n\n建立maven打包任务，为项目所依赖的父模块建立编译打包任务\n主要填好项目任务名称和项目git地址即可\n![](/images/jenkins-maven-002.png)\n\n#### 2-建立目标项目的maven打包项目。build。\n![](/images/jenkins-maven-003.png)\n\n由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作\n首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod\n```\n<profiles>\n    <profile>\n      <id>local</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <env>local</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>dev</id>\n      <properties>\n        <env>dev</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>prod</id>\n      <properties>\n        <env>prod</env>\n      </properties>\n    </profile>\n  </profiles>\n```\n然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。\n```\n<plugin>\n        <artifactId>maven-resources-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>copy-prod-resources</id>\n            <phase>process-resources</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <!-- this is important -->\n              <overwrite>true</overwrite>\n              <sourceDirectory>${basedir}/src/main/java</sourceDirectory>\n              <outputDirectory>target/classes</outputDirectory>\n              <resources>\n                <resource>\n                  <directory>src/main/resources</directory>\n                  <includes>\n                    <include>*.properties</include>\n                    <include>*.xml</include>\n                  </includes>\n                </resource>\n                <resource>\n                  <directory>src/main/resources/${env}</directory>\n                  <targetPath></targetPath>\n                </resource>\n              </resources>\n              <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>\n              <testOutputDirectory>target/test-classes</testOutputDirectory>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n```\n这样就会在resources目录下生成三个不同环境的目录和配置文件\n![](/images/jenkins-maven-007.png)\n\n如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置\n如dev环境就是mvn install -Pdev\n\n但是我们现在不是命令行，而是使用Jenkins做编译打包。\n于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。\n在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。\n-Pdev表示我们要打的正是dev环境的配置\n![](/images/jenkins-maven-004.png)\n\n#### 3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。\n要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。\n![](/images/jenkins-maven-006.png)\n\n然后配置一个执行远程shell脚本的任务，如下图。\n![](/images/jenkins-maven-005.png)\n\n这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。\n而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。\n\n任务脚本例子：\n这个shell脚本主要做了几件事：\n1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径\n2）kill关闭原java进程\n3）使用nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n启动java程序，并把日志输出到指定的log文件。\n4）检查java程序是否启动成功。\n```\n#!/bin/bash\n# script to update and restart project itimes\nremote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target\ntarget_jar=itimes-1.0.0-SNAPSHOT.jar\ntarget_path=/usr/local/itimes\ntarget_bak_path=/usr/local/itimes_bak\n\nnow=$(date '+%Y%m%d%H%M%S')\necho \"update and restart project itimes start...\"\necho \"now time: ${now}\"\n\nmkdir -p ${target_bak_path}/${now}\n/usr/bin/sshpass -p \"root\" scp root@192.168.1.119:${remote_source_path}/itimes-1.0.0-SNAPSHOT.jar ${target_bak_path\n}/${now}\n\ncd $target_bak_path/$now\nif [ -f ${target_jar} ]; then\n  pkill -f 'java.*itimes'\n  sleep 3\n  temppid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  if [[ \"$temppid\" != \"\" ]]; then\n    echo \"temppid is ${temppid}\"\n    ps -ef | grep ${target_jar} | grep -v grep | awk '{print $2}' | xargs kill\n  fi\n  echo \"kill ${target_jar} done..\"\n  cd $target_path\n  if [ -f ${target_jar} ]; then\n    rm -f ${target_jar}\n    echo \"target_jar deleted..\"\n  else\n    echo \"${target_jar} not exist, go on to copy..\"\n  fi\n  cp ${target_bak_path}/${now}/${target_jar} ${target_path}\n  echo \"cp done!\"\n  chmod 755 ${target_jar}\n  nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n  echo \"app startting..\"\n  for i in 2 4 6 10; do\n    sleep $i\n    echo \"wait and check app starting up...\"\n    APP_PID=`ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}'`\n    if [ $APP_PID > 0 ]; then\n        break;\n    else\n        echo \"app is still starting up...\"\n    fi\n  done\n  pid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  echo \"app id is: ${pid}\"\n  if [ $pid ]; then\n    echo \"${target_jar} is running now!\"\n  else\n    echo \"${target_jar} is not running! ${target_jar} startup failed!\"\n  fi\n  success_flag=\"false\"\n  for i in 2 4 6 8 10 12; do\n    echo \"checking app startup status...\"\n    success_target_tag=`cat ${target_bak_path}/${now}/itime-${now}.log | grep \"Started App in\"`\n    if [[ \"\" != \"$success_target_tag\" ]]; then\n      echo \"Found success target tag, app startup successfully..\"\n      success_flag=\"true\"\n      break;\n    else\n        echo \"app is still starting up...\"\n        sleep $i\n        echo \"sleep $i ...\"\n    fi\n  done\n  if [[ \"true\" != \"$success_flag\"  ]]; then\n    echo \"Not found success target tag, app startup failed...\"\n  fi\nelse\n  echo \"Target jar not exist! Update not complete!\"\nfi\n\necho \"update done!\"\n```\n\ndone.","source":"_posts/Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目.md","raw":"---\ntitle: '[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目'\ndate: 2016-06-01 18:56:42\ntags:\n---\n\n\n[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目\n\n### 目标\n\n#### 场景\nJenkins部署在服务器192.168.1.119:8080.\n有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.\n现在，我们需要使用Jenkins自动化部署实现这个目标.\n\n#### 为什么是springboot？\nSprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n#### 如何实现？\n1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n2-建立目标项目的maven打包项目。build。\n3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n\n### 实现步骤\n下面是具体操作\n#### 1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n由于要区分不同的部署环境，所以这里先建一个dev环境的项目组\n![](/images/jenkins-maven-001.png)\n\n建立maven打包任务，为项目所依赖的父模块建立编译打包任务\n主要填好项目任务名称和项目git地址即可\n![](/images/jenkins-maven-002.png)\n\n#### 2-建立目标项目的maven打包项目。build。\n![](/images/jenkins-maven-003.png)\n\n由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作\n首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod\n```\n<profiles>\n    <profile>\n      <id>local</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <env>local</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>dev</id>\n      <properties>\n        <env>dev</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>prod</id>\n      <properties>\n        <env>prod</env>\n      </properties>\n    </profile>\n  </profiles>\n```\n然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。\n```\n<plugin>\n        <artifactId>maven-resources-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>copy-prod-resources</id>\n            <phase>process-resources</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <!-- this is important -->\n              <overwrite>true</overwrite>\n              <sourceDirectory>${basedir}/src/main/java</sourceDirectory>\n              <outputDirectory>target/classes</outputDirectory>\n              <resources>\n                <resource>\n                  <directory>src/main/resources</directory>\n                  <includes>\n                    <include>*.properties</include>\n                    <include>*.xml</include>\n                  </includes>\n                </resource>\n                <resource>\n                  <directory>src/main/resources/${env}</directory>\n                  <targetPath></targetPath>\n                </resource>\n              </resources>\n              <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>\n              <testOutputDirectory>target/test-classes</testOutputDirectory>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n```\n这样就会在resources目录下生成三个不同环境的目录和配置文件\n![](/images/jenkins-maven-007.png)\n\n如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置\n如dev环境就是mvn install -Pdev\n\n但是我们现在不是命令行，而是使用Jenkins做编译打包。\n于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。\n在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。\n-Pdev表示我们要打的正是dev环境的配置\n![](/images/jenkins-maven-004.png)\n\n#### 3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。\n要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。\n![](/images/jenkins-maven-006.png)\n\n然后配置一个执行远程shell脚本的任务，如下图。\n![](/images/jenkins-maven-005.png)\n\n这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。\n而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。\n\n任务脚本例子：\n这个shell脚本主要做了几件事：\n1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径\n2）kill关闭原java进程\n3）使用nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n启动java程序，并把日志输出到指定的log文件。\n4）检查java程序是否启动成功。\n```\n#!/bin/bash\n# script to update and restart project itimes\nremote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target\ntarget_jar=itimes-1.0.0-SNAPSHOT.jar\ntarget_path=/usr/local/itimes\ntarget_bak_path=/usr/local/itimes_bak\n\nnow=$(date '+%Y%m%d%H%M%S')\necho \"update and restart project itimes start...\"\necho \"now time: ${now}\"\n\nmkdir -p ${target_bak_path}/${now}\n/usr/bin/sshpass -p \"root\" scp root@192.168.1.119:${remote_source_path}/itimes-1.0.0-SNAPSHOT.jar ${target_bak_path\n}/${now}\n\ncd $target_bak_path/$now\nif [ -f ${target_jar} ]; then\n  pkill -f 'java.*itimes'\n  sleep 3\n  temppid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  if [[ \"$temppid\" != \"\" ]]; then\n    echo \"temppid is ${temppid}\"\n    ps -ef | grep ${target_jar} | grep -v grep | awk '{print $2}' | xargs kill\n  fi\n  echo \"kill ${target_jar} done..\"\n  cd $target_path\n  if [ -f ${target_jar} ]; then\n    rm -f ${target_jar}\n    echo \"target_jar deleted..\"\n  else\n    echo \"${target_jar} not exist, go on to copy..\"\n  fi\n  cp ${target_bak_path}/${now}/${target_jar} ${target_path}\n  echo \"cp done!\"\n  chmod 755 ${target_jar}\n  nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n  echo \"app startting..\"\n  for i in 2 4 6 10; do\n    sleep $i\n    echo \"wait and check app starting up...\"\n    APP_PID=`ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}'`\n    if [ $APP_PID > 0 ]; then\n        break;\n    else\n        echo \"app is still starting up...\"\n    fi\n  done\n  pid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  echo \"app id is: ${pid}\"\n  if [ $pid ]; then\n    echo \"${target_jar} is running now!\"\n  else\n    echo \"${target_jar} is not running! ${target_jar} startup failed!\"\n  fi\n  success_flag=\"false\"\n  for i in 2 4 6 8 10 12; do\n    echo \"checking app startup status...\"\n    success_target_tag=`cat ${target_bak_path}/${now}/itime-${now}.log | grep \"Started App in\"`\n    if [[ \"\" != \"$success_target_tag\" ]]; then\n      echo \"Found success target tag, app startup successfully..\"\n      success_flag=\"true\"\n      break;\n    else\n        echo \"app is still starting up...\"\n        sleep $i\n        echo \"sleep $i ...\"\n    fi\n  done\n  if [[ \"true\" != \"$success_flag\"  ]]; then\n    echo \"Not found success target tag, app startup failed...\"\n  fi\nelse\n  echo \"Target jar not exist! Update not complete!\"\nfi\n\necho \"update done!\"\n```\n\ndone.","slug":"Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目","published":1,"updated":"2016-06-01T14:09:14.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghgr000230ngiivoiovw","content":"<p>[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>Jenkins部署在服务器192.168.1.119:8080.<br>有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.<br>现在，我们需要使用Jenkins自动化部署实现这个目标.</p>\n<h4 id=\"为什么是springboot？\"><a href=\"#为什么是springboot？\" class=\"headerlink\" title=\"为什么是springboot？\"></a>为什么是springboot？</h4><p>Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</p>\n<h4 id=\"如何实现？\"><a href=\"#如何实现？\" class=\"headerlink\" title=\"如何实现？\"></a>如何实现？</h4><p>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。<br>2-建立目标项目的maven打包项目。build。<br>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><p>下面是具体操作</p>\n<h4 id=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"><a href=\"#1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\" class=\"headerlink\" title=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"></a>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。</h4><p>由于要区分不同的部署环境，所以这里先建一个dev环境的项目组<br><img src=\"/images/jenkins-maven-001.png\" alt=\"\"></p>\n<p>建立maven打包任务，为项目所依赖的父模块建立编译打包任务<br>主要填好项目任务名称和项目git地址即可<br><img src=\"/images/jenkins-maven-002.png\" alt=\"\"></p>\n<h4 id=\"2-建立目标项目的maven打包项目。build。\"><a href=\"#2-建立目标项目的maven打包项目。build。\" class=\"headerlink\" title=\"2-建立目标项目的maven打包项目。build。\"></a>2-建立目标项目的maven打包项目。build。</h4><p><img src=\"/images/jenkins-maven-003.png\" alt=\"\"></p>\n<p>由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作<br>首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;local&lt;/id&gt;</span><br><span class=\"line\">      &lt;activation&gt;</span><br><span class=\"line\">        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class=\"line\">      &lt;/activation&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;local&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;dev&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;prod&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;prod&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">  &lt;/profiles&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;copy-prod-resources&lt;/id&gt;</span><br><span class=\"line\">            &lt;phase&gt;process-resources&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;copy-resources&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">              &lt;!-- this is important --&gt;</span><br><span class=\"line\">              &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">              &lt;sourceDirectory&gt;$&#123;basedir&#125;/src/main/java&lt;/sourceDirectory&gt;</span><br><span class=\"line\">              &lt;outputDirectory&gt;target/classes&lt;/outputDirectory&gt;</span><br><span class=\"line\">              &lt;resources&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;includes&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.properties&lt;/include&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.xml&lt;/include&gt;</span><br><span class=\"line\">                  &lt;/includes&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources/$&#123;env&#125;&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;targetPath&gt;&lt;/targetPath&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">              &lt;/resources&gt;</span><br><span class=\"line\">              &lt;testSourceDirectory&gt;$&#123;basedir&#125;/src/test/java&lt;/testSourceDirectory&gt;</span><br><span class=\"line\">              &lt;testOutputDirectory&gt;target/test-classes&lt;/testOutputDirectory&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就会在resources目录下生成三个不同环境的目录和配置文件<br><img src=\"/images/jenkins-maven-007.png\" alt=\"\"></p>\n<p>如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置<br>如dev环境就是mvn install -Pdev</p>\n<p>但是我们现在不是命令行，而是使用Jenkins做编译打包。<br>于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。<br>在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。<br>-Pdev表示我们要打的正是dev环境的配置<br><img src=\"/images/jenkins-maven-004.png\" alt=\"\"></p>\n<h4 id=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"><a href=\"#3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\" class=\"headerlink\" title=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"></a>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</h4><p>由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。<br>要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。<br><img src=\"/images/jenkins-maven-006.png\" alt=\"\"></p>\n<p>然后配置一个执行远程shell脚本的任务，如下图。<br><img src=\"/images/jenkins-maven-005.png\" alt=\"\"></p>\n<p>这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。<br>而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。</p>\n<p>任务脚本例子：<br>这个shell脚本主要做了几件事：<br>1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径<br>2）kill关闭原java进程<br>3）使用nohup java -jar ${target_path}/${target_jar} &lt; /dev/null &gt; ${target_bak_path}/${now}/itime-${now}.log 2&gt;&amp;1 &amp;<br>启动java程序，并把日志输出到指定的log文件。<br>4）检查java程序是否启动成功。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># script to update and restart project itimes</span><br><span class=\"line\">remote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target</span><br><span class=\"line\">target_jar=itimes-1.0.0-SNAPSHOT.jar</span><br><span class=\"line\">target_path=/usr/local/itimes</span><br><span class=\"line\">target_bak_path=/usr/local/itimes_bak</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date &apos;+%Y%m%d%H%M%S&apos;)</span><br><span class=\"line\">echo &quot;update and restart project itimes start...&quot;</span><br><span class=\"line\">echo &quot;now time: $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $&#123;target_bak_path&#125;/$&#123;now&#125;</span><br><span class=\"line\">/usr/bin/sshpass -p &quot;root&quot; scp root@192.168.1.119:$&#123;remote_source_path&#125;/itimes-1.0.0-SNAPSHOT.jar $&#123;target_bak_path</span><br><span class=\"line\">&#125;/$&#123;now&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $target_bak_path/$now</span><br><span class=\"line\">if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">  pkill -f &apos;java.*itimes&apos;</span><br><span class=\"line\">  sleep 3</span><br><span class=\"line\">  temppid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  if [[ &quot;$temppid&quot; != &quot;&quot; ]]; then</span><br><span class=\"line\">    echo &quot;temppid is $&#123;temppid&#125;&quot;</span><br><span class=\"line\">    ps -ef | grep $&#123;target_jar&#125; | grep -v grep | awk &apos;&#123;print $2&#125;&apos; | xargs kill</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;kill $&#123;target_jar&#125; done..&quot;</span><br><span class=\"line\">  cd $target_path</span><br><span class=\"line\">  if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">    rm -f $&#123;target_jar&#125;</span><br><span class=\"line\">    echo &quot;target_jar deleted..&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; not exist, go on to copy..&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  cp $&#123;target_bak_path&#125;/$&#123;now&#125;/$&#123;target_jar&#125; $&#123;target_path&#125;</span><br><span class=\"line\">  echo &quot;cp done!&quot;</span><br><span class=\"line\">  chmod 755 $&#123;target_jar&#125;</span><br><span class=\"line\">  nohup java -jar $&#123;target_path&#125;/$&#123;target_jar&#125; &lt; /dev/null &gt; $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">  echo &quot;app startting..&quot;</span><br><span class=\"line\">  for i in 2 4 6 10; do</span><br><span class=\"line\">    sleep $i</span><br><span class=\"line\">    echo &quot;wait and check app starting up...&quot;</span><br><span class=\"line\">    APP_PID=`ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;`</span><br><span class=\"line\">    if [ $APP_PID &gt; 0 ]; then</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  pid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  echo &quot;app id is: $&#123;pid&#125;&quot;</span><br><span class=\"line\">  if [ $pid ]; then</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is running now!&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is not running! $&#123;target_jar&#125; startup failed!&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  success_flag=&quot;false&quot;</span><br><span class=\"line\">  for i in 2 4 6 8 10 12; do</span><br><span class=\"line\">    echo &quot;checking app startup status...&quot;</span><br><span class=\"line\">    success_target_tag=`cat $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log | grep &quot;Started App in&quot;`</span><br><span class=\"line\">    if [[ &quot;&quot; != &quot;$success_target_tag&quot; ]]; then</span><br><span class=\"line\">      echo &quot;Found success target tag, app startup successfully..&quot;</span><br><span class=\"line\">      success_flag=&quot;true&quot;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">        sleep $i</span><br><span class=\"line\">        echo &quot;sleep $i ...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  if [[ &quot;true&quot; != &quot;$success_flag&quot;  ]]; then</span><br><span class=\"line\">    echo &quot;Not found success target tag, app startup failed...&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;Target jar not exist! Update not complete!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;update done!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>done.</p>\n","excerpt":"","more":"<p>[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>Jenkins部署在服务器192.168.1.119:8080.<br>有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.<br>现在，我们需要使用Jenkins自动化部署实现这个目标.</p>\n<h4 id=\"为什么是springboot？\"><a href=\"#为什么是springboot？\" class=\"headerlink\" title=\"为什么是springboot？\"></a>为什么是springboot？</h4><p>Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</p>\n<h4 id=\"如何实现？\"><a href=\"#如何实现？\" class=\"headerlink\" title=\"如何实现？\"></a>如何实现？</h4><p>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。<br>2-建立目标项目的maven打包项目。build。<br>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><p>下面是具体操作</p>\n<h4 id=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"><a href=\"#1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\" class=\"headerlink\" title=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"></a>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。</h4><p>由于要区分不同的部署环境，所以这里先建一个dev环境的项目组<br><img src=\"/images/jenkins-maven-001.png\" alt=\"\"></p>\n<p>建立maven打包任务，为项目所依赖的父模块建立编译打包任务<br>主要填好项目任务名称和项目git地址即可<br><img src=\"/images/jenkins-maven-002.png\" alt=\"\"></p>\n<h4 id=\"2-建立目标项目的maven打包项目。build。\"><a href=\"#2-建立目标项目的maven打包项目。build。\" class=\"headerlink\" title=\"2-建立目标项目的maven打包项目。build。\"></a>2-建立目标项目的maven打包项目。build。</h4><p><img src=\"/images/jenkins-maven-003.png\" alt=\"\"></p>\n<p>由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作<br>首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;local&lt;/id&gt;</span><br><span class=\"line\">      &lt;activation&gt;</span><br><span class=\"line\">        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class=\"line\">      &lt;/activation&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;local&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;dev&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;prod&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;prod&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">  &lt;/profiles&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;copy-prod-resources&lt;/id&gt;</span><br><span class=\"line\">            &lt;phase&gt;process-resources&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;copy-resources&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">              &lt;!-- this is important --&gt;</span><br><span class=\"line\">              &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">              &lt;sourceDirectory&gt;$&#123;basedir&#125;/src/main/java&lt;/sourceDirectory&gt;</span><br><span class=\"line\">              &lt;outputDirectory&gt;target/classes&lt;/outputDirectory&gt;</span><br><span class=\"line\">              &lt;resources&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;includes&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.properties&lt;/include&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.xml&lt;/include&gt;</span><br><span class=\"line\">                  &lt;/includes&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources/$&#123;env&#125;&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;targetPath&gt;&lt;/targetPath&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">              &lt;/resources&gt;</span><br><span class=\"line\">              &lt;testSourceDirectory&gt;$&#123;basedir&#125;/src/test/java&lt;/testSourceDirectory&gt;</span><br><span class=\"line\">              &lt;testOutputDirectory&gt;target/test-classes&lt;/testOutputDirectory&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就会在resources目录下生成三个不同环境的目录和配置文件<br><img src=\"/images/jenkins-maven-007.png\" alt=\"\"></p>\n<p>如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置<br>如dev环境就是mvn install -Pdev</p>\n<p>但是我们现在不是命令行，而是使用Jenkins做编译打包。<br>于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。<br>在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。<br>-Pdev表示我们要打的正是dev环境的配置<br><img src=\"/images/jenkins-maven-004.png\" alt=\"\"></p>\n<h4 id=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"><a href=\"#3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\" class=\"headerlink\" title=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"></a>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</h4><p>由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。<br>要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。<br><img src=\"/images/jenkins-maven-006.png\" alt=\"\"></p>\n<p>然后配置一个执行远程shell脚本的任务，如下图。<br><img src=\"/images/jenkins-maven-005.png\" alt=\"\"></p>\n<p>这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。<br>而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。</p>\n<p>任务脚本例子：<br>这个shell脚本主要做了几件事：<br>1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径<br>2）kill关闭原java进程<br>3）使用nohup java -jar ${target_path}/${target_jar} &lt; /dev/null &gt; ${target_bak_path}/${now}/itime-${now}.log 2&gt;&amp;1 &amp;<br>启动java程序，并把日志输出到指定的log文件。<br>4）检查java程序是否启动成功。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># script to update and restart project itimes</span><br><span class=\"line\">remote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target</span><br><span class=\"line\">target_jar=itimes-1.0.0-SNAPSHOT.jar</span><br><span class=\"line\">target_path=/usr/local/itimes</span><br><span class=\"line\">target_bak_path=/usr/local/itimes_bak</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date &apos;+%Y%m%d%H%M%S&apos;)</span><br><span class=\"line\">echo &quot;update and restart project itimes start...&quot;</span><br><span class=\"line\">echo &quot;now time: $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $&#123;target_bak_path&#125;/$&#123;now&#125;</span><br><span class=\"line\">/usr/bin/sshpass -p &quot;root&quot; scp root@192.168.1.119:$&#123;remote_source_path&#125;/itimes-1.0.0-SNAPSHOT.jar $&#123;target_bak_path</span><br><span class=\"line\">&#125;/$&#123;now&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $target_bak_path/$now</span><br><span class=\"line\">if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">  pkill -f &apos;java.*itimes&apos;</span><br><span class=\"line\">  sleep 3</span><br><span class=\"line\">  temppid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  if [[ &quot;$temppid&quot; != &quot;&quot; ]]; then</span><br><span class=\"line\">    echo &quot;temppid is $&#123;temppid&#125;&quot;</span><br><span class=\"line\">    ps -ef | grep $&#123;target_jar&#125; | grep -v grep | awk &apos;&#123;print $2&#125;&apos; | xargs kill</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;kill $&#123;target_jar&#125; done..&quot;</span><br><span class=\"line\">  cd $target_path</span><br><span class=\"line\">  if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">    rm -f $&#123;target_jar&#125;</span><br><span class=\"line\">    echo &quot;target_jar deleted..&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; not exist, go on to copy..&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  cp $&#123;target_bak_path&#125;/$&#123;now&#125;/$&#123;target_jar&#125; $&#123;target_path&#125;</span><br><span class=\"line\">  echo &quot;cp done!&quot;</span><br><span class=\"line\">  chmod 755 $&#123;target_jar&#125;</span><br><span class=\"line\">  nohup java -jar $&#123;target_path&#125;/$&#123;target_jar&#125; &lt; /dev/null &gt; $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">  echo &quot;app startting..&quot;</span><br><span class=\"line\">  for i in 2 4 6 10; do</span><br><span class=\"line\">    sleep $i</span><br><span class=\"line\">    echo &quot;wait and check app starting up...&quot;</span><br><span class=\"line\">    APP_PID=`ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;`</span><br><span class=\"line\">    if [ $APP_PID &gt; 0 ]; then</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  pid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  echo &quot;app id is: $&#123;pid&#125;&quot;</span><br><span class=\"line\">  if [ $pid ]; then</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is running now!&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is not running! $&#123;target_jar&#125; startup failed!&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  success_flag=&quot;false&quot;</span><br><span class=\"line\">  for i in 2 4 6 8 10 12; do</span><br><span class=\"line\">    echo &quot;checking app startup status...&quot;</span><br><span class=\"line\">    success_target_tag=`cat $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log | grep &quot;Started App in&quot;`</span><br><span class=\"line\">    if [[ &quot;&quot; != &quot;$success_target_tag&quot; ]]; then</span><br><span class=\"line\">      echo &quot;Found success target tag, app startup successfully..&quot;</span><br><span class=\"line\">      success_flag=&quot;true&quot;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">        sleep $i</span><br><span class=\"line\">        echo &quot;sleep $i ...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  if [[ &quot;true&quot; != &quot;$success_flag&quot;  ]]; then</span><br><span class=\"line\">    echo &quot;Not found success target tag, app startup failed...&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;Target jar not exist! Update not complete!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;update done!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>done.</p>\n","sticky":0},{"title":"SOA分布式事务解决方案","date":"2016-08-10T01:48:30.000Z","_content":"\n这里是转的一段摘录：\n\n\n传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。\nSOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。\n本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。\n我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。\n1.分布式事务（基于DTC的分布式事务）\n以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。\n由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。\n这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。\n2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）\n世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。\n这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。\n3.异步EDA（基于异步事件流来实现柔性的分布式事务）\nEDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。\n可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。\n异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。","source":"_posts/SOA分布式事务解决方案.md","raw":"---\ntitle: SOA分布式事务解决方案\ndate: 2016-08-10 09:48:30\ntags: [SOA, 分布式事务, 柔性事务, 消息事务]\n---\n\n这里是转的一段摘录：\n\n\n传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。\nSOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。\n本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。\n我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。\n1.分布式事务（基于DTC的分布式事务）\n以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。\n由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。\n这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。\n2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）\n世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。\n这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。\n3.异步EDA（基于异步事件流来实现柔性的分布式事务）\nEDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。\n可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。\n异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。","slug":"SOA分布式事务解决方案","published":1,"updated":"2016-08-10T15:15:57.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghgy000430ngvp6u6f1t","content":"<p>这里是转的一段摘录：</p>\n<p>传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。<br>SOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。<br>本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。<br>我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。<br>1.分布式事务（基于DTC的分布式事务）<br>以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。<br>由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。<br>这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。<br>2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）<br>世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。<br>这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。<br>3.异步EDA（基于异步事件流来实现柔性的分布式事务）<br>EDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。<br>可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。<br>异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。</p>\n","excerpt":"","more":"<p>这里是转的一段摘录：</p>\n<p>传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。<br>SOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。<br>本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。<br>我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。<br>1.分布式事务（基于DTC的分布式事务）<br>以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。<br>由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。<br>这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。<br>2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）<br>世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。<br>这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。<br>3.异步EDA（基于异步事件流来实现柔性的分布式事务）<br>EDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。<br>可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。<br>异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。</p>\n","sticky":0},{"title":"What's the simplest way to print a Java array?","date":"2016-08-08T10:24:43.000Z","_content":"\n\nExamples:\n- Simple Array:\n```\nString[] array = new String[] {\"John\", \"Mary\", \"Bob\"};\nSystem.out.println(Arrays.toString(array));\n```\nOutput:\n```\n[John, Mary, Bob]\n```\n\n- Nested Array:\n```\nString[][] deepArray = new String[][] {{\"John\", \"Mary\"}, {\"Alice\", \"Bob\"}};\nSystem.out.println(Arrays.toString(deepArray));\n//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]\nSystem.out.println(Arrays.deepToString(deepArray));\n```\nOutput:\n```\n[[John, Mary], [Alice, Bob]]\n```\n\n- double Array:\n```\ndouble[] doubleArray = { 7.0, 9.0, 5.0, 1.0, 3.0 };\nSystem.out.println(Arrays.toString(doubleArray));\n```\nOutput:\n```\n[7.0, 9.0, 5.0, 1.0, 3.0 ]\n```\n- int Array:\n```\nint[] intArray = { 7, 9, 5, 1, 3 };\nSystem.out.println(Arrays.toString(intArray));\n```\nOutput:\n```\n[7, 9, 5, 1, 3 ]\n```","source":"_posts/What-s-the-simplest-way-to-print-a-Java-array.md","raw":"---\ntitle: What's the simplest way to print a Java array?\ndate: 2016-08-08 18:24:43\ntags: [java, array, print, j2se]\n---\n\n\nExamples:\n- Simple Array:\n```\nString[] array = new String[] {\"John\", \"Mary\", \"Bob\"};\nSystem.out.println(Arrays.toString(array));\n```\nOutput:\n```\n[John, Mary, Bob]\n```\n\n- Nested Array:\n```\nString[][] deepArray = new String[][] {{\"John\", \"Mary\"}, {\"Alice\", \"Bob\"}};\nSystem.out.println(Arrays.toString(deepArray));\n//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]\nSystem.out.println(Arrays.deepToString(deepArray));\n```\nOutput:\n```\n[[John, Mary], [Alice, Bob]]\n```\n\n- double Array:\n```\ndouble[] doubleArray = { 7.0, 9.0, 5.0, 1.0, 3.0 };\nSystem.out.println(Arrays.toString(doubleArray));\n```\nOutput:\n```\n[7.0, 9.0, 5.0, 1.0, 3.0 ]\n```\n- int Array:\n```\nint[] intArray = { 7, 9, 5, 1, 3 };\nSystem.out.println(Arrays.toString(intArray));\n```\nOutput:\n```\n[7, 9, 5, 1, 3 ]\n```","slug":"What-s-the-simplest-way-to-print-a-Java-array","published":1,"updated":"2016-08-08T11:33:26.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghgz000530ngf713b1ry","content":"<p>Examples:</p>\n<ul>\n<li>Simple Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] array = new String[] &#123;&quot;John&quot;, &quot;Mary&quot;, &quot;Bob&quot;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[John, Mary, Bob]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Nested Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[][] deepArray = new String[][] &#123;&#123;&quot;John&quot;, &quot;Mary&quot;&#125;, &#123;&quot;Alice&quot;, &quot;Bob&quot;&#125;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(deepArray));</span><br><span class=\"line\">//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]</span><br><span class=\"line\">System.out.println(Arrays.deepToString(deepArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[John, Mary], [Alice, Bob]]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>double Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[] doubleArray = &#123; 7.0, 9.0, 5.0, 1.0, 3.0 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(doubleArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7.0, 9.0, 5.0, 1.0, 3.0 ]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>int Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] intArray = &#123; 7, 9, 5, 1, 3 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(intArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7, 9, 5, 1, 3 ]</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Examples:</p>\n<ul>\n<li>Simple Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] array = new String[] &#123;&quot;John&quot;, &quot;Mary&quot;, &quot;Bob&quot;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[John, Mary, Bob]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Nested Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[][] deepArray = new String[][] &#123;&#123;&quot;John&quot;, &quot;Mary&quot;&#125;, &#123;&quot;Alice&quot;, &quot;Bob&quot;&#125;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(deepArray));</span><br><span class=\"line\">//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]</span><br><span class=\"line\">System.out.println(Arrays.deepToString(deepArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[John, Mary], [Alice, Bob]]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>double Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[] doubleArray = &#123; 7.0, 9.0, 5.0, 1.0, 3.0 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(doubleArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7.0, 9.0, 5.0, 1.0, 3.0 ]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>int Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] intArray = &#123; 7, 9, 5, 1, 3 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(intArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7, 9, 5, 1, 3 ]</span><br></pre></td></tr></table></figure></p>\n","sticky":0},{"title":"How to synchronize ArrayList in java with example","date":"2016-07-28T05:21:15.000Z","_content":"\n\n## There are two ways to synchronize explicitly:\n\n- Using Collections.synchronizedList() method\n- Using thread-safe variant of ArrayList: CopyOnWriteArrayList\n\n## Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\n\nIn this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.\n\n```\npackage beginnersbook.com;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Collections;\n\npublic class Details {\n\n   public static void main(String a[]){\n       List<String> syncal = \n         Collections.synchronizedList(new ArrayList<String>());\n\n       //Adding elements to synchronized ArrayList\n       syncal.add(\"Pen\");\n       syncal.add(\"NoteBook\");\n       syncal.add(\"Ink\");\n\n       System.out.println(\"Iterating synchronized ArrayList:\");\n       synchronized(syncal) {\n       Iterator<String> iterator = syncal.iterator(); \n       while (iterator.hasNext())\n          System.out.println(iterator.next());\n       }\n   }\n}\n```\n- Output:\n```\nIterating synchronized ArrayList:\nPen\nNoteBook\nInk\n```\n\n\n## Method 2: Using CopyOnWriteArrayList\n\nCopyOnWriteArrayList is a thread-safe variant of ArrayList.\n\n```\npackage beginnersbook.com;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.Iterator;\n\npublic class Details {\n\n public static void main(String a[]){\n    CopyOnWriteArrayList<String> al = new CopyOnWriteArrayList<String>();\n\n    //Adding elements to synchronized ArrayList\n    al.add(\"Pen\");\n    al.add(\"NoteBook\");\n    al.add(\"Ink\");\n\n    System.out.println(\"Displaying synchronized ArrayList Elements:\");\n    //Synchronized block is not required in this method\n    Iterator<String> iterator = al.iterator(); \n    while (iterator.hasNext())\n       System.out.println(iterator.next());\n  }\n}\n```\n- Output:\n```\nDisplaying synchronized ArrayList Elements:\nPen\nNoteBook\nInk\n```","source":"_posts/How-to-synchronize-ArrayList-in-java-with-example.md","raw":"---\ntitle: How to synchronize ArrayList in java with example\ndate: 2016-07-28 13:21:15\ntags: [java, synchronize, ArrayList]\n---\n\n\n## There are two ways to synchronize explicitly:\n\n- Using Collections.synchronizedList() method\n- Using thread-safe variant of ArrayList: CopyOnWriteArrayList\n\n## Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\n\nIn this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.\n\n```\npackage beginnersbook.com;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Collections;\n\npublic class Details {\n\n   public static void main(String a[]){\n       List<String> syncal = \n         Collections.synchronizedList(new ArrayList<String>());\n\n       //Adding elements to synchronized ArrayList\n       syncal.add(\"Pen\");\n       syncal.add(\"NoteBook\");\n       syncal.add(\"Ink\");\n\n       System.out.println(\"Iterating synchronized ArrayList:\");\n       synchronized(syncal) {\n       Iterator<String> iterator = syncal.iterator(); \n       while (iterator.hasNext())\n          System.out.println(iterator.next());\n       }\n   }\n}\n```\n- Output:\n```\nIterating synchronized ArrayList:\nPen\nNoteBook\nInk\n```\n\n\n## Method 2: Using CopyOnWriteArrayList\n\nCopyOnWriteArrayList is a thread-safe variant of ArrayList.\n\n```\npackage beginnersbook.com;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.Iterator;\n\npublic class Details {\n\n public static void main(String a[]){\n    CopyOnWriteArrayList<String> al = new CopyOnWriteArrayList<String>();\n\n    //Adding elements to synchronized ArrayList\n    al.add(\"Pen\");\n    al.add(\"NoteBook\");\n    al.add(\"Ink\");\n\n    System.out.println(\"Displaying synchronized ArrayList Elements:\");\n    //Synchronized block is not required in this method\n    Iterator<String> iterator = al.iterator(); \n    while (iterator.hasNext())\n       System.out.println(iterator.next());\n  }\n}\n```\n- Output:\n```\nDisplaying synchronized ArrayList Elements:\nPen\nNoteBook\nInk\n```","slug":"How-to-synchronize-ArrayList-in-java-with-example","published":1,"updated":"2016-07-28T14:57:55.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghh4000730nguius5eg8","content":"<h2 id=\"There-are-two-ways-to-synchronize-explicitly\"><a href=\"#There-are-two-ways-to-synchronize-explicitly\" class=\"headerlink\" title=\"There are two ways to synchronize explicitly:\"></a>There are two ways to synchronize explicitly:</h2><ul>\n<li>Using Collections.synchronizedList() method</li>\n<li>Using thread-safe variant of ArrayList: CopyOnWriteArrayList</li>\n</ul>\n<h2 id=\"Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\"><a href=\"#Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\" class=\"headerlink\" title=\"Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\"></a>Example 1: Collections.synchronizedList() method for Synchronizing ArrayList</h2><p>In this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String a[])&#123;</span><br><span class=\"line\">       List&lt;String&gt; syncal = </span><br><span class=\"line\">         Collections.synchronizedList(new ArrayList&lt;String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">       //Adding elements to synchronized ArrayList</span><br><span class=\"line\">       syncal.add(&quot;Pen&quot;);</span><br><span class=\"line\">       syncal.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">       syncal.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(&quot;Iterating synchronized ArrayList:&quot;);</span><br><span class=\"line\">       synchronized(syncal) &#123;</span><br><span class=\"line\">       Iterator&lt;String&gt; iterator = syncal.iterator(); </span><br><span class=\"line\">       while (iterator.hasNext())</span><br><span class=\"line\">          System.out.println(iterator.next());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterating synchronized ArrayList:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Method-2-Using-CopyOnWriteArrayList\"><a href=\"#Method-2-Using-CopyOnWriteArrayList\" class=\"headerlink\" title=\"Method 2: Using CopyOnWriteArrayList\"></a>Method 2: Using CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList is a thread-safe variant of ArrayList.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static void main(String a[])&#123;</span><br><span class=\"line\">    CopyOnWriteArrayList&lt;String&gt; al = new CopyOnWriteArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    //Adding elements to synchronized ArrayList</span><br><span class=\"line\">    al.add(&quot;Pen&quot;);</span><br><span class=\"line\">    al.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">    al.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;Displaying synchronized ArrayList Elements:&quot;);</span><br><span class=\"line\">    //Synchronized block is not required in this method</span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = al.iterator(); </span><br><span class=\"line\">    while (iterator.hasNext())</span><br><span class=\"line\">       System.out.println(iterator.next());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Displaying synchronized ArrayList Elements:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"There-are-two-ways-to-synchronize-explicitly\"><a href=\"#There-are-two-ways-to-synchronize-explicitly\" class=\"headerlink\" title=\"There are two ways to synchronize explicitly:\"></a>There are two ways to synchronize explicitly:</h2><ul>\n<li>Using Collections.synchronizedList() method</li>\n<li>Using thread-safe variant of ArrayList: CopyOnWriteArrayList</li>\n</ul>\n<h2 id=\"Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\"><a href=\"#Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\" class=\"headerlink\" title=\"Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\"></a>Example 1: Collections.synchronizedList() method for Synchronizing ArrayList</h2><p>In this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String a[])&#123;</span><br><span class=\"line\">       List&lt;String&gt; syncal = </span><br><span class=\"line\">         Collections.synchronizedList(new ArrayList&lt;String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">       //Adding elements to synchronized ArrayList</span><br><span class=\"line\">       syncal.add(&quot;Pen&quot;);</span><br><span class=\"line\">       syncal.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">       syncal.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(&quot;Iterating synchronized ArrayList:&quot;);</span><br><span class=\"line\">       synchronized(syncal) &#123;</span><br><span class=\"line\">       Iterator&lt;String&gt; iterator = syncal.iterator(); </span><br><span class=\"line\">       while (iterator.hasNext())</span><br><span class=\"line\">          System.out.println(iterator.next());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterating synchronized ArrayList:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Method-2-Using-CopyOnWriteArrayList\"><a href=\"#Method-2-Using-CopyOnWriteArrayList\" class=\"headerlink\" title=\"Method 2: Using CopyOnWriteArrayList\"></a>Method 2: Using CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList is a thread-safe variant of ArrayList.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static void main(String a[])&#123;</span><br><span class=\"line\">    CopyOnWriteArrayList&lt;String&gt; al = new CopyOnWriteArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    //Adding elements to synchronized ArrayList</span><br><span class=\"line\">    al.add(&quot;Pen&quot;);</span><br><span class=\"line\">    al.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">    al.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;Displaying synchronized ArrayList Elements:&quot;);</span><br><span class=\"line\">    //Synchronized block is not required in this method</span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = al.iterator(); </span><br><span class=\"line\">    while (iterator.hasNext())</span><br><span class=\"line\">       System.out.println(iterator.next());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Displaying synchronized ArrayList Elements:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure></li>\n</ul>\n","sticky":0},{"title":"Springboot应用中如何针对springmvc的controller写单元测试","date":"2016-07-23T04:54:56.000Z","_content":"\n\n## An example test for your controller can be something as simple as\n```\npublic class DemoApplicationTests {\n\n    final String BASE_URL = \"http://localhost:8080/\";\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = standaloneSetup(new HelloWorld()).build();\n    }\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n}\n```\n\n\n\n## The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\n\nThe test would look like so:\n```\n@RunWith(SpringRunner.class)\n@WebMvcTest(HelloWorld.class)\npublic class UserVehicleControllerTests {\n\n    @Autowired\n    private MockMvc mvc;\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n\n}\n```\n\n\n\n## 还有一种方式是使用TestRestTemplate\n\n```\npackage controller;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.TestRestTemplate;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.web.client.RestTemplate;\n\nimport ipicture.service.post.AppServicePost;\nimport ipicture.service.post.model.JsonObject;\nimport ipicture.service.post.model.Subject;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = AppServicePost.class)\n@WebIntegrationTest(\"server.port:8083\")// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口\npublic class SubjectControllerTest {\n\n    private RestTemplate template = new TestRestTemplate();\n    @Value(\"${server.port}\")// 注入端口号\n    private int port;\n    \n    private String getBaseUrl() {\n        return \"http://localhost:\" + port;\n    }\n    \n    @Test \n    public void test() {\n        Subject s = new Subject();\n        s.setCreator(1l);\n        s.setCreated(new Date());\n        s.setSubjectName(\"test5\");\n        s.setDescr(\"test subject\");\n        s.setDeleted(0);\n        s.setParent_id(0);\n        s.setStatus(0);\n        s.setType(0);\n        String url = getBaseUrl() + \"/subject/save\";\n        String result = template.postForObject(url, s, String.class);\n    }\n}\n\n```","source":"_posts/Springboot应用中如何针对springmvc的controller写单元测试.md","raw":"---\ntitle: Springboot应用中如何针对springmvc的controller写单元测试\ndate: 2016-07-23 12:54:56\ntags: [spring boot, java, junit, 测试， spring mvc, Springboot应用中如何针对springmvc的controller写单元测试]\n---\n\n\n## An example test for your controller can be something as simple as\n```\npublic class DemoApplicationTests {\n\n    final String BASE_URL = \"http://localhost:8080/\";\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = standaloneSetup(new HelloWorld()).build();\n    }\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n}\n```\n\n\n\n## The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\n\nThe test would look like so:\n```\n@RunWith(SpringRunner.class)\n@WebMvcTest(HelloWorld.class)\npublic class UserVehicleControllerTests {\n\n    @Autowired\n    private MockMvc mvc;\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n\n}\n```\n\n\n\n## 还有一种方式是使用TestRestTemplate\n\n```\npackage controller;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.TestRestTemplate;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.web.client.RestTemplate;\n\nimport ipicture.service.post.AppServicePost;\nimport ipicture.service.post.model.JsonObject;\nimport ipicture.service.post.model.Subject;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = AppServicePost.class)\n@WebIntegrationTest(\"server.port:8083\")// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口\npublic class SubjectControllerTest {\n\n    private RestTemplate template = new TestRestTemplate();\n    @Value(\"${server.port}\")// 注入端口号\n    private int port;\n    \n    private String getBaseUrl() {\n        return \"http://localhost:\" + port;\n    }\n    \n    @Test \n    public void test() {\n        Subject s = new Subject();\n        s.setCreator(1l);\n        s.setCreated(new Date());\n        s.setSubjectName(\"test5\");\n        s.setDescr(\"test subject\");\n        s.setDeleted(0);\n        s.setParent_id(0);\n        s.setStatus(0);\n        s.setType(0);\n        String url = getBaseUrl() + \"/subject/save\";\n        String result = template.postForObject(url, s, String.class);\n    }\n}\n\n```","slug":"Springboot应用中如何针对springmvc的controller写单元测试","published":1,"updated":"2016-07-23T05:01:46.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghh7000830ng68sva8oq","content":"<h2 id=\"An-example-test-for-your-controller-can-be-something-as-simple-as\"><a href=\"#An-example-test-for-your-controller-can-be-something-as-simple-as\" class=\"headerlink\" title=\"An example test for your controller can be something as simple as\"></a>An example test for your controller can be something as simple as</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DemoApplicationTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    final String BASE_URL = &quot;http://localhost:8080/&quot;;</span><br><span class=\"line\">    private MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void setup() &#123;</span><br><span class=\"line\">        this.mockMvc = standaloneSetup(new HelloWorld()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\"><a href=\"#The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\" class=\"headerlink\" title=\"The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\"></a>The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.</h2><p>The test would look like so:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@WebMvcTest(HelloWorld.class)</span><br><span class=\"line\">public class UserVehicleControllerTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"还有一种方式是使用TestRestTemplate\"><a href=\"#还有一种方式是使用TestRestTemplate\" class=\"headerlink\" title=\"还有一种方式是使用TestRestTemplate\"></a>还有一种方式是使用TestRestTemplate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.boot.test.SpringApplicationConfiguration;</span><br><span class=\"line\">import org.springframework.boot.test.TestRestTemplate;</span><br><span class=\"line\">import org.springframework.boot.test.WebIntegrationTest;</span><br><span class=\"line\">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\">import org.springframework.web.client.RestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">import ipicture.service.post.AppServicePost;</span><br><span class=\"line\">import ipicture.service.post.model.JsonObject;</span><br><span class=\"line\">import ipicture.service.post.model.Subject;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\">@SpringApplicationConfiguration(classes = AppServicePost.class)</span><br><span class=\"line\">@WebIntegrationTest(&quot;server.port:8083&quot;)// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口</span><br><span class=\"line\">public class SubjectControllerTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RestTemplate template = new TestRestTemplate();</span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)// 注入端口号</span><br><span class=\"line\">    private int port;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String getBaseUrl() &#123;</span><br><span class=\"line\">        return &quot;http://localhost:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Test </span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        Subject s = new Subject();</span><br><span class=\"line\">        s.setCreator(1l);</span><br><span class=\"line\">        s.setCreated(new Date());</span><br><span class=\"line\">        s.setSubjectName(&quot;test5&quot;);</span><br><span class=\"line\">        s.setDescr(&quot;test subject&quot;);</span><br><span class=\"line\">        s.setDeleted(0);</span><br><span class=\"line\">        s.setParent_id(0);</span><br><span class=\"line\">        s.setStatus(0);</span><br><span class=\"line\">        s.setType(0);</span><br><span class=\"line\">        String url = getBaseUrl() + &quot;/subject/save&quot;;</span><br><span class=\"line\">        String result = template.postForObject(url, s, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"An-example-test-for-your-controller-can-be-something-as-simple-as\"><a href=\"#An-example-test-for-your-controller-can-be-something-as-simple-as\" class=\"headerlink\" title=\"An example test for your controller can be something as simple as\"></a>An example test for your controller can be something as simple as</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DemoApplicationTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    final String BASE_URL = &quot;http://localhost:8080/&quot;;</span><br><span class=\"line\">    private MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void setup() &#123;</span><br><span class=\"line\">        this.mockMvc = standaloneSetup(new HelloWorld()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\"><a href=\"#The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\" class=\"headerlink\" title=\"The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\"></a>The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.</h2><p>The test would look like so:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@WebMvcTest(HelloWorld.class)</span><br><span class=\"line\">public class UserVehicleControllerTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"还有一种方式是使用TestRestTemplate\"><a href=\"#还有一种方式是使用TestRestTemplate\" class=\"headerlink\" title=\"还有一种方式是使用TestRestTemplate\"></a>还有一种方式是使用TestRestTemplate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.boot.test.SpringApplicationConfiguration;</span><br><span class=\"line\">import org.springframework.boot.test.TestRestTemplate;</span><br><span class=\"line\">import org.springframework.boot.test.WebIntegrationTest;</span><br><span class=\"line\">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\">import org.springframework.web.client.RestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">import ipicture.service.post.AppServicePost;</span><br><span class=\"line\">import ipicture.service.post.model.JsonObject;</span><br><span class=\"line\">import ipicture.service.post.model.Subject;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\">@SpringApplicationConfiguration(classes = AppServicePost.class)</span><br><span class=\"line\">@WebIntegrationTest(&quot;server.port:8083&quot;)// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口</span><br><span class=\"line\">public class SubjectControllerTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RestTemplate template = new TestRestTemplate();</span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)// 注入端口号</span><br><span class=\"line\">    private int port;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String getBaseUrl() &#123;</span><br><span class=\"line\">        return &quot;http://localhost:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Test </span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        Subject s = new Subject();</span><br><span class=\"line\">        s.setCreator(1l);</span><br><span class=\"line\">        s.setCreated(new Date());</span><br><span class=\"line\">        s.setSubjectName(&quot;test5&quot;);</span><br><span class=\"line\">        s.setDescr(&quot;test subject&quot;);</span><br><span class=\"line\">        s.setDeleted(0);</span><br><span class=\"line\">        s.setParent_id(0);</span><br><span class=\"line\">        s.setStatus(0);</span><br><span class=\"line\">        s.setType(0);</span><br><span class=\"line\">        String url = getBaseUrl() + &quot;/subject/save&quot;;</span><br><span class=\"line\">        String result = template.postForObject(url, s, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"[api_version]4种在springmvc中进行api版本控制的处理方法","date":"2016-06-28T07:31:54.000Z","_content":"\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}","source":"_posts/api-version-4种在springmvc中进行api版本控制的处理方法.md","raw":"---\ntitle: '[api_version]4种在springmvc中进行api版本控制的处理方法'\ndate: 2016-06-28 15:31:54\ntags: [java, api_verion, spring mvc]\n---\n\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}","slug":"api-version-4种在springmvc中进行api版本控制的处理方法","published":1,"updated":"2016-06-30T15:56:59.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghhb000930ng18yhf093","content":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\" target=\"_blank\" rel=\"external\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\" target=\"_blank\" rel=\"external\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：<br>```<br>@Controller<br>@VersionedResource(media = “application/vnd.app.resource”)<br>public class TestController {</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “1.0”, to = “1.0”)<br> @ResponseBody<br> public Resource getResource_v1() {</p>\n<pre><code>return new Resource(&quot;1.0&quot;);\n</code></pre><p> }</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “2.0”)<br> @ResponseBody<br> public Resource getResource_v2_onwards() {</p>\n<pre><code>return new Resource(&quot;2.0&quot;);\n</code></pre><p> }<br>}</p>\n</li>\n</ol>\n","excerpt":"","more":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：<br>```<br>@Controller<br>@VersionedResource(media = “application/vnd.app.resource”)<br>public class TestController {</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “1.0”, to = “1.0”)<br> @ResponseBody<br> public Resource getResource_v1() {</p>\n<pre><code>return new Resource(&quot;1.0&quot;);\n</code></pre><p> }</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “2.0”)<br> @ResponseBody<br> public Resource getResource_v2_onwards() {</p>\n<pre><code>return new Resource(&quot;2.0&quot;);\n</code></pre><p> }<br>}</p>\n</li>\n</ol>\n","sticky":0},{"title":"centos6下安装配置mysql，并开启mysql的远程登录","date":"2016-04-25T13:00:38.000Z","_content":"\n\n## 安装：\n\n### 查看是否已安装mysql：\nyum list installed | grep mysql\n### 如果已安装，如下一次卸载：\nyum -y remove mysql-libs.x86_64\n### 查看可用mysql：\nyum list | grep mysql 或 yum -y list mysql*\n### 安装mysql：\nyum -y install mysql-server mysql mysql-devel\n### 查看已安装的mysql状态：\nrpm -qi mysql-server\n\n### 安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\nmysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n\n### 解决：方法操作很简单，如下：\n/etc/init.d/mysql stop\nmysqld_safe --user=mysql --skip-grant-tables --skip-networking &\nmysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('root') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n/etc/init.d/mysqld restart\nmysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n\n## 开启远程连接\n### 设置任意ip可以使用root账户和root密码远程登录\ngrant all privileges  on *.* to root@'%' identified by \"root\";\n### 刷新\nFLUSH PRIVILEGES;\n### 重启：\nservice mysqld restart\n\ndone！","source":"_posts/centos6下安装配置mysql，并开启mysql的远程登录.md","raw":"---\ntitle: centos6下安装配置mysql，并开启mysql的远程登录\ndate: 2016-04-25 21:00:38\ntags: [mysql, install, database]\n---\n\n\n## 安装：\n\n### 查看是否已安装mysql：\nyum list installed | grep mysql\n### 如果已安装，如下一次卸载：\nyum -y remove mysql-libs.x86_64\n### 查看可用mysql：\nyum list | grep mysql 或 yum -y list mysql*\n### 安装mysql：\nyum -y install mysql-server mysql mysql-devel\n### 查看已安装的mysql状态：\nrpm -qi mysql-server\n\n### 安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\nmysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n\n### 解决：方法操作很简单，如下：\n/etc/init.d/mysql stop\nmysqld_safe --user=mysql --skip-grant-tables --skip-networking &\nmysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('root') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n/etc/init.d/mysqld restart\nmysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n\n## 开启远程连接\n### 设置任意ip可以使用root账户和root密码远程登录\ngrant all privileges  on *.* to root@'%' identified by \"root\";\n### 刷新\nFLUSH PRIVILEGES;\n### 重启：\nservice mysqld restart\n\ndone！","slug":"centos6下安装配置mysql，并开启mysql的远程登录","published":1,"updated":"2016-04-25T13:04:16.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghhj000b30ngkww4dokw","content":"<h2 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h2><h3 id=\"查看是否已安装mysql：\"><a href=\"#查看是否已安装mysql：\" class=\"headerlink\" title=\"查看是否已安装mysql：\"></a>查看是否已安装mysql：</h3><p>yum list installed | grep mysql</p>\n<h3 id=\"如果已安装，如下一次卸载：\"><a href=\"#如果已安装，如下一次卸载：\" class=\"headerlink\" title=\"如果已安装，如下一次卸载：\"></a>如果已安装，如下一次卸载：</h3><p>yum -y remove mysql-libs.x86_64</p>\n<h3 id=\"查看可用mysql：\"><a href=\"#查看可用mysql：\" class=\"headerlink\" title=\"查看可用mysql：\"></a>查看可用mysql：</h3><p>yum list | grep mysql 或 yum -y list mysql*</p>\n<h3 id=\"安装mysql：\"><a href=\"#安装mysql：\" class=\"headerlink\" title=\"安装mysql：\"></a>安装mysql：</h3><p>yum -y install mysql-server mysql mysql-devel</p>\n<h3 id=\"查看已安装的mysql状态：\"><a href=\"#查看已安装的mysql状态：\" class=\"headerlink\" title=\"查看已安装的mysql状态：\"></a>查看已安装的mysql状态：</h3><p>rpm -qi mysql-server</p>\n<h3 id=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\"><a href=\"#安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\" class=\"headerlink\" title=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\"></a>安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:</h3><p>mysql -u root -p<br>Enter password:<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)</p>\n<h3 id=\"解决：方法操作很简单，如下：\"><a href=\"#解决：方法操作很简单，如下：\" class=\"headerlink\" title=\"解决：方法操作很简单，如下：\"></a>解决：方法操作很简单，如下：</h3><p>/etc/init.d/mysql stop<br>mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;<br>mysql -u root mysql<br>mysql&gt; UPDATE user SET Password=PASSWORD(‘root’) where USER=’root’ and host=’root’ or host=’localhost’;//把空的用户密码都修改成非空的密码就行了。<br>mysql&gt; FLUSH PRIVILEGES;<br>mysql&gt; quit<br>/etc/init.d/mysqld restart<br>mysql -uroot -p<br>Enter password: &lt;输入新设的密码newpassword&gt;</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"设置任意ip可以使用root账户和root密码远程登录\"><a href=\"#设置任意ip可以使用root账户和root密码远程登录\" class=\"headerlink\" title=\"设置任意ip可以使用root账户和root密码远程登录\"></a>设置任意ip可以使用root账户和root密码远程登录</h3><p>grant all privileges  on <em>.</em> to root@’%’ identified by “root”;</p>\n<h3 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h3><p>FLUSH PRIVILEGES;</p>\n<h3 id=\"重启：\"><a href=\"#重启：\" class=\"headerlink\" title=\"重启：\"></a>重启：</h3><p>service mysqld restart</p>\n<p>done！</p>\n","excerpt":"","more":"<h2 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h2><h3 id=\"查看是否已安装mysql：\"><a href=\"#查看是否已安装mysql：\" class=\"headerlink\" title=\"查看是否已安装mysql：\"></a>查看是否已安装mysql：</h3><p>yum list installed | grep mysql</p>\n<h3 id=\"如果已安装，如下一次卸载：\"><a href=\"#如果已安装，如下一次卸载：\" class=\"headerlink\" title=\"如果已安装，如下一次卸载：\"></a>如果已安装，如下一次卸载：</h3><p>yum -y remove mysql-libs.x86_64</p>\n<h3 id=\"查看可用mysql：\"><a href=\"#查看可用mysql：\" class=\"headerlink\" title=\"查看可用mysql：\"></a>查看可用mysql：</h3><p>yum list | grep mysql 或 yum -y list mysql*</p>\n<h3 id=\"安装mysql：\"><a href=\"#安装mysql：\" class=\"headerlink\" title=\"安装mysql：\"></a>安装mysql：</h3><p>yum -y install mysql-server mysql mysql-devel</p>\n<h3 id=\"查看已安装的mysql状态：\"><a href=\"#查看已安装的mysql状态：\" class=\"headerlink\" title=\"查看已安装的mysql状态：\"></a>查看已安装的mysql状态：</h3><p>rpm -qi mysql-server</p>\n<h3 id=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\"><a href=\"#安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\" class=\"headerlink\" title=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\"></a>安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:</h3><p>mysql -u root -p<br>Enter password:<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)</p>\n<h3 id=\"解决：方法操作很简单，如下：\"><a href=\"#解决：方法操作很简单，如下：\" class=\"headerlink\" title=\"解决：方法操作很简单，如下：\"></a>解决：方法操作很简单，如下：</h3><p>/etc/init.d/mysql stop<br>mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;<br>mysql -u root mysql<br>mysql&gt; UPDATE user SET Password=PASSWORD(‘root’) where USER=’root’ and host=’root’ or host=’localhost’;//把空的用户密码都修改成非空的密码就行了。<br>mysql&gt; FLUSH PRIVILEGES;<br>mysql&gt; quit<br>/etc/init.d/mysqld restart<br>mysql -uroot -p<br>Enter password: &lt;输入新设的密码newpassword&gt;</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"设置任意ip可以使用root账户和root密码远程登录\"><a href=\"#设置任意ip可以使用root账户和root密码远程登录\" class=\"headerlink\" title=\"设置任意ip可以使用root账户和root密码远程登录\"></a>设置任意ip可以使用root账户和root密码远程登录</h3><p>grant all privileges  on <em>.</em> to root@’%’ identified by “root”;</p>\n<h3 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h3><p>FLUSH PRIVILEGES;</p>\n<h3 id=\"重启：\"><a href=\"#重启：\" class=\"headerlink\" title=\"重启：\"></a>重启：</h3><p>service mysqld restart</p>\n<p>done！</p>\n","sticky":0},{"title":"centos6环境下配置mysql主从同步","date":"2016-04-25T13:22:51.000Z","_content":"\n## 1、主从服务器分别作以下操作：\n  1.1、版本一致\n  1.2、初始化表，并在后台启动mysql\n  1.3、修改root的密码\n\n## 2、修改主服务器master:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[必须]启用二进制日志\n       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 3、修改从服务器slave:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[不是必须]启用二进制日志\n       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 4、重启两台服务器的mysql\n    /etc/init.d/mysql restart\n    or：\n    service mysqld restart\n\n## 5、在主服务器上建立帐户并授权slave:\n  #mysql -uroot -proot\n   mysql>GRANT REPLICATION SLAVE ON *.* to 'mysync'@'%' identified by 'root'; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。\n\n## 6、登录主服务器的mysql，查询master的状态\n   mysql>show master status;\n   +------------------+----------+--------------+------------------+\n   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n   +------------------+----------+--------------+------------------+\n   | mysql-bin.000004 |      308 |              |                  |\n   +------------------+----------+--------------+------------------+\n   1 row in set (0.00 sec)\n   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化\n\n## 7、配置从服务器Slave：\n   mysql>change master to master_host='192.168.145.222',master_user='mysync',master_password='root', master_log_file='mysql-bin.000004',master_log_pos=308;   //注意不要断开，308数字前后无单引号。\n\n   Mysql>start slave;    //启动从服务器复制功能\n\n## 8、检查从服务器复制功能状态：\n\n   mysql> show slave status\\G\n\n   *************************** 1. row ***************************\n\n              Slave_IO_State: Waiting for master to send event\n              Master_Host: 192.168.2.222  //主服务器地址\n              Master_User: mysync   //授权帐户名，尽量避免使用root\n              Master_Port: 3306    //数据库端口，部分版本没有此行\n              Connect_Retry: 60\n              Master_Log_File: mysql-bin.000004\n              Read_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\n              Relay_Log_File: ddte-relay-bin.000003\n              Relay_Log_Pos: 251\n              Relay_Master_Log_File: mysql-bin.000004\n              Slave_IO_Running: Yes    //此状态必须YES\n              Slave_SQL_Running: Yes     //此状态必须YES\n                    ......\n\n注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。\n\n以上操作过程，主从服务器配置完成。\n","source":"_posts/centos6环境下配置mysql主从同步.md","raw":"---\ntitle: centos6环境下配置mysql主从同步\ndate: 2016-04-25 21:22:51\ntags: [mysql,database,数据库,主从同步,master-slave]\n---\n\n## 1、主从服务器分别作以下操作：\n  1.1、版本一致\n  1.2、初始化表，并在后台启动mysql\n  1.3、修改root的密码\n\n## 2、修改主服务器master:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[必须]启用二进制日志\n       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 3、修改从服务器slave:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[不是必须]启用二进制日志\n       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 4、重启两台服务器的mysql\n    /etc/init.d/mysql restart\n    or：\n    service mysqld restart\n\n## 5、在主服务器上建立帐户并授权slave:\n  #mysql -uroot -proot\n   mysql>GRANT REPLICATION SLAVE ON *.* to 'mysync'@'%' identified by 'root'; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。\n\n## 6、登录主服务器的mysql，查询master的状态\n   mysql>show master status;\n   +------------------+----------+--------------+------------------+\n   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n   +------------------+----------+--------------+------------------+\n   | mysql-bin.000004 |      308 |              |                  |\n   +------------------+----------+--------------+------------------+\n   1 row in set (0.00 sec)\n   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化\n\n## 7、配置从服务器Slave：\n   mysql>change master to master_host='192.168.145.222',master_user='mysync',master_password='root', master_log_file='mysql-bin.000004',master_log_pos=308;   //注意不要断开，308数字前后无单引号。\n\n   Mysql>start slave;    //启动从服务器复制功能\n\n## 8、检查从服务器复制功能状态：\n\n   mysql> show slave status\\G\n\n   *************************** 1. row ***************************\n\n              Slave_IO_State: Waiting for master to send event\n              Master_Host: 192.168.2.222  //主服务器地址\n              Master_User: mysync   //授权帐户名，尽量避免使用root\n              Master_Port: 3306    //数据库端口，部分版本没有此行\n              Connect_Retry: 60\n              Master_Log_File: mysql-bin.000004\n              Read_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\n              Relay_Log_File: ddte-relay-bin.000003\n              Relay_Log_Pos: 251\n              Relay_Master_Log_File: mysql-bin.000004\n              Slave_IO_Running: Yes    //此状态必须YES\n              Slave_SQL_Running: Yes     //此状态必须YES\n                    ......\n\n注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。\n\n以上操作过程，主从服务器配置完成。\n","slug":"centos6环境下配置mysql主从同步","published":1,"updated":"2016-04-25T13:25:33.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghhm000c30ngqxu0cazg","content":"<h2 id=\"1、主从服务器分别作以下操作：\"><a href=\"#1、主从服务器分别作以下操作：\" class=\"headerlink\" title=\"1、主从服务器分别作以下操作：\"></a>1、主从服务器分别作以下操作：</h2><p>  1.1、版本一致<br>  1.2、初始化表，并在后台启动mysql<br>  1.3、修改root的密码</p>\n<h2 id=\"2、修改主服务器master\"><a href=\"#2、修改主服务器master\" class=\"headerlink\" title=\"2、修改主服务器master:\"></a>2、修改主服务器master:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[必须]启用二进制日志<br>       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"3、修改从服务器slave\"><a href=\"#3、修改从服务器slave\" class=\"headerlink\" title=\"3、修改从服务器slave:\"></a>3、修改从服务器slave:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[不是必须]启用二进制日志<br>       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"4、重启两台服务器的mysql\"><a href=\"#4、重启两台服务器的mysql\" class=\"headerlink\" title=\"4、重启两台服务器的mysql\"></a>4、重启两台服务器的mysql</h2><pre><code>/etc/init.d/mysql restart\nor：\nservice mysqld restart\n</code></pre><h2 id=\"5、在主服务器上建立帐户并授权slave\"><a href=\"#5、在主服务器上建立帐户并授权slave\" class=\"headerlink\" title=\"5、在主服务器上建立帐户并授权slave:\"></a>5、在主服务器上建立帐户并授权slave:</h2><p>  #mysql -uroot -proot<br>   mysql&gt;GRANT REPLICATION SLAVE ON <em>.</em> to ‘mysync’@’%’ identified by ‘root’; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。</p>\n<h2 id=\"6、登录主服务器的mysql，查询master的状态\"><a href=\"#6、登录主服务器的mysql，查询master的状态\" class=\"headerlink\" title=\"6、登录主服务器的mysql，查询master的状态\"></a>6、登录主服务器的mysql，查询master的状态</h2><p>   mysql&gt;show master status;<br>   +——————+———-+————–+——————+<br>   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |<br>   +——————+———-+————–+——————+<br>   | mysql-bin.000004 |      308 |              |                  |<br>   +——————+———-+————–+——————+<br>   1 row in set (0.00 sec)<br>   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p>\n<h2 id=\"7、配置从服务器Slave：\"><a href=\"#7、配置从服务器Slave：\" class=\"headerlink\" title=\"7、配置从服务器Slave：\"></a>7、配置从服务器Slave：</h2><p>   mysql&gt;change master to master_host=’192.168.145.222’,master_user=’mysync’,master_password=’root’, master_log_file=’mysql-bin.000004’,master_log_pos=308;   //注意不要断开，308数字前后无单引号。</p>\n<p>   Mysql&gt;start slave;    //启动从服务器复制功能</p>\n<h2 id=\"8、检查从服务器复制功能状态：\"><a href=\"#8、检查从服务器复制功能状态：\" class=\"headerlink\" title=\"8、检查从服务器复制功能状态：\"></a>8、检查从服务器复制功能状态：</h2><p>   mysql&gt; show slave status\\G</p>\n<p>   <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong> 1. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></p>\n<pre><code>Slave_IO_State: Waiting for master to send event\nMaster_Host: 192.168.2.222  //主服务器地址\nMaster_User: mysync   //授权帐户名，尽量避免使用root\nMaster_Port: 3306    //数据库端口，部分版本没有此行\nConnect_Retry: 60\nMaster_Log_File: mysql-bin.000004\nRead_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\nRelay_Log_File: ddte-relay-bin.000003\nRelay_Log_Pos: 251\nRelay_Master_Log_File: mysql-bin.000004\nSlave_IO_Running: Yes    //此状态必须YES\nSlave_SQL_Running: Yes     //此状态必须YES\n      ......\n</code></pre><p>注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。</p>\n<p>以上操作过程，主从服务器配置完成。</p>\n","excerpt":"","more":"<h2 id=\"1、主从服务器分别作以下操作：\"><a href=\"#1、主从服务器分别作以下操作：\" class=\"headerlink\" title=\"1、主从服务器分别作以下操作：\"></a>1、主从服务器分别作以下操作：</h2><p>  1.1、版本一致<br>  1.2、初始化表，并在后台启动mysql<br>  1.3、修改root的密码</p>\n<h2 id=\"2、修改主服务器master\"><a href=\"#2、修改主服务器master\" class=\"headerlink\" title=\"2、修改主服务器master:\"></a>2、修改主服务器master:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[必须]启用二进制日志<br>       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"3、修改从服务器slave\"><a href=\"#3、修改从服务器slave\" class=\"headerlink\" title=\"3、修改从服务器slave:\"></a>3、修改从服务器slave:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[不是必须]启用二进制日志<br>       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"4、重启两台服务器的mysql\"><a href=\"#4、重启两台服务器的mysql\" class=\"headerlink\" title=\"4、重启两台服务器的mysql\"></a>4、重启两台服务器的mysql</h2><pre><code>/etc/init.d/mysql restart\nor：\nservice mysqld restart\n</code></pre><h2 id=\"5、在主服务器上建立帐户并授权slave\"><a href=\"#5、在主服务器上建立帐户并授权slave\" class=\"headerlink\" title=\"5、在主服务器上建立帐户并授权slave:\"></a>5、在主服务器上建立帐户并授权slave:</h2><p>  #mysql -uroot -proot<br>   mysql&gt;GRANT REPLICATION SLAVE ON <em>.</em> to ‘mysync’@’%’ identified by ‘root’; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。</p>\n<h2 id=\"6、登录主服务器的mysql，查询master的状态\"><a href=\"#6、登录主服务器的mysql，查询master的状态\" class=\"headerlink\" title=\"6、登录主服务器的mysql，查询master的状态\"></a>6、登录主服务器的mysql，查询master的状态</h2><p>   mysql&gt;show master status;<br>   +——————+———-+————–+——————+<br>   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |<br>   +——————+———-+————–+——————+<br>   | mysql-bin.000004 |      308 |              |                  |<br>   +——————+———-+————–+——————+<br>   1 row in set (0.00 sec)<br>   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p>\n<h2 id=\"7、配置从服务器Slave：\"><a href=\"#7、配置从服务器Slave：\" class=\"headerlink\" title=\"7、配置从服务器Slave：\"></a>7、配置从服务器Slave：</h2><p>   mysql&gt;change master to master_host=’192.168.145.222’,master_user=’mysync’,master_password=’root’, master_log_file=’mysql-bin.000004’,master_log_pos=308;   //注意不要断开，308数字前后无单引号。</p>\n<p>   Mysql&gt;start slave;    //启动从服务器复制功能</p>\n<h2 id=\"8、检查从服务器复制功能状态：\"><a href=\"#8、检查从服务器复制功能状态：\" class=\"headerlink\" title=\"8、检查从服务器复制功能状态：\"></a>8、检查从服务器复制功能状态：</h2><p>   mysql&gt; show slave status\\G</p>\n<p>   <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong> 1. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></p>\n<pre><code>Slave_IO_State: Waiting for master to send event\nMaster_Host: 192.168.2.222  //主服务器地址\nMaster_User: mysync   //授权帐户名，尽量避免使用root\nMaster_Port: 3306    //数据库端口，部分版本没有此行\nConnect_Retry: 60\nMaster_Log_File: mysql-bin.000004\nRead_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\nRelay_Log_File: ddte-relay-bin.000003\nRelay_Log_Pos: 251\nRelay_Master_Log_File: mysql-bin.000004\nSlave_IO_Running: Yes    //此状态必须YES\nSlave_SQL_Running: Yes     //此状态必须YES\n      ......\n</code></pre><p>注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。</p>\n<p>以上操作过程，主从服务器配置完成。</p>\n","sticky":0},{"title":"Windows下开启React-Native征途","date":"2016-06-04T01:55:48.000Z","_content":"\n我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。\n不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。\n\n以下是过程：\n## 1. 安装Nodejs\n\nReact Native要求是4.0以上。\n\n## 2. 安装react-native-cli\n\n```\nnpm install -g react-native-cli\n```\n\n## 3. 初始化第一个项目\n```\nreact-native init TestProject\n```\n初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。\n\n## 4. 设置环境变量\n\n设置环境变量ANDROID_HOME指向Android SDK的目录\neg:\n![](/images/react-001.png)\n\n\n## 5. 安装Genymotion模拟器\n\nGenymotion官网下载安装Genymotion模拟器，并创建Android emulator。\n创建实例后，将得到如下画面：\n![](/images/react-002.png)\nGenymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。\n安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。\n设置VirtualBox\n![](/images/react-003.png)\n设置sdk\n![](/images/react-004.png)\n\n配置好后，就把模拟的Android实例启动起来放着吧。\n\n\n## 6. 启动\n\n### 1-启动React Native Server\n```\nreact-native start\n```\n![](/images/react-005.png)\n\n### 2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\n```\ncd android\ngradlew.bat installDebug\n```\n执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。\n![](/images/react-006.png)\n安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。\n![](/images/react-007.png)\n\nWindows下的React Native开发环境搭建 -- done.","source":"_posts/Windows下开启React-Native征途.md","raw":"---\ntitle: Windows下开启React-Native征途\ndate: 2016-06-04 09:55:48\ntags: [react, react-native, nodejs, android, windows]\n---\n\n我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。\n不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。\n\n以下是过程：\n## 1. 安装Nodejs\n\nReact Native要求是4.0以上。\n\n## 2. 安装react-native-cli\n\n```\nnpm install -g react-native-cli\n```\n\n## 3. 初始化第一个项目\n```\nreact-native init TestProject\n```\n初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。\n\n## 4. 设置环境变量\n\n设置环境变量ANDROID_HOME指向Android SDK的目录\neg:\n![](/images/react-001.png)\n\n\n## 5. 安装Genymotion模拟器\n\nGenymotion官网下载安装Genymotion模拟器，并创建Android emulator。\n创建实例后，将得到如下画面：\n![](/images/react-002.png)\nGenymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。\n安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。\n设置VirtualBox\n![](/images/react-003.png)\n设置sdk\n![](/images/react-004.png)\n\n配置好后，就把模拟的Android实例启动起来放着吧。\n\n\n## 6. 启动\n\n### 1-启动React Native Server\n```\nreact-native start\n```\n![](/images/react-005.png)\n\n### 2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\n```\ncd android\ngradlew.bat installDebug\n```\n执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。\n![](/images/react-006.png)\n安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。\n![](/images/react-007.png)\n\nWindows下的React Native开发环境搭建 -- done.","slug":"Windows下开启React-Native征途","published":1,"updated":"2016-06-04T02:26:01.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghhp000e30ngapgch7n4","content":"<p>我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。<br>不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。</p>\n<p>以下是过程：</p>\n<h2 id=\"1-安装Nodejs\"><a href=\"#1-安装Nodejs\" class=\"headerlink\" title=\"1. 安装Nodejs\"></a>1. 安装Nodejs</h2><p>React Native要求是4.0以上。</p>\n<h2 id=\"2-安装react-native-cli\"><a href=\"#2-安装react-native-cli\" class=\"headerlink\" title=\"2. 安装react-native-cli\"></a>2. 安装react-native-cli</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化第一个项目\"><a href=\"#3-初始化第一个项目\" class=\"headerlink\" title=\"3. 初始化第一个项目\"></a>3. 初始化第一个项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init TestProject</span><br></pre></td></tr></table></figure>\n<p>初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。</p>\n<h2 id=\"4-设置环境变量\"><a href=\"#4-设置环境变量\" class=\"headerlink\" title=\"4. 设置环境变量\"></a>4. 设置环境变量</h2><p>设置环境变量ANDROID_HOME指向Android SDK的目录<br>eg:<br><img src=\"/images/react-001.png\" alt=\"\"></p>\n<h2 id=\"5-安装Genymotion模拟器\"><a href=\"#5-安装Genymotion模拟器\" class=\"headerlink\" title=\"5. 安装Genymotion模拟器\"></a>5. 安装Genymotion模拟器</h2><p>Genymotion官网下载安装Genymotion模拟器，并创建Android emulator。<br>创建实例后，将得到如下画面：<br><img src=\"/images/react-002.png\" alt=\"\"><br>Genymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。<br>安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。<br>设置VirtualBox<br><img src=\"/images/react-003.png\" alt=\"\"><br>设置sdk<br><img src=\"/images/react-004.png\" alt=\"\"></p>\n<p>配置好后，就把模拟的Android实例启动起来放着吧。</p>\n<h2 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6. 启动\"></a>6. 启动</h2><h3 id=\"1-启动React-Native-Server\"><a href=\"#1-启动React-Native-Server\" class=\"headerlink\" title=\"1-启动React Native Server\"></a>1-启动React Native Server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/react-005.png\" alt=\"\"></p>\n<h3 id=\"2-开一个新的命令行终端-cmd-切换到项目目录安装APP\"><a href=\"#2-开一个新的命令行终端-cmd-切换到项目目录安装APP\" class=\"headerlink\" title=\"2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\"></a>2-开一个新的命令行终端(cmd), 切换到项目目录安装APP</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd android</span><br><span class=\"line\">gradlew.bat installDebug</span><br></pre></td></tr></table></figure>\n<p>执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。<br><img src=\"/images/react-006.png\" alt=\"\"><br>安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。<br><img src=\"/images/react-007.png\" alt=\"\"></p>\n<p>Windows下的React Native开发环境搭建 – done.</p>\n","excerpt":"","more":"<p>我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。<br>不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。</p>\n<p>以下是过程：</p>\n<h2 id=\"1-安装Nodejs\"><a href=\"#1-安装Nodejs\" class=\"headerlink\" title=\"1. 安装Nodejs\"></a>1. 安装Nodejs</h2><p>React Native要求是4.0以上。</p>\n<h2 id=\"2-安装react-native-cli\"><a href=\"#2-安装react-native-cli\" class=\"headerlink\" title=\"2. 安装react-native-cli\"></a>2. 安装react-native-cli</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化第一个项目\"><a href=\"#3-初始化第一个项目\" class=\"headerlink\" title=\"3. 初始化第一个项目\"></a>3. 初始化第一个项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init TestProject</span><br></pre></td></tr></table></figure>\n<p>初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。</p>\n<h2 id=\"4-设置环境变量\"><a href=\"#4-设置环境变量\" class=\"headerlink\" title=\"4. 设置环境变量\"></a>4. 设置环境变量</h2><p>设置环境变量ANDROID_HOME指向Android SDK的目录<br>eg:<br><img src=\"/images/react-001.png\" alt=\"\"></p>\n<h2 id=\"5-安装Genymotion模拟器\"><a href=\"#5-安装Genymotion模拟器\" class=\"headerlink\" title=\"5. 安装Genymotion模拟器\"></a>5. 安装Genymotion模拟器</h2><p>Genymotion官网下载安装Genymotion模拟器，并创建Android emulator。<br>创建实例后，将得到如下画面：<br><img src=\"/images/react-002.png\" alt=\"\"><br>Genymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。<br>安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。<br>设置VirtualBox<br><img src=\"/images/react-003.png\" alt=\"\"><br>设置sdk<br><img src=\"/images/react-004.png\" alt=\"\"></p>\n<p>配置好后，就把模拟的Android实例启动起来放着吧。</p>\n<h2 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6. 启动\"></a>6. 启动</h2><h3 id=\"1-启动React-Native-Server\"><a href=\"#1-启动React-Native-Server\" class=\"headerlink\" title=\"1-启动React Native Server\"></a>1-启动React Native Server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/react-005.png\" alt=\"\"></p>\n<h3 id=\"2-开一个新的命令行终端-cmd-切换到项目目录安装APP\"><a href=\"#2-开一个新的命令行终端-cmd-切换到项目目录安装APP\" class=\"headerlink\" title=\"2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\"></a>2-开一个新的命令行终端(cmd), 切换到项目目录安装APP</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd android</span><br><span class=\"line\">gradlew.bat installDebug</span><br></pre></td></tr></table></figure>\n<p>执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。<br><img src=\"/images/react-006.png\" alt=\"\"><br>安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。<br><img src=\"/images/react-007.png\" alt=\"\"></p>\n<p>Windows下的React Native开发环境搭建 – done.</p>\n","sticky":0},{"title":"Transform objects with guava(使用Guava库转换对象)","date":"2016-07-23T05:03:29.000Z","_content":"\n# Transform objects with guava\n\nAll the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.\n```\nFunction<String, Integer> lengthFunction = new Function<String, Integer>() {\n  public Integer apply(String string) {\n    return string.length();\n  }\n};\n```\n\n\n## Convert string to Enum\n\n\n\nI have seeded some data so we can get right to the examples and you don't have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.\n\nTaking a look at the Day enum we created, it is a simple class that represents the days of the week:\n```\npublic enum Day {\n\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY;   \n}\n```\nWe may have a list of strings with various strings representing days, Wednesday, Sunday, Monday... What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.\n```\n@Test\npublic void transform_string_to_enum () {\n    \n    List<String> days = Lists.newArrayList(\n            \"WEDNESDAY\", \n            \"SUNDAY\", \n            \"MONDAY\", \n            \"WEDNESDAY\");\n    \n    Function<String, Day> stringToDayEnum = Enums.stringConverter(Day.class);\n    \n    Iterable<Day> daysAsEnum = Iterables.transform(days, stringToDayEnum);\n    \n    for (Day day : daysAsEnum) {\n        System.out.println(day);\n    }\n}\n```\nOutput\n```\nWEDNESDAY\nSUNDAY\nMONDAY\nWEDNESDAY\n```\n\n\n\n## Convert from one object to another\n\nThe next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.\n```\npublic class ETradeInvestment {\n    \n    private String key;\n    private String name;\n    private BigDecimal price;\n\n    ...\n}\n\npublic class TdAmeritradeInvestment {\n    \n    private int investmentKey;\n    private String investmentName;\n    private double investmentPrice;\n\n    ...\n}\n```\nThere is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don't have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <F, T> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.\n\nIf we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don't own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.\n```\n@Test\npublic void convert_tdinvestment_etradeinvestment () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    // convert a list of objects\n    Function<TdAmeritradeInvestment, ETradeInvestment> tdToEtradeFunction = new Function<TdAmeritradeInvestment, ETradeInvestment>() {\n\n        public ETradeInvestment apply(TdAmeritradeInvestment input) {\n            ETradeInvestment investment = new ETradeInvestment();\n            investment.setKey(Ints.stringConverter().reverse()\n                    .convert(input.getInvestmentKey()));\n            investment.setName(input.getInvestmentName());\n            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));\n            return investment;\n        }\n    };\n\n    List<ETradeInvestment> etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);\n    \n    System.out.println(etradeInvestments);\n}\n```\nOutput\n```\n[\nETradeInvestment{key=555, name=Facebook Inc, price=57.50},\nETradeInvestment{key=123, name=Micron Technology, Inc., price=21.28}, \nETradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \nETradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.60}\n]\n```\n\n\n\n## Convert an object\n\nIf you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.\n\nETradeInvestment faceBookInvestment = tdToEtradeFunction\n                .apply(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\nOutput\n```\nETradeInvestment{key=555, name=Facebook Inc, price=57.50}\n```\n\n\n\n## Convert list to map\n\nOne other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.\n```\n@Test\npublic void transform_list_to_map () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    ImmutableMap<Integer, TdAmeritradeInvestment> investmentMap = Maps\n            .uniqueIndex(tdInvestments,\n                    new Function<TdAmeritradeInvestment, Integer>() {\n\n                        public Integer apply(TdAmeritradeInvestment input) {\n                            return new Integer(input.getInvestmentKey());\n                        }\n                    });\n    \n    System.out.println(investmentMap);\n    \n}\n````\nOutput\n```\n{\n555=TdAmeritradeInvestment{key=555, name=Facebook Inc, price=57.51}, \n123=TdAmeritradeInvestment{key=123, name=Micron Technology, Inc., price=21.29}, \n456=TdAmeritradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \n236=TdAmeritradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.6}\n}\n```\n\n原地址：http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/","source":"_posts/Transform-objects-with-guava-使用Guava库转换对象.md","raw":"---\ntitle: Transform objects with guava(使用Guava库转换对象)\ndate: 2016-07-23 13:03:29\ntags: [java, guava, transform objects, convert, 对象转换]\n---\n\n# Transform objects with guava\n\nAll the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.\n```\nFunction<String, Integer> lengthFunction = new Function<String, Integer>() {\n  public Integer apply(String string) {\n    return string.length();\n  }\n};\n```\n\n\n## Convert string to Enum\n\n\n\nI have seeded some data so we can get right to the examples and you don't have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.\n\nTaking a look at the Day enum we created, it is a simple class that represents the days of the week:\n```\npublic enum Day {\n\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY;   \n}\n```\nWe may have a list of strings with various strings representing days, Wednesday, Sunday, Monday... What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.\n```\n@Test\npublic void transform_string_to_enum () {\n    \n    List<String> days = Lists.newArrayList(\n            \"WEDNESDAY\", \n            \"SUNDAY\", \n            \"MONDAY\", \n            \"WEDNESDAY\");\n    \n    Function<String, Day> stringToDayEnum = Enums.stringConverter(Day.class);\n    \n    Iterable<Day> daysAsEnum = Iterables.transform(days, stringToDayEnum);\n    \n    for (Day day : daysAsEnum) {\n        System.out.println(day);\n    }\n}\n```\nOutput\n```\nWEDNESDAY\nSUNDAY\nMONDAY\nWEDNESDAY\n```\n\n\n\n## Convert from one object to another\n\nThe next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.\n```\npublic class ETradeInvestment {\n    \n    private String key;\n    private String name;\n    private BigDecimal price;\n\n    ...\n}\n\npublic class TdAmeritradeInvestment {\n    \n    private int investmentKey;\n    private String investmentName;\n    private double investmentPrice;\n\n    ...\n}\n```\nThere is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don't have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <F, T> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.\n\nIf we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don't own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.\n```\n@Test\npublic void convert_tdinvestment_etradeinvestment () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    // convert a list of objects\n    Function<TdAmeritradeInvestment, ETradeInvestment> tdToEtradeFunction = new Function<TdAmeritradeInvestment, ETradeInvestment>() {\n\n        public ETradeInvestment apply(TdAmeritradeInvestment input) {\n            ETradeInvestment investment = new ETradeInvestment();\n            investment.setKey(Ints.stringConverter().reverse()\n                    .convert(input.getInvestmentKey()));\n            investment.setName(input.getInvestmentName());\n            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));\n            return investment;\n        }\n    };\n\n    List<ETradeInvestment> etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);\n    \n    System.out.println(etradeInvestments);\n}\n```\nOutput\n```\n[\nETradeInvestment{key=555, name=Facebook Inc, price=57.50},\nETradeInvestment{key=123, name=Micron Technology, Inc., price=21.28}, \nETradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \nETradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.60}\n]\n```\n\n\n\n## Convert an object\n\nIf you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.\n\nETradeInvestment faceBookInvestment = tdToEtradeFunction\n                .apply(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\nOutput\n```\nETradeInvestment{key=555, name=Facebook Inc, price=57.50}\n```\n\n\n\n## Convert list to map\n\nOne other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.\n```\n@Test\npublic void transform_list_to_map () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    ImmutableMap<Integer, TdAmeritradeInvestment> investmentMap = Maps\n            .uniqueIndex(tdInvestments,\n                    new Function<TdAmeritradeInvestment, Integer>() {\n\n                        public Integer apply(TdAmeritradeInvestment input) {\n                            return new Integer(input.getInvestmentKey());\n                        }\n                    });\n    \n    System.out.println(investmentMap);\n    \n}\n````\nOutput\n```\n{\n555=TdAmeritradeInvestment{key=555, name=Facebook Inc, price=57.51}, \n123=TdAmeritradeInvestment{key=123, name=Micron Technology, Inc., price=21.29}, \n456=TdAmeritradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \n236=TdAmeritradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.6}\n}\n```\n\n原地址：http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/","slug":"Transform-objects-with-guava-使用Guava库转换对象","published":1,"updated":"2016-07-23T05:07:00.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghhq000f30ngkcxeh9fl","content":"<h1 id=\"Transform-objects-with-guava\"><a href=\"#Transform-objects-with-guava\" class=\"headerlink\" title=\"Transform objects with guava\"></a>Transform objects with guava</h1><p>All the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;String, Integer&gt; lengthFunction = new Function&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">  public Integer apply(String string) &#123;</span><br><span class=\"line\">    return string.length();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-string-to-Enum\"><a href=\"#Convert-string-to-Enum\" class=\"headerlink\" title=\"Convert string to Enum\"></a>Convert string to Enum</h2><p>I have seeded some data so we can get right to the examples and you don’t have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.</p>\n<p>Taking a look at the Day enum we created, it is a simple class that represents the days of the week:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Day &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,</span><br><span class=\"line\">    THURSDAY, FRIDAY, SATURDAY;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We may have a list of strings with various strings representing days, Wednesday, Sunday, Monday… What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_string_to_enum () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;String&gt; days = Lists.newArrayList(</span><br><span class=\"line\">            &quot;WEDNESDAY&quot;, </span><br><span class=\"line\">            &quot;SUNDAY&quot;, </span><br><span class=\"line\">            &quot;MONDAY&quot;, </span><br><span class=\"line\">            &quot;WEDNESDAY&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Function&lt;String, Day&gt; stringToDayEnum = Enums.stringConverter(Day.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Iterable&lt;Day&gt; daysAsEnum = Iterables.transform(days, stringToDayEnum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for (Day day : daysAsEnum) &#123;</span><br><span class=\"line\">        System.out.println(day);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEDNESDAY</span><br><span class=\"line\">SUNDAY</span><br><span class=\"line\">MONDAY</span><br><span class=\"line\">WEDNESDAY</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-from-one-object-to-another\"><a href=\"#Convert-from-one-object-to-another\" class=\"headerlink\" title=\"Convert from one object to another\"></a>Convert from one object to another</h2><p>The next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ETradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String key;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private BigDecimal price;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TdAmeritradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private int investmentKey;</span><br><span class=\"line\">    private String investmentName;</span><br><span class=\"line\">    private double investmentPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don’t have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <f, t=\"\"> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.</f,></p>\n<p>If we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don’t own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void convert_tdinvestment_etradeinvestment () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // convert a list of objects</span><br><span class=\"line\">    Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt; tdToEtradeFunction = new Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ETradeInvestment apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">            ETradeInvestment investment = new ETradeInvestment();</span><br><span class=\"line\">            investment.setKey(Ints.stringConverter().reverse()</span><br><span class=\"line\">                    .convert(input.getInvestmentKey()));</span><br><span class=\"line\">            investment.setName(input.getInvestmentName());</span><br><span class=\"line\">            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));</span><br><span class=\"line\">            return investment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;ETradeInvestment&gt; etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(etradeInvestments);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;,</span><br><span class=\"line\">ETradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.28&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.60&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-an-object\"><a href=\"#Convert-an-object\" class=\"headerlink\" title=\"Convert an object\"></a>Convert an object</h2><p>If you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.</p>\n<p>ETradeInvestment faceBookInvestment = tdToEtradeFunction<br>                .apply(new TdAmeritradeInvestment(555, “Facebook Inc”, 57.51));<br>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-list-to-map\"><a href=\"#Convert-list-to-map\" class=\"headerlink\" title=\"Convert list to map\"></a>Convert list to map</h2><p>One other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_list_to_map () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    ImmutableMap&lt;Integer, TdAmeritradeInvestment&gt; investmentMap = Maps</span><br><span class=\"line\">            .uniqueIndex(tdInvestments,</span><br><span class=\"line\">                    new Function&lt;TdAmeritradeInvestment, Integer&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        public Integer apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">                            return new Integer(input.getInvestmentKey());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(investmentMap);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">555=TdAmeritradeInvestment&#123;key=555, name=Facebook Inc, price=57.51&#125;, </span><br><span class=\"line\">123=TdAmeritradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.29&#125;, </span><br><span class=\"line\">456=TdAmeritradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">236=TdAmeritradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.6&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原地址：<a href=\"http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/\" target=\"_blank\" rel=\"external\">http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/</a></p>\n","excerpt":"","more":"<h1 id=\"Transform-objects-with-guava\"><a href=\"#Transform-objects-with-guava\" class=\"headerlink\" title=\"Transform objects with guava\"></a>Transform objects with guava</h1><p>All the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;String, Integer&gt; lengthFunction = new Function&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">  public Integer apply(String string) &#123;</span><br><span class=\"line\">    return string.length();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-string-to-Enum\"><a href=\"#Convert-string-to-Enum\" class=\"headerlink\" title=\"Convert string to Enum\"></a>Convert string to Enum</h2><p>I have seeded some data so we can get right to the examples and you don’t have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.</p>\n<p>Taking a look at the Day enum we created, it is a simple class that represents the days of the week:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Day &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,</span><br><span class=\"line\">    THURSDAY, FRIDAY, SATURDAY;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We may have a list of strings with various strings representing days, Wednesday, Sunday, Monday… What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_string_to_enum () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;String&gt; days = Lists.newArrayList(</span><br><span class=\"line\">            &quot;WEDNESDAY&quot;, </span><br><span class=\"line\">            &quot;SUNDAY&quot;, </span><br><span class=\"line\">            &quot;MONDAY&quot;, </span><br><span class=\"line\">            &quot;WEDNESDAY&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Function&lt;String, Day&gt; stringToDayEnum = Enums.stringConverter(Day.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Iterable&lt;Day&gt; daysAsEnum = Iterables.transform(days, stringToDayEnum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for (Day day : daysAsEnum) &#123;</span><br><span class=\"line\">        System.out.println(day);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEDNESDAY</span><br><span class=\"line\">SUNDAY</span><br><span class=\"line\">MONDAY</span><br><span class=\"line\">WEDNESDAY</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-from-one-object-to-another\"><a href=\"#Convert-from-one-object-to-another\" class=\"headerlink\" title=\"Convert from one object to another\"></a>Convert from one object to another</h2><p>The next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ETradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String key;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private BigDecimal price;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TdAmeritradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private int investmentKey;</span><br><span class=\"line\">    private String investmentName;</span><br><span class=\"line\">    private double investmentPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don’t have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <F, T> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.</p>\n<p>If we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don’t own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void convert_tdinvestment_etradeinvestment () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // convert a list of objects</span><br><span class=\"line\">    Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt; tdToEtradeFunction = new Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ETradeInvestment apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">            ETradeInvestment investment = new ETradeInvestment();</span><br><span class=\"line\">            investment.setKey(Ints.stringConverter().reverse()</span><br><span class=\"line\">                    .convert(input.getInvestmentKey()));</span><br><span class=\"line\">            investment.setName(input.getInvestmentName());</span><br><span class=\"line\">            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));</span><br><span class=\"line\">            return investment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;ETradeInvestment&gt; etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(etradeInvestments);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;,</span><br><span class=\"line\">ETradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.28&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.60&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-an-object\"><a href=\"#Convert-an-object\" class=\"headerlink\" title=\"Convert an object\"></a>Convert an object</h2><p>If you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.</p>\n<p>ETradeInvestment faceBookInvestment = tdToEtradeFunction<br>                .apply(new TdAmeritradeInvestment(555, “Facebook Inc”, 57.51));<br>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-list-to-map\"><a href=\"#Convert-list-to-map\" class=\"headerlink\" title=\"Convert list to map\"></a>Convert list to map</h2><p>One other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_list_to_map () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    ImmutableMap&lt;Integer, TdAmeritradeInvestment&gt; investmentMap = Maps</span><br><span class=\"line\">            .uniqueIndex(tdInvestments,</span><br><span class=\"line\">                    new Function&lt;TdAmeritradeInvestment, Integer&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        public Integer apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">                            return new Integer(input.getInvestmentKey());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(investmentMap);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">555=TdAmeritradeInvestment&#123;key=555, name=Facebook Inc, price=57.51&#125;, </span><br><span class=\"line\">123=TdAmeritradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.29&#125;, </span><br><span class=\"line\">456=TdAmeritradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">236=TdAmeritradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.6&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原地址：<a href=\"http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/\">http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/</a></p>\n","sticky":0},{"title":"[git]git常用-把本地项目提交到github","date":"2015-12-31T10:04:12.000Z","_content":"\n### 1.把本地项目提交到github\ntouch README.md //新建说明文件\ngit init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录\ngit add . //添加当前目录中的所有文件到索引\ngit commit -m \"first commit\" //提交到本地源码库，并附加提交注释\ngit remote add origin https://github.com/chape/test.git //添加到远程项目，别名为origin\ngit push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交\n\n\n### 2.如果有error: failed to push some refs to 'https://github.com/YihuaWanglv/myhexo.git'\n有如下几种解决方法：\n\n1.使用强制push的方法：\n$ git push -u origin master -f \n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n2.push前先将远程repository修改pull下来\n$ git pull origin master\n$ git push -u origin master\n3.若不想merge远程和本地修改，可以先创建新的分支：\n$ git branch [name]\n然后push\n$ git push -u origin [name]\n\n\n","source":"_posts/git-git常用-把本地项目提交到github.md","raw":"---\ntitle: '[git]git常用-把本地项目提交到github'\ndate: 2015-12-31 18:04:12\ntags: [git]\n---\n\n### 1.把本地项目提交到github\ntouch README.md //新建说明文件\ngit init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录\ngit add . //添加当前目录中的所有文件到索引\ngit commit -m \"first commit\" //提交到本地源码库，并附加提交注释\ngit remote add origin https://github.com/chape/test.git //添加到远程项目，别名为origin\ngit push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交\n\n\n### 2.如果有error: failed to push some refs to 'https://github.com/YihuaWanglv/myhexo.git'\n有如下几种解决方法：\n\n1.使用强制push的方法：\n$ git push -u origin master -f \n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n2.push前先将远程repository修改pull下来\n$ git pull origin master\n$ git push -u origin master\n3.若不想merge远程和本地修改，可以先创建新的分支：\n$ git branch [name]\n然后push\n$ git push -u origin [name]\n\n\n","slug":"git-git常用-把本地项目提交到github","published":1,"updated":"2016-02-20T04:02:04.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghht000h30ng7r0imoyx","content":"<h3 id=\"1-把本地项目提交到github\"><a href=\"#1-把本地项目提交到github\" class=\"headerlink\" title=\"1.把本地项目提交到github\"></a>1.把本地项目提交到github</h3><p>touch README.md //新建说明文件<br>git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录<br>git add . //添加当前目录中的所有文件到索引<br>git commit -m “first commit” //提交到本地源码库，并附加提交注释<br>git remote add origin <a href=\"https://github.com/chape/test.git\" target=\"_blank\" rel=\"external\">https://github.com/chape/test.git</a> //添加到远程项目，别名为origin<br>git push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交</p>\n<h3 id=\"2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\"><a href=\"#2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\" class=\"headerlink\" title=\"2.如果有error: failed to push some refs to ‘https://github.com/YihuaWanglv/myhexo.git‘\"></a>2.如果有error: failed to push some refs to ‘<a href=\"https://github.com/YihuaWanglv/myhexo.git\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/myhexo.git</a>‘</h3><p>有如下几种解决方法：</p>\n<p>1.使用强制push的方法：<br>$ git push -u origin master -f<br>这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。<br>2.push前先将远程repository修改pull下来<br>$ git pull origin master<br>$ git push -u origin master<br>3.若不想merge远程和本地修改，可以先创建新的分支：<br>$ git branch [name]<br>然后push<br>$ git push -u origin [name]</p>\n","excerpt":"","more":"<h3 id=\"1-把本地项目提交到github\"><a href=\"#1-把本地项目提交到github\" class=\"headerlink\" title=\"1.把本地项目提交到github\"></a>1.把本地项目提交到github</h3><p>touch README.md //新建说明文件<br>git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录<br>git add . //添加当前目录中的所有文件到索引<br>git commit -m “first commit” //提交到本地源码库，并附加提交注释<br>git remote add origin <a href=\"https://github.com/chape/test.git\">https://github.com/chape/test.git</a> //添加到远程项目，别名为origin<br>git push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交</p>\n<h3 id=\"2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\"><a href=\"#2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\" class=\"headerlink\" title=\"2.如果有error: failed to push some refs to ‘https://github.com/YihuaWanglv/myhexo.git‘\"></a>2.如果有error: failed to push some refs to ‘<a href=\"https://github.com/YihuaWanglv/myhexo.git\">https://github.com/YihuaWanglv/myhexo.git</a>‘</h3><p>有如下几种解决方法：</p>\n<p>1.使用强制push的方法：<br>$ git push -u origin master -f<br>这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。<br>2.push前先将远程repository修改pull下来<br>$ git pull origin master<br>$ git push -u origin master<br>3.若不想merge远程和本地修改，可以先创建新的分支：<br>$ git branch [name]<br>然后push<br>$ git push -u origin [name]</p>\n","sticky":0},{"title":"[dev][collect][2016-06]collect-of-dev","date":"2016-07-07T03:08:24.000Z","_content":"\n## 2016-06\n\n### 2016-06-24\n- 【直播全文记录】 从零开始搭建高可用IM系统\nhttp://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=206924771&idx=1&sn=4705b832c410765a3c89acfa1300b0b6&scene=21#wechat_redirect\n\n- 如何设计类似微信的多终端数据同步协议 | Grouk实践分享\nhttp://chuansong.me/n/1718596\n\n### 2016-06-22\n- 基于Dubbo框架构建分布式服务\nhttp://shiyanjun.cn/archives/1075.html\n\n- 高并发性能调试经验分享\nhttps://zhuanlan.zhihu.com/p/21348220\n\n- Java进阶（三）多线程开发关键技术\nhttp://www.jasongj.com/java/multi_thread/\n\n- blog kafka\nhttp://www.jasongj.com/tags/Kafka/\n\n- 如何构建Android MVVM应用程序\nhttp://www.jianshu.com/p/2fc41a310f79\n\n- 超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用\nhttp://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\n\n- SHELL编程之常用技巧\nhttp://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&mid=2247483698&idx=1&sn=3b52493d202362aae0bf511002e63d52\n\n- 让你爱上写作的 11 款 Markdown 工具\nhttp://www.ifanr.com/app/665209\n\n- 基于Docker搭建Hadoop集群之升级版\nhttp://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\n\n- Kafka设计解析（一）- Kafka背景及架构介绍\nhttp://www.jasongj.com/2015/03/10/KafkaColumn1/\n\n\n\n### 2016-06-15\n- 淘拍拍前端架构2.0-简介\nhttp://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\n\n- 轻松监控上万台服务器：企业运维监控平台架构设计与实践指南\nhttp://dbaplus.cn/news-21-466-1.html\n\n- Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755658&idx=1&sn=9f5e4831b2c27d66e4296c49ffcd3d7c&scene=21#wechat_redirect\n\n- 网易蜂巢微服务架构：用RabbitMQ实现轻量级通信\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755639&idx=2&sn=0e43c1b7168dbcd60582326fb20f2f19&scene=21#wechat_redirect\n\n- 使用Vue.js从零构建GitHub项目浏览器\nhttp://xlbd.me/vue-demo-github-file-explorer/\n\n\n### 2016-06-07\n- 搭建Git服务器\nhttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\n\n- gitlab centos一键安装\nhttp://blog.csdn.net/asd131531/article/details/42374285\nhttp://www.linuxidc.com/Linux/2014-08/105137.htm","source":"_posts/dev-collect-2016-06-collect-of-dev.md","raw":"---\ntitle: '[dev][collect][2016-06]collect-of-dev'\ndate: 2016-07-07 11:08:24\ntags: [collect, dev, java, android, collect-of-dev]\n---\n\n## 2016-06\n\n### 2016-06-24\n- 【直播全文记录】 从零开始搭建高可用IM系统\nhttp://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=206924771&idx=1&sn=4705b832c410765a3c89acfa1300b0b6&scene=21#wechat_redirect\n\n- 如何设计类似微信的多终端数据同步协议 | Grouk实践分享\nhttp://chuansong.me/n/1718596\n\n### 2016-06-22\n- 基于Dubbo框架构建分布式服务\nhttp://shiyanjun.cn/archives/1075.html\n\n- 高并发性能调试经验分享\nhttps://zhuanlan.zhihu.com/p/21348220\n\n- Java进阶（三）多线程开发关键技术\nhttp://www.jasongj.com/java/multi_thread/\n\n- blog kafka\nhttp://www.jasongj.com/tags/Kafka/\n\n- 如何构建Android MVVM应用程序\nhttp://www.jianshu.com/p/2fc41a310f79\n\n- 超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用\nhttp://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\n\n- SHELL编程之常用技巧\nhttp://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&mid=2247483698&idx=1&sn=3b52493d202362aae0bf511002e63d52\n\n- 让你爱上写作的 11 款 Markdown 工具\nhttp://www.ifanr.com/app/665209\n\n- 基于Docker搭建Hadoop集群之升级版\nhttp://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\n\n- Kafka设计解析（一）- Kafka背景及架构介绍\nhttp://www.jasongj.com/2015/03/10/KafkaColumn1/\n\n\n\n### 2016-06-15\n- 淘拍拍前端架构2.0-简介\nhttp://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\n\n- 轻松监控上万台服务器：企业运维监控平台架构设计与实践指南\nhttp://dbaplus.cn/news-21-466-1.html\n\n- Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755658&idx=1&sn=9f5e4831b2c27d66e4296c49ffcd3d7c&scene=21#wechat_redirect\n\n- 网易蜂巢微服务架构：用RabbitMQ实现轻量级通信\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755639&idx=2&sn=0e43c1b7168dbcd60582326fb20f2f19&scene=21#wechat_redirect\n\n- 使用Vue.js从零构建GitHub项目浏览器\nhttp://xlbd.me/vue-demo-github-file-explorer/\n\n\n### 2016-06-07\n- 搭建Git服务器\nhttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\n\n- gitlab centos一键安装\nhttp://blog.csdn.net/asd131531/article/details/42374285\nhttp://www.linuxidc.com/Linux/2014-08/105137.htm","slug":"dev-collect-2016-06-collect-of-dev","published":1,"updated":"2016-07-11T12:15:21.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghhv000j30ngrahrf295","content":"<h2 id=\"2016-06\"><a href=\"#2016-06\" class=\"headerlink\" title=\"2016-06\"></a>2016-06</h2><h3 id=\"2016-06-24\"><a href=\"#2016-06-24\" class=\"headerlink\" title=\"2016-06-24\"></a>2016-06-24</h3><ul>\n<li><p>【直播全文记录】 从零开始搭建高可用IM系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>如何设计类似微信的多终端数据同步协议 | Grouk实践分享<br><a href=\"http://chuansong.me/n/1718596\" target=\"_blank\" rel=\"external\">http://chuansong.me/n/1718596</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-22\"><a href=\"#2016-06-22\" class=\"headerlink\" title=\"2016-06-22\"></a>2016-06-22</h3><ul>\n<li><p>基于Dubbo框架构建分布式服务<br><a href=\"http://shiyanjun.cn/archives/1075.html\" target=\"_blank\" rel=\"external\">http://shiyanjun.cn/archives/1075.html</a></p>\n</li>\n<li><p>高并发性能调试经验分享<br><a href=\"https://zhuanlan.zhihu.com/p/21348220\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/21348220</a></p>\n</li>\n<li><p>Java进阶（三）多线程开发关键技术<br><a href=\"http://www.jasongj.com/java/multi_thread/\" target=\"_blank\" rel=\"external\">http://www.jasongj.com/java/multi_thread/</a></p>\n</li>\n<li><p>blog kafka<br><a href=\"http://www.jasongj.com/tags/Kafka/\" target=\"_blank\" rel=\"external\">http://www.jasongj.com/tags/Kafka/</a></p>\n</li>\n<li><p>如何构建Android MVVM应用程序<br><a href=\"http://www.jianshu.com/p/2fc41a310f79\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/2fc41a310f79</a></p>\n</li>\n<li><p>超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用<br><a href=\"http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\" target=\"_blank\" rel=\"external\">http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/</a></p>\n</li>\n<li><p>SHELL编程之常用技巧<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52</a></p>\n</li>\n<li><p>让你爱上写作的 11 款 Markdown 工具<br><a href=\"http://www.ifanr.com/app/665209\" target=\"_blank\" rel=\"external\">http://www.ifanr.com/app/665209</a></p>\n</li>\n<li><p>基于Docker搭建Hadoop集群之升级版<br><a href=\"http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\" target=\"_blank\" rel=\"external\">http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/</a></p>\n</li>\n<li><p>Kafka设计解析（一）- Kafka背景及架构介绍<br><a href=\"http://www.jasongj.com/2015/03/10/KafkaColumn1/\" target=\"_blank\" rel=\"external\">http://www.jasongj.com/2015/03/10/KafkaColumn1/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-15\"><a href=\"#2016-06-15\" class=\"headerlink\" title=\"2016-06-15\"></a>2016-06-15</h3><ul>\n<li><p>淘拍拍前端架构2.0-简介<br><a href=\"http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\" target=\"_blank\" rel=\"external\">http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html</a></p>\n</li>\n<li><p>轻松监控上万台服务器：企业运维监控平台架构设计与实践指南<br><a href=\"http://dbaplus.cn/news-21-466-1.html\" target=\"_blank\" rel=\"external\">http://dbaplus.cn/news-21-466-1.html</a></p>\n</li>\n<li><p>Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>网易蜂巢微服务架构：用RabbitMQ实现轻量级通信<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>使用Vue.js从零构建GitHub项目浏览器<br><a href=\"http://xlbd.me/vue-demo-github-file-explorer/\" target=\"_blank\" rel=\"external\">http://xlbd.me/vue-demo-github-file-explorer/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-07\"><a href=\"#2016-06-07\" class=\"headerlink\" title=\"2016-06-07\"></a>2016-06-07</h3><ul>\n<li><p>搭建Git服务器<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"external\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000</a></p>\n</li>\n<li><p>gitlab centos一键安装<br><a href=\"http://blog.csdn.net/asd131531/article/details/42374285\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/asd131531/article/details/42374285</a><br><a href=\"http://www.linuxidc.com/Linux/2014-08/105137.htm\" target=\"_blank\" rel=\"external\">http://www.linuxidc.com/Linux/2014-08/105137.htm</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"2016-06\"><a href=\"#2016-06\" class=\"headerlink\" title=\"2016-06\"></a>2016-06</h2><h3 id=\"2016-06-24\"><a href=\"#2016-06-24\" class=\"headerlink\" title=\"2016-06-24\"></a>2016-06-24</h3><ul>\n<li><p>【直播全文记录】 从零开始搭建高可用IM系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>如何设计类似微信的多终端数据同步协议 | Grouk实践分享<br><a href=\"http://chuansong.me/n/1718596\">http://chuansong.me/n/1718596</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-22\"><a href=\"#2016-06-22\" class=\"headerlink\" title=\"2016-06-22\"></a>2016-06-22</h3><ul>\n<li><p>基于Dubbo框架构建分布式服务<br><a href=\"http://shiyanjun.cn/archives/1075.html\">http://shiyanjun.cn/archives/1075.html</a></p>\n</li>\n<li><p>高并发性能调试经验分享<br><a href=\"https://zhuanlan.zhihu.com/p/21348220\">https://zhuanlan.zhihu.com/p/21348220</a></p>\n</li>\n<li><p>Java进阶（三）多线程开发关键技术<br><a href=\"http://www.jasongj.com/java/multi_thread/\">http://www.jasongj.com/java/multi_thread/</a></p>\n</li>\n<li><p>blog kafka<br><a href=\"http://www.jasongj.com/tags/Kafka/\">http://www.jasongj.com/tags/Kafka/</a></p>\n</li>\n<li><p>如何构建Android MVVM应用程序<br><a href=\"http://www.jianshu.com/p/2fc41a310f79\">http://www.jianshu.com/p/2fc41a310f79</a></p>\n</li>\n<li><p>超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用<br><a href=\"http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\">http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/</a></p>\n</li>\n<li><p>SHELL编程之常用技巧<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52\">http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52</a></p>\n</li>\n<li><p>让你爱上写作的 11 款 Markdown 工具<br><a href=\"http://www.ifanr.com/app/665209\">http://www.ifanr.com/app/665209</a></p>\n</li>\n<li><p>基于Docker搭建Hadoop集群之升级版<br><a href=\"http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\">http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/</a></p>\n</li>\n<li><p>Kafka设计解析（一）- Kafka背景及架构介绍<br><a href=\"http://www.jasongj.com/2015/03/10/KafkaColumn1/\">http://www.jasongj.com/2015/03/10/KafkaColumn1/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-15\"><a href=\"#2016-06-15\" class=\"headerlink\" title=\"2016-06-15\"></a>2016-06-15</h3><ul>\n<li><p>淘拍拍前端架构2.0-简介<br><a href=\"http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\">http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html</a></p>\n</li>\n<li><p>轻松监控上万台服务器：企业运维监控平台架构设计与实践指南<br><a href=\"http://dbaplus.cn/news-21-466-1.html\">http://dbaplus.cn/news-21-466-1.html</a></p>\n</li>\n<li><p>Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>网易蜂巢微服务架构：用RabbitMQ实现轻量级通信<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>使用Vue.js从零构建GitHub项目浏览器<br><a href=\"http://xlbd.me/vue-demo-github-file-explorer/\">http://xlbd.me/vue-demo-github-file-explorer/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-07\"><a href=\"#2016-06-07\" class=\"headerlink\" title=\"2016-06-07\"></a>2016-06-07</h3><ul>\n<li><p>搭建Git服务器<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000</a></p>\n</li>\n<li><p>gitlab centos一键安装<br><a href=\"http://blog.csdn.net/asd131531/article/details/42374285\">http://blog.csdn.net/asd131531/article/details/42374285</a><br><a href=\"http://www.linuxidc.com/Linux/2014-08/105137.htm\">http://www.linuxidc.com/Linux/2014-08/105137.htm</a></p>\n</li>\n</ul>\n","sticky":0},{"title":"[git]git分支使用和管理","date":"2016-06-06T09:37:36.000Z","_content":"\n## git分支常用命令\n```\n从master创建dev分支，并checkout dev分支：\ngit checkout -b dev\n此命令相当于：\ngit branch dev\ngit checkout dev\n\n回到master，合并dev的更改到master：\ngit checkout master\ngit merge dev\n合并后删除dev分支：\ngit branch -d dev\n\n如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述\ngit merge --no-ff -m \"merge with no-ff\" dev\n```\n\n## 保存临时状态\n当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态\n```\n保存当前开发状态：\ngit stash\n\n查看当前已保存的stash列表：\ngit stash list\n\n取出之前保存的stash状态：\ngit stash pop\n\n\n```\n\n## 多人协作的工作模式\n```\n多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin branch-name推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n小结\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n```","source":"_posts/git-git分支使用和管理.md","raw":"---\ntitle: '[git]git分支使用和管理'\ndate: 2016-06-06 17:37:36\ntags: [git, branch, 版本控制, 分支管理]\n---\n\n## git分支常用命令\n```\n从master创建dev分支，并checkout dev分支：\ngit checkout -b dev\n此命令相当于：\ngit branch dev\ngit checkout dev\n\n回到master，合并dev的更改到master：\ngit checkout master\ngit merge dev\n合并后删除dev分支：\ngit branch -d dev\n\n如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述\ngit merge --no-ff -m \"merge with no-ff\" dev\n```\n\n## 保存临时状态\n当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态\n```\n保存当前开发状态：\ngit stash\n\n查看当前已保存的stash列表：\ngit stash list\n\n取出之前保存的stash状态：\ngit stash pop\n\n\n```\n\n## 多人协作的工作模式\n```\n多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin branch-name推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n小结\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n```","slug":"git-git分支使用和管理","published":1,"updated":"2016-06-06T13:06:22.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghhx000m30nges8lkgg7","content":"<h2 id=\"git分支常用命令\"><a href=\"#git分支常用命令\" class=\"headerlink\" title=\"git分支常用命令\"></a>git分支常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从master创建dev分支，并checkout dev分支：</span><br><span class=\"line\">git checkout -b dev</span><br><span class=\"line\">此命令相当于：</span><br><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\"></span><br><span class=\"line\">回到master，合并dev的更改到master：</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">合并后删除dev分支：</span><br><span class=\"line\">git branch -d dev</span><br><span class=\"line\"></span><br><span class=\"line\">如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述</span><br><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存临时状态\"><a href=\"#保存临时状态\" class=\"headerlink\" title=\"保存临时状态\"></a>保存临时状态</h2><p>当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">保存当前开发状态：</span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前已保存的stash列表：</span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">取出之前保存的stash状态：</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多人协作的工作模式通常是这样：</span><br><span class=\"line\"></span><br><span class=\"line\">首先，可以试图用git push origin branch-name推送自己的修改；</span><br><span class=\"line\"></span><br><span class=\"line\">如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</span><br><span class=\"line\"></span><br><span class=\"line\">如果合并有冲突，则解决冲突，并在本地提交；</span><br><span class=\"line\"></span><br><span class=\"line\">没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</span><br><span class=\"line\"></span><br><span class=\"line\">如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。</span><br><span class=\"line\"></span><br><span class=\"line\">这就是多人协作的工作模式，一旦熟悉了，就非常简单。</span><br><span class=\"line\"></span><br><span class=\"line\">小结</span><br><span class=\"line\"></span><br><span class=\"line\">查看远程库信息，使用git remote -v；</span><br><span class=\"line\"></span><br><span class=\"line\">本地新建的分支如果不推送到远程，对其他人就是不可见的；</span><br><span class=\"line\"></span><br><span class=\"line\">从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</span><br><span class=\"line\"></span><br><span class=\"line\">在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</span><br><span class=\"line\"></span><br><span class=\"line\">建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；</span><br><span class=\"line\"></span><br><span class=\"line\">从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"git分支常用命令\"><a href=\"#git分支常用命令\" class=\"headerlink\" title=\"git分支常用命令\"></a>git分支常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从master创建dev分支，并checkout dev分支：</span><br><span class=\"line\">git checkout -b dev</span><br><span class=\"line\">此命令相当于：</span><br><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\"></span><br><span class=\"line\">回到master，合并dev的更改到master：</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">合并后删除dev分支：</span><br><span class=\"line\">git branch -d dev</span><br><span class=\"line\"></span><br><span class=\"line\">如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述</span><br><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存临时状态\"><a href=\"#保存临时状态\" class=\"headerlink\" title=\"保存临时状态\"></a>保存临时状态</h2><p>当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">保存当前开发状态：</span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前已保存的stash列表：</span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">取出之前保存的stash状态：</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多人协作的工作模式通常是这样：</span><br><span class=\"line\"></span><br><span class=\"line\">首先，可以试图用git push origin branch-name推送自己的修改；</span><br><span class=\"line\"></span><br><span class=\"line\">如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</span><br><span class=\"line\"></span><br><span class=\"line\">如果合并有冲突，则解决冲突，并在本地提交；</span><br><span class=\"line\"></span><br><span class=\"line\">没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</span><br><span class=\"line\"></span><br><span class=\"line\">如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。</span><br><span class=\"line\"></span><br><span class=\"line\">这就是多人协作的工作模式，一旦熟悉了，就非常简单。</span><br><span class=\"line\"></span><br><span class=\"line\">小结</span><br><span class=\"line\"></span><br><span class=\"line\">查看远程库信息，使用git remote -v；</span><br><span class=\"line\"></span><br><span class=\"line\">本地新建的分支如果不推送到远程，对其他人就是不可见的；</span><br><span class=\"line\"></span><br><span class=\"line\">从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</span><br><span class=\"line\"></span><br><span class=\"line\">在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</span><br><span class=\"line\"></span><br><span class=\"line\">建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；</span><br><span class=\"line\"></span><br><span class=\"line\">从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"[dev][collect][2016-06-06]collect-of-im-netty-android-etc","date":"2016-06-06T09:42:22.000Z","_content":"\n此集合[dev][collect]汇总开发资源.\n资源含文章，git code等等..\n\n### 2016-06-06\n- 一套仿 微信 IM系统 基于apache mina\nhttp://my.oschina.net/u/1167637/blog/411312\n\n- socketio 服务器推送\nhttp://blog.csdn.net/xtayfjpk/article/details/40948409\n\n- 开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源\nhttps://github.com/caprice/lanyuan\n\n- Simple asynchronous non blocking chat server/client based on Netty 4\nhttps://github.com/caprice/nettychat\nhttps://github.com/YihuaWanglv/nettychat\n\n- [5][android]A High Copy WeChat ,SNS APP (高仿微信)\nhttps://github.com/YihuaWanglv/wechat\n\n- 一个Android开发者博客\nhttp://blog.csdn.net/finddreams\n\n- 案例剖析：从0开始搭建一个微服务的持续交付系统\nhttp://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=2659597380&idx=1&sn=e0087759e6b65df0ba30126c1e3af915&scene=0#wechat_redirect\n\n- [5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏\nhttps://github.com/YihuaWanglv/Android_BaseLib\n\n- 使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中\nhttps://github.com/YihuaWanglv/netty-chat\n\n- 仿淘宝的B2C商城项目\n页面用的jsp，稍显陈旧\nhttps://github.com/YihuaWanglv/B2CWeb\n\n- JavaEE项目开发脚手架\nhttps://github.com/YihuaWanglv/es\n后端:\nIoC容器 spring\nweb框架 springmvc\norm框架 hibernate + spring data jpa\n安全框架 shiro\n验证框架 hibernate validator\n任务调度框架 quartz\n缓存 ehcache\n数据源 druid\n日志 slf4j+logback\nJson fastjson\n日期美化 prettytime\nservlet 3.0(需要支持servlet3的servlet容器，如tomcat7)\njcaptcha 验证码\njsp 模板视图\n前端:\njquery js框架\njquery-ui-bootstrap界面框架\nfont-wesome 字体/图标框架\njquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）\nkindeditor 编辑器\nnicescroll 漂亮的滚动条\nzTree 树框架\njquery blockUI 弹出框/遮罩框架\njquery-fileupload 文件上传\nbootstrap-datatimepicker 日历选择\n\n- [5][android]Collect and classify android open source projects\nhttps://github.com/YihuaWanglv/android-open-project\n\n- Blog avec Spring MVC + spring DATA + mongodb + angularjs\nhttps://github.com/YihuaWanglv/blog_java\n\n- dianping-api-samples\nhttps://github.com/YihuaWanglv/dianping-open-sdk\n\n- JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。\nhttps://github.com/YihuaWanglv/jeesite\n\n- Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 https://github.com/waylau/apache-mina-2.x-user-guide\nhttps://github.com/waylau/apache-mina-2-user-guide-demos\n\n- Spring Framework 4.x Reference Documentation 中文翻译\nhttps://www.gitbook.com/book/waylau/spring-framework-4-reference/details\nhttps://github.com/waylau/spring-framework-4-reference\n\n- 免费的计算机编程类中文书籍\nhttps://github.com/YihuaWanglv/free-programming-books-zh_CN\n网页版：\nhttp://siberiawolf.com/free_programming/index.html\n\n- 一个合格的程序员应该读过哪些书\nhttp://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\n\n- Google 全球 IP 地址库\nhttps://github.com/justjavac/Google-IPs\n\n- 一份关于“资料汇总”的汇总\nhttps://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\n\n- Freely available programming books\nhttps://github.com/YihuaWanglv/free-programming-books\n\n- RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计\nhttps://github.com/aisuhua/restful-api-design-references\n\n- ssential Netty in Action 《Netty 实战(精髓)》\nhttps://github.com/waylau/essential-netty-in-action\ngitbook：\nhttp://waylau.com/essential-netty-in-action/\n\n- Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》\nhttps://github.com/waylau/Gradle-2-User-Guide\ngitbook：\nhttps://www.gitbook.com/book/waylau/gradle-2-user-guide/details\n\n- Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》\nhttps://github.com/waylau/netty-4-user-guide\ngitbook：\nhttp://waylau.com/netty-4-user-guide/\n\n- 这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新\nhttps://github.com/YihuaWanglv/Perfect_IM_SNS\n\n- 基于位置信息，空间时间结合的社交与分享的应用\nhttps://github.com/YihuaWanglv/Tuyi\n\n- SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）\nhttps://github.com/YihuaWanglv/SYTeamApp\n\n- MeifuGO：An open source android app by using easemob IM SDK \nhttps://github.com/YihuaWanglv/MeifuGO\n\n- fangyuanshili：环信SDK,IM,geohash,lbs \nhttps://github.com/YihuaWanglv/fangyuanshili\n\n- zaina：该项目是改编自环信即时通讯云的demo改编\nhttps://github.com/YihuaWanglv/zaina\n\n- dianhua：基于react native 和 环信的实时通话的免费店话\nhttps://github.com/YihuaWanglv/dianhua\n\n- Baby：一个私密社交APP\nhttps://github.com/YihuaWanglv/Baby\n\n- MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。\na common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.\nhttps://github.com/YihuaWanglv/MVPCommon\n从零开始搭建android框架系列：\nhttp://www.jianshu.com/notebooks/3767449/latest\n\n- learnCloud：\n和应用服务器、存储服务器说再见\n再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。\nhttps://leancloud.cn/\n\n- 不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】\nhttp://www.jianshu.com/p/1f21e1d375aa\n\n- 安卓架构文章合集（a collection of android Architecture）\nhttps://github.com/YihuaWanglv/AndroidArchitectureCollection","source":"_posts/dev-collect-2016-06-06-collect-of-im-netty-android-etc.md","raw":"---\ntitle: '[dev][collect][2016-06-06]collect-of-im-netty-android-etc'\ndate: 2016-06-06 17:42:22\ntags: [dev, collect, post, git, resouce]\n---\n\n此集合[dev][collect]汇总开发资源.\n资源含文章，git code等等..\n\n### 2016-06-06\n- 一套仿 微信 IM系统 基于apache mina\nhttp://my.oschina.net/u/1167637/blog/411312\n\n- socketio 服务器推送\nhttp://blog.csdn.net/xtayfjpk/article/details/40948409\n\n- 开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源\nhttps://github.com/caprice/lanyuan\n\n- Simple asynchronous non blocking chat server/client based on Netty 4\nhttps://github.com/caprice/nettychat\nhttps://github.com/YihuaWanglv/nettychat\n\n- [5][android]A High Copy WeChat ,SNS APP (高仿微信)\nhttps://github.com/YihuaWanglv/wechat\n\n- 一个Android开发者博客\nhttp://blog.csdn.net/finddreams\n\n- 案例剖析：从0开始搭建一个微服务的持续交付系统\nhttp://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=2659597380&idx=1&sn=e0087759e6b65df0ba30126c1e3af915&scene=0#wechat_redirect\n\n- [5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏\nhttps://github.com/YihuaWanglv/Android_BaseLib\n\n- 使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中\nhttps://github.com/YihuaWanglv/netty-chat\n\n- 仿淘宝的B2C商城项目\n页面用的jsp，稍显陈旧\nhttps://github.com/YihuaWanglv/B2CWeb\n\n- JavaEE项目开发脚手架\nhttps://github.com/YihuaWanglv/es\n后端:\nIoC容器 spring\nweb框架 springmvc\norm框架 hibernate + spring data jpa\n安全框架 shiro\n验证框架 hibernate validator\n任务调度框架 quartz\n缓存 ehcache\n数据源 druid\n日志 slf4j+logback\nJson fastjson\n日期美化 prettytime\nservlet 3.0(需要支持servlet3的servlet容器，如tomcat7)\njcaptcha 验证码\njsp 模板视图\n前端:\njquery js框架\njquery-ui-bootstrap界面框架\nfont-wesome 字体/图标框架\njquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）\nkindeditor 编辑器\nnicescroll 漂亮的滚动条\nzTree 树框架\njquery blockUI 弹出框/遮罩框架\njquery-fileupload 文件上传\nbootstrap-datatimepicker 日历选择\n\n- [5][android]Collect and classify android open source projects\nhttps://github.com/YihuaWanglv/android-open-project\n\n- Blog avec Spring MVC + spring DATA + mongodb + angularjs\nhttps://github.com/YihuaWanglv/blog_java\n\n- dianping-api-samples\nhttps://github.com/YihuaWanglv/dianping-open-sdk\n\n- JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。\nhttps://github.com/YihuaWanglv/jeesite\n\n- Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 https://github.com/waylau/apache-mina-2.x-user-guide\nhttps://github.com/waylau/apache-mina-2-user-guide-demos\n\n- Spring Framework 4.x Reference Documentation 中文翻译\nhttps://www.gitbook.com/book/waylau/spring-framework-4-reference/details\nhttps://github.com/waylau/spring-framework-4-reference\n\n- 免费的计算机编程类中文书籍\nhttps://github.com/YihuaWanglv/free-programming-books-zh_CN\n网页版：\nhttp://siberiawolf.com/free_programming/index.html\n\n- 一个合格的程序员应该读过哪些书\nhttp://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\n\n- Google 全球 IP 地址库\nhttps://github.com/justjavac/Google-IPs\n\n- 一份关于“资料汇总”的汇总\nhttps://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\n\n- Freely available programming books\nhttps://github.com/YihuaWanglv/free-programming-books\n\n- RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计\nhttps://github.com/aisuhua/restful-api-design-references\n\n- ssential Netty in Action 《Netty 实战(精髓)》\nhttps://github.com/waylau/essential-netty-in-action\ngitbook：\nhttp://waylau.com/essential-netty-in-action/\n\n- Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》\nhttps://github.com/waylau/Gradle-2-User-Guide\ngitbook：\nhttps://www.gitbook.com/book/waylau/gradle-2-user-guide/details\n\n- Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》\nhttps://github.com/waylau/netty-4-user-guide\ngitbook：\nhttp://waylau.com/netty-4-user-guide/\n\n- 这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新\nhttps://github.com/YihuaWanglv/Perfect_IM_SNS\n\n- 基于位置信息，空间时间结合的社交与分享的应用\nhttps://github.com/YihuaWanglv/Tuyi\n\n- SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）\nhttps://github.com/YihuaWanglv/SYTeamApp\n\n- MeifuGO：An open source android app by using easemob IM SDK \nhttps://github.com/YihuaWanglv/MeifuGO\n\n- fangyuanshili：环信SDK,IM,geohash,lbs \nhttps://github.com/YihuaWanglv/fangyuanshili\n\n- zaina：该项目是改编自环信即时通讯云的demo改编\nhttps://github.com/YihuaWanglv/zaina\n\n- dianhua：基于react native 和 环信的实时通话的免费店话\nhttps://github.com/YihuaWanglv/dianhua\n\n- Baby：一个私密社交APP\nhttps://github.com/YihuaWanglv/Baby\n\n- MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。\na common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.\nhttps://github.com/YihuaWanglv/MVPCommon\n从零开始搭建android框架系列：\nhttp://www.jianshu.com/notebooks/3767449/latest\n\n- learnCloud：\n和应用服务器、存储服务器说再见\n再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。\nhttps://leancloud.cn/\n\n- 不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】\nhttp://www.jianshu.com/p/1f21e1d375aa\n\n- 安卓架构文章合集（a collection of android Architecture）\nhttps://github.com/YihuaWanglv/AndroidArchitectureCollection","slug":"dev-collect-2016-06-06-collect-of-im-netty-android-etc","published":1,"updated":"2016-06-06T13:07:42.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghi0000o30ng644ggojp","content":"<p>此集合[dev][collect]汇总开发资源.<br>资源含文章，git code等等..</p>\n<h3 id=\"2016-06-06\"><a href=\"#2016-06-06\" class=\"headerlink\" title=\"2016-06-06\"></a>2016-06-06</h3><ul>\n<li><p>一套仿 微信 IM系统 基于apache mina<br><a href=\"http://my.oschina.net/u/1167637/blog/411312\" target=\"_blank\" rel=\"external\">http://my.oschina.net/u/1167637/blog/411312</a></p>\n</li>\n<li><p>socketio 服务器推送<br><a href=\"http://blog.csdn.net/xtayfjpk/article/details/40948409\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/xtayfjpk/article/details/40948409</a></p>\n</li>\n<li><p>开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源<br><a href=\"https://github.com/caprice/lanyuan\" target=\"_blank\" rel=\"external\">https://github.com/caprice/lanyuan</a></p>\n</li>\n<li><p>Simple asynchronous non blocking chat server/client based on Netty 4<br><a href=\"https://github.com/caprice/nettychat\" target=\"_blank\" rel=\"external\">https://github.com/caprice/nettychat</a><br><a href=\"https://github.com/YihuaWanglv/nettychat\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/nettychat</a></p>\n</li>\n<li><p>[5][android]A High Copy WeChat ,SNS APP (高仿微信)<br><a href=\"https://github.com/YihuaWanglv/wechat\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/wechat</a></p>\n</li>\n<li><p>一个Android开发者博客<br><a href=\"http://blog.csdn.net/finddreams\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/finddreams</a></p>\n</li>\n<li><p>案例剖析：从0开始搭建一个微服务的持续交付系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect</a></p>\n</li>\n<li><p>[5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏<br><a href=\"https://github.com/YihuaWanglv/Android_BaseLib\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Android_BaseLib</a></p>\n</li>\n<li><p>使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中<br><a href=\"https://github.com/YihuaWanglv/netty-chat\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/netty-chat</a></p>\n</li>\n<li><p>仿淘宝的B2C商城项目<br>页面用的jsp，稍显陈旧<br><a href=\"https://github.com/YihuaWanglv/B2CWeb\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/B2CWeb</a></p>\n</li>\n<li><p>JavaEE项目开发脚手架<br><a href=\"https://github.com/YihuaWanglv/es\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/es</a><br>后端:<br>IoC容器 spring<br>web框架 springmvc<br>orm框架 hibernate + spring data jpa<br>安全框架 shiro<br>验证框架 hibernate validator<br>任务调度框架 quartz<br>缓存 ehcache<br>数据源 druid<br>日志 slf4j+logback<br>Json fastjson<br>日期美化 prettytime<br>servlet 3.0(需要支持servlet3的servlet容器，如tomcat7)<br>jcaptcha 验证码<br>jsp 模板视图<br>前端:<br>jquery js框架<br>jquery-ui-bootstrap界面框架<br>font-wesome 字体/图标框架<br>jquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）<br>kindeditor 编辑器<br>nicescroll 漂亮的滚动条<br>zTree 树框架<br>jquery blockUI 弹出框/遮罩框架<br>jquery-fileupload 文件上传<br>bootstrap-datatimepicker 日历选择</p>\n</li>\n<li><p>[5][android]Collect and classify android open source projects<br><a href=\"https://github.com/YihuaWanglv/android-open-project\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/android-open-project</a></p>\n</li>\n<li><p>Blog avec Spring MVC + spring DATA + mongodb + angularjs<br><a href=\"https://github.com/YihuaWanglv/blog_java\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/blog_java</a></p>\n</li>\n<li><p>dianping-api-samples<br><a href=\"https://github.com/YihuaWanglv/dianping-open-sdk\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/dianping-open-sdk</a></p>\n</li>\n<li><p>JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。<br><a href=\"https://github.com/YihuaWanglv/jeesite\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/jeesite</a></p>\n</li>\n<li><p>Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 <a href=\"https://github.com/waylau/apache-mina-2.x-user-guide\" target=\"_blank\" rel=\"external\">https://github.com/waylau/apache-mina-2.x-user-guide</a><br><a href=\"https://github.com/waylau/apache-mina-2-user-guide-demos\" target=\"_blank\" rel=\"external\">https://github.com/waylau/apache-mina-2-user-guide-demos</a></p>\n</li>\n<li><p>Spring Framework 4.x Reference Documentation 中文翻译<br><a href=\"https://www.gitbook.com/book/waylau/spring-framework-4-reference/details\" target=\"_blank\" rel=\"external\">https://www.gitbook.com/book/waylau/spring-framework-4-reference/details</a><br><a href=\"https://github.com/waylau/spring-framework-4-reference\" target=\"_blank\" rel=\"external\">https://github.com/waylau/spring-framework-4-reference</a></p>\n</li>\n<li><p>免费的计算机编程类中文书籍<br><a href=\"https://github.com/YihuaWanglv/free-programming-books-zh_CN\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/free-programming-books-zh_CN</a><br>网页版：<br><a href=\"http://siberiawolf.com/free_programming/index.html\" target=\"_blank\" rel=\"external\">http://siberiawolf.com/free_programming/index.html</a></p>\n</li>\n<li><p>一个合格的程序员应该读过哪些书<br><a href=\"http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\" target=\"_blank\" rel=\"external\">http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html</a></p>\n</li>\n<li><p>Google 全球 IP 地址库<br><a href=\"https://github.com/justjavac/Google-IPs\" target=\"_blank\" rel=\"external\">https://github.com/justjavac/Google-IPs</a></p>\n</li>\n<li><p>一份关于“资料汇总”的汇总<br><a href=\"https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN</a></p>\n</li>\n<li><p>Freely available programming books<br><a href=\"https://github.com/YihuaWanglv/free-programming-books\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/free-programming-books</a></p>\n</li>\n<li><p>RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计<br><a href=\"https://github.com/aisuhua/restful-api-design-references\" target=\"_blank\" rel=\"external\">https://github.com/aisuhua/restful-api-design-references</a></p>\n</li>\n<li><p>ssential Netty in Action 《Netty 实战(精髓)》<br><a href=\"https://github.com/waylau/essential-netty-in-action\" target=\"_blank\" rel=\"external\">https://github.com/waylau/essential-netty-in-action</a><br>gitbook：<br><a href=\"http://waylau.com/essential-netty-in-action/\" target=\"_blank\" rel=\"external\">http://waylau.com/essential-netty-in-action/</a></p>\n</li>\n<li><p>Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》<br><a href=\"https://github.com/waylau/Gradle-2-User-Guide\" target=\"_blank\" rel=\"external\">https://github.com/waylau/Gradle-2-User-Guide</a><br>gitbook：<br><a href=\"https://www.gitbook.com/book/waylau/gradle-2-user-guide/details\" target=\"_blank\" rel=\"external\">https://www.gitbook.com/book/waylau/gradle-2-user-guide/details</a></p>\n</li>\n<li><p>Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》<br><a href=\"https://github.com/waylau/netty-4-user-guide\" target=\"_blank\" rel=\"external\">https://github.com/waylau/netty-4-user-guide</a><br>gitbook：<br><a href=\"http://waylau.com/netty-4-user-guide/\" target=\"_blank\" rel=\"external\">http://waylau.com/netty-4-user-guide/</a></p>\n</li>\n<li><p>这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新<br><a href=\"https://github.com/YihuaWanglv/Perfect_IM_SNS\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Perfect_IM_SNS</a></p>\n</li>\n<li><p>基于位置信息，空间时间结合的社交与分享的应用<br><a href=\"https://github.com/YihuaWanglv/Tuyi\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Tuyi</a></p>\n</li>\n<li><p>SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）<br><a href=\"https://github.com/YihuaWanglv/SYTeamApp\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/SYTeamApp</a></p>\n</li>\n<li><p>MeifuGO：An open source android app by using easemob IM SDK<br><a href=\"https://github.com/YihuaWanglv/MeifuGO\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/MeifuGO</a></p>\n</li>\n<li><p>fangyuanshili：环信SDK,IM,geohash,lbs<br><a href=\"https://github.com/YihuaWanglv/fangyuanshili\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/fangyuanshili</a></p>\n</li>\n<li><p>zaina：该项目是改编自环信即时通讯云的demo改编<br><a href=\"https://github.com/YihuaWanglv/zaina\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/zaina</a></p>\n</li>\n<li><p>dianhua：基于react native 和 环信的实时通话的免费店话<br><a href=\"https://github.com/YihuaWanglv/dianhua\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/dianhua</a></p>\n</li>\n<li><p>Baby：一个私密社交APP<br><a href=\"https://github.com/YihuaWanglv/Baby\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Baby</a></p>\n</li>\n<li><p>MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。<br>a common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.<br><a href=\"https://github.com/YihuaWanglv/MVPCommon\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/MVPCommon</a><br>从零开始搭建android框架系列：<br><a href=\"http://www.jianshu.com/notebooks/3767449/latest\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/notebooks/3767449/latest</a></p>\n</li>\n<li><p>learnCloud：<br>和应用服务器、存储服务器说再见<br>再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。<br><a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">https://leancloud.cn/</a></p>\n</li>\n<li><p>不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】<br><a href=\"http://www.jianshu.com/p/1f21e1d375aa\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/1f21e1d375aa</a></p>\n</li>\n<li><p>安卓架构文章合集（a collection of android Architecture）<br><a href=\"https://github.com/YihuaWanglv/AndroidArchitectureCollection\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/AndroidArchitectureCollection</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<p>此集合[dev][collect]汇总开发资源.<br>资源含文章，git code等等..</p>\n<h3 id=\"2016-06-06\"><a href=\"#2016-06-06\" class=\"headerlink\" title=\"2016-06-06\"></a>2016-06-06</h3><ul>\n<li><p>一套仿 微信 IM系统 基于apache mina<br><a href=\"http://my.oschina.net/u/1167637/blog/411312\">http://my.oschina.net/u/1167637/blog/411312</a></p>\n</li>\n<li><p>socketio 服务器推送<br><a href=\"http://blog.csdn.net/xtayfjpk/article/details/40948409\">http://blog.csdn.net/xtayfjpk/article/details/40948409</a></p>\n</li>\n<li><p>开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源<br><a href=\"https://github.com/caprice/lanyuan\">https://github.com/caprice/lanyuan</a></p>\n</li>\n<li><p>Simple asynchronous non blocking chat server/client based on Netty 4<br><a href=\"https://github.com/caprice/nettychat\">https://github.com/caprice/nettychat</a><br><a href=\"https://github.com/YihuaWanglv/nettychat\">https://github.com/YihuaWanglv/nettychat</a></p>\n</li>\n<li><p>[5][android]A High Copy WeChat ,SNS APP (高仿微信)<br><a href=\"https://github.com/YihuaWanglv/wechat\">https://github.com/YihuaWanglv/wechat</a></p>\n</li>\n<li><p>一个Android开发者博客<br><a href=\"http://blog.csdn.net/finddreams\">http://blog.csdn.net/finddreams</a></p>\n</li>\n<li><p>案例剖析：从0开始搭建一个微服务的持续交付系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect</a></p>\n</li>\n<li><p>[5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏<br><a href=\"https://github.com/YihuaWanglv/Android_BaseLib\">https://github.com/YihuaWanglv/Android_BaseLib</a></p>\n</li>\n<li><p>使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中<br><a href=\"https://github.com/YihuaWanglv/netty-chat\">https://github.com/YihuaWanglv/netty-chat</a></p>\n</li>\n<li><p>仿淘宝的B2C商城项目<br>页面用的jsp，稍显陈旧<br><a href=\"https://github.com/YihuaWanglv/B2CWeb\">https://github.com/YihuaWanglv/B2CWeb</a></p>\n</li>\n<li><p>JavaEE项目开发脚手架<br><a href=\"https://github.com/YihuaWanglv/es\">https://github.com/YihuaWanglv/es</a><br>后端:<br>IoC容器 spring<br>web框架 springmvc<br>orm框架 hibernate + spring data jpa<br>安全框架 shiro<br>验证框架 hibernate validator<br>任务调度框架 quartz<br>缓存 ehcache<br>数据源 druid<br>日志 slf4j+logback<br>Json fastjson<br>日期美化 prettytime<br>servlet 3.0(需要支持servlet3的servlet容器，如tomcat7)<br>jcaptcha 验证码<br>jsp 模板视图<br>前端:<br>jquery js框架<br>jquery-ui-bootstrap界面框架<br>font-wesome 字体/图标框架<br>jquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）<br>kindeditor 编辑器<br>nicescroll 漂亮的滚动条<br>zTree 树框架<br>jquery blockUI 弹出框/遮罩框架<br>jquery-fileupload 文件上传<br>bootstrap-datatimepicker 日历选择</p>\n</li>\n<li><p>[5][android]Collect and classify android open source projects<br><a href=\"https://github.com/YihuaWanglv/android-open-project\">https://github.com/YihuaWanglv/android-open-project</a></p>\n</li>\n<li><p>Blog avec Spring MVC + spring DATA + mongodb + angularjs<br><a href=\"https://github.com/YihuaWanglv/blog_java\">https://github.com/YihuaWanglv/blog_java</a></p>\n</li>\n<li><p>dianping-api-samples<br><a href=\"https://github.com/YihuaWanglv/dianping-open-sdk\">https://github.com/YihuaWanglv/dianping-open-sdk</a></p>\n</li>\n<li><p>JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。<br><a href=\"https://github.com/YihuaWanglv/jeesite\">https://github.com/YihuaWanglv/jeesite</a></p>\n</li>\n<li><p>Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 <a href=\"https://github.com/waylau/apache-mina-2.x-user-guide\">https://github.com/waylau/apache-mina-2.x-user-guide</a><br><a href=\"https://github.com/waylau/apache-mina-2-user-guide-demos\">https://github.com/waylau/apache-mina-2-user-guide-demos</a></p>\n</li>\n<li><p>Spring Framework 4.x Reference Documentation 中文翻译<br><a href=\"https://www.gitbook.com/book/waylau/spring-framework-4-reference/details\">https://www.gitbook.com/book/waylau/spring-framework-4-reference/details</a><br><a href=\"https://github.com/waylau/spring-framework-4-reference\">https://github.com/waylau/spring-framework-4-reference</a></p>\n</li>\n<li><p>免费的计算机编程类中文书籍<br><a href=\"https://github.com/YihuaWanglv/free-programming-books-zh_CN\">https://github.com/YihuaWanglv/free-programming-books-zh_CN</a><br>网页版：<br><a href=\"http://siberiawolf.com/free_programming/index.html\">http://siberiawolf.com/free_programming/index.html</a></p>\n</li>\n<li><p>一个合格的程序员应该读过哪些书<br><a href=\"http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\">http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html</a></p>\n</li>\n<li><p>Google 全球 IP 地址库<br><a href=\"https://github.com/justjavac/Google-IPs\">https://github.com/justjavac/Google-IPs</a></p>\n</li>\n<li><p>一份关于“资料汇总”的汇总<br><a href=\"https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\">https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN</a></p>\n</li>\n<li><p>Freely available programming books<br><a href=\"https://github.com/YihuaWanglv/free-programming-books\">https://github.com/YihuaWanglv/free-programming-books</a></p>\n</li>\n<li><p>RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计<br><a href=\"https://github.com/aisuhua/restful-api-design-references\">https://github.com/aisuhua/restful-api-design-references</a></p>\n</li>\n<li><p>ssential Netty in Action 《Netty 实战(精髓)》<br><a href=\"https://github.com/waylau/essential-netty-in-action\">https://github.com/waylau/essential-netty-in-action</a><br>gitbook：<br><a href=\"http://waylau.com/essential-netty-in-action/\">http://waylau.com/essential-netty-in-action/</a></p>\n</li>\n<li><p>Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》<br><a href=\"https://github.com/waylau/Gradle-2-User-Guide\">https://github.com/waylau/Gradle-2-User-Guide</a><br>gitbook：<br><a href=\"https://www.gitbook.com/book/waylau/gradle-2-user-guide/details\">https://www.gitbook.com/book/waylau/gradle-2-user-guide/details</a></p>\n</li>\n<li><p>Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》<br><a href=\"https://github.com/waylau/netty-4-user-guide\">https://github.com/waylau/netty-4-user-guide</a><br>gitbook：<br><a href=\"http://waylau.com/netty-4-user-guide/\">http://waylau.com/netty-4-user-guide/</a></p>\n</li>\n<li><p>这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新<br><a href=\"https://github.com/YihuaWanglv/Perfect_IM_SNS\">https://github.com/YihuaWanglv/Perfect_IM_SNS</a></p>\n</li>\n<li><p>基于位置信息，空间时间结合的社交与分享的应用<br><a href=\"https://github.com/YihuaWanglv/Tuyi\">https://github.com/YihuaWanglv/Tuyi</a></p>\n</li>\n<li><p>SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）<br><a href=\"https://github.com/YihuaWanglv/SYTeamApp\">https://github.com/YihuaWanglv/SYTeamApp</a></p>\n</li>\n<li><p>MeifuGO：An open source android app by using easemob IM SDK<br><a href=\"https://github.com/YihuaWanglv/MeifuGO\">https://github.com/YihuaWanglv/MeifuGO</a></p>\n</li>\n<li><p>fangyuanshili：环信SDK,IM,geohash,lbs<br><a href=\"https://github.com/YihuaWanglv/fangyuanshili\">https://github.com/YihuaWanglv/fangyuanshili</a></p>\n</li>\n<li><p>zaina：该项目是改编自环信即时通讯云的demo改编<br><a href=\"https://github.com/YihuaWanglv/zaina\">https://github.com/YihuaWanglv/zaina</a></p>\n</li>\n<li><p>dianhua：基于react native 和 环信的实时通话的免费店话<br><a href=\"https://github.com/YihuaWanglv/dianhua\">https://github.com/YihuaWanglv/dianhua</a></p>\n</li>\n<li><p>Baby：一个私密社交APP<br><a href=\"https://github.com/YihuaWanglv/Baby\">https://github.com/YihuaWanglv/Baby</a></p>\n</li>\n<li><p>MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。<br>a common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.<br><a href=\"https://github.com/YihuaWanglv/MVPCommon\">https://github.com/YihuaWanglv/MVPCommon</a><br>从零开始搭建android框架系列：<br><a href=\"http://www.jianshu.com/notebooks/3767449/latest\">http://www.jianshu.com/notebooks/3767449/latest</a></p>\n</li>\n<li><p>learnCloud：<br>和应用服务器、存储服务器说再见<br>再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。<br><a href=\"https://leancloud.cn/\">https://leancloud.cn/</a></p>\n</li>\n<li><p>不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】<br><a href=\"http://www.jianshu.com/p/1f21e1d375aa\">http://www.jianshu.com/p/1f21e1d375aa</a></p>\n</li>\n<li><p>安卓架构文章合集（a collection of android Architecture）<br><a href=\"https://github.com/YihuaWanglv/AndroidArchitectureCollection\">https://github.com/YihuaWanglv/AndroidArchitectureCollection</a></p>\n</li>\n</ul>\n","sticky":0},{"title":"[dev][collect][2016-07]collect-of-dev","date":"2016-08-03T05:21:52.000Z","_content":"\n## 2016-07\n\n### 2016-07-29\n- 搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台\nhttps://www.iamle.com/archives/2058.html\n\n### 2016-07-23\n- discover meteor\nhttp://zh.discovermeteor.com/chapters/introduction/\n\n- webpack gitbook\nhttps://hulufei.gitbooks.io/react-tutorial/content/webpack.html\n\n\n\n### 2016-07-22\n- Spring Boot应用的测试——Mockito\nhttp://www.jianshu.com/p/972cd6b93206\n\n- 利用Mockito模拟DB\nhttp://www.jianshu.com/p/c1c495f231ea\n\n- 在Spring Boot项目中使用Spock框架\nhttp://www.jianshu.com/p/f1e354d382cd\n\n- Spring Boot Testing\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\n\n- Integration Testing a Spring Boot Application\nhttps://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\n\n\n### 2016-07-21\n- Growth: 全栈增长工程师指南\nhttp://growth.phodal.com/#\n\n### 2016-07-19\n- 微服务架构的分布式事务解决方案\nhttp://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\n\n### 2016-07-16\n- 使用 Vaadin 实现全堆栈 Java Web 开发\nhttp://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\n\n- Creating CRUD UI with Vaadin\nhttps://spring.io/guides/gs/crud-with-vaadin/\ngit clone https://github.com/spring-guides/gs-crud-with-vaadin.git\n\n- 当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用\nhttp://www.infoq.com/cn/news/2014/10/dubbox-open-source\n\n- 在Dubbo中开发REST风格的远程调用（RESTful Remoting）\nhttp://dangdangdotcom.github.io/dubbox/rest.html\n\n- 使用JavaConfig方式配置dubbox\nhttp://dangdangdotcom.github.io/dubbox/java-config.html\n\n- Microservices with Spring\nhttps://spring.io/blog/2015/07/14/microservices-with-spring\n\n### 2016-07-14\n- Import/Read excel file 2003 or 2007 with Spring MVC\nhttp://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\n- SPRING BOOT FILE UPLOAD WITH AJAX\nhttp://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\nhttps://github.com/netgloo/spring-boot-samples\n\n\n### 2016-07-13\n- cSphere Docker 实训课程\nhttp://git.oschina.net/dockerf/docker-training\n\n- Spring Cloud方面的博客\nhttp://blog.didispace.com/\n\n- 白话 IT 之浅谈 ELK 日志系统\nhttps://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&mid=2653788351&idx=1&sn=a38a0b95b63186b789423195fa09f91d&scene=0&key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&ascene=0&uin=MTM4NTI5NTI4Mg%3D%3D&devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&version=11020201&pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\n\n- 用户行为分析项目\nhttps://github.com/YihuaWanglv/piwik\n\n### 2016-07-12\n- 使用API网关构建微服务\nhttp://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\n\n- 使用Spring Cloud和Docker构建微服务\nhttp://www.dockone.io/article/510\n原文链接：\nhttp://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\n\n- The API Gateway Pattern: Angular JS and Spring Security Part IV\nhttps://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\n\n- git demo for spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-cloud-microservice-example\n\n- Implementing Netflix Zuul in Spring Cloud\nhttp://kubecloud.io/apigatewaypattern/\nhttp://start.spring.io/\n\n\n### 2016-07-11\n- 使用 Vuex + Vue.js 构建单页应用\nhttps://segmentfault.com/a/1190000005891026\nhttps://github.com/lichenbuliren/vuex-notes-app\n\n- 两篇关于微服务api gateway的著名文章\nhttp://microservices.io/patterns/apigateway.html\nhttps://www.nginx.com/blog/building-microservices-using-an-api-gateway/\n\n\n### 2016-07-08\n- 使用spring boot和thrift、zookeeper建立微服务\nhttp://www.cnblogs.com/skyblog/p/5535418.html\n\n- Jenkins+Docker搭建持续集成测试环境\nhttp://www.dockone.io/article/1464\n\n- spring boot+spring cloud服务化系列博客\nhttp://www.cnblogs.com/skyblog/category/774535.html\n\n\n\n### 2016-07-06\n- 使用Jenkins搭建iOS/Android持续集成打包平台\nhttp://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\n\n- React-Native For Android 环境搭建及踩坑\nhttp://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\n\n- React Native 开发培训免费书\nhttps://unbug.gitbooks.io/react-native-training/content/\n\n- Android Studio插件整理\nhttps://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\n\n- FastDFS + Nginx 反向代理缓存 安装与配置\nhttp://www.linux178.com/storage/fastdfs-nginx-cache.html\n","source":"_posts/dev-collect-2016-07-collect-of-dev.md","raw":"---\ntitle: '[dev][collect][2016-07]collect-of-dev'\ndate: 2016-08-03 13:21:52\ntags: [collect, dev, java, android, collect-of-dev]\n---\n\n## 2016-07\n\n### 2016-07-29\n- 搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台\nhttps://www.iamle.com/archives/2058.html\n\n### 2016-07-23\n- discover meteor\nhttp://zh.discovermeteor.com/chapters/introduction/\n\n- webpack gitbook\nhttps://hulufei.gitbooks.io/react-tutorial/content/webpack.html\n\n\n\n### 2016-07-22\n- Spring Boot应用的测试——Mockito\nhttp://www.jianshu.com/p/972cd6b93206\n\n- 利用Mockito模拟DB\nhttp://www.jianshu.com/p/c1c495f231ea\n\n- 在Spring Boot项目中使用Spock框架\nhttp://www.jianshu.com/p/f1e354d382cd\n\n- Spring Boot Testing\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\n\n- Integration Testing a Spring Boot Application\nhttps://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\n\n\n### 2016-07-21\n- Growth: 全栈增长工程师指南\nhttp://growth.phodal.com/#\n\n### 2016-07-19\n- 微服务架构的分布式事务解决方案\nhttp://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\n\n### 2016-07-16\n- 使用 Vaadin 实现全堆栈 Java Web 开发\nhttp://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\n\n- Creating CRUD UI with Vaadin\nhttps://spring.io/guides/gs/crud-with-vaadin/\ngit clone https://github.com/spring-guides/gs-crud-with-vaadin.git\n\n- 当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用\nhttp://www.infoq.com/cn/news/2014/10/dubbox-open-source\n\n- 在Dubbo中开发REST风格的远程调用（RESTful Remoting）\nhttp://dangdangdotcom.github.io/dubbox/rest.html\n\n- 使用JavaConfig方式配置dubbox\nhttp://dangdangdotcom.github.io/dubbox/java-config.html\n\n- Microservices with Spring\nhttps://spring.io/blog/2015/07/14/microservices-with-spring\n\n### 2016-07-14\n- Import/Read excel file 2003 or 2007 with Spring MVC\nhttp://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\n- SPRING BOOT FILE UPLOAD WITH AJAX\nhttp://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\nhttps://github.com/netgloo/spring-boot-samples\n\n\n### 2016-07-13\n- cSphere Docker 实训课程\nhttp://git.oschina.net/dockerf/docker-training\n\n- Spring Cloud方面的博客\nhttp://blog.didispace.com/\n\n- 白话 IT 之浅谈 ELK 日志系统\nhttps://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&mid=2653788351&idx=1&sn=a38a0b95b63186b789423195fa09f91d&scene=0&key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&ascene=0&uin=MTM4NTI5NTI4Mg%3D%3D&devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&version=11020201&pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\n\n- 用户行为分析项目\nhttps://github.com/YihuaWanglv/piwik\n\n### 2016-07-12\n- 使用API网关构建微服务\nhttp://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\n\n- 使用Spring Cloud和Docker构建微服务\nhttp://www.dockone.io/article/510\n原文链接：\nhttp://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\n\n- The API Gateway Pattern: Angular JS and Spring Security Part IV\nhttps://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\n\n- git demo for spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-cloud-microservice-example\n\n- Implementing Netflix Zuul in Spring Cloud\nhttp://kubecloud.io/apigatewaypattern/\nhttp://start.spring.io/\n\n\n### 2016-07-11\n- 使用 Vuex + Vue.js 构建单页应用\nhttps://segmentfault.com/a/1190000005891026\nhttps://github.com/lichenbuliren/vuex-notes-app\n\n- 两篇关于微服务api gateway的著名文章\nhttp://microservices.io/patterns/apigateway.html\nhttps://www.nginx.com/blog/building-microservices-using-an-api-gateway/\n\n\n### 2016-07-08\n- 使用spring boot和thrift、zookeeper建立微服务\nhttp://www.cnblogs.com/skyblog/p/5535418.html\n\n- Jenkins+Docker搭建持续集成测试环境\nhttp://www.dockone.io/article/1464\n\n- spring boot+spring cloud服务化系列博客\nhttp://www.cnblogs.com/skyblog/category/774535.html\n\n\n\n### 2016-07-06\n- 使用Jenkins搭建iOS/Android持续集成打包平台\nhttp://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\n\n- React-Native For Android 环境搭建及踩坑\nhttp://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\n\n- React Native 开发培训免费书\nhttps://unbug.gitbooks.io/react-native-training/content/\n\n- Android Studio插件整理\nhttps://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\n\n- FastDFS + Nginx 反向代理缓存 安装与配置\nhttp://www.linux178.com/storage/fastdfs-nginx-cache.html\n","slug":"dev-collect-2016-07-collect-of-dev","published":1,"updated":"2016-08-03T14:42:36.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghi4000q30ngmshzocgf","content":"<h2 id=\"2016-07\"><a href=\"#2016-07\" class=\"headerlink\" title=\"2016-07\"></a>2016-07</h2><h3 id=\"2016-07-29\"><a href=\"#2016-07-29\" class=\"headerlink\" title=\"2016-07-29\"></a>2016-07-29</h3><ul>\n<li>搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台<br><a href=\"https://www.iamle.com/archives/2058.html\" target=\"_blank\" rel=\"external\">https://www.iamle.com/archives/2058.html</a></li>\n</ul>\n<h3 id=\"2016-07-23\"><a href=\"#2016-07-23\" class=\"headerlink\" title=\"2016-07-23\"></a>2016-07-23</h3><ul>\n<li><p>discover meteor<br><a href=\"http://zh.discovermeteor.com/chapters/introduction/\" target=\"_blank\" rel=\"external\">http://zh.discovermeteor.com/chapters/introduction/</a></p>\n</li>\n<li><p>webpack gitbook<br><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/webpack.html\" target=\"_blank\" rel=\"external\">https://hulufei.gitbooks.io/react-tutorial/content/webpack.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-22\"><a href=\"#2016-07-22\" class=\"headerlink\" title=\"2016-07-22\"></a>2016-07-22</h3><ul>\n<li><p>Spring Boot应用的测试——Mockito<br><a href=\"http://www.jianshu.com/p/972cd6b93206\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/972cd6b93206</a></p>\n</li>\n<li><p>利用Mockito模拟DB<br><a href=\"http://www.jianshu.com/p/c1c495f231ea\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/c1c495f231ea</a></p>\n</li>\n<li><p>在Spring Boot项目中使用Spock框架<br><a href=\"http://www.jianshu.com/p/f1e354d382cd\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f1e354d382cd</a></p>\n</li>\n<li><p>Spring Boot Testing<br><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\" target=\"_blank\" rel=\"external\">http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html</a></p>\n</li>\n<li><p>Integration Testing a Spring Boot Application<br><a href=\"https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\" target=\"_blank\" rel=\"external\">https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-21\"><a href=\"#2016-07-21\" class=\"headerlink\" title=\"2016-07-21\"></a>2016-07-21</h3><ul>\n<li>Growth: 全栈增长工程师指南<br><a href=\"http://growth.phodal.com/#\" target=\"_blank\" rel=\"external\">http://growth.phodal.com/#</a></li>\n</ul>\n<h3 id=\"2016-07-19\"><a href=\"#2016-07-19\" class=\"headerlink\" title=\"2016-07-19\"></a>2016-07-19</h3><ul>\n<li>微服务架构的分布式事务解决方案<br><a href=\"http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\" target=\"_blank\" rel=\"external\">http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb</a></li>\n</ul>\n<h3 id=\"2016-07-16\"><a href=\"#2016-07-16\" class=\"headerlink\" title=\"2016-07-16\"></a>2016-07-16</h3><ul>\n<li><p>使用 Vaadin 实现全堆栈 Java Web 开发<br><a href=\"http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/</a></p>\n</li>\n<li><p>Creating CRUD UI with Vaadin<br><a href=\"https://spring.io/guides/gs/crud-with-vaadin/\" target=\"_blank\" rel=\"external\">https://spring.io/guides/gs/crud-with-vaadin/</a><br>git clone <a href=\"https://github.com/spring-guides/gs-crud-with-vaadin.git\" target=\"_blank\" rel=\"external\">https://github.com/spring-guides/gs-crud-with-vaadin.git</a></p>\n</li>\n<li><p>当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用<br><a href=\"http://www.infoq.com/cn/news/2014/10/dubbox-open-source\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/news/2014/10/dubbox-open-source</a></p>\n</li>\n<li><p>在Dubbo中开发REST风格的远程调用（RESTful Remoting）<br><a href=\"http://dangdangdotcom.github.io/dubbox/rest.html\" target=\"_blank\" rel=\"external\">http://dangdangdotcom.github.io/dubbox/rest.html</a></p>\n</li>\n<li><p>使用JavaConfig方式配置dubbox<br><a href=\"http://dangdangdotcom.github.io/dubbox/java-config.html\" target=\"_blank\" rel=\"external\">http://dangdangdotcom.github.io/dubbox/java-config.html</a></p>\n</li>\n<li><p>Microservices with Spring<br><a href=\"https://spring.io/blog/2015/07/14/microservices-with-spring\" target=\"_blank\" rel=\"external\">https://spring.io/blog/2015/07/14/microservices-with-spring</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-14\"><a href=\"#2016-07-14\" class=\"headerlink\" title=\"2016-07-14\"></a>2016-07-14</h3><ul>\n<li>Import/Read excel file 2003 or 2007 with Spring MVC<br><a href=\"http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\" target=\"_blank\" rel=\"external\">http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html</a></li>\n<li>SPRING BOOT FILE UPLOAD WITH AJAX<br><a href=\"http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\" target=\"_blank\" rel=\"external\">http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/</a><br><a href=\"https://github.com/netgloo/spring-boot-samples\" target=\"_blank\" rel=\"external\">https://github.com/netgloo/spring-boot-samples</a></li>\n</ul>\n<h3 id=\"2016-07-13\"><a href=\"#2016-07-13\" class=\"headerlink\" title=\"2016-07-13\"></a>2016-07-13</h3><ul>\n<li><p>cSphere Docker 实训课程<br><a href=\"http://git.oschina.net/dockerf/docker-training\" target=\"_blank\" rel=\"external\">http://git.oschina.net/dockerf/docker-training</a></p>\n</li>\n<li><p>Spring Cloud方面的博客<br><a href=\"http://blog.didispace.com/\" target=\"_blank\" rel=\"external\">http://blog.didispace.com/</a></p>\n</li>\n<li><p>白话 IT 之浅谈 ELK 日志系统<br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct</a></p>\n</li>\n<li><p>用户行为分析项目<br><a href=\"https://github.com/YihuaWanglv/piwik\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/piwik</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-12\"><a href=\"#2016-07-12\" class=\"headerlink\" title=\"2016-07-12\"></a>2016-07-12</h3><ul>\n<li><p>使用API网关构建微服务<br><a href=\"http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway</a></p>\n</li>\n<li><p>使用Spring Cloud和Docker构建微服务<br><a href=\"http://www.dockone.io/article/510\" target=\"_blank\" rel=\"external\">http://www.dockone.io/article/510</a><br>原文链接：<br><a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\" target=\"_blank\" rel=\"external\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D</a></p>\n</li>\n<li><p>The API Gateway Pattern: Angular JS and Spring Security Part IV<br><a href=\"https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\" target=\"_blank\" rel=\"external\">https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv</a></p>\n</li>\n<li><p>git demo for spring-boot-microservices<br><a href=\"https://github.com/YihuaWanglv/spring-boot-microservices\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/spring-boot-microservices</a><br><a href=\"https://github.com/YihuaWanglv/spring-cloud-microservice-example\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/spring-cloud-microservice-example</a></p>\n</li>\n<li><p>Implementing Netflix Zuul in Spring Cloud<br><a href=\"http://kubecloud.io/apigatewaypattern/\" target=\"_blank\" rel=\"external\">http://kubecloud.io/apigatewaypattern/</a><br><a href=\"http://start.spring.io/\" target=\"_blank\" rel=\"external\">http://start.spring.io/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-11\"><a href=\"#2016-07-11\" class=\"headerlink\" title=\"2016-07-11\"></a>2016-07-11</h3><ul>\n<li><p>使用 Vuex + Vue.js 构建单页应用<br><a href=\"https://segmentfault.com/a/1190000005891026\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000005891026</a><br><a href=\"https://github.com/lichenbuliren/vuex-notes-app\" target=\"_blank\" rel=\"external\">https://github.com/lichenbuliren/vuex-notes-app</a></p>\n</li>\n<li><p>两篇关于微服务api gateway的著名文章<br><a href=\"http://microservices.io/patterns/apigateway.html\" target=\"_blank\" rel=\"external\">http://microservices.io/patterns/apigateway.html</a><br><a href=\"https://www.nginx.com/blog/building-microservices-using-an-api-gateway/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/blog/building-microservices-using-an-api-gateway/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-08\"><a href=\"#2016-07-08\" class=\"headerlink\" title=\"2016-07-08\"></a>2016-07-08</h3><ul>\n<li><p>使用spring boot和thrift、zookeeper建立微服务<br><a href=\"http://www.cnblogs.com/skyblog/p/5535418.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/skyblog/p/5535418.html</a></p>\n</li>\n<li><p>Jenkins+Docker搭建持续集成测试环境<br><a href=\"http://www.dockone.io/article/1464\" target=\"_blank\" rel=\"external\">http://www.dockone.io/article/1464</a></p>\n</li>\n<li><p>spring boot+spring cloud服务化系列博客<br><a href=\"http://www.cnblogs.com/skyblog/category/774535.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/skyblog/category/774535.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h3><ul>\n<li><p>使用Jenkins搭建iOS/Android持续集成打包平台<br><a href=\"http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\" target=\"_blank\" rel=\"external\">http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins</a></p>\n</li>\n<li><p>React-Native For Android 环境搭建及踩坑<br><a href=\"http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\" target=\"_blank\" rel=\"external\">http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html</a></p>\n</li>\n<li><p>React Native 开发培训免费书<br><a href=\"https://unbug.gitbooks.io/react-native-training/content/\" target=\"_blank\" rel=\"external\">https://unbug.gitbooks.io/react-native-training/content/</a></p>\n</li>\n<li><p>Android Studio插件整理<br><a href=\"https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\" target=\"_blank\" rel=\"external\">https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</a></p>\n</li>\n<li><p>FastDFS + Nginx 反向代理缓存 安装与配置<br><a href=\"http://www.linux178.com/storage/fastdfs-nginx-cache.html\" target=\"_blank\" rel=\"external\">http://www.linux178.com/storage/fastdfs-nginx-cache.html</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"2016-07\"><a href=\"#2016-07\" class=\"headerlink\" title=\"2016-07\"></a>2016-07</h2><h3 id=\"2016-07-29\"><a href=\"#2016-07-29\" class=\"headerlink\" title=\"2016-07-29\"></a>2016-07-29</h3><ul>\n<li>搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台<br><a href=\"https://www.iamle.com/archives/2058.html\">https://www.iamle.com/archives/2058.html</a></li>\n</ul>\n<h3 id=\"2016-07-23\"><a href=\"#2016-07-23\" class=\"headerlink\" title=\"2016-07-23\"></a>2016-07-23</h3><ul>\n<li><p>discover meteor<br><a href=\"http://zh.discovermeteor.com/chapters/introduction/\">http://zh.discovermeteor.com/chapters/introduction/</a></p>\n</li>\n<li><p>webpack gitbook<br><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/webpack.html\">https://hulufei.gitbooks.io/react-tutorial/content/webpack.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-22\"><a href=\"#2016-07-22\" class=\"headerlink\" title=\"2016-07-22\"></a>2016-07-22</h3><ul>\n<li><p>Spring Boot应用的测试——Mockito<br><a href=\"http://www.jianshu.com/p/972cd6b93206\">http://www.jianshu.com/p/972cd6b93206</a></p>\n</li>\n<li><p>利用Mockito模拟DB<br><a href=\"http://www.jianshu.com/p/c1c495f231ea\">http://www.jianshu.com/p/c1c495f231ea</a></p>\n</li>\n<li><p>在Spring Boot项目中使用Spock框架<br><a href=\"http://www.jianshu.com/p/f1e354d382cd\">http://www.jianshu.com/p/f1e354d382cd</a></p>\n</li>\n<li><p>Spring Boot Testing<br><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\">http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html</a></p>\n</li>\n<li><p>Integration Testing a Spring Boot Application<br><a href=\"https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\">https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-21\"><a href=\"#2016-07-21\" class=\"headerlink\" title=\"2016-07-21\"></a>2016-07-21</h3><ul>\n<li>Growth: 全栈增长工程师指南<br><a href=\"http://growth.phodal.com/#\">http://growth.phodal.com/#</a></li>\n</ul>\n<h3 id=\"2016-07-19\"><a href=\"#2016-07-19\" class=\"headerlink\" title=\"2016-07-19\"></a>2016-07-19</h3><ul>\n<li>微服务架构的分布式事务解决方案<br><a href=\"http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\">http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb</a></li>\n</ul>\n<h3 id=\"2016-07-16\"><a href=\"#2016-07-16\" class=\"headerlink\" title=\"2016-07-16\"></a>2016-07-16</h3><ul>\n<li><p>使用 Vaadin 实现全堆栈 Java Web 开发<br><a href=\"http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\">http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/</a></p>\n</li>\n<li><p>Creating CRUD UI with Vaadin<br><a href=\"https://spring.io/guides/gs/crud-with-vaadin/\">https://spring.io/guides/gs/crud-with-vaadin/</a><br>git clone <a href=\"https://github.com/spring-guides/gs-crud-with-vaadin.git\">https://github.com/spring-guides/gs-crud-with-vaadin.git</a></p>\n</li>\n<li><p>当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用<br><a href=\"http://www.infoq.com/cn/news/2014/10/dubbox-open-source\">http://www.infoq.com/cn/news/2014/10/dubbox-open-source</a></p>\n</li>\n<li><p>在Dubbo中开发REST风格的远程调用（RESTful Remoting）<br><a href=\"http://dangdangdotcom.github.io/dubbox/rest.html\">http://dangdangdotcom.github.io/dubbox/rest.html</a></p>\n</li>\n<li><p>使用JavaConfig方式配置dubbox<br><a href=\"http://dangdangdotcom.github.io/dubbox/java-config.html\">http://dangdangdotcom.github.io/dubbox/java-config.html</a></p>\n</li>\n<li><p>Microservices with Spring<br><a href=\"https://spring.io/blog/2015/07/14/microservices-with-spring\">https://spring.io/blog/2015/07/14/microservices-with-spring</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-14\"><a href=\"#2016-07-14\" class=\"headerlink\" title=\"2016-07-14\"></a>2016-07-14</h3><ul>\n<li>Import/Read excel file 2003 or 2007 with Spring MVC<br><a href=\"http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\">http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html</a></li>\n<li>SPRING BOOT FILE UPLOAD WITH AJAX<br><a href=\"http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\">http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/</a><br><a href=\"https://github.com/netgloo/spring-boot-samples\">https://github.com/netgloo/spring-boot-samples</a></li>\n</ul>\n<h3 id=\"2016-07-13\"><a href=\"#2016-07-13\" class=\"headerlink\" title=\"2016-07-13\"></a>2016-07-13</h3><ul>\n<li><p>cSphere Docker 实训课程<br><a href=\"http://git.oschina.net/dockerf/docker-training\">http://git.oschina.net/dockerf/docker-training</a></p>\n</li>\n<li><p>Spring Cloud方面的博客<br><a href=\"http://blog.didispace.com/\">http://blog.didispace.com/</a></p>\n</li>\n<li><p>白话 IT 之浅谈 ELK 日志系统<br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\">https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct</a></p>\n</li>\n<li><p>用户行为分析项目<br><a href=\"https://github.com/YihuaWanglv/piwik\">https://github.com/YihuaWanglv/piwik</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-12\"><a href=\"#2016-07-12\" class=\"headerlink\" title=\"2016-07-12\"></a>2016-07-12</h3><ul>\n<li><p>使用API网关构建微服务<br><a href=\"http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\">http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway</a></p>\n</li>\n<li><p>使用Spring Cloud和Docker构建微服务<br><a href=\"http://www.dockone.io/article/510\">http://www.dockone.io/article/510</a><br>原文链接：<br><a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D</a></p>\n</li>\n<li><p>The API Gateway Pattern: Angular JS and Spring Security Part IV<br><a href=\"https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\">https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv</a></p>\n</li>\n<li><p>git demo for spring-boot-microservices<br><a href=\"https://github.com/YihuaWanglv/spring-boot-microservices\">https://github.com/YihuaWanglv/spring-boot-microservices</a><br><a href=\"https://github.com/YihuaWanglv/spring-cloud-microservice-example\">https://github.com/YihuaWanglv/spring-cloud-microservice-example</a></p>\n</li>\n<li><p>Implementing Netflix Zuul in Spring Cloud<br><a href=\"http://kubecloud.io/apigatewaypattern/\">http://kubecloud.io/apigatewaypattern/</a><br><a href=\"http://start.spring.io/\">http://start.spring.io/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-11\"><a href=\"#2016-07-11\" class=\"headerlink\" title=\"2016-07-11\"></a>2016-07-11</h3><ul>\n<li><p>使用 Vuex + Vue.js 构建单页应用<br><a href=\"https://segmentfault.com/a/1190000005891026\">https://segmentfault.com/a/1190000005891026</a><br><a href=\"https://github.com/lichenbuliren/vuex-notes-app\">https://github.com/lichenbuliren/vuex-notes-app</a></p>\n</li>\n<li><p>两篇关于微服务api gateway的著名文章<br><a href=\"http://microservices.io/patterns/apigateway.html\">http://microservices.io/patterns/apigateway.html</a><br><a href=\"https://www.nginx.com/blog/building-microservices-using-an-api-gateway/\">https://www.nginx.com/blog/building-microservices-using-an-api-gateway/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-08\"><a href=\"#2016-07-08\" class=\"headerlink\" title=\"2016-07-08\"></a>2016-07-08</h3><ul>\n<li><p>使用spring boot和thrift、zookeeper建立微服务<br><a href=\"http://www.cnblogs.com/skyblog/p/5535418.html\">http://www.cnblogs.com/skyblog/p/5535418.html</a></p>\n</li>\n<li><p>Jenkins+Docker搭建持续集成测试环境<br><a href=\"http://www.dockone.io/article/1464\">http://www.dockone.io/article/1464</a></p>\n</li>\n<li><p>spring boot+spring cloud服务化系列博客<br><a href=\"http://www.cnblogs.com/skyblog/category/774535.html\">http://www.cnblogs.com/skyblog/category/774535.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h3><ul>\n<li><p>使用Jenkins搭建iOS/Android持续集成打包平台<br><a href=\"http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\">http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins</a></p>\n</li>\n<li><p>React-Native For Android 环境搭建及踩坑<br><a href=\"http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\">http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html</a></p>\n</li>\n<li><p>React Native 开发培训免费书<br><a href=\"https://unbug.gitbooks.io/react-native-training/content/\">https://unbug.gitbooks.io/react-native-training/content/</a></p>\n</li>\n<li><p>Android Studio插件整理<br><a href=\"https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\">https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</a></p>\n</li>\n<li><p>FastDFS + Nginx 反向代理缓存 安装与配置<br><a href=\"http://www.linux178.com/storage/fastdfs-nginx-cache.html\">http://www.linux178.com/storage/fastdfs-nginx-cache.html</a></p>\n</li>\n</ul>\n","sticky":0},{"title":"[java][design-pattern]java设计模式之Builder模式","date":"2016-05-08T08:58:38.000Z","_content":"\n\n## java设计模式之Builder模式\n\n设计模式模式很多，实际常用的很少。\n《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。\n假设有一个entity(Entity)，有id，name两个字段，如下：\n```\npackage demo;\npublic class Entity {\n    private int id;\n    private String name;\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。\n加入构造函数的实体代码如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    public Entity() {\n        super();\n    }\n    public Entity(int id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n然后需要初始化实体的时候，我们这样做：\n```\nEntity entity = new Entity(1, \"name\");\n```\n\n这种用法很常用，但是问题来了。\n当实体Entity的字段需要增加变化的时候怎么办呢？\n比如增加字段descr，这样构造函数和客户端初始化都需要更新：\n实体增加：\n```\n    private String descr;\n    public String getDescr() {\n        return descr;\n    }\n    public void setDescr(String descr) {\n        this.descr = descr;\n    }\n    public Entity(int id, String name, String descr) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.descr = descr;\n    }\n```\n然后原来调用构造函数初始化的代码也需要改动：\n```\nEntity entity = new Entity(1, \"name\", \"descr\");\n```\n如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。\n\n而Effective Java中则推荐一种builder模式来进行实体初始化\n如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    private String descr;\n    public static class Builder {\n        private int id;\n        private String name;\n        private String descr;\n        public Builder(int id) {\n            this.id = id;\n        }\n        public Builder name(String name) {\n            this.name = name;\n            return this;\n        }\n        public Builder descr(String descr) {\n            this.descr = descr;\n            return this;\n        }\n        public Entity build() {\n            return new Entity(this);\n        }\n    }\n    private Entity(Builder b) {\n        this.id = b.id;\n        this.name = b.name;\n        this.descr = b.descr;\n    }\n}\n```\n初始化实例的时候，如下：\n```\nEntity entity = new Entity.Builder(10).name(\"name\").descr(\"descr\").build();\n```\n这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。\n","source":"_posts/java-design-pattern-java设计模式之Builder模式.md","raw":"---\ntitle: '[java][design-pattern]java设计模式之Builder模式'\ndate: 2016-05-08 16:58:38\ntags: [java, 设计模式, Builder, design pattern]\n---\n\n\n## java设计模式之Builder模式\n\n设计模式模式很多，实际常用的很少。\n《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。\n假设有一个entity(Entity)，有id，name两个字段，如下：\n```\npackage demo;\npublic class Entity {\n    private int id;\n    private String name;\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。\n加入构造函数的实体代码如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    public Entity() {\n        super();\n    }\n    public Entity(int id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n然后需要初始化实体的时候，我们这样做：\n```\nEntity entity = new Entity(1, \"name\");\n```\n\n这种用法很常用，但是问题来了。\n当实体Entity的字段需要增加变化的时候怎么办呢？\n比如增加字段descr，这样构造函数和客户端初始化都需要更新：\n实体增加：\n```\n    private String descr;\n    public String getDescr() {\n        return descr;\n    }\n    public void setDescr(String descr) {\n        this.descr = descr;\n    }\n    public Entity(int id, String name, String descr) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.descr = descr;\n    }\n```\n然后原来调用构造函数初始化的代码也需要改动：\n```\nEntity entity = new Entity(1, \"name\", \"descr\");\n```\n如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。\n\n而Effective Java中则推荐一种builder模式来进行实体初始化\n如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    private String descr;\n    public static class Builder {\n        private int id;\n        private String name;\n        private String descr;\n        public Builder(int id) {\n            this.id = id;\n        }\n        public Builder name(String name) {\n            this.name = name;\n            return this;\n        }\n        public Builder descr(String descr) {\n            this.descr = descr;\n            return this;\n        }\n        public Entity build() {\n            return new Entity(this);\n        }\n    }\n    private Entity(Builder b) {\n        this.id = b.id;\n        this.name = b.name;\n        this.descr = b.descr;\n    }\n}\n```\n初始化实例的时候，如下：\n```\nEntity entity = new Entity.Builder(10).name(\"name\").descr(\"descr\").build();\n```\n这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。\n","slug":"java-design-pattern-java设计模式之Builder模式","published":1,"updated":"2016-05-08T09:00:12.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghia000s30ng52wgbzxi","content":"<h2 id=\"java设计模式之Builder模式\"><a href=\"#java设计模式之Builder模式\" class=\"headerlink\" title=\"java设计模式之Builder模式\"></a>java设计模式之Builder模式</h2><p>设计模式模式很多，实际常用的很少。<br>《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。<br>假设有一个entity(Entity)，有id，name两个字段，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package demo;</span><br><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。<br>加入构造函数的实体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public Entity() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Entity(int id, String name) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后需要初始化实体的时候，我们这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>这种用法很常用，但是问题来了。<br>当实体Entity的字段需要增加变化的时候怎么办呢？<br>比如增加字段descr，这样构造函数和客户端初始化都需要更新：<br>实体增加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String descr;</span><br><span class=\"line\">public String getDescr() &#123;</span><br><span class=\"line\">    return descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void setDescr(String descr) &#123;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Entity(int id, String name, String descr) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后原来调用构造函数初始化的代码也需要改动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;, &quot;descr&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。</p>\n<p>而Effective Java中则推荐一种builder模式来进行实体初始化<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String descr;</span><br><span class=\"line\">    public static class Builder &#123;</span><br><span class=\"line\">        private int id;</span><br><span class=\"line\">        private String name;</span><br><span class=\"line\">        private String descr;</span><br><span class=\"line\">        public Builder(int id) &#123;</span><br><span class=\"line\">            this.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder name(String name) &#123;</span><br><span class=\"line\">            this.name = name;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder descr(String descr) &#123;</span><br><span class=\"line\">            this.descr = descr;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Entity build() &#123;</span><br><span class=\"line\">            return new Entity(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private Entity(Builder b) &#123;</span><br><span class=\"line\">        this.id = b.id;</span><br><span class=\"line\">        this.name = b.name;</span><br><span class=\"line\">        this.descr = b.descr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化实例的时候，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity.Builder(10).name(&quot;name&quot;).descr(&quot;descr&quot;).build();</span><br></pre></td></tr></table></figure></p>\n<p>这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。</p>\n","excerpt":"","more":"<h2 id=\"java设计模式之Builder模式\"><a href=\"#java设计模式之Builder模式\" class=\"headerlink\" title=\"java设计模式之Builder模式\"></a>java设计模式之Builder模式</h2><p>设计模式模式很多，实际常用的很少。<br>《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。<br>假设有一个entity(Entity)，有id，name两个字段，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package demo;</span><br><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。<br>加入构造函数的实体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public Entity() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Entity(int id, String name) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后需要初始化实体的时候，我们这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>这种用法很常用，但是问题来了。<br>当实体Entity的字段需要增加变化的时候怎么办呢？<br>比如增加字段descr，这样构造函数和客户端初始化都需要更新：<br>实体增加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String descr;</span><br><span class=\"line\">public String getDescr() &#123;</span><br><span class=\"line\">    return descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void setDescr(String descr) &#123;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Entity(int id, String name, String descr) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后原来调用构造函数初始化的代码也需要改动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;, &quot;descr&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。</p>\n<p>而Effective Java中则推荐一种builder模式来进行实体初始化<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String descr;</span><br><span class=\"line\">    public static class Builder &#123;</span><br><span class=\"line\">        private int id;</span><br><span class=\"line\">        private String name;</span><br><span class=\"line\">        private String descr;</span><br><span class=\"line\">        public Builder(int id) &#123;</span><br><span class=\"line\">            this.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder name(String name) &#123;</span><br><span class=\"line\">            this.name = name;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder descr(String descr) &#123;</span><br><span class=\"line\">            this.descr = descr;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Entity build() &#123;</span><br><span class=\"line\">            return new Entity(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private Entity(Builder b) &#123;</span><br><span class=\"line\">        this.id = b.id;</span><br><span class=\"line\">        this.name = b.name;</span><br><span class=\"line\">        this.descr = b.descr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化实例的时候，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity.Builder(10).name(&quot;name&quot;).descr(&quot;descr&quot;).build();</span><br></pre></td></tr></table></figure></p>\n<p>这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。</p>\n","sticky":0},{"title":"java-io体系整理","date":"2016-02-20T04:20:38.000Z","_content":"\n### java io体系使用整理\n- 来源：http://www.importnew.com/17714.html\n- 思维导图：http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\n\n![](/images/java+io.png)","source":"_posts/java-io体系整理.md","raw":"---\ntitle: java-io体系整理\ndate: 2016-02-20 12:20:38\ntags: [java,io,整理,思维导图]\n---\n\n### java io体系使用整理\n- 来源：http://www.importnew.com/17714.html\n- 思维导图：http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\n\n![](/images/java+io.png)","slug":"java-io体系整理","published":1,"updated":"2016-02-20T04:39:58.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghic000t30nguh9o6cdn","content":"<h3 id=\"java-io体系使用整理\"><a href=\"#java-io体系使用整理\" class=\"headerlink\" title=\"java io体系使用整理\"></a>java io体系使用整理</h3><ul>\n<li>来源：<a href=\"http://www.importnew.com/17714.html\" target=\"_blank\" rel=\"external\">http://www.importnew.com/17714.html</a></li>\n<li>思维导图：<a href=\"http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\" target=\"_blank\" rel=\"external\">http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f</a></li>\n</ul>\n<p><img src=\"/images/java+io.png\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"java-io体系使用整理\"><a href=\"#java-io体系使用整理\" class=\"headerlink\" title=\"java io体系使用整理\"></a>java io体系使用整理</h3><ul>\n<li>来源：<a href=\"http://www.importnew.com/17714.html\">http://www.importnew.com/17714.html</a></li>\n<li>思维导图：<a href=\"http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\">http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f</a></li>\n</ul>\n<p><img src=\"/images/java+io.png\" alt=\"\"></p>\n","sticky":0},{"title":"java static 关键字总结","date":"2016-05-08T16:11:19.000Z","_content":"\n\n## 总结：\n### 1.\n修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；\n\n### 2.\n修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。\n该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。\n也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的\n\n### 3.\n普通类不允许被声明为静态的，只有一个内部类可以。\n被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。\n\n\n\n\n## 详述：\n### 1.\n static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 \n\n　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 \n\n　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 \n\n　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 \n\n　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为： \n类名.静态方法名(参数列表...) \n类名.静态变量名 \n\n　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 \n\n### 2.static变量 \n　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是： \n　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。 \n　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 \n\n### 3.static方法 \n　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！ \n　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。\n","source":"_posts/java-static-关键字总结.md","raw":"---\ntitle: java static 关键字总结\ndate: 2016-05-09 00:11:19\ntags: [java, static关键字]\n---\n\n\n## 总结：\n### 1.\n修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；\n\n### 2.\n修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。\n该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。\n也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的\n\n### 3.\n普通类不允许被声明为静态的，只有一个内部类可以。\n被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。\n\n\n\n\n## 详述：\n### 1.\n static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 \n\n　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 \n\n　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 \n\n　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 \n\n　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为： \n类名.静态方法名(参数列表...) \n类名.静态变量名 \n\n　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 \n\n### 2.static变量 \n　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是： \n　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。 \n　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 \n\n### 3.static方法 \n　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！ \n　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。\n","slug":"java-static-关键字总结","published":1,"updated":"2016-05-08T16:14:15.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghid000v30ng1zqx68rf","content":"<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p>修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><p>修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。<br>该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。<br>也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><p>普通类不允许被声明为静态的，只有一个内部类可以。<br>被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。</p>\n<h2 id=\"详述：\"><a href=\"#详述：\" class=\"headerlink\" title=\"详述：\"></a>详述：</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p> static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 </p>\n<p>　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 </p>\n<p>　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 </p>\n<p>　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用–废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 </p>\n<p>　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：<br>类名.静态方法名(参数列表…)<br>类名.静态变量名 </p>\n<p>　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 </p>\n<h3 id=\"2-static变量\"><a href=\"#2-static变量\" class=\"headerlink\" title=\"2.static变量\"></a>2.static变量</h3><p>　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：<br>　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。<br>　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 </p>\n<h3 id=\"3-static方法\"><a href=\"#3-static方法\" class=\"headerlink\" title=\"3.static方法\"></a>3.static方法</h3><p>　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！<br>　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</p>\n","excerpt":"","more":"<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p>修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><p>修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。<br>该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。<br>也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><p>普通类不允许被声明为静态的，只有一个内部类可以。<br>被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。</p>\n<h2 id=\"详述：\"><a href=\"#详述：\" class=\"headerlink\" title=\"详述：\"></a>详述：</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p> static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 </p>\n<p>　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 </p>\n<p>　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 </p>\n<p>　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用–废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 </p>\n<p>　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：<br>类名.静态方法名(参数列表…)<br>类名.静态变量名 </p>\n<p>　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 </p>\n<h3 id=\"2-static变量\"><a href=\"#2-static变量\" class=\"headerlink\" title=\"2.static变量\"></a>2.static变量</h3><p>　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：<br>　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。<br>　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 </p>\n<h3 id=\"3-static方法\"><a href=\"#3-static方法\" class=\"headerlink\" title=\"3.static方法\"></a>3.static方法</h3><p>　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！<br>　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</p>\n","sticky":0},{"title":"[java]从代码中去除if-else","date":"2016-02-02T08:09:30.000Z","_content":"\n有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？\n\n首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。\n\n当判断到确实需要优化if else，方法有很多，总结如下。\n1. 使用map.\n2. 使用枚举.\n3. 多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。\n当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。\n\n下面举例。\n要优化的原if else语句：\n```\nint code;\nif(\"Name\".equals(str))\n    code = 0;\nelse if(\"Age\".equals(str))\n    code = 1;\nelse if(\"Address\".equals(str))\n    code = 2;\n```\n\n## 使用map优化\n```\npublic final static Map map = new HashMap();  \nstatic {  \n    map.put(\"Name\", 0);  \n    map.put(\"Age\", 1);\n    map.put(\"Address\", 2);  \n}\n\nint code = map.get(type);\n```\n\n## 使用枚举优化\n```\npublic enum Codes {\n    Name(0), Age(1), Address(2);\n    public int code;\n    Codes(int code){\n        this.code = code;\n    }\n}\n\nint code = Codes.valueOf(str).code;\n```\n\n## 使用多态优化\n```\nICode iCode = (ICode)Class.forName(\"com.xxx.\" + str).newInstance();\n\nint code = iCode.getCode();\n```\n\n\n## “责任链”如何优化if else？\n首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。\n\n好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。\n\n现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。\n\n好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。\n\n现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。\n\n到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）\n\n最后，我们为了交流方便，把这种组合方式称为“责任链”。\n\n\n## 使用状态模式优化if else\n参考：http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html","source":"_posts/java-从代码中去除if-else.md","raw":"---\ntitle: '[java]从代码中去除if-else'\ndate: 2016-02-02 16:09:30\ntags: [java,patten,coding]\n---\n\n有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？\n\n首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。\n\n当判断到确实需要优化if else，方法有很多，总结如下。\n1. 使用map.\n2. 使用枚举.\n3. 多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。\n当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。\n\n下面举例。\n要优化的原if else语句：\n```\nint code;\nif(\"Name\".equals(str))\n    code = 0;\nelse if(\"Age\".equals(str))\n    code = 1;\nelse if(\"Address\".equals(str))\n    code = 2;\n```\n\n## 使用map优化\n```\npublic final static Map map = new HashMap();  \nstatic {  \n    map.put(\"Name\", 0);  \n    map.put(\"Age\", 1);\n    map.put(\"Address\", 2);  \n}\n\nint code = map.get(type);\n```\n\n## 使用枚举优化\n```\npublic enum Codes {\n    Name(0), Age(1), Address(2);\n    public int code;\n    Codes(int code){\n        this.code = code;\n    }\n}\n\nint code = Codes.valueOf(str).code;\n```\n\n## 使用多态优化\n```\nICode iCode = (ICode)Class.forName(\"com.xxx.\" + str).newInstance();\n\nint code = iCode.getCode();\n```\n\n\n## “责任链”如何优化if else？\n首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。\n\n好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。\n\n现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。\n\n好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。\n\n现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。\n\n到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）\n\n最后，我们为了交流方便，把这种组合方式称为“责任链”。\n\n\n## 使用状态模式优化if else\n参考：http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html","slug":"java-从代码中去除if-else","published":1,"updated":"2016-02-20T04:02:04.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghig000w30ngphttqa10","content":"<p>有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？</p>\n<p>首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。</p>\n<p>当判断到确实需要优化if else，方法有很多，总结如下。</p>\n<ol>\n<li>使用map.</li>\n<li>使用枚举.</li>\n<li>多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。<br>当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。</li>\n</ol>\n<p>下面举例。<br>要优化的原if else语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int code;</span><br><span class=\"line\">if(&quot;Name&quot;.equals(str))</span><br><span class=\"line\">    code = 0;</span><br><span class=\"line\">else if(&quot;Age&quot;.equals(str))</span><br><span class=\"line\">    code = 1;</span><br><span class=\"line\">else if(&quot;Address&quot;.equals(str))</span><br><span class=\"line\">    code = 2;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用map优化\"><a href=\"#使用map优化\" class=\"headerlink\" title=\"使用map优化\"></a>使用map优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final static Map map = new HashMap();  </span><br><span class=\"line\">static &#123;  </span><br><span class=\"line\">    map.put(&quot;Name&quot;, 0);  </span><br><span class=\"line\">    map.put(&quot;Age&quot;, 1);</span><br><span class=\"line\">    map.put(&quot;Address&quot;, 2);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = map.get(type);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用枚举优化\"><a href=\"#使用枚举优化\" class=\"headerlink\" title=\"使用枚举优化\"></a>使用枚举优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Codes &#123;</span><br><span class=\"line\">    Name(0), Age(1), Address(2);</span><br><span class=\"line\">    public int code;</span><br><span class=\"line\">    Codes(int code)&#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = Codes.valueOf(str).code;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用多态优化\"><a href=\"#使用多态优化\" class=\"headerlink\" title=\"使用多态优化\"></a>使用多态优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ICode iCode = (ICode)Class.forName(&quot;com.xxx.&quot; + str).newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">int code = iCode.getCode();</span><br></pre></td></tr></table></figure>\n<h2 id=\"“责任链”如何优化if-else？\"><a href=\"#“责任链”如何优化if-else？\" class=\"headerlink\" title=\"“责任链”如何优化if else？\"></a>“责任链”如何优化if else？</h2><p>首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。</p>\n<p>好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。</p>\n<p>现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。</p>\n<p>好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。</p>\n<p>现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。</p>\n<p>到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）</p>\n<p>最后，我们为了交流方便，把这种组合方式称为“责任链”。</p>\n<h2 id=\"使用状态模式优化if-else\"><a href=\"#使用状态模式优化if-else\" class=\"headerlink\" title=\"使用状态模式优化if else\"></a>使用状态模式优化if else</h2><p>参考：<a href=\"http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html\" target=\"_blank\" rel=\"external\">http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html</a></p>\n","excerpt":"","more":"<p>有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？</p>\n<p>首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。</p>\n<p>当判断到确实需要优化if else，方法有很多，总结如下。</p>\n<ol>\n<li>使用map.</li>\n<li>使用枚举.</li>\n<li>多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。<br>当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。</li>\n</ol>\n<p>下面举例。<br>要优化的原if else语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int code;</span><br><span class=\"line\">if(&quot;Name&quot;.equals(str))</span><br><span class=\"line\">    code = 0;</span><br><span class=\"line\">else if(&quot;Age&quot;.equals(str))</span><br><span class=\"line\">    code = 1;</span><br><span class=\"line\">else if(&quot;Address&quot;.equals(str))</span><br><span class=\"line\">    code = 2;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用map优化\"><a href=\"#使用map优化\" class=\"headerlink\" title=\"使用map优化\"></a>使用map优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final static Map map = new HashMap();  </span><br><span class=\"line\">static &#123;  </span><br><span class=\"line\">    map.put(&quot;Name&quot;, 0);  </span><br><span class=\"line\">    map.put(&quot;Age&quot;, 1);</span><br><span class=\"line\">    map.put(&quot;Address&quot;, 2);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = map.get(type);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用枚举优化\"><a href=\"#使用枚举优化\" class=\"headerlink\" title=\"使用枚举优化\"></a>使用枚举优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Codes &#123;</span><br><span class=\"line\">    Name(0), Age(1), Address(2);</span><br><span class=\"line\">    public int code;</span><br><span class=\"line\">    Codes(int code)&#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = Codes.valueOf(str).code;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用多态优化\"><a href=\"#使用多态优化\" class=\"headerlink\" title=\"使用多态优化\"></a>使用多态优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ICode iCode = (ICode)Class.forName(&quot;com.xxx.&quot; + str).newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">int code = iCode.getCode();</span><br></pre></td></tr></table></figure>\n<h2 id=\"“责任链”如何优化if-else？\"><a href=\"#“责任链”如何优化if-else？\" class=\"headerlink\" title=\"“责任链”如何优化if else？\"></a>“责任链”如何优化if else？</h2><p>首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。</p>\n<p>好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。</p>\n<p>现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。</p>\n<p>好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。</p>\n<p>现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。</p>\n<p>到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）</p>\n<p>最后，我们为了交流方便，把这种组合方式称为“责任链”。</p>\n<h2 id=\"使用状态模式优化if-else\"><a href=\"#使用状态模式优化if-else\" class=\"headerlink\" title=\"使用状态模式优化if else\"></a>使用状态模式优化if else</h2><p>参考：<a href=\"http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html\">http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html</a></p>\n","sticky":0},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-02-20T04:02:04.711Z","updated":"2016-02-20T04:02:04.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghij000y30ng1sg9v8wv","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n","sticky":0},{"title":"spring aop 知识体系整理","date":"2016-02-20T04:48:30.000Z","_content":"\nspring aop 整理\n参考：\n     1.https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\n     2.http://blog.csdn.net/dreamrealised/article/details/12885739\n思维导图：\n     http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\n\n![](/images/java-spring-aop.png)","source":"_posts/spring-aop-知识体系整理.md","raw":"---\ntitle: spring aop 知识体系整理\ndate: 2016-02-20 12:48:30\ntags: [java,spring,aop,思维导图]\n---\n\nspring aop 整理\n参考：\n     1.https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\n     2.http://blog.csdn.net/dreamrealised/article/details/12885739\n思维导图：\n     http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\n\n![](/images/java-spring-aop.png)","slug":"spring-aop-知识体系整理","published":1,"updated":"2016-02-20T04:51:36.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghil001030ng6z1060sd","content":"<p>spring aop 整理<br>参考：<br>     1.<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\" target=\"_blank\" rel=\"external\">https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/</a><br>     2.<a href=\"http://blog.csdn.net/dreamrealised/article/details/12885739\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dreamrealised/article/details/12885739</a><br>思维导图：<br>     <a href=\"http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\" target=\"_blank\" rel=\"external\">http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2</a></p>\n<p><img src=\"/images/java-spring-aop.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>spring aop 整理<br>参考：<br>     1.<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\">https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/</a><br>     2.<a href=\"http://blog.csdn.net/dreamrealised/article/details/12885739\">http://blog.csdn.net/dreamrealised/article/details/12885739</a><br>思维导图：<br>     <a href=\"http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\">http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2</a></p>\n<p><img src=\"/images/java-spring-aop.png\" alt=\"\"></p>\n","sticky":0},{"title":"[java][enum]典型用法","date":"2016-05-08T15:57:31.000Z","_content":"\n\n## java enum典型用法\n\n### 代码：\n```\npackage com.iyihua.model.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum GroupType {\n\n     CATEGORY(0, \"category\"), PROJECT(1, \"project\"), LOCATION(2, \"location\" );\n\n     private final int id;\n     private final String key;\n\n     GroupType(int id, String key) {\n            this. id = id;\n            this. key = key;\n     }\n     \n     public int getId() {\n            return id;\n     }\n     public String getKey() {\n            return key;\n     }\n\n     private static final Map<String, GroupType> keyToEnum = new HashMap<String, GroupType>();\n     static {\n            for (GroupType gt : GroupType. values())\n                 keyToEnum.put(gt .getKey(), gt );\n     }\n\n     public static GroupType fromString(String symbol) {\n            return keyToEnum.get(symbol );\n     }\n\n     public static void main(String[] args) {\n           System. out.println( fromString(\"category\"));\n     }\n}\n```\n\n\n### 说明：\n代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。\n如此就可以通过fromString方法，传入key string值，即可返回对应的enum值","source":"_posts/java-enum-典型用法.md","raw":"---\ntitle: '[java][enum]典型用法'\ndate: 2016-05-08 23:57:31\ntags: [java, enum]\n---\n\n\n## java enum典型用法\n\n### 代码：\n```\npackage com.iyihua.model.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum GroupType {\n\n     CATEGORY(0, \"category\"), PROJECT(1, \"project\"), LOCATION(2, \"location\" );\n\n     private final int id;\n     private final String key;\n\n     GroupType(int id, String key) {\n            this. id = id;\n            this. key = key;\n     }\n     \n     public int getId() {\n            return id;\n     }\n     public String getKey() {\n            return key;\n     }\n\n     private static final Map<String, GroupType> keyToEnum = new HashMap<String, GroupType>();\n     static {\n            for (GroupType gt : GroupType. values())\n                 keyToEnum.put(gt .getKey(), gt );\n     }\n\n     public static GroupType fromString(String symbol) {\n            return keyToEnum.get(symbol );\n     }\n\n     public static void main(String[] args) {\n           System. out.println( fromString(\"category\"));\n     }\n}\n```\n\n\n### 说明：\n代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。\n如此就可以通过fromString方法，传入key string值，即可返回对应的enum值","slug":"java-enum-典型用法","published":1,"updated":"2016-05-08T16:07:15.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghin001330ngvy1zknhi","content":"<h2 id=\"java-enum典型用法\"><a href=\"#java-enum典型用法\" class=\"headerlink\" title=\"java enum典型用法\"></a>java enum典型用法</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.iyihua.model.enums;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public enum GroupType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     CATEGORY(0, &quot;category&quot;), PROJECT(1, &quot;project&quot;), LOCATION(2, &quot;location&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">     private final int id;</span><br><span class=\"line\">     private final String key;</span><br><span class=\"line\"></span><br><span class=\"line\">     GroupType(int id, String key) &#123;</span><br><span class=\"line\">            this. id = id;</span><br><span class=\"line\">            this. key = key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     public int getId() &#123;</span><br><span class=\"line\">            return id;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     public String getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     private static final Map&lt;String, GroupType&gt; keyToEnum = new HashMap&lt;String, GroupType&gt;();</span><br><span class=\"line\">     static &#123;</span><br><span class=\"line\">            for (GroupType gt : GroupType. values())</span><br><span class=\"line\">                 keyToEnum.put(gt .getKey(), gt );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static GroupType fromString(String symbol) &#123;</span><br><span class=\"line\">            return keyToEnum.get(symbol );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static void main(String[] args) &#123;</span><br><span class=\"line\">           System. out.println( fromString(&quot;category&quot;));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><p>代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。<br>如此就可以通过fromString方法，传入key string值，即可返回对应的enum值</p>\n","excerpt":"","more":"<h2 id=\"java-enum典型用法\"><a href=\"#java-enum典型用法\" class=\"headerlink\" title=\"java enum典型用法\"></a>java enum典型用法</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.iyihua.model.enums;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public enum GroupType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     CATEGORY(0, &quot;category&quot;), PROJECT(1, &quot;project&quot;), LOCATION(2, &quot;location&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">     private final int id;</span><br><span class=\"line\">     private final String key;</span><br><span class=\"line\"></span><br><span class=\"line\">     GroupType(int id, String key) &#123;</span><br><span class=\"line\">            this. id = id;</span><br><span class=\"line\">            this. key = key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     public int getId() &#123;</span><br><span class=\"line\">            return id;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     public String getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     private static final Map&lt;String, GroupType&gt; keyToEnum = new HashMap&lt;String, GroupType&gt;();</span><br><span class=\"line\">     static &#123;</span><br><span class=\"line\">            for (GroupType gt : GroupType. values())</span><br><span class=\"line\">                 keyToEnum.put(gt .getKey(), gt );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static GroupType fromString(String symbol) &#123;</span><br><span class=\"line\">            return keyToEnum.get(symbol );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static void main(String[] args) &#123;</span><br><span class=\"line\">           System. out.println( fromString(&quot;category&quot;));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><p>代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。<br>如此就可以通过fromString方法，传入key string值，即可返回对应的enum值</p>\n","sticky":0},{"title":"java-web知识体系","date":"2016-05-04T15:05:21.000Z","_content":"\n## 一张java web知识体系思维导图\n就是稍微旧了点\n\n![](/images/java-web.png)\n","source":"_posts/java-web知识体系.md","raw":"---\ntitle: java-web知识体系\ndate: 2016-05-04 23:05:21\ntags: [java,web,java web,思维导图]\n---\n\n## 一张java web知识体系思维导图\n就是稍微旧了点\n\n![](/images/java-web.png)\n","slug":"java-web知识体系","published":1,"updated":"2016-05-04T15:07:13.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghip001530ngbc3vpjfp","content":"<h2 id=\"一张java-web知识体系思维导图\"><a href=\"#一张java-web知识体系思维导图\" class=\"headerlink\" title=\"一张java web知识体系思维导图\"></a>一张java web知识体系思维导图</h2><p>就是稍微旧了点</p>\n<p><img src=\"/images/java-web.png\" alt=\"\"></p>\n","excerpt":"","more":"<h2 id=\"一张java-web知识体系思维导图\"><a href=\"#一张java-web知识体系思维导图\" class=\"headerlink\" title=\"一张java web知识体系思维导图\"></a>一张java web知识体系思维导图</h2><p>就是稍微旧了点</p>\n<p><img src=\"/images/java-web.png\" alt=\"\"></p>\n","sticky":0},{"title":"jquery-validate常用用法总结","date":"2016-01-04T09:05:28.000Z","_content":"\n\n1. juqry validate中，如何对使用ajax提交的方式进行校验？\n有两种方式\n    1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。\n    2)使用valid方法，监听form的submit事件，当$('#form').valid()返回true的时候再提交。\n    ```\n        //通过监听form的submit事件，对form进行ajax提交。\n         $('#formId').submit(function() {\n             if (!$(\"#formId\").valid()) \n                 return false;\n             $(this).omAjaxSubmit({});\n             return false; //此处必须返回false，阻止常规的form提交\n         });\n    ```\n2. juqry validate中，如何对校验错误的提示信息位置和样式进行更改？\n    1）js代码：\n    ```\n    $(function(){  \n        $(\"#form1\").validate({  \n            errorPlacement: function (error, element) {  \n                error.appendTo(element.parent(\"td\"));  \n            },  \n            rules:{              \n            }  \n        });  \n        $(\"[name$='.sign']\").each(function(){  \n            $(this).rules(\"add\",{required:true,messages:{required:\"至少选择一个选项\"}});  \n        });  \n    }); \n    ```\n    2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了\n    ```\n        <style>  \n        label.error {   \n            color:Red;   \n            font-size:13px;   \n            margin-left:5px;   \n            padding-left:16px;   \n        }   \n        </style> \n    ```\n    3) 校验时机，可以自定义在js中想要的时候去校验\n    ```\n        $('.selector').click(function() {\n            if ($(\"selector of you form\").valid()) {\n                alert('in');\n            } else {\n                alert('out');\n            }\n        });\n        $(\"selector of you form\").validate({\n            rules: {\n                receiveDayFrom: {\n                    required: true\n                }\n            }\n        }); \n    ```\n    4) 例子：\n    ```\n        $(\"#form\").validate({\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            },\n            errorPlacement: function ($error, $element) {\n                var name = $element.attr(\"name\");\n                $(\"#error\" + name).append($error);\n            }\n        });\n    ```\n        or:\n    ```\n        $(\"#form\").validate({\n            errorLabelContainer: \"#errors\",\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            }\n        });\n    ```\n\n3. 如何添加自定义的校验？\n\n- 添加一个方法\n    ```\n    // 字符验证，只能包含英文、数字、下划线等字符。    \n    jQuery.validator.addMethod(\"nameStringCheck\", function(value, element) {   \n         return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); \n    }, \"只能包含英文、数字、下划线等字符\");\n    ```\n- 在validate配置中使用新加的方法\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                required: true,\n                nameStringCheck: true\n            }\n        }\n    });\n    ```\n\n4. 如何使用ajax请求进行远程校验\n    ```\n    jQuery.validator.addMethod(\"checkUnique\", function(value, element) {\n        return validateUsernameByAjax(value, element.name, 'ajax请求地址');\n    }, \"此输入的值不可用\");\n    ```\n\n    ```\n    /**\n     * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true\n     */\n    function validateUsernameByAjax(value, fieldname, url) {\n        var _request = url + \"?\"+fieldname+\"=\"+value;\n        var deferred = $.Deferred();//创建一个延迟对象\n        $.ajax({\n            url:_request,\n            async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码\n            dataType:\"json\",\n            success:function(data) {\n                if (data.status === \"error\" || data.status === \"fail\") {\n                    deferred.reject();\n                } else{\n                    deferred.resolve();  \n                }\n            }\n        });\n        //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功\n        return deferred.state() == \"resolved\" ? true : false;\n    }\n    ```\n\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                checkUnique: true\n            }\n        }\n    });\n    ```\n","source":"_posts/jquery-validate常用用法总结.md","raw":"---\ntitle: jquery-validate常用用法总结\ndate: 2016-01-04 17:05:28\ntags: [jquery,validate]\n---\n\n\n1. juqry validate中，如何对使用ajax提交的方式进行校验？\n有两种方式\n    1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。\n    2)使用valid方法，监听form的submit事件，当$('#form').valid()返回true的时候再提交。\n    ```\n        //通过监听form的submit事件，对form进行ajax提交。\n         $('#formId').submit(function() {\n             if (!$(\"#formId\").valid()) \n                 return false;\n             $(this).omAjaxSubmit({});\n             return false; //此处必须返回false，阻止常规的form提交\n         });\n    ```\n2. juqry validate中，如何对校验错误的提示信息位置和样式进行更改？\n    1）js代码：\n    ```\n    $(function(){  \n        $(\"#form1\").validate({  \n            errorPlacement: function (error, element) {  \n                error.appendTo(element.parent(\"td\"));  \n            },  \n            rules:{              \n            }  \n        });  \n        $(\"[name$='.sign']\").each(function(){  \n            $(this).rules(\"add\",{required:true,messages:{required:\"至少选择一个选项\"}});  \n        });  \n    }); \n    ```\n    2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了\n    ```\n        <style>  \n        label.error {   \n            color:Red;   \n            font-size:13px;   \n            margin-left:5px;   \n            padding-left:16px;   \n        }   \n        </style> \n    ```\n    3) 校验时机，可以自定义在js中想要的时候去校验\n    ```\n        $('.selector').click(function() {\n            if ($(\"selector of you form\").valid()) {\n                alert('in');\n            } else {\n                alert('out');\n            }\n        });\n        $(\"selector of you form\").validate({\n            rules: {\n                receiveDayFrom: {\n                    required: true\n                }\n            }\n        }); \n    ```\n    4) 例子：\n    ```\n        $(\"#form\").validate({\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            },\n            errorPlacement: function ($error, $element) {\n                var name = $element.attr(\"name\");\n                $(\"#error\" + name).append($error);\n            }\n        });\n    ```\n        or:\n    ```\n        $(\"#form\").validate({\n            errorLabelContainer: \"#errors\",\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            }\n        });\n    ```\n\n3. 如何添加自定义的校验？\n\n- 添加一个方法\n    ```\n    // 字符验证，只能包含英文、数字、下划线等字符。    \n    jQuery.validator.addMethod(\"nameStringCheck\", function(value, element) {   \n         return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); \n    }, \"只能包含英文、数字、下划线等字符\");\n    ```\n- 在validate配置中使用新加的方法\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                required: true,\n                nameStringCheck: true\n            }\n        }\n    });\n    ```\n\n4. 如何使用ajax请求进行远程校验\n    ```\n    jQuery.validator.addMethod(\"checkUnique\", function(value, element) {\n        return validateUsernameByAjax(value, element.name, 'ajax请求地址');\n    }, \"此输入的值不可用\");\n    ```\n\n    ```\n    /**\n     * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true\n     */\n    function validateUsernameByAjax(value, fieldname, url) {\n        var _request = url + \"?\"+fieldname+\"=\"+value;\n        var deferred = $.Deferred();//创建一个延迟对象\n        $.ajax({\n            url:_request,\n            async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码\n            dataType:\"json\",\n            success:function(data) {\n                if (data.status === \"error\" || data.status === \"fail\") {\n                    deferred.reject();\n                } else{\n                    deferred.resolve();  \n                }\n            }\n        });\n        //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功\n        return deferred.state() == \"resolved\" ? true : false;\n    }\n    ```\n\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                checkUnique: true\n            }\n        }\n    });\n    ```\n","slug":"jquery-validate常用用法总结","published":1,"updated":"2016-02-20T04:02:04.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghir001730ng1fjx4gxf","content":"<ol>\n<li><p>juqry validate中，如何对使用ajax提交的方式进行校验？<br>有两种方式<br> 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。<br> 2)使用valid方法，监听form的submit事件，当$(‘#form’).valid()返回true的时候再提交。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过监听form的submit事件，对form进行ajax提交。</span><br><span class=\"line\"> $(&apos;#formId&apos;).submit(function() &#123;</span><br><span class=\"line\">     if (!$(&quot;#formId&quot;).valid()) </span><br><span class=\"line\">         return false;</span><br><span class=\"line\">     $(this).omAjaxSubmit(&#123;&#125;);</span><br><span class=\"line\">     return false; //此处必须返回false，阻止常规的form提交</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>juqry validate中，如何对校验错误的提示信息位置和样式进行更改？<br> 1）js代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;  </span><br><span class=\"line\">    $(&quot;#form1&quot;).validate(&#123;  </span><br><span class=\"line\">        errorPlacement: function (error, element) &#123;  </span><br><span class=\"line\">            error.appendTo(element.parent(&quot;td&quot;));  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        rules:&#123;              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">    $(&quot;[name$=&apos;.sign&apos;]&quot;).each(function()&#123;  </span><br><span class=\"line\">        $(this).rules(&quot;add&quot;,&#123;required:true,messages:&#123;required:&quot;至少选择一个选项&quot;&#125;&#125;);  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;  </span><br><span class=\"line\">label.error &#123;   </span><br><span class=\"line\">    color:Red;   </span><br><span class=\"line\">    font-size:13px;   </span><br><span class=\"line\">    margin-left:5px;   </span><br><span class=\"line\">    padding-left:16px;   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p> 3) 校验时机，可以自定义在js中想要的时候去校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.selector&apos;).click(function() &#123;</span><br><span class=\"line\">    if ($(&quot;selector of you form&quot;).valid()) &#123;</span><br><span class=\"line\">        alert(&apos;in&apos;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;out&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;selector of you form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        receiveDayFrom: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 4) 例子：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    errorPlacement: function ($error, $element) &#123;</span><br><span class=\"line\">        var name = $element.attr(&quot;name&quot;);</span><br><span class=\"line\">        $(&quot;#error&quot; + name).append($error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<pre><code>or:\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    errorLabelContainer: &quot;#errors&quot;,</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何添加自定义的校验？</p>\n</li>\n</ol>\n<ul>\n<li><p>添加一个方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符验证，只能包含英文、数字、下划线等字符。    </span><br><span class=\"line\">jQuery.validator.addMethod(&quot;nameStringCheck&quot;, function(value, element) &#123;   </span><br><span class=\"line\">     return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); </span><br><span class=\"line\">&#125;, &quot;只能包含英文、数字、下划线等字符&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在validate配置中使用新加的方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            nameStringCheck: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>如何使用ajax请求进行远程校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.validator.addMethod(&quot;checkUnique&quot;, function(value, element) &#123;</span><br><span class=\"line\">    return validateUsernameByAjax(value, element.name, &apos;ajax请求地址&apos;);</span><br><span class=\"line\">&#125;, &quot;此输入的值不可用&quot;);</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true</span><br><span class=\"line\"> */</span><br><span class=\"line\">function validateUsernameByAjax(value, fieldname, url) &#123;</span><br><span class=\"line\">    var _request = url + &quot;?&quot;+fieldname+&quot;=&quot;+value;</span><br><span class=\"line\">    var deferred = $.Deferred();//创建一个延迟对象</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:_request,</span><br><span class=\"line\">        async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码</span><br><span class=\"line\">        dataType:&quot;json&quot;,</span><br><span class=\"line\">        success:function(data) &#123;</span><br><span class=\"line\">            if (data.status === &quot;error&quot; || data.status === &quot;fail&quot;) &#123;</span><br><span class=\"line\">                deferred.reject();</span><br><span class=\"line\">            &#125; else&#123;</span><br><span class=\"line\">                deferred.resolve();  </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功</span><br><span class=\"line\">    return deferred.state() == &quot;resolved&quot; ? true : false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            checkUnique: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>juqry validate中，如何对使用ajax提交的方式进行校验？<br>有两种方式<br> 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。<br> 2)使用valid方法，监听form的submit事件，当$(‘#form’).valid()返回true的时候再提交。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过监听form的submit事件，对form进行ajax提交。</span><br><span class=\"line\"> $(&apos;#formId&apos;).submit(function() &#123;</span><br><span class=\"line\">     if (!$(&quot;#formId&quot;).valid()) </span><br><span class=\"line\">         return false;</span><br><span class=\"line\">     $(this).omAjaxSubmit(&#123;&#125;);</span><br><span class=\"line\">     return false; //此处必须返回false，阻止常规的form提交</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>juqry validate中，如何对校验错误的提示信息位置和样式进行更改？<br> 1）js代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;  </span><br><span class=\"line\">    $(&quot;#form1&quot;).validate(&#123;  </span><br><span class=\"line\">        errorPlacement: function (error, element) &#123;  </span><br><span class=\"line\">            error.appendTo(element.parent(&quot;td&quot;));  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        rules:&#123;              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">    $(&quot;[name$=&apos;.sign&apos;]&quot;).each(function()&#123;  </span><br><span class=\"line\">        $(this).rules(&quot;add&quot;,&#123;required:true,messages:&#123;required:&quot;至少选择一个选项&quot;&#125;&#125;);  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;  </span><br><span class=\"line\">label.error &#123;   </span><br><span class=\"line\">    color:Red;   </span><br><span class=\"line\">    font-size:13px;   </span><br><span class=\"line\">    margin-left:5px;   </span><br><span class=\"line\">    padding-left:16px;   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p> 3) 校验时机，可以自定义在js中想要的时候去校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.selector&apos;).click(function() &#123;</span><br><span class=\"line\">    if ($(&quot;selector of you form&quot;).valid()) &#123;</span><br><span class=\"line\">        alert(&apos;in&apos;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;out&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;selector of you form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        receiveDayFrom: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 4) 例子：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    errorPlacement: function ($error, $element) &#123;</span><br><span class=\"line\">        var name = $element.attr(&quot;name&quot;);</span><br><span class=\"line\">        $(&quot;#error&quot; + name).append($error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<pre><code>or:\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    errorLabelContainer: &quot;#errors&quot;,</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何添加自定义的校验？</p>\n</li>\n</ol>\n<ul>\n<li><p>添加一个方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符验证，只能包含英文、数字、下划线等字符。    </span><br><span class=\"line\">jQuery.validator.addMethod(&quot;nameStringCheck&quot;, function(value, element) &#123;   </span><br><span class=\"line\">     return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); </span><br><span class=\"line\">&#125;, &quot;只能包含英文、数字、下划线等字符&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在validate配置中使用新加的方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            nameStringCheck: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>如何使用ajax请求进行远程校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.validator.addMethod(&quot;checkUnique&quot;, function(value, element) &#123;</span><br><span class=\"line\">    return validateUsernameByAjax(value, element.name, &apos;ajax请求地址&apos;);</span><br><span class=\"line\">&#125;, &quot;此输入的值不可用&quot;);</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true</span><br><span class=\"line\"> */</span><br><span class=\"line\">function validateUsernameByAjax(value, fieldname, url) &#123;</span><br><span class=\"line\">    var _request = url + &quot;?&quot;+fieldname+&quot;=&quot;+value;</span><br><span class=\"line\">    var deferred = $.Deferred();//创建一个延迟对象</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:_request,</span><br><span class=\"line\">        async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码</span><br><span class=\"line\">        dataType:&quot;json&quot;,</span><br><span class=\"line\">        success:function(data) &#123;</span><br><span class=\"line\">            if (data.status === &quot;error&quot; || data.status === &quot;fail&quot;) &#123;</span><br><span class=\"line\">                deferred.reject();</span><br><span class=\"line\">            &#125; else&#123;</span><br><span class=\"line\">                deferred.resolve();  </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功</span><br><span class=\"line\">    return deferred.state() == &quot;resolved&quot; ? true : false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            checkUnique: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","sticky":0},{"title":"[springboot][items][项目使用实践]springboot get started","date":"2016-02-01T09:10:18.000Z","_content":"\n往后将通过一个时间记录web app项目，实践并记录spring boot的使用\n为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。\n\n### 1.pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\n","source":"_posts/springboot-items-项目使用实践-springboot-get-started.md","raw":"---\ntitle: '[springboot][items][项目使用实践]springboot get started'\ndate: 2016-02-01 17:10:18\ntags: [springboot,itime]\n---\n\n往后将通过一个时间记录web app项目，实践并记录spring boot的使用\n为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。\n\n### 1.pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\n","slug":"springboot-items-项目使用实践-springboot-get-started","published":1,"updated":"2016-02-20T04:02:04.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghiz001930ngb0x1v4k3","content":"<p>往后将通过一个时间记录web app项目，实践并记录spring boot的使用<br>为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。</p>\n<h3 id=\"1-pom-xml中添加maven依赖\"><a href=\"#1-pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1.pom.xml中添加maven依赖\"></a>1.pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2.编写项目启动入口App.java\"></a>2.编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"再进一步，为应用引入spring-mvc\"><a href=\"#再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"再进一步，为应用引入spring mvc\"></a>再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n","excerpt":"","more":"<p>往后将通过一个时间记录web app项目，实践并记录spring boot的使用<br>为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。</p>\n<h3 id=\"1-pom-xml中添加maven依赖\"><a href=\"#1-pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1.pom.xml中添加maven依赖\"></a>1.pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2.编写项目启动入口App.java\"></a>2.编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"再进一步，为应用引入spring-mvc\"><a href=\"#再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"再进一步，为应用引入spring mvc\"></a>再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n","sticky":0},{"title":"【转】-支付宝架构与技术","date":"2016-08-10T03:07:13.000Z","_content":"\n![](/images/frame-zhifubao-001.png)\n\n![](/images/frame-zhifubao-002.png)\n\n![](/images/frame-zhifubao-003.png)\n\n![](/images/frame-zhifubao-004.png)\n\n![](/images/frame-zhifubao-005.png)\n\n![](/images/frame-zhifubao-006.png)\n\n![](/images/frame-zhifubao-007.png)\n\n![](/images/frame-zhifubao-008.png)\n\n![](/images/frame-zhifubao-009.png)\n\n![](/images/frame-zhifubao-010.png)\n\n![](/images/frame-zhifubao-011.png)\n\n![](/images/frame-zhifubao-012.png)\n\n![](/images/frame-zhifubao-013.png)\n\n![](/images/frame-zhifubao-014.png)\n\n![](/images/frame-zhifubao-015.png)\n\n![](/images/frame-zhifubao-016.png)\n\n![](/images/frame-zhifubao-017.png)\n\n![](/images/frame-zhifubao-018.png)\n\n![](/images/frame-zhifubao-019.png)\n\n![](/images/frame-zhifubao-020.png)\n\n![](/images/frame-zhifubao-021.png)\n\n![](/images/frame-zhifubao-022.png)\n\n![](/images/frame-zhifubao-023.png)\n\n![](/images/frame-zhifubao-024.png)\n\n![](/images/frame-zhifubao-025.png)\n\n![](/images/frame-zhifubao-026.png)\n\n![](/images/frame-zhifubao-027.png)\n\n![](/images/frame-zhifubao-028.png)\n\n![](/images/frame-zhifubao-029.png)\n\n\n支付宝的开源分布式消息中间件--Metamorphosis(MetaQ)\n　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。\n　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。\n　　Metamorphosis的起源是我从对linkedin的开源MQ--现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？\n　　简单概括下我重新写出meta的原因：\n　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。\n　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等\n　　Meta相对于kafka特有的一些功能：\n　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker\n　　纯Java实现，从通讯到存储，从client到server都是重新实现。\n　　提供事务支持，包括本地事务和XA分布式事务\n　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性\n　　支持异步发送消息\n　　消费消息失败，支持本地恢复\n　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现\n　　支持group commit，提升数据可靠性和吞吐量。\n　　支持消息广播模式\n　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。\n　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。\n　　Meta适合的应用：\n　　日志传输，高吞吐量的日志传输本来就是kafka的强项\n　　消息广播功能，如广播缓存配置失效。\n　　数据的顺序同步功能，如mysql binlog复制\n　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。\n　　作为一般MQ来使用的其他功能\n\n\n总体结构：\n![](/images/frame-zhifubao-030.jpeg)\n\n内部结构：\n![](/images/frame-zhifubao-031.jpeg)\n","source":"_posts/【转】-支付宝架构与技术.md","raw":"---\ntitle: 【转】-支付宝架构与技术\ndate: 2016-08-10 11:07:13\ntags: [支付宝, 架构]\n---\n\n![](/images/frame-zhifubao-001.png)\n\n![](/images/frame-zhifubao-002.png)\n\n![](/images/frame-zhifubao-003.png)\n\n![](/images/frame-zhifubao-004.png)\n\n![](/images/frame-zhifubao-005.png)\n\n![](/images/frame-zhifubao-006.png)\n\n![](/images/frame-zhifubao-007.png)\n\n![](/images/frame-zhifubao-008.png)\n\n![](/images/frame-zhifubao-009.png)\n\n![](/images/frame-zhifubao-010.png)\n\n![](/images/frame-zhifubao-011.png)\n\n![](/images/frame-zhifubao-012.png)\n\n![](/images/frame-zhifubao-013.png)\n\n![](/images/frame-zhifubao-014.png)\n\n![](/images/frame-zhifubao-015.png)\n\n![](/images/frame-zhifubao-016.png)\n\n![](/images/frame-zhifubao-017.png)\n\n![](/images/frame-zhifubao-018.png)\n\n![](/images/frame-zhifubao-019.png)\n\n![](/images/frame-zhifubao-020.png)\n\n![](/images/frame-zhifubao-021.png)\n\n![](/images/frame-zhifubao-022.png)\n\n![](/images/frame-zhifubao-023.png)\n\n![](/images/frame-zhifubao-024.png)\n\n![](/images/frame-zhifubao-025.png)\n\n![](/images/frame-zhifubao-026.png)\n\n![](/images/frame-zhifubao-027.png)\n\n![](/images/frame-zhifubao-028.png)\n\n![](/images/frame-zhifubao-029.png)\n\n\n支付宝的开源分布式消息中间件--Metamorphosis(MetaQ)\n　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。\n　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。\n　　Metamorphosis的起源是我从对linkedin的开源MQ--现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？\n　　简单概括下我重新写出meta的原因：\n　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。\n　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等\n　　Meta相对于kafka特有的一些功能：\n　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker\n　　纯Java实现，从通讯到存储，从client到server都是重新实现。\n　　提供事务支持，包括本地事务和XA分布式事务\n　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性\n　　支持异步发送消息\n　　消费消息失败，支持本地恢复\n　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现\n　　支持group commit，提升数据可靠性和吞吐量。\n　　支持消息广播模式\n　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。\n　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。\n　　Meta适合的应用：\n　　日志传输，高吞吐量的日志传输本来就是kafka的强项\n　　消息广播功能，如广播缓存配置失效。\n　　数据的顺序同步功能，如mysql binlog复制\n　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。\n　　作为一般MQ来使用的其他功能\n\n\n总体结构：\n![](/images/frame-zhifubao-030.jpeg)\n\n内部结构：\n![](/images/frame-zhifubao-031.jpeg)\n","slug":"【转】-支付宝架构与技术","published":1,"updated":"2016-08-10T15:18:20.132Z","_id":"cirp1ghj1001a30ng96zuuqjn","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/frame-zhifubao-001.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-002.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-003.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-004.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-005.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-006.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-007.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-008.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-009.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-010.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-011.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-012.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-013.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-014.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-015.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-016.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-017.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-018.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-019.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-020.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-021.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-022.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-023.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-024.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-025.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-026.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-027.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-028.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-029.png\" alt=\"\"></p>\n<p>支付宝的开源分布式消息中间件–Metamorphosis(MetaQ)<br>　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。<br>　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。<br>　　Metamorphosis的起源是我从对linkedin的开源MQ–现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？<br>　　简单概括下我重新写出meta的原因：<br>　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。<br>　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等<br>　　Meta相对于kafka特有的一些功能：<br>　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker<br>　　纯Java实现，从通讯到存储，从client到server都是重新实现。<br>　　提供事务支持，包括本地事务和XA分布式事务<br>　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性<br>　　支持异步发送消息<br>　　消费消息失败，支持本地恢复<br>　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现<br>　　支持group commit，提升数据可靠性和吞吐量。<br>　　支持消息广播模式<br>　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。<br>　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。<br>　　Meta适合的应用：<br>　　日志传输，高吞吐量的日志传输本来就是kafka的强项<br>　　消息广播功能，如广播缓存配置失效。<br>　　数据的顺序同步功能，如mysql binlog复制<br>　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。<br>　　作为一般MQ来使用的其他功能</p>\n<p>总体结构：<br><img src=\"/images/frame-zhifubao-030.jpeg\" alt=\"\"></p>\n<p>内部结构：<br><img src=\"/images/frame-zhifubao-031.jpeg\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"/images/frame-zhifubao-001.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-002.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-003.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-004.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-005.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-006.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-007.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-008.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-009.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-010.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-011.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-012.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-013.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-014.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-015.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-016.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-017.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-018.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-019.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-020.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-021.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-022.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-023.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-024.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-025.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-026.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-027.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-028.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-029.png\" alt=\"\"></p>\n<p>支付宝的开源分布式消息中间件–Metamorphosis(MetaQ)<br>　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。<br>　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。<br>　　Metamorphosis的起源是我从对linkedin的开源MQ–现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？<br>　　简单概括下我重新写出meta的原因：<br>　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。<br>　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等<br>　　Meta相对于kafka特有的一些功能：<br>　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker<br>　　纯Java实现，从通讯到存储，从client到server都是重新实现。<br>　　提供事务支持，包括本地事务和XA分布式事务<br>　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性<br>　　支持异步发送消息<br>　　消费消息失败，支持本地恢复<br>　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现<br>　　支持group commit，提升数据可靠性和吞吐量。<br>　　支持消息广播模式<br>　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。<br>　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。<br>　　Meta适合的应用：<br>　　日志传输，高吞吐量的日志传输本来就是kafka的强项<br>　　消息广播功能，如广播缓存配置失效。<br>　　数据的顺序同步功能，如mysql binlog复制<br>　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。<br>　　作为一般MQ来使用的其他功能</p>\n<p>总体结构：<br><img src=\"/images/frame-zhifubao-030.jpeg\" alt=\"\"></p>\n<p>内部结构：<br><img src=\"/images/frame-zhifubao-031.jpeg\" alt=\"\"></p>\n","sticky":0},{"title":"[springboot+shiro+redis+rediscluster+sso]在springboot项目中接入shiro","date":"2016-04-09T04:52:53.000Z","_content":"\n在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。\n\n现在开始是第一篇：在springboot项目中接入shiro\n\n## 引入shiro的maven依赖\n```\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-core</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-spring</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-web</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-ehcache</artifactId>\n    <version>1.2.3</version>\n</dependency>\n```\n\n## 程序具体实现\n\n### 首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\n```\nshiro:\n  realm: com.xxx.xxx.config.security.MyRealm\n  loginUrl: /view/sign-in.html\n  successUrl: /item.html\n  unauthorizedUrl: /forbidden.html\n  filterChainDefinitions:\n    \"/login\": anon\n    \"/static/**\": anon\n    \"/bower_components/**\": anon\n    \"/logout\": logout\n    \"/**\": authc\n```\n说明：\nrealm: com.xxx.xxx.config.security.MyRealm\nRealm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。\n为了获得更好的自定义功能，通常我们会自己实现一个Realm.\n所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。\nloginUrl，定义了需要认证用户时，跳转到的登录页面\nsuccessUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。\nunauthorizedUrl，定义未认证时显示的页面。\nfilterChainDefinitions，定义哪些路径应该做何种过滤策略。\nanon，logout，authc这些都是shiro默认实现的过滤器filter。\nanon表示可以匿名访问的路径，authc表示需要登录认证的路径\n\n过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。\n\n### 下面是自己实现的自定义Realm：MyRealm\n```\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.xxx.model.base.UserDTO;\nimport com.xxx.remote.base.UserRemote;\n\npublic class MyRealm extends AuthorizingRealm {\n    @Autowired UserRemote userService;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();\n        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n        List<String> roles = userService.findByUserId(user.getId());\n        info.addRoles(roles);\n        return info;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;\n        String username = usernamePasswordToken.getUsername();\n        UserDTO user = userService.findUserByName(username);\n        if (null != user) {\n            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());\n            return new SimpleAuthenticationInfo(user, cih, getName());\n        }\n        return null;\n    }\n}\n```\nMyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。\nAuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. \n\ndoGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。\ndoGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。\n\n例子中UserRemote userService是提供用户数据的具体service服务。\n\n### 有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\n#### springboot shiro配置类：ShiroAutoConfig.java\n```\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.realm.Realm;\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Import;\n\nimport com.xxx.xxx.config.security.MyRealm;\n\n@Configuration\n@EnableConfigurationProperties(ShiroProperties.class)\n@Import(ShiroManager.class)\npublic class ShiroAutoConfig {\n    @Autowired private ShiroProperties properties;\n\n    @Bean(name = \"realm\")\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public MyRealm realm() {\n        Class<?> relmClass = properties.getRealm();\n        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);\n        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);\n        r.setCredentialsMatcher(credentialsMatcher);\n        return r;\n    }\n\n    @Bean(name = \"shiroFilter\")\n    @DependsOn(\"securityManager\")\n    @ConditionalOnMissingBean\n    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) {\n        MyRealm myRealm = (MyRealm) realm;\n        securityManager.setRealm(myRealm);\n        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();\n        shiroFilter.setSecurityManager(securityManager);\n        shiroFilter.setLoginUrl(properties.getLoginUrl());\n        shiroFilter.setSuccessUrl(properties.getSuccessUrl());\n        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());\n        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());\n        return shiroFilter;\n    }\n}\n```\n这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。\ngetShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。\nyml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。\n当然，还需要配置几个其他配置，都在ShiroManager配置好了。\n\n#### ShiroProperties：\n```\nimport java.util.Map;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n/**\n * Configuration properties for Shiro.\n */\n@ConfigurationProperties(prefix = \"shiro\")\npublic class ShiroProperties {\n    private Class<?> realm;\n    private String loginUrl;\n    private String successUrl;\n    private String unauthorizedUrl;\n    private Map<String, String> filterChainDefinitions;\n\n}\n```\n\n#### ShiroManager：\n```\nimport org.apache.shiro.cache.CacheManager;\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.session.mgt.SessionManager;\nimport org.apache.shiro.session.mgt.eis.SessionDAO;\nimport org.apache.shiro.spring.LifecycleBeanPostProcessor;\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\nimport org.apache.shiro.web.session.mgt.DefaultWebSessionManager;\nimport org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.DependsOn;\n\n/**\n * Shiro Config Manager.\n */\npublic class ShiroManager {\n    /**\n     * 保证实现了Shiro内部lifecycle函数的bean执行\n     */\n    @Bean(name = \"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n    @Bean(name = \"defaultAdvisorAutoProxyCreator\")\n    @ConditionalOnMissingBean\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {\n        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);\n        return defaultAdvisorAutoProxyCreator;\n\n    }\n    /**\n     * 用户授权信息Cache\n     */\n    @Bean(name = \"cacheManager\")\n    @ConditionalOnMissingBean\n    public CacheManager cacheManager() {\n        return new MemoryConstrainedCacheManager();\n    }\n    @Bean(name = \"securityManager\")\n    @ConditionalOnMissingBean\n    public DefaultSecurityManager securityManager(CacheManager cacheManager) {\n        DefaultSecurityManager sm = new DefaultWebSecurityManager();\n        sm.setCacheManager(cacheManager);\n        return sm;\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) {\n        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();\n        aasa.setSecurityManager(securityManager);\n        return new AuthorizationAttributeSourceAdvisor();\n    }\n}\n```\nCacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。\n如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。\n\n至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。\n\n### 这里简单的提供一下在mvc的controller中做登录和登出怎么做。\n\nLoginController：\n```\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.IncorrectCredentialsException;\nimport org.apache.shiro.authc.UnknownAccountException;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.subject.Subject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class LoginController {\n    @RequestMapping(\"/login\")\n    @ResponseBody\n    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException {\n        Subject subject = SecurityUtils.getSubject();\n        String error = null;\n        UsernamePasswordToken token = new UsernamePasswordToken(username, password);\n        try {\n            subject.login(token);\n        } catch (UnknownAccountException e) {\n            error = \"用户名/密码错误\";\n        } catch (IncorrectCredentialsException e) {\n            error = \"用户名/密码错误\";\n        } catch (AuthenticationException e) {\n            // 其他错误，比如锁定，如果想单独处理请单独catch处理\n            error = \"其他错误：\" + e.getMessage();\n        }\n        if (error != null) {// 出错了，返回登录页面\n            req.setAttribute(\"error\", error);\n            resp.sendRedirect(\"/forbidden.html\");\n        } else {// 登录成功\n            resp.sendRedirect(\"/index.html\");// 设置跳转的页面\n        }\n    }\n    @RequestMapping(value = \"/logout\")\n    @ResponseBody\n    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n\n        Subject currentUser = SecurityUtils.getSubject();\n        currentUser.logout();\n        resp.sendRedirect(\"/index.html\");\n    }\n}\n```\n\ndone!","source":"_posts/springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro.md","raw":"---\ntitle: '[springboot+shiro+redis+rediscluster+sso]在springboot项目中接入shiro'\ndate: 2016-04-09 12:52:53\ntags: [spring boot,shiro,java]\n---\n\n在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。\n\n现在开始是第一篇：在springboot项目中接入shiro\n\n## 引入shiro的maven依赖\n```\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-core</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-spring</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-web</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-ehcache</artifactId>\n    <version>1.2.3</version>\n</dependency>\n```\n\n## 程序具体实现\n\n### 首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\n```\nshiro:\n  realm: com.xxx.xxx.config.security.MyRealm\n  loginUrl: /view/sign-in.html\n  successUrl: /item.html\n  unauthorizedUrl: /forbidden.html\n  filterChainDefinitions:\n    \"/login\": anon\n    \"/static/**\": anon\n    \"/bower_components/**\": anon\n    \"/logout\": logout\n    \"/**\": authc\n```\n说明：\nrealm: com.xxx.xxx.config.security.MyRealm\nRealm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。\n为了获得更好的自定义功能，通常我们会自己实现一个Realm.\n所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。\nloginUrl，定义了需要认证用户时，跳转到的登录页面\nsuccessUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。\nunauthorizedUrl，定义未认证时显示的页面。\nfilterChainDefinitions，定义哪些路径应该做何种过滤策略。\nanon，logout，authc这些都是shiro默认实现的过滤器filter。\nanon表示可以匿名访问的路径，authc表示需要登录认证的路径\n\n过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。\n\n### 下面是自己实现的自定义Realm：MyRealm\n```\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.xxx.model.base.UserDTO;\nimport com.xxx.remote.base.UserRemote;\n\npublic class MyRealm extends AuthorizingRealm {\n    @Autowired UserRemote userService;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();\n        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n        List<String> roles = userService.findByUserId(user.getId());\n        info.addRoles(roles);\n        return info;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;\n        String username = usernamePasswordToken.getUsername();\n        UserDTO user = userService.findUserByName(username);\n        if (null != user) {\n            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());\n            return new SimpleAuthenticationInfo(user, cih, getName());\n        }\n        return null;\n    }\n}\n```\nMyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。\nAuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. \n\ndoGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。\ndoGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。\n\n例子中UserRemote userService是提供用户数据的具体service服务。\n\n### 有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\n#### springboot shiro配置类：ShiroAutoConfig.java\n```\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.realm.Realm;\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Import;\n\nimport com.xxx.xxx.config.security.MyRealm;\n\n@Configuration\n@EnableConfigurationProperties(ShiroProperties.class)\n@Import(ShiroManager.class)\npublic class ShiroAutoConfig {\n    @Autowired private ShiroProperties properties;\n\n    @Bean(name = \"realm\")\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public MyRealm realm() {\n        Class<?> relmClass = properties.getRealm();\n        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);\n        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);\n        r.setCredentialsMatcher(credentialsMatcher);\n        return r;\n    }\n\n    @Bean(name = \"shiroFilter\")\n    @DependsOn(\"securityManager\")\n    @ConditionalOnMissingBean\n    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) {\n        MyRealm myRealm = (MyRealm) realm;\n        securityManager.setRealm(myRealm);\n        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();\n        shiroFilter.setSecurityManager(securityManager);\n        shiroFilter.setLoginUrl(properties.getLoginUrl());\n        shiroFilter.setSuccessUrl(properties.getSuccessUrl());\n        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());\n        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());\n        return shiroFilter;\n    }\n}\n```\n这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。\ngetShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。\nyml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。\n当然，还需要配置几个其他配置，都在ShiroManager配置好了。\n\n#### ShiroProperties：\n```\nimport java.util.Map;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n/**\n * Configuration properties for Shiro.\n */\n@ConfigurationProperties(prefix = \"shiro\")\npublic class ShiroProperties {\n    private Class<?> realm;\n    private String loginUrl;\n    private String successUrl;\n    private String unauthorizedUrl;\n    private Map<String, String> filterChainDefinitions;\n\n}\n```\n\n#### ShiroManager：\n```\nimport org.apache.shiro.cache.CacheManager;\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.session.mgt.SessionManager;\nimport org.apache.shiro.session.mgt.eis.SessionDAO;\nimport org.apache.shiro.spring.LifecycleBeanPostProcessor;\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\nimport org.apache.shiro.web.session.mgt.DefaultWebSessionManager;\nimport org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.DependsOn;\n\n/**\n * Shiro Config Manager.\n */\npublic class ShiroManager {\n    /**\n     * 保证实现了Shiro内部lifecycle函数的bean执行\n     */\n    @Bean(name = \"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n    @Bean(name = \"defaultAdvisorAutoProxyCreator\")\n    @ConditionalOnMissingBean\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {\n        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);\n        return defaultAdvisorAutoProxyCreator;\n\n    }\n    /**\n     * 用户授权信息Cache\n     */\n    @Bean(name = \"cacheManager\")\n    @ConditionalOnMissingBean\n    public CacheManager cacheManager() {\n        return new MemoryConstrainedCacheManager();\n    }\n    @Bean(name = \"securityManager\")\n    @ConditionalOnMissingBean\n    public DefaultSecurityManager securityManager(CacheManager cacheManager) {\n        DefaultSecurityManager sm = new DefaultWebSecurityManager();\n        sm.setCacheManager(cacheManager);\n        return sm;\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) {\n        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();\n        aasa.setSecurityManager(securityManager);\n        return new AuthorizationAttributeSourceAdvisor();\n    }\n}\n```\nCacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。\n如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。\n\n至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。\n\n### 这里简单的提供一下在mvc的controller中做登录和登出怎么做。\n\nLoginController：\n```\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.IncorrectCredentialsException;\nimport org.apache.shiro.authc.UnknownAccountException;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.subject.Subject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class LoginController {\n    @RequestMapping(\"/login\")\n    @ResponseBody\n    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException {\n        Subject subject = SecurityUtils.getSubject();\n        String error = null;\n        UsernamePasswordToken token = new UsernamePasswordToken(username, password);\n        try {\n            subject.login(token);\n        } catch (UnknownAccountException e) {\n            error = \"用户名/密码错误\";\n        } catch (IncorrectCredentialsException e) {\n            error = \"用户名/密码错误\";\n        } catch (AuthenticationException e) {\n            // 其他错误，比如锁定，如果想单独处理请单独catch处理\n            error = \"其他错误：\" + e.getMessage();\n        }\n        if (error != null) {// 出错了，返回登录页面\n            req.setAttribute(\"error\", error);\n            resp.sendRedirect(\"/forbidden.html\");\n        } else {// 登录成功\n            resp.sendRedirect(\"/index.html\");// 设置跳转的页面\n        }\n    }\n    @RequestMapping(value = \"/logout\")\n    @ResponseBody\n    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n\n        Subject currentUser = SecurityUtils.getSubject();\n        currentUser.logout();\n        resp.sendRedirect(\"/index.html\");\n    }\n}\n```\n\ndone!","slug":"springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro","published":1,"updated":"2016-04-09T22:44:27.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghj8001d30ngv1ai0q1l","content":"<p>在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。</p>\n<p>现在开始是第一篇：在springboot项目中接入shiro</p>\n<h2 id=\"引入shiro的maven依赖\"><a href=\"#引入shiro的maven依赖\" class=\"headerlink\" title=\"引入shiro的maven依赖\"></a>引入shiro的maven依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序具体实现\"><a href=\"#程序具体实现\" class=\"headerlink\" title=\"程序具体实现\"></a>程序具体实现</h2><h3 id=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\"><a href=\"#首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\" class=\"headerlink\" title=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\"></a>首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shiro:</span><br><span class=\"line\">  realm: com.xxx.xxx.config.security.MyRealm</span><br><span class=\"line\">  loginUrl: /view/sign-in.html</span><br><span class=\"line\">  successUrl: /item.html</span><br><span class=\"line\">  unauthorizedUrl: /forbidden.html</span><br><span class=\"line\">  filterChainDefinitions:</span><br><span class=\"line\">    &quot;/login&quot;: anon</span><br><span class=\"line\">    &quot;/static/**&quot;: anon</span><br><span class=\"line\">    &quot;/bower_components/**&quot;: anon</span><br><span class=\"line\">    &quot;/logout&quot;: logout</span><br><span class=\"line\">    &quot;/**&quot;: authc</span><br></pre></td></tr></table></figure>\n<p>说明：<br>realm: com.xxx.xxx.config.security.MyRealm<br>Realm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。<br>为了获得更好的自定义功能，通常我们会自己实现一个Realm.<br>所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。<br>loginUrl，定义了需要认证用户时，跳转到的登录页面<br>successUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。<br>unauthorizedUrl，定义未认证时显示的页面。<br>filterChainDefinitions，定义哪些路径应该做何种过滤策略。<br>anon，logout，authc这些都是shiro默认实现的过滤器filter。<br>anon表示可以匿名访问的路径，authc表示需要登录认证的路径</p>\n<p>过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。</p>\n<h3 id=\"下面是自己实现的自定义Realm：MyRealm\"><a href=\"#下面是自己实现的自定义Realm：MyRealm\" class=\"headerlink\" title=\"下面是自己实现的自定义Realm：MyRealm\"></a>下面是自己实现的自定义Realm：MyRealm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class=\"line\">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class=\"line\">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.model.base.UserDTO;</span><br><span class=\"line\">import com.xxx.remote.base.UserRemote;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyRealm extends AuthorizingRealm &#123;</span><br><span class=\"line\">    @Autowired UserRemote userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class=\"line\">        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();</span><br><span class=\"line\">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class=\"line\">        List&lt;String&gt; roles = userService.findByUserId(user.getId());</span><br><span class=\"line\">        info.addRoles(roles);</span><br><span class=\"line\">        return info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class=\"line\">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class=\"line\">        String username = usernamePasswordToken.getUsername();</span><br><span class=\"line\">        UserDTO user = userService.findUserByName(username);</span><br><span class=\"line\">        if (null != user) &#123;</span><br><span class=\"line\">            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());</span><br><span class=\"line\">            return new SimpleAuthenticationInfo(user, cih, getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。<br>AuthorizationInfo represents a single Subject’s stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. </p>\n<p>doGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。<br>doGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。</p>\n<p>例子中UserRemote userService是提供用户数据的具体service服务。</p>\n<h3 id=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"><a href=\"#有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\" class=\"headerlink\" title=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"></a>有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器</h3><h4 id=\"springboot-shiro配置类：ShiroAutoConfig-java\"><a href=\"#springboot-shiro配置类：ShiroAutoConfig-java\" class=\"headerlink\" title=\"springboot shiro配置类：ShiroAutoConfig.java\"></a>springboot shiro配置类：ShiroAutoConfig.java</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.realm.Realm;</span><br><span class=\"line\">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class=\"line\">import org.springframework.beans.BeanUtils;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\">import org.springframework.context.annotation.Import;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.config.security.MyRealm;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableConfigurationProperties(ShiroProperties.class)</span><br><span class=\"line\">@Import(ShiroManager.class)</span><br><span class=\"line\">public class ShiroAutoConfig &#123;</span><br><span class=\"line\">    @Autowired private ShiroProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;realm&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public MyRealm realm() &#123;</span><br><span class=\"line\">        Class&lt;?&gt; relmClass = properties.getRealm();</span><br><span class=\"line\">        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);</span><br><span class=\"line\">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class=\"line\">        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);</span><br><span class=\"line\">        r.setCredentialsMatcher(credentialsMatcher);</span><br><span class=\"line\">        return r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;shiroFilter&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) &#123;</span><br><span class=\"line\">        MyRealm myRealm = (MyRealm) realm;</span><br><span class=\"line\">        securityManager.setRealm(myRealm);</span><br><span class=\"line\">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class=\"line\">        shiroFilter.setSecurityManager(securityManager);</span><br><span class=\"line\">        shiroFilter.setLoginUrl(properties.getLoginUrl());</span><br><span class=\"line\">        shiroFilter.setSuccessUrl(properties.getSuccessUrl());</span><br><span class=\"line\">        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());</span><br><span class=\"line\">        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());</span><br><span class=\"line\">        return shiroFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。<br>getShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。<br>yml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。<br>当然，还需要配置几个其他配置，都在ShiroManager配置好了。</p>\n<h4 id=\"ShiroProperties：\"><a href=\"#ShiroProperties：\" class=\"headerlink\" title=\"ShiroProperties：\"></a>ShiroProperties：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Configuration properties for Shiro.</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ConfigurationProperties(prefix = &quot;shiro&quot;)</span><br><span class=\"line\">public class ShiroProperties &#123;</span><br><span class=\"line\">    private Class&lt;?&gt; realm;</span><br><span class=\"line\">    private String loginUrl;</span><br><span class=\"line\">    private String successUrl;</span><br><span class=\"line\">    private String unauthorizedUrl;</span><br><span class=\"line\">    private Map&lt;String, String&gt; filterChainDefinitions;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ShiroManager：\"><a href=\"#ShiroManager：\" class=\"headerlink\" title=\"ShiroManager：\"></a>ShiroManager：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.cache.CacheManager;</span><br><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.SessionManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.eis.SessionDAO;</span><br><span class=\"line\">import org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class=\"line\">import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class=\"line\">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;</span><br><span class=\"line\">import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Shiro Config Manager.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ShiroManager &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 保证实现了Shiro内部lifecycle函数的bean执行</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class=\"line\">        return new LifecycleBeanPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;defaultAdvisorAutoProxyCreator&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &#123;</span><br><span class=\"line\">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();</span><br><span class=\"line\">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class=\"line\">        return defaultAdvisorAutoProxyCreator;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 用户授权信息Cache</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;cacheManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public CacheManager cacheManager() &#123;</span><br><span class=\"line\">        return new MemoryConstrainedCacheManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public DefaultSecurityManager securityManager(CacheManager cacheManager) &#123;</span><br><span class=\"line\">        DefaultSecurityManager sm = new DefaultWebSecurityManager();</span><br><span class=\"line\">        sm.setCacheManager(cacheManager);</span><br><span class=\"line\">        return sm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) &#123;</span><br><span class=\"line\">        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">        aasa.setSecurityManager(securityManager);</span><br><span class=\"line\">        return new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。<br>如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。</p>\n<p>至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。</p>\n<h3 id=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"><a href=\"#这里简单的提供一下在mvc的controller中做登录和登出怎么做。\" class=\"headerlink\" title=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"></a>这里简单的提供一下在mvc的controller中做登录和登出怎么做。</h3><p>LoginController：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.shiro.SecurityUtils;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class=\"line\">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.subject.Subject;</span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class LoginController &#123;</span><br><span class=\"line\">    @RequestMapping(&quot;/login&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException &#123;</span><br><span class=\"line\">        Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">        String error = null;</span><br><span class=\"line\">        UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            subject.login(token);</span><br><span class=\"line\">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (IncorrectCredentialsException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (AuthenticationException e) &#123;</span><br><span class=\"line\">            // 其他错误，比如锁定，如果想单独处理请单独catch处理</span><br><span class=\"line\">            error = &quot;其他错误：&quot; + e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (error != null) &#123;// 出错了，返回登录页面</span><br><span class=\"line\">            req.setAttribute(&quot;error&quot;, error);</span><br><span class=\"line\">            resp.sendRedirect(&quot;/forbidden.html&quot;);</span><br><span class=\"line\">        &#125; else &#123;// 登录成功</span><br><span class=\"line\">            resp.sendRedirect(&quot;/index.html&quot;);// 设置跳转的页面</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @RequestMapping(value = &quot;/logout&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class=\"line\">        currentUser.logout();</span><br><span class=\"line\">        resp.sendRedirect(&quot;/index.html&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done!</p>\n","excerpt":"","more":"<p>在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。</p>\n<p>现在开始是第一篇：在springboot项目中接入shiro</p>\n<h2 id=\"引入shiro的maven依赖\"><a href=\"#引入shiro的maven依赖\" class=\"headerlink\" title=\"引入shiro的maven依赖\"></a>引入shiro的maven依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序具体实现\"><a href=\"#程序具体实现\" class=\"headerlink\" title=\"程序具体实现\"></a>程序具体实现</h2><h3 id=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\"><a href=\"#首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\" class=\"headerlink\" title=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\"></a>首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shiro:</span><br><span class=\"line\">  realm: com.xxx.xxx.config.security.MyRealm</span><br><span class=\"line\">  loginUrl: /view/sign-in.html</span><br><span class=\"line\">  successUrl: /item.html</span><br><span class=\"line\">  unauthorizedUrl: /forbidden.html</span><br><span class=\"line\">  filterChainDefinitions:</span><br><span class=\"line\">    &quot;/login&quot;: anon</span><br><span class=\"line\">    &quot;/static/**&quot;: anon</span><br><span class=\"line\">    &quot;/bower_components/**&quot;: anon</span><br><span class=\"line\">    &quot;/logout&quot;: logout</span><br><span class=\"line\">    &quot;/**&quot;: authc</span><br></pre></td></tr></table></figure>\n<p>说明：<br>realm: com.xxx.xxx.config.security.MyRealm<br>Realm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。<br>为了获得更好的自定义功能，通常我们会自己实现一个Realm.<br>所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。<br>loginUrl，定义了需要认证用户时，跳转到的登录页面<br>successUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。<br>unauthorizedUrl，定义未认证时显示的页面。<br>filterChainDefinitions，定义哪些路径应该做何种过滤策略。<br>anon，logout，authc这些都是shiro默认实现的过滤器filter。<br>anon表示可以匿名访问的路径，authc表示需要登录认证的路径</p>\n<p>过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。</p>\n<h3 id=\"下面是自己实现的自定义Realm：MyRealm\"><a href=\"#下面是自己实现的自定义Realm：MyRealm\" class=\"headerlink\" title=\"下面是自己实现的自定义Realm：MyRealm\"></a>下面是自己实现的自定义Realm：MyRealm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class=\"line\">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class=\"line\">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.model.base.UserDTO;</span><br><span class=\"line\">import com.xxx.remote.base.UserRemote;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyRealm extends AuthorizingRealm &#123;</span><br><span class=\"line\">    @Autowired UserRemote userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class=\"line\">        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();</span><br><span class=\"line\">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class=\"line\">        List&lt;String&gt; roles = userService.findByUserId(user.getId());</span><br><span class=\"line\">        info.addRoles(roles);</span><br><span class=\"line\">        return info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class=\"line\">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class=\"line\">        String username = usernamePasswordToken.getUsername();</span><br><span class=\"line\">        UserDTO user = userService.findUserByName(username);</span><br><span class=\"line\">        if (null != user) &#123;</span><br><span class=\"line\">            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());</span><br><span class=\"line\">            return new SimpleAuthenticationInfo(user, cih, getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。<br>AuthorizationInfo represents a single Subject’s stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. </p>\n<p>doGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。<br>doGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。</p>\n<p>例子中UserRemote userService是提供用户数据的具体service服务。</p>\n<h3 id=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"><a href=\"#有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\" class=\"headerlink\" title=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"></a>有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器</h3><h4 id=\"springboot-shiro配置类：ShiroAutoConfig-java\"><a href=\"#springboot-shiro配置类：ShiroAutoConfig-java\" class=\"headerlink\" title=\"springboot shiro配置类：ShiroAutoConfig.java\"></a>springboot shiro配置类：ShiroAutoConfig.java</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.realm.Realm;</span><br><span class=\"line\">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class=\"line\">import org.springframework.beans.BeanUtils;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\">import org.springframework.context.annotation.Import;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.config.security.MyRealm;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableConfigurationProperties(ShiroProperties.class)</span><br><span class=\"line\">@Import(ShiroManager.class)</span><br><span class=\"line\">public class ShiroAutoConfig &#123;</span><br><span class=\"line\">    @Autowired private ShiroProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;realm&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public MyRealm realm() &#123;</span><br><span class=\"line\">        Class&lt;?&gt; relmClass = properties.getRealm();</span><br><span class=\"line\">        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);</span><br><span class=\"line\">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class=\"line\">        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);</span><br><span class=\"line\">        r.setCredentialsMatcher(credentialsMatcher);</span><br><span class=\"line\">        return r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;shiroFilter&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) &#123;</span><br><span class=\"line\">        MyRealm myRealm = (MyRealm) realm;</span><br><span class=\"line\">        securityManager.setRealm(myRealm);</span><br><span class=\"line\">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class=\"line\">        shiroFilter.setSecurityManager(securityManager);</span><br><span class=\"line\">        shiroFilter.setLoginUrl(properties.getLoginUrl());</span><br><span class=\"line\">        shiroFilter.setSuccessUrl(properties.getSuccessUrl());</span><br><span class=\"line\">        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());</span><br><span class=\"line\">        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());</span><br><span class=\"line\">        return shiroFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。<br>getShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。<br>yml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。<br>当然，还需要配置几个其他配置，都在ShiroManager配置好了。</p>\n<h4 id=\"ShiroProperties：\"><a href=\"#ShiroProperties：\" class=\"headerlink\" title=\"ShiroProperties：\"></a>ShiroProperties：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Configuration properties for Shiro.</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ConfigurationProperties(prefix = &quot;shiro&quot;)</span><br><span class=\"line\">public class ShiroProperties &#123;</span><br><span class=\"line\">    private Class&lt;?&gt; realm;</span><br><span class=\"line\">    private String loginUrl;</span><br><span class=\"line\">    private String successUrl;</span><br><span class=\"line\">    private String unauthorizedUrl;</span><br><span class=\"line\">    private Map&lt;String, String&gt; filterChainDefinitions;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ShiroManager：\"><a href=\"#ShiroManager：\" class=\"headerlink\" title=\"ShiroManager：\"></a>ShiroManager：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.cache.CacheManager;</span><br><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.SessionManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.eis.SessionDAO;</span><br><span class=\"line\">import org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class=\"line\">import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class=\"line\">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;</span><br><span class=\"line\">import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Shiro Config Manager.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ShiroManager &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 保证实现了Shiro内部lifecycle函数的bean执行</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class=\"line\">        return new LifecycleBeanPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;defaultAdvisorAutoProxyCreator&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &#123;</span><br><span class=\"line\">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();</span><br><span class=\"line\">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class=\"line\">        return defaultAdvisorAutoProxyCreator;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 用户授权信息Cache</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;cacheManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public CacheManager cacheManager() &#123;</span><br><span class=\"line\">        return new MemoryConstrainedCacheManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public DefaultSecurityManager securityManager(CacheManager cacheManager) &#123;</span><br><span class=\"line\">        DefaultSecurityManager sm = new DefaultWebSecurityManager();</span><br><span class=\"line\">        sm.setCacheManager(cacheManager);</span><br><span class=\"line\">        return sm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) &#123;</span><br><span class=\"line\">        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">        aasa.setSecurityManager(securityManager);</span><br><span class=\"line\">        return new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。<br>如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。</p>\n<p>至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。</p>\n<h3 id=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"><a href=\"#这里简单的提供一下在mvc的controller中做登录和登出怎么做。\" class=\"headerlink\" title=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"></a>这里简单的提供一下在mvc的controller中做登录和登出怎么做。</h3><p>LoginController：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.shiro.SecurityUtils;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class=\"line\">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.subject.Subject;</span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class LoginController &#123;</span><br><span class=\"line\">    @RequestMapping(&quot;/login&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException &#123;</span><br><span class=\"line\">        Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">        String error = null;</span><br><span class=\"line\">        UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            subject.login(token);</span><br><span class=\"line\">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (IncorrectCredentialsException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (AuthenticationException e) &#123;</span><br><span class=\"line\">            // 其他错误，比如锁定，如果想单独处理请单独catch处理</span><br><span class=\"line\">            error = &quot;其他错误：&quot; + e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (error != null) &#123;// 出错了，返回登录页面</span><br><span class=\"line\">            req.setAttribute(&quot;error&quot;, error);</span><br><span class=\"line\">            resp.sendRedirect(&quot;/forbidden.html&quot;);</span><br><span class=\"line\">        &#125; else &#123;// 登录成功</span><br><span class=\"line\">            resp.sendRedirect(&quot;/index.html&quot;);// 设置跳转的页面</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @RequestMapping(value = &quot;/logout&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class=\"line\">        currentUser.logout();</span><br><span class=\"line\">        resp.sendRedirect(&quot;/index.html&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done!</p>\n","sticky":0},{"title":"springmvc rest api versioning","date":"2016-05-03T15:34:35.000Z","_content":"\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}\n```\n","source":"_posts/springmvc-rest-api-versioning.md","raw":"---\ntitle: springmvc rest api versioning\ndate: 2016-05-03 23:34:35\ntags: [rest,api,versioning,springmvc,java]\n---\n\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}\n```\n","slug":"springmvc-rest-api-versioning","published":1,"updated":"2016-05-03T15:37:38.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghj9001f30nguu7udqdo","content":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\" target=\"_blank\" rel=\"external\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\" target=\"_blank\" rel=\"external\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@VersionedResource(media = &quot;application/vnd.app.resource&quot;)</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;1.0&quot;, to = &quot;1.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v1() &#123;</span><br><span class=\"line\">        return new Resource(&quot;1.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;2.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v2_onwards() &#123;</span><br><span class=\"line\">        return new Resource(&quot;2.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@VersionedResource(media = &quot;application/vnd.app.resource&quot;)</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;1.0&quot;, to = &quot;1.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v1() &#123;</span><br><span class=\"line\">        return new Resource(&quot;1.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;2.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v2_onwards() &#123;</span><br><span class=\"line\">        return new Resource(&quot;2.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","sticky":0},{"title":"为你的项目做合理的版本控制管理","date":"2016-04-07T15:32:15.000Z","_content":"\n### 一款经典的分支管理规范\n![](/images/version.png)\n\n### \n我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。\n\n1.\n最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。\n\n2.\n我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。\n\n3.\n当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。\n\n4.\n当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。\n\n5.\n当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。\n\n6.\n对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。","source":"_posts/为你的项目做合理的版本控制管理.md","raw":"---\ntitle: 为你的项目做合理的版本控制管理\ndate: 2016-04-07 23:32:15\ntags: [git,svn,版本控制,分支管理]\n---\n\n### 一款经典的分支管理规范\n![](/images/version.png)\n\n### \n我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。\n\n1.\n最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。\n\n2.\n我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。\n\n3.\n当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。\n\n4.\n当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。\n\n5.\n当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。\n\n6.\n对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。","slug":"为你的项目做合理的版本控制管理","published":1,"updated":"2016-04-07T15:43:41.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjb001i30ngw960zkt4","content":"<h3 id=\"一款经典的分支管理规范\"><a href=\"#一款经典的分支管理规范\" class=\"headerlink\" title=\"一款经典的分支管理规范\"></a>一款经典的分支管理规范</h3><p><img src=\"/images/version.png\" alt=\"\"></p>\n<p>###<br>我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。</p>\n<p>1.<br>最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。</p>\n<p>2.<br>我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。</p>\n<p>3.<br>当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。</p>\n<p>4.<br>当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。</p>\n<p>5.<br>当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。</p>\n<p>6.<br>对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。</p>\n","excerpt":"","more":"<h3 id=\"一款经典的分支管理规范\"><a href=\"#一款经典的分支管理规范\" class=\"headerlink\" title=\"一款经典的分支管理规范\"></a>一款经典的分支管理规范</h3><p><img src=\"/images/version.png\" alt=\"\"></p>\n<p>###<br>我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。</p>\n<p>1.<br>最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。</p>\n<p>2.<br>我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。</p>\n<p>3.<br>当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。</p>\n<p>4.<br>当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。</p>\n<p>5.<br>当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。</p>\n<p>6.<br>对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。</p>\n","sticky":0},{"title":"[spring-boot]springboot实践之在项目中使用spring-cache和redis实现缓存","date":"2016-04-09T02:43:01.000Z","_content":"\n## 1.首先需要准备一个redis服务端作为缓存\nredis下载安装启动，比较简单，请google之。\n\n## 2.项目依赖\n使用spring boot和spring cache，需要springboot依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n```\n连接redis，需要spring data redis和jedis包\n```\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n    </dependency>\n```\n\n## 3.程序配置实现与使用\n不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。\n\n### 添加redis cache相关的config类，如下：\n```\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\n@EnableCaching\npublic class RedisCacheConfig extends CachingConfigurerSupport {\n    @Bean\n    public JedisConnectionFactory redisConnectionFactory() {\n        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();\n        redisConnectionFactory.setHostName(\"127.0.0.1\");\n        redisConnectionFactory.setPort(6379);\n        return redisConnectionFactory;\n    }\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory cf) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(cf);\n        return redisTemplate;\n    }\n    @Bean(name = \"redisCacheManager\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        cacheManager.setDefaultExpiration(300);\n        return cacheManager;\n    }\n}\n```\n@Configuration标记此java类为spring boot的配置类\n@EnableCaching标记为项目启用缓存\n@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean>\n从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。\n其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。\n\n### 如何使用？\n使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可\n下面是一个例子：\n```\n    @Cacheable(value = \"find\")\n    public List<Object> find(Long id) {\n        ...\n    }\n    @CacheEvict(value = \"find\", allEntries = true)\n    public Object saveProject(Object object) {\n        ...\n    }\n    @CacheEvict(value = \"find\" , allEntries = true)\n    public void deleteProject(Long id) {\n        ...\n    }\n```\n这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。\n但如果实际数据改变了怎么办？\n我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：\n每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。\n@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。\n\n这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。","source":"_posts/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存.md","raw":"---\ntitle: '[spring-boot]springboot实践之在项目中使用spring-cache和redis实现缓存'\ndate: 2016-04-09 10:43:01\ntags: [spring boot,spring cache,redis,注解]\n---\n\n## 1.首先需要准备一个redis服务端作为缓存\nredis下载安装启动，比较简单，请google之。\n\n## 2.项目依赖\n使用spring boot和spring cache，需要springboot依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n```\n连接redis，需要spring data redis和jedis包\n```\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n    </dependency>\n```\n\n## 3.程序配置实现与使用\n不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。\n\n### 添加redis cache相关的config类，如下：\n```\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\n@EnableCaching\npublic class RedisCacheConfig extends CachingConfigurerSupport {\n    @Bean\n    public JedisConnectionFactory redisConnectionFactory() {\n        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();\n        redisConnectionFactory.setHostName(\"127.0.0.1\");\n        redisConnectionFactory.setPort(6379);\n        return redisConnectionFactory;\n    }\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory cf) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(cf);\n        return redisTemplate;\n    }\n    @Bean(name = \"redisCacheManager\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        cacheManager.setDefaultExpiration(300);\n        return cacheManager;\n    }\n}\n```\n@Configuration标记此java类为spring boot的配置类\n@EnableCaching标记为项目启用缓存\n@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean>\n从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。\n其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。\n\n### 如何使用？\n使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可\n下面是一个例子：\n```\n    @Cacheable(value = \"find\")\n    public List<Object> find(Long id) {\n        ...\n    }\n    @CacheEvict(value = \"find\", allEntries = true)\n    public Object saveProject(Object object) {\n        ...\n    }\n    @CacheEvict(value = \"find\" , allEntries = true)\n    public void deleteProject(Long id) {\n        ...\n    }\n```\n这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。\n但如果实际数据改变了怎么办？\n我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：\n每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。\n@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。\n\n这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。","slug":"spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存","published":1,"updated":"2016-04-09T03:25:57.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjc001k30ngpoo9w7yi","content":"<h2 id=\"1-首先需要准备一个redis服务端作为缓存\"><a href=\"#1-首先需要准备一个redis服务端作为缓存\" class=\"headerlink\" title=\"1.首先需要准备一个redis服务端作为缓存\"></a>1.首先需要准备一个redis服务端作为缓存</h2><p>redis下载安装启动，比较简单，请google之。</p>\n<h2 id=\"2-项目依赖\"><a href=\"#2-项目依赖\" class=\"headerlink\" title=\"2.项目依赖\"></a>2.项目依赖</h2><p>使用spring boot和spring cache，需要springboot依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>连接redis，需要spring data redis和jedis包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-程序配置实现与使用\"><a href=\"#3-程序配置实现与使用\" class=\"headerlink\" title=\"3.程序配置实现与使用\"></a>3.程序配置实现与使用</h2><p>不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。</p>\n<h3 id=\"添加redis-cache相关的config类，如下：\"><a href=\"#添加redis-cache相关的config类，如下：\" class=\"headerlink\" title=\"添加redis cache相关的config类，如下：\"></a>添加redis cache相关的config类，如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisConnectionFactory redisConnectionFactory() &#123;</span><br><span class=\"line\">        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();</span><br><span class=\"line\">        redisConnectionFactory.setHostName(&quot;127.0.0.1&quot;);</span><br><span class=\"line\">        redisConnectionFactory.setPort(6379);</span><br><span class=\"line\">        return redisConnectionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory cf) &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, String&gt; redisTemplate = new RedisTemplate&lt;String, String&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(cf);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;redisCacheManager&quot;)</span><br><span class=\"line\">    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;</span><br><span class=\"line\">        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        cacheManager.setDefaultExpiration(300);</span><br><span class=\"line\">        return cacheManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Configuration标记此java类为spring boot的配置类<br>@EnableCaching标记为项目启用缓存<br>@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean><br>从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。<br>其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。</bean></p>\n<h3 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h3><p>使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可<br>下面是一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Cacheable(value = &quot;find&quot;)</span><br><span class=\"line\">public List&lt;Object&gt; find(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot;, allEntries = true)</span><br><span class=\"line\">public Object saveProject(Object object) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot; , allEntries = true)</span><br><span class=\"line\">public void deleteProject(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。<br>但如果实际数据改变了怎么办？<br>我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：<br>每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。<br>@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。</p>\n<p>这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。</p>\n","excerpt":"","more":"<h2 id=\"1-首先需要准备一个redis服务端作为缓存\"><a href=\"#1-首先需要准备一个redis服务端作为缓存\" class=\"headerlink\" title=\"1.首先需要准备一个redis服务端作为缓存\"></a>1.首先需要准备一个redis服务端作为缓存</h2><p>redis下载安装启动，比较简单，请google之。</p>\n<h2 id=\"2-项目依赖\"><a href=\"#2-项目依赖\" class=\"headerlink\" title=\"2.项目依赖\"></a>2.项目依赖</h2><p>使用spring boot和spring cache，需要springboot依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>连接redis，需要spring data redis和jedis包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-程序配置实现与使用\"><a href=\"#3-程序配置实现与使用\" class=\"headerlink\" title=\"3.程序配置实现与使用\"></a>3.程序配置实现与使用</h2><p>不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。</p>\n<h3 id=\"添加redis-cache相关的config类，如下：\"><a href=\"#添加redis-cache相关的config类，如下：\" class=\"headerlink\" title=\"添加redis cache相关的config类，如下：\"></a>添加redis cache相关的config类，如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisConnectionFactory redisConnectionFactory() &#123;</span><br><span class=\"line\">        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();</span><br><span class=\"line\">        redisConnectionFactory.setHostName(&quot;127.0.0.1&quot;);</span><br><span class=\"line\">        redisConnectionFactory.setPort(6379);</span><br><span class=\"line\">        return redisConnectionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory cf) &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, String&gt; redisTemplate = new RedisTemplate&lt;String, String&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(cf);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;redisCacheManager&quot;)</span><br><span class=\"line\">    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;</span><br><span class=\"line\">        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        cacheManager.setDefaultExpiration(300);</span><br><span class=\"line\">        return cacheManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Configuration标记此java类为spring boot的配置类<br>@EnableCaching标记为项目启用缓存<br>@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean><br>从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。<br>其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。</p>\n<h3 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h3><p>使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可<br>下面是一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Cacheable(value = &quot;find&quot;)</span><br><span class=\"line\">public List&lt;Object&gt; find(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot;, allEntries = true)</span><br><span class=\"line\">public Object saveProject(Object object) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot; , allEntries = true)</span><br><span class=\"line\">public void deleteProject(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。<br>但如果实际数据改变了怎么办？<br>我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：<br>每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。<br>@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。</p>\n<p>这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。</p>\n","sticky":0},{"title":"[springboot]在spring项目中连接数据库以及spring-datajpa和mybatis的使用","date":"2016-04-09T03:37:07.000Z","_content":"\n## 1.在项目中添加数据库配置（添加数据源等配置）\nspring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。\n比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。\n如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。\n在启动类添加注解：\n@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}\n\n回到数据源配置上来。\n首先,在配置文件application.properties里面配置数据库url\n```\nspring.datasource.url=jdbc:mysql://localhost/dbname\nspring.datasource.username=username\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n使用mysql数据库，还需要添加maven依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n然后，添加数据库配置类\n\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        return sessionFactory.getObject();\n    }\n}\n```\n如此，项目中就有了数据源\n\n\n## 2.在项目中使用spring-data-jpa\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n添加Repository类：\n```\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.CrudRepository;\n\nimport com.xxx.xxx.model.User;\n\npublic interface UserRepository extends CrudRepository<User, Long> {\n\n    Page<User> findAll(Pageable pageable);\n    Page<User> findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);\n    User findByNameAndTypeAllIgnoringCase(String name, Integer type);\n    User findByName(String name);\n}\n```\npring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现\n这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。\n然后你只需添加一些你需要的额外接口方法。\n同样你只需按照其约定的方式写好接口方法，而不需要具体实现。\n\n使用：\n在需要的地方注解注入即可。\n@Autowrite UserRepository userRepository;\n\n\n## 3.在项目中使用mybatis\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.2.2</version>\n</dependency>\n```\n\nmybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。\n你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。\n\n注解sql例子：\n```\npublic interface ItemMapper {\n    @Select(\"select * from item\")\n    List<Item> findAll();\n}\n```\n而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。\n\n当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。\n首先需要改一下DatabaseConfig配置类：\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\n@MapperScan(basePackages=\"com.xxx.xxx.mapper\")\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        sessionFactory.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        return sessionFactory.getObject();\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);\n    }\n}\n```\n添加mybatis配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <package name=\"com.xxx.xxx.model\"/>\n    </typeAliases>\n    <mappers>\n        <mapper resource=\"mapper/xxxMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n具体Mapper实现类：\n```\n@Component\npublic class ItemMapper {\n    @Autowired private SqlSessionTemplate sqlSessionTemplate;\n\n    public Item selectItemById(long id) {\n        return this.sqlSessionTemplate.selectOne(\"selectItemById\", id);\n    }\n}\n```\n\ndone！","source":"_posts/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用.md","raw":"---\ntitle: '[springboot]在spring项目中连接数据库以及spring-datajpa和mybatis的使用'\ndate: 2016-04-09 11:37:07\ntags: [spring boot,mysql,数据库,spring data jpa,mybatis]\n---\n\n## 1.在项目中添加数据库配置（添加数据源等配置）\nspring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。\n比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。\n如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。\n在启动类添加注解：\n@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}\n\n回到数据源配置上来。\n首先,在配置文件application.properties里面配置数据库url\n```\nspring.datasource.url=jdbc:mysql://localhost/dbname\nspring.datasource.username=username\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n使用mysql数据库，还需要添加maven依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n然后，添加数据库配置类\n\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        return sessionFactory.getObject();\n    }\n}\n```\n如此，项目中就有了数据源\n\n\n## 2.在项目中使用spring-data-jpa\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n添加Repository类：\n```\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.CrudRepository;\n\nimport com.xxx.xxx.model.User;\n\npublic interface UserRepository extends CrudRepository<User, Long> {\n\n    Page<User> findAll(Pageable pageable);\n    Page<User> findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);\n    User findByNameAndTypeAllIgnoringCase(String name, Integer type);\n    User findByName(String name);\n}\n```\npring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现\n这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。\n然后你只需添加一些你需要的额外接口方法。\n同样你只需按照其约定的方式写好接口方法，而不需要具体实现。\n\n使用：\n在需要的地方注解注入即可。\n@Autowrite UserRepository userRepository;\n\n\n## 3.在项目中使用mybatis\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.2.2</version>\n</dependency>\n```\n\nmybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。\n你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。\n\n注解sql例子：\n```\npublic interface ItemMapper {\n    @Select(\"select * from item\")\n    List<Item> findAll();\n}\n```\n而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。\n\n当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。\n首先需要改一下DatabaseConfig配置类：\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\n@MapperScan(basePackages=\"com.xxx.xxx.mapper\")\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        sessionFactory.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        return sessionFactory.getObject();\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);\n    }\n}\n```\n添加mybatis配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <package name=\"com.xxx.xxx.model\"/>\n    </typeAliases>\n    <mappers>\n        <mapper resource=\"mapper/xxxMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n具体Mapper实现类：\n```\n@Component\npublic class ItemMapper {\n    @Autowired private SqlSessionTemplate sqlSessionTemplate;\n\n    public Item selectItemById(long id) {\n        return this.sqlSessionTemplate.selectOne(\"selectItemById\", id);\n    }\n}\n```\n\ndone！","slug":"springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用","published":1,"updated":"2016-04-09T04:30:03.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjh001m30ngepusegyy","content":"<h2 id=\"1-在项目中添加数据库配置（添加数据源等配置）\"><a href=\"#1-在项目中添加数据库配置（添加数据源等配置）\" class=\"headerlink\" title=\"1.在项目中添加数据库配置（添加数据源等配置）\"></a>1.在项目中添加数据库配置（添加数据源等配置）</h2><p>spring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。<br>比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。<br>如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。<br>在启动类添加注解：<br>@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}</p>\n<p>回到数据源配置上来。<br>首先,在配置文件application.properties里面配置数据库url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost/dbname</span><br><span class=\"line\">spring.datasource.username=username</span><br><span class=\"line\">spring.datasource.password=password</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p>\n<p>使用mysql数据库，还需要添加maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加数据库配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此，项目中就有了数据源</p>\n<h2 id=\"2-在项目中使用spring-data-jpa\"><a href=\"#2-在项目中使用spring-data-jpa\" class=\"headerlink\" title=\"2.在项目中使用spring-data-jpa\"></a>2.在项目中使用spring-data-jpa</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加Repository类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.data.domain.Page;</span><br><span class=\"line\">import org.springframework.data.domain.Pageable;</span><br><span class=\"line\">import org.springframework.data.repository.CrudRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.model.User;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserRepository extends CrudRepository&lt;User, Long&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;User&gt; findAll(Pageable pageable);</span><br><span class=\"line\">    Page&lt;User&gt; findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);</span><br><span class=\"line\">    User findByNameAndTypeAllIgnoringCase(String name, Integer type);</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现<br>这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。<br>然后你只需添加一些你需要的额外接口方法。<br>同样你只需按照其约定的方式写好接口方法，而不需要具体实现。</p>\n<p>使用：<br>在需要的地方注解注入即可。<br>@Autowrite UserRepository userRepository;</p>\n<h2 id=\"3-在项目中使用mybatis\"><a href=\"#3-在项目中使用mybatis\" class=\"headerlink\" title=\"3.在项目中使用mybatis\"></a>3.在项目中使用mybatis</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>mybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。<br>你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。</p>\n<p>注解sql例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ItemMapper &#123;</span><br><span class=\"line\">    @Select(&quot;select * from item&quot;)</span><br><span class=\"line\">    List&lt;Item&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。</p>\n<p>当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。<br>首先需要改一下DatabaseConfig配置类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@MapperScan(basePackages=&quot;com.xxx.xxx.mapper&quot;)</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        sessionFactory.setConfigLocation(new ClassPathResource(&quot;mybatis-config.xml&quot;));</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加mybatis配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;package name=&quot;com.xxx.xxx.model&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mapper/xxxMapper.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<p>具体Mapper实现类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class ItemMapper &#123;</span><br><span class=\"line\">    @Autowired private SqlSessionTemplate sqlSessionTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Item selectItemById(long id) &#123;</span><br><span class=\"line\">        return this.sqlSessionTemplate.selectOne(&quot;selectItemById&quot;, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done！</p>\n","excerpt":"","more":"<h2 id=\"1-在项目中添加数据库配置（添加数据源等配置）\"><a href=\"#1-在项目中添加数据库配置（添加数据源等配置）\" class=\"headerlink\" title=\"1.在项目中添加数据库配置（添加数据源等配置）\"></a>1.在项目中添加数据库配置（添加数据源等配置）</h2><p>spring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。<br>比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。<br>如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。<br>在启动类添加注解：<br>@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}</p>\n<p>回到数据源配置上来。<br>首先,在配置文件application.properties里面配置数据库url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost/dbname</span><br><span class=\"line\">spring.datasource.username=username</span><br><span class=\"line\">spring.datasource.password=password</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p>\n<p>使用mysql数据库，还需要添加maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加数据库配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此，项目中就有了数据源</p>\n<h2 id=\"2-在项目中使用spring-data-jpa\"><a href=\"#2-在项目中使用spring-data-jpa\" class=\"headerlink\" title=\"2.在项目中使用spring-data-jpa\"></a>2.在项目中使用spring-data-jpa</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加Repository类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.data.domain.Page;</span><br><span class=\"line\">import org.springframework.data.domain.Pageable;</span><br><span class=\"line\">import org.springframework.data.repository.CrudRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.model.User;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserRepository extends CrudRepository&lt;User, Long&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;User&gt; findAll(Pageable pageable);</span><br><span class=\"line\">    Page&lt;User&gt; findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);</span><br><span class=\"line\">    User findByNameAndTypeAllIgnoringCase(String name, Integer type);</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现<br>这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。<br>然后你只需添加一些你需要的额外接口方法。<br>同样你只需按照其约定的方式写好接口方法，而不需要具体实现。</p>\n<p>使用：<br>在需要的地方注解注入即可。<br>@Autowrite UserRepository userRepository;</p>\n<h2 id=\"3-在项目中使用mybatis\"><a href=\"#3-在项目中使用mybatis\" class=\"headerlink\" title=\"3.在项目中使用mybatis\"></a>3.在项目中使用mybatis</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>mybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。<br>你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。</p>\n<p>注解sql例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ItemMapper &#123;</span><br><span class=\"line\">    @Select(&quot;select * from item&quot;)</span><br><span class=\"line\">    List&lt;Item&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。</p>\n<p>当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。<br>首先需要改一下DatabaseConfig配置类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@MapperScan(basePackages=&quot;com.xxx.xxx.mapper&quot;)</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        sessionFactory.setConfigLocation(new ClassPathResource(&quot;mybatis-config.xml&quot;));</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加mybatis配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;package name=&quot;com.xxx.xxx.model&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mapper/xxxMapper.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<p>具体Mapper实现类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class ItemMapper &#123;</span><br><span class=\"line\">    @Autowired private SqlSessionTemplate sqlSessionTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Item selectItemById(long id) &#123;</span><br><span class=\"line\">        return this.sqlSessionTemplate.selectOne(&quot;selectItemById&quot;, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done！</p>\n","sticky":0},{"title":"使用RAP作为接口管理和调试的工具","date":"2016-07-08T06:06:27.000Z","_content":"\n## 一、为什么使用RAP？\n- 接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。\n比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。\n\n- 而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：\n1.可以按团队和项目结构化的管理接口文档。\n2.提供统一方便的接口定义方式。\n3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。\n4.校验后端提供的接口的数据格式和字段是否符合要求。\n\n**虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。**\n\n\n\n## 二、RAP安装部署\n### 1.下载RAP\n在RAP的github主页上下载最新版本war包\n\n### 2.环境准备\n需要tomcat和mysql\n\n### 3.部署\nRAP在tomcat中要使用ROOT的方式部署。\n- 把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war\n- 在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库\n- 启动tomcat\n- 访问http://localhost:8080/\n\n## 三、RAP的使用\n### 1.注册账号\nRAP自带账号管理和登陆功能，使用前先注册账号，登陆即可\n\n### 2.添加团队、项目产品线等。\n- 创建团队\n![](/images/rap-001.png)\n- 创建产品线\n![](/images/rap-002.png)\n![](/images/rap-003.png)\n\n### 3.分组和项目管理\n![](/images/rap-004.png)\n![](/images/rap-009.png)\n\n### 4.添加模块和页面\n![](/images/rap-005.png)\n\n### 5.添加接口\n![](/images/rap-006.png)\n\n### 6.为返回值字段设置自定义的mock数据\n![](/images/rap-007.png)\n我们可以为不同的字段自定义不同的mock数据，已适应实际需要。\n\n### 7.前端使用接口mock数据提前进行开发\n![](/images/rap-008.png)\n这个例子中的“项目根路径”：localhost:8080/mockjs/1\n就是这个mock服务的模拟服务路径\n前端访问：http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&activate_code=sdf&mac_address=sdf\n就是访问我们模拟的接口地址: /client/machine/activate","source":"_posts/使用RAP作为接口管理和调试的工具.md","raw":"---\ntitle: 使用RAP作为接口管理和调试的工具\ndate: 2016-07-08 14:06:27\ntags: [接口文档, RAP, mock]\n---\n\n## 一、为什么使用RAP？\n- 接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。\n比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。\n\n- 而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：\n1.可以按团队和项目结构化的管理接口文档。\n2.提供统一方便的接口定义方式。\n3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。\n4.校验后端提供的接口的数据格式和字段是否符合要求。\n\n**虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。**\n\n\n\n## 二、RAP安装部署\n### 1.下载RAP\n在RAP的github主页上下载最新版本war包\n\n### 2.环境准备\n需要tomcat和mysql\n\n### 3.部署\nRAP在tomcat中要使用ROOT的方式部署。\n- 把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war\n- 在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库\n- 启动tomcat\n- 访问http://localhost:8080/\n\n## 三、RAP的使用\n### 1.注册账号\nRAP自带账号管理和登陆功能，使用前先注册账号，登陆即可\n\n### 2.添加团队、项目产品线等。\n- 创建团队\n![](/images/rap-001.png)\n- 创建产品线\n![](/images/rap-002.png)\n![](/images/rap-003.png)\n\n### 3.分组和项目管理\n![](/images/rap-004.png)\n![](/images/rap-009.png)\n\n### 4.添加模块和页面\n![](/images/rap-005.png)\n\n### 5.添加接口\n![](/images/rap-006.png)\n\n### 6.为返回值字段设置自定义的mock数据\n![](/images/rap-007.png)\n我们可以为不同的字段自定义不同的mock数据，已适应实际需要。\n\n### 7.前端使用接口mock数据提前进行开发\n![](/images/rap-008.png)\n这个例子中的“项目根路径”：localhost:8080/mockjs/1\n就是这个mock服务的模拟服务路径\n前端访问：http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&activate_code=sdf&mac_address=sdf\n就是访问我们模拟的接口地址: /client/machine/activate","slug":"使用RAP作为接口管理和调试的工具","published":1,"updated":"2016-07-11T12:08:57.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghji001o30ngytubhyw0","content":"<h2 id=\"一、为什么使用RAP？\"><a href=\"#一、为什么使用RAP？\" class=\"headerlink\" title=\"一、为什么使用RAP？\"></a>一、为什么使用RAP？</h2><ul>\n<li><p>接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。<br>比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。</p>\n</li>\n<li><p>而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：<br>1.可以按团队和项目结构化的管理接口文档。<br>2.提供统一方便的接口定义方式。<br>3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。<br>4.校验后端提供的接口的数据格式和字段是否符合要求。</p>\n</li>\n</ul>\n<p><strong>虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。</strong></p>\n<h2 id=\"二、RAP安装部署\"><a href=\"#二、RAP安装部署\" class=\"headerlink\" title=\"二、RAP安装部署\"></a>二、RAP安装部署</h2><h3 id=\"1-下载RAP\"><a href=\"#1-下载RAP\" class=\"headerlink\" title=\"1.下载RAP\"></a>1.下载RAP</h3><p>在RAP的github主页上下载最新版本war包</p>\n<h3 id=\"2-环境准备\"><a href=\"#2-环境准备\" class=\"headerlink\" title=\"2.环境准备\"></a>2.环境准备</h3><p>需要tomcat和mysql</p>\n<h3 id=\"3-部署\"><a href=\"#3-部署\" class=\"headerlink\" title=\"3.部署\"></a>3.部署</h3><p>RAP在tomcat中要使用ROOT的方式部署。</p>\n<ul>\n<li>把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war</li>\n<li>在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库</li>\n<li>启动tomcat</li>\n<li>访问<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a></li>\n</ul>\n<h2 id=\"三、RAP的使用\"><a href=\"#三、RAP的使用\" class=\"headerlink\" title=\"三、RAP的使用\"></a>三、RAP的使用</h2><h3 id=\"1-注册账号\"><a href=\"#1-注册账号\" class=\"headerlink\" title=\"1.注册账号\"></a>1.注册账号</h3><p>RAP自带账号管理和登陆功能，使用前先注册账号，登陆即可</p>\n<h3 id=\"2-添加团队、项目产品线等。\"><a href=\"#2-添加团队、项目产品线等。\" class=\"headerlink\" title=\"2.添加团队、项目产品线等。\"></a>2.添加团队、项目产品线等。</h3><ul>\n<li>创建团队<br><img src=\"/images/rap-001.png\" alt=\"\"></li>\n<li>创建产品线<br><img src=\"/images/rap-002.png\" alt=\"\"><br><img src=\"/images/rap-003.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"3-分组和项目管理\"><a href=\"#3-分组和项目管理\" class=\"headerlink\" title=\"3.分组和项目管理\"></a>3.分组和项目管理</h3><p><img src=\"/images/rap-004.png\" alt=\"\"><br><img src=\"/images/rap-009.png\" alt=\"\"></p>\n<h3 id=\"4-添加模块和页面\"><a href=\"#4-添加模块和页面\" class=\"headerlink\" title=\"4.添加模块和页面\"></a>4.添加模块和页面</h3><p><img src=\"/images/rap-005.png\" alt=\"\"></p>\n<h3 id=\"5-添加接口\"><a href=\"#5-添加接口\" class=\"headerlink\" title=\"5.添加接口\"></a>5.添加接口</h3><p><img src=\"/images/rap-006.png\" alt=\"\"></p>\n<h3 id=\"6-为返回值字段设置自定义的mock数据\"><a href=\"#6-为返回值字段设置自定义的mock数据\" class=\"headerlink\" title=\"6.为返回值字段设置自定义的mock数据\"></a>6.为返回值字段设置自定义的mock数据</h3><p><img src=\"/images/rap-007.png\" alt=\"\"><br>我们可以为不同的字段自定义不同的mock数据，已适应实际需要。</p>\n<h3 id=\"7-前端使用接口mock数据提前进行开发\"><a href=\"#7-前端使用接口mock数据提前进行开发\" class=\"headerlink\" title=\"7.前端使用接口mock数据提前进行开发\"></a>7.前端使用接口mock数据提前进行开发</h3><p><img src=\"/images/rap-008.png\" alt=\"\"><br>这个例子中的“项目根路径”：localhost:8080/mockjs/1<br>就是这个mock服务的模拟服务路径<br>前端访问：<a href=\"http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf\" target=\"_blank\" rel=\"external\">http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf</a><br>就是访问我们模拟的接口地址: /client/machine/activate</p>\n","excerpt":"","more":"<h2 id=\"一、为什么使用RAP？\"><a href=\"#一、为什么使用RAP？\" class=\"headerlink\" title=\"一、为什么使用RAP？\"></a>一、为什么使用RAP？</h2><ul>\n<li><p>接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。<br>比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。</p>\n</li>\n<li><p>而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：<br>1.可以按团队和项目结构化的管理接口文档。<br>2.提供统一方便的接口定义方式。<br>3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。<br>4.校验后端提供的接口的数据格式和字段是否符合要求。</p>\n</li>\n</ul>\n<p><strong>虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。</strong></p>\n<h2 id=\"二、RAP安装部署\"><a href=\"#二、RAP安装部署\" class=\"headerlink\" title=\"二、RAP安装部署\"></a>二、RAP安装部署</h2><h3 id=\"1-下载RAP\"><a href=\"#1-下载RAP\" class=\"headerlink\" title=\"1.下载RAP\"></a>1.下载RAP</h3><p>在RAP的github主页上下载最新版本war包</p>\n<h3 id=\"2-环境准备\"><a href=\"#2-环境准备\" class=\"headerlink\" title=\"2.环境准备\"></a>2.环境准备</h3><p>需要tomcat和mysql</p>\n<h3 id=\"3-部署\"><a href=\"#3-部署\" class=\"headerlink\" title=\"3.部署\"></a>3.部署</h3><p>RAP在tomcat中要使用ROOT的方式部署。</p>\n<ul>\n<li>把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war</li>\n<li>在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库</li>\n<li>启动tomcat</li>\n<li>访问<a href=\"http://localhost:8080/\">http://localhost:8080/</a></li>\n</ul>\n<h2 id=\"三、RAP的使用\"><a href=\"#三、RAP的使用\" class=\"headerlink\" title=\"三、RAP的使用\"></a>三、RAP的使用</h2><h3 id=\"1-注册账号\"><a href=\"#1-注册账号\" class=\"headerlink\" title=\"1.注册账号\"></a>1.注册账号</h3><p>RAP自带账号管理和登陆功能，使用前先注册账号，登陆即可</p>\n<h3 id=\"2-添加团队、项目产品线等。\"><a href=\"#2-添加团队、项目产品线等。\" class=\"headerlink\" title=\"2.添加团队、项目产品线等。\"></a>2.添加团队、项目产品线等。</h3><ul>\n<li>创建团队<br><img src=\"/images/rap-001.png\" alt=\"\"></li>\n<li>创建产品线<br><img src=\"/images/rap-002.png\" alt=\"\"><br><img src=\"/images/rap-003.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"3-分组和项目管理\"><a href=\"#3-分组和项目管理\" class=\"headerlink\" title=\"3.分组和项目管理\"></a>3.分组和项目管理</h3><p><img src=\"/images/rap-004.png\" alt=\"\"><br><img src=\"/images/rap-009.png\" alt=\"\"></p>\n<h3 id=\"4-添加模块和页面\"><a href=\"#4-添加模块和页面\" class=\"headerlink\" title=\"4.添加模块和页面\"></a>4.添加模块和页面</h3><p><img src=\"/images/rap-005.png\" alt=\"\"></p>\n<h3 id=\"5-添加接口\"><a href=\"#5-添加接口\" class=\"headerlink\" title=\"5.添加接口\"></a>5.添加接口</h3><p><img src=\"/images/rap-006.png\" alt=\"\"></p>\n<h3 id=\"6-为返回值字段设置自定义的mock数据\"><a href=\"#6-为返回值字段设置自定义的mock数据\" class=\"headerlink\" title=\"6.为返回值字段设置自定义的mock数据\"></a>6.为返回值字段设置自定义的mock数据</h3><p><img src=\"/images/rap-007.png\" alt=\"\"><br>我们可以为不同的字段自定义不同的mock数据，已适应实际需要。</p>\n<h3 id=\"7-前端使用接口mock数据提前进行开发\"><a href=\"#7-前端使用接口mock数据提前进行开发\" class=\"headerlink\" title=\"7.前端使用接口mock数据提前进行开发\"></a>7.前端使用接口mock数据提前进行开发</h3><p><img src=\"/images/rap-008.png\" alt=\"\"><br>这个例子中的“项目根路径”：localhost:8080/mockjs/1<br>就是这个mock服务的模拟服务路径<br>前端访问：<a href=\"http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf\">http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf</a><br>就是访问我们模拟的接口地址: /client/machine/activate</p>\n","sticky":0},{"title":"使用hexo-deploy直接发布到github","date":"2015-12-31T09:08:52.000Z","_content":"\n本文说明如何使用hexo deploy直接提交到github发布文章。\n\n### 1.npm安装需要的东西\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-deployer-ftpsync --save\n\n\n### 2.修改配置文件_config.yml\ndeploy:\n  type: git\n  repository: https://github.com/YihuaWanglv/yihuawanglv.github.io.git\n  branch: master\n\n### 3.执行命令提交发布\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n\nover.\n\n\n### 参考：https://hexo.io/zh-cn/docs/deployment.html\n","source":"_posts/使用hexo-deploy直接发布到github.md","raw":"---\ntitle: 使用hexo-deploy直接发布到github\ndate: 2015-12-31 17:08:52\ntags: [hexo,deploy]\n---\n\n本文说明如何使用hexo deploy直接提交到github发布文章。\n\n### 1.npm安装需要的东西\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-deployer-ftpsync --save\n\n\n### 2.修改配置文件_config.yml\ndeploy:\n  type: git\n  repository: https://github.com/YihuaWanglv/yihuawanglv.github.io.git\n  branch: master\n\n### 3.执行命令提交发布\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n\nover.\n\n\n### 参考：https://hexo.io/zh-cn/docs/deployment.html\n","slug":"使用hexo-deploy直接发布到github","published":1,"updated":"2016-02-20T04:02:04.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjk001r30ng99kbl57v","content":"<p>本文说明如何使用hexo deploy直接提交到github发布文章。</p>\n<h3 id=\"1-npm安装需要的东西\"><a href=\"#1-npm安装需要的东西\" class=\"headerlink\" title=\"1.npm安装需要的东西\"></a>1.npm安装需要的东西</h3><p>$ npm install hexo-deployer-git –save<br>$ npm install hexo-deployer-heroku –save<br>$ npm install hexo-deployer-rsync –save<br>$ npm install hexo-deployer-openshift –save<br>$ npm install hexo-deployer-ftpsync –save</p>\n<h3 id=\"2-修改配置文件-config-yml\"><a href=\"#2-修改配置文件-config-yml\" class=\"headerlink\" title=\"2.修改配置文件_config.yml\"></a>2.修改配置文件_config.yml</h3><p>deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git</a><br>  branch: master</p>\n<h3 id=\"3-执行命令提交发布\"><a href=\"#3-执行命令提交发布\" class=\"headerlink\" title=\"3.执行命令提交发布\"></a>3.执行命令提交发布</h3><p>$ hexo clean<br>$ hexo generate<br>$ hexo deploy</p>\n<p>over.</p>\n<h3 id=\"参考：https-hexo-io-zh-cn-docs-deployment-html\"><a href=\"#参考：https-hexo-io-zh-cn-docs-deployment-html\" class=\"headerlink\" title=\"参考：https://hexo.io/zh-cn/docs/deployment.html\"></a>参考：<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/deployment.html</a></h3>","excerpt":"","more":"<p>本文说明如何使用hexo deploy直接提交到github发布文章。</p>\n<h3 id=\"1-npm安装需要的东西\"><a href=\"#1-npm安装需要的东西\" class=\"headerlink\" title=\"1.npm安装需要的东西\"></a>1.npm安装需要的东西</h3><p>$ npm install hexo-deployer-git –save<br>$ npm install hexo-deployer-heroku –save<br>$ npm install hexo-deployer-rsync –save<br>$ npm install hexo-deployer-openshift –save<br>$ npm install hexo-deployer-ftpsync –save</p>\n<h3 id=\"2-修改配置文件-config-yml\"><a href=\"#2-修改配置文件-config-yml\" class=\"headerlink\" title=\"2.修改配置文件_config.yml\"></a>2.修改配置文件_config.yml</h3><p>deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git</a><br>  branch: master</p>\n<h3 id=\"3-执行命令提交发布\"><a href=\"#3-执行命令提交发布\" class=\"headerlink\" title=\"3.执行命令提交发布\"></a>3.执行命令提交发布</h3><p>$ hexo clean<br>$ hexo generate<br>$ hexo deploy</p>\n<p>over.</p>\n<h3 id=\"参考：https-hexo-io-zh-cn-docs-deployment-html\"><a href=\"#参考：https-hexo-io-zh-cn-docs-deployment-html\" class=\"headerlink\" title=\"参考：https://hexo.io/zh-cn/docs/deployment.html\"></a>参考：<a href=\"https://hexo.io/zh-cn/docs/deployment.html\">https://hexo.io/zh-cn/docs/deployment.html</a></h3>","sticky":0},{"title":"[使用spring-boot+spring-cloud一步步搭建微服务架构]一-开始一个spring-boot应用","date":"2016-07-11T12:24:25.000Z","_content":"\n## 一. 目标愿景\n\n**我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构**\n本系列demo项目githu地址：\nhttps://github.com/YihuaWanglv/lannisi\n\n### 1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\n\n之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。\n这个方案是比较流行的方案之一，但是有几点未达理想的地方：\n- 1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。\n- 2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。\n- 3) 服务提供者和消费者都需要使用xml文件配置，不优雅。\n\n### 2. 为什么使用Spring Cloud ？\n\nSpring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。\nSpring Cloud有什么特点？\n- 1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。\n- 2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。\n- 3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。\n\n### 3. 为什么使用spring boot？\n\n- 1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。\n- 2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。\n- 3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n\n## 二. 开始第一个springboot项目\n在一切开始之前，我们首先要知道如何开始一个springboot项目。\n\n### 1. 创建一个空的maven项目，pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2. 编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 3. 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\nhelloword项目也可参照：https://github.com/YihuaWanglv/lannisi 下的boot-sample-helloword项目。\nhttps://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword","source":"_posts/使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用.md","raw":"---\ntitle: '[使用spring-boot+spring-cloud一步步搭建微服务架构]一-开始一个spring-boot应用'\ndate: 2016-07-11 20:24:25\ntags: [java, spring boot, spring cloud, 微服务, 使用spring-boot+spring-cloud一步步搭建微服务架构]\n---\n\n## 一. 目标愿景\n\n**我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构**\n本系列demo项目githu地址：\nhttps://github.com/YihuaWanglv/lannisi\n\n### 1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\n\n之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。\n这个方案是比较流行的方案之一，但是有几点未达理想的地方：\n- 1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。\n- 2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。\n- 3) 服务提供者和消费者都需要使用xml文件配置，不优雅。\n\n### 2. 为什么使用Spring Cloud ？\n\nSpring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。\nSpring Cloud有什么特点？\n- 1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。\n- 2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。\n- 3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。\n\n### 3. 为什么使用spring boot？\n\n- 1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。\n- 2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。\n- 3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n\n## 二. 开始第一个springboot项目\n在一切开始之前，我们首先要知道如何开始一个springboot项目。\n\n### 1. 创建一个空的maven项目，pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2. 编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 3. 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\nhelloword项目也可参照：https://github.com/YihuaWanglv/lannisi 下的boot-sample-helloword项目。\nhttps://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword","slug":"使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用","published":1,"updated":"2016-07-11T13:30:20.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjq001t30ngg0xratr2","content":"<h2 id=\"一-目标愿景\"><a href=\"#一-目标愿景\" class=\"headerlink\" title=\"一. 目标愿景\"></a>一. 目标愿景</h2><p><strong>我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构</strong><br>本系列demo项目githu地址：<br><a href=\"https://github.com/YihuaWanglv/lannisi\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/lannisi</a></p>\n<h3 id=\"1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"><a href=\"#1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\" class=\"headerlink\" title=\"1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"></a>1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？</h3><p>之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。<br>这个方案是比较流行的方案之一，但是有几点未达理想的地方：</p>\n<ul>\n<li>1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。</li>\n<li>2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。</li>\n<li>3) 服务提供者和消费者都需要使用xml文件配置，不优雅。</li>\n</ul>\n<h3 id=\"2-为什么使用Spring-Cloud-？\"><a href=\"#2-为什么使用Spring-Cloud-？\" class=\"headerlink\" title=\"2. 为什么使用Spring Cloud ？\"></a>2. 为什么使用Spring Cloud ？</h3><p>Spring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。<br>Spring Cloud有什么特点？</p>\n<ul>\n<li>1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。</li>\n<li>2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。</li>\n<li>3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。</li>\n</ul>\n<h3 id=\"3-为什么使用spring-boot？\"><a href=\"#3-为什么使用spring-boot？\" class=\"headerlink\" title=\"3. 为什么使用spring boot？\"></a>3. 为什么使用spring boot？</h3><ul>\n<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>\n<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>\n<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>\n</ul>\n<h2 id=\"二-开始第一个springboot项目\"><a href=\"#二-开始第一个springboot项目\" class=\"headerlink\" title=\"二. 开始第一个springboot项目\"></a>二. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>\n<h3 id=\"1-创建一个空的maven项目，pom-xml中添加maven依赖\"><a href=\"#1-创建一个空的maven项目，pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1. 创建一个空的maven项目，pom.xml中添加maven依赖\"></a>1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2. 编写项目启动入口App.java\"></a>2. 编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"3-再进一步，为应用引入spring-mvc\"><a href=\"#3-再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"3. 再进一步，为应用引入spring mvc\"></a>3. 再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n<p>helloword项目也可参照：<a href=\"https://github.com/YihuaWanglv/lannisi\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/lannisi</a> 下的boot-sample-helloword项目。<br><a href=\"https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword</a></p>\n","excerpt":"","more":"<h2 id=\"一-目标愿景\"><a href=\"#一-目标愿景\" class=\"headerlink\" title=\"一. 目标愿景\"></a>一. 目标愿景</h2><p><strong>我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构</strong><br>本系列demo项目githu地址：<br><a href=\"https://github.com/YihuaWanglv/lannisi\">https://github.com/YihuaWanglv/lannisi</a></p>\n<h3 id=\"1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"><a href=\"#1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\" class=\"headerlink\" title=\"1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"></a>1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？</h3><p>之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。<br>这个方案是比较流行的方案之一，但是有几点未达理想的地方：</p>\n<ul>\n<li>1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。</li>\n<li>2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。</li>\n<li>3) 服务提供者和消费者都需要使用xml文件配置，不优雅。</li>\n</ul>\n<h3 id=\"2-为什么使用Spring-Cloud-？\"><a href=\"#2-为什么使用Spring-Cloud-？\" class=\"headerlink\" title=\"2. 为什么使用Spring Cloud ？\"></a>2. 为什么使用Spring Cloud ？</h3><p>Spring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。<br>Spring Cloud有什么特点？</p>\n<ul>\n<li>1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。</li>\n<li>2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。</li>\n<li>3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。</li>\n</ul>\n<h3 id=\"3-为什么使用spring-boot？\"><a href=\"#3-为什么使用spring-boot？\" class=\"headerlink\" title=\"3. 为什么使用spring boot？\"></a>3. 为什么使用spring boot？</h3><ul>\n<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>\n<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>\n<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>\n</ul>\n<h2 id=\"二-开始第一个springboot项目\"><a href=\"#二-开始第一个springboot项目\" class=\"headerlink\" title=\"二. 开始第一个springboot项目\"></a>二. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>\n<h3 id=\"1-创建一个空的maven项目，pom-xml中添加maven依赖\"><a href=\"#1-创建一个空的maven项目，pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1. 创建一个空的maven项目，pom.xml中添加maven依赖\"></a>1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2. 编写项目启动入口App.java\"></a>2. 编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"3-再进一步，为应用引入spring-mvc\"><a href=\"#3-再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"3. 再进一步，为应用引入spring mvc\"></a>3. 再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n<p>helloword项目也可参照：<a href=\"https://github.com/YihuaWanglv/lannisi\">https://github.com/YihuaWanglv/lannisi</a> 下的boot-sample-helloword项目。<br><a href=\"https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword\">https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword</a></p>\n","sticky":0},{"title":"关于java项目中如何读取配置文件","date":"2016-07-22T01:27:32.000Z","_content":"\n# 关于java项目中如何读取配置文件\n\n## - Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\nIf you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:\n```\n<context:property-placeholder\nlocation=\"classpath:dao.properties,\n          classpath:services.properties,\n          classpath:user.properties\"\nignore-unresolvable=\"true\"/>\n```\nor\n```\n    <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <list>\n                <value>classpath:dao.properties</value>\n                <value>classpath:services.properties</value>\n                <value>classpath:user.properties</value>\n            </list>\n        </property> \n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n    </bean>\n```\n\n## - Spring MVC : read file from src/main/resources\n```\nResource resource = new ClassPathResource(fileLocationInClasspath);\nInputStream resourceInputStream = resource.getInputStream();\n```\n\n## - How do I load a resource and use its contents as a string in Spring\n```\n<bean id=\"contents\" class=\"org.apache.commons.io.IOUtils\" factory-method=\"toString\">\n    <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n</bean>\n```\nThis solution requires Apache Commons IO.\n\nAnother solution, suggested by @Parvez, without Apache Commons IO dependency is\n```\n<bean id=\"contents\" class=\"java.lang.String\">\n    <constructor-arg>\n        <bean class=\"org.springframework.util.FileCopyUtils\" factory-method=\"copyToByteArray\">\n            <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n        </bean>     \n    </constructor-arg>\n</bean>\n```","source":"_posts/关于java项目中如何读取配置文件.md","raw":"---\ntitle: 关于java项目中如何读取配置文件\ndate: 2016-07-22 09:27:32\ntags: [java, spring, spring mvc, 读取配置文件, property file]\n---\n\n# 关于java项目中如何读取配置文件\n\n## - Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\nIf you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:\n```\n<context:property-placeholder\nlocation=\"classpath:dao.properties,\n          classpath:services.properties,\n          classpath:user.properties\"\nignore-unresolvable=\"true\"/>\n```\nor\n```\n    <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <list>\n                <value>classpath:dao.properties</value>\n                <value>classpath:services.properties</value>\n                <value>classpath:user.properties</value>\n            </list>\n        </property> \n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n    </bean>\n```\n\n## - Spring MVC : read file from src/main/resources\n```\nResource resource = new ClassPathResource(fileLocationInClasspath);\nInputStream resourceInputStream = resource.getInputStream();\n```\n\n## - How do I load a resource and use its contents as a string in Spring\n```\n<bean id=\"contents\" class=\"org.apache.commons.io.IOUtils\" factory-method=\"toString\">\n    <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n</bean>\n```\nThis solution requires Apache Commons IO.\n\nAnother solution, suggested by @Parvez, without Apache Commons IO dependency is\n```\n<bean id=\"contents\" class=\"java.lang.String\">\n    <constructor-arg>\n        <bean class=\"org.springframework.util.FileCopyUtils\" factory-method=\"copyToByteArray\">\n            <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n        </bean>     \n    </constructor-arg>\n</bean>\n```","slug":"关于java项目中如何读取配置文件","published":1,"updated":"2016-07-22T14:04:43.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjt001u30ng3vwb9404","content":"<h1 id=\"关于java项目中如何读取配置文件\"><a href=\"#关于java项目中如何读取配置文件\" class=\"headerlink\" title=\"关于java项目中如何读取配置文件\"></a>关于java项目中如何读取配置文件</h1><h2 id=\"Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\"><a href=\"#Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\" class=\"headerlink\" title=\"- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\"></a>- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules</h2><p>If you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder</span><br><span class=\"line\">location=&quot;classpath:dao.properties,</span><br><span class=\"line\">          classpath:services.properties,</span><br><span class=\"line\">          classpath:user.properties&quot;</span><br><span class=\"line\">ignore-unresolvable=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>or<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;propertyConfigurer&quot; class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;locations&quot;&gt;</span><br><span class=\"line\">        &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:dao.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:services.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:user.properties&lt;/value&gt;</span><br><span class=\"line\">        &lt;/list&gt;</span><br><span class=\"line\">    &lt;/property&gt; </span><br><span class=\"line\">    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Spring-MVC-read-file-from-src-main-resources\"><a href=\"#Spring-MVC-read-file-from-src-main-resources\" class=\"headerlink\" title=\"- Spring MVC : read file from src/main/resources\"></a>- Spring MVC : read file from src/main/resources</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resource resource = new ClassPathResource(fileLocationInClasspath);</span><br><span class=\"line\">InputStream resourceInputStream = resource.getInputStream();</span><br></pre></td></tr></table></figure>\n<h2 id=\"How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\"><a href=\"#How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\" class=\"headerlink\" title=\"- How do I load a resource and use its contents as a string in Spring\"></a>- How do I load a resource and use its contents as a string in Spring</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;org.apache.commons.io.IOUtils&quot; factory-method=&quot;toString&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>This solution requires Apache Commons IO.</p>\n<p>Another solution, suggested by @Parvez, without Apache Commons IO dependency is<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;java.lang.String&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg&gt;</span><br><span class=\"line\">        &lt;bean class=&quot;org.springframework.util.FileCopyUtils&quot; factory-method=&quot;copyToByteArray&quot;&gt;</span><br><span class=\"line\">            &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">        &lt;/bean&gt;     </span><br><span class=\"line\">    &lt;/constructor-arg&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"关于java项目中如何读取配置文件\"><a href=\"#关于java项目中如何读取配置文件\" class=\"headerlink\" title=\"关于java项目中如何读取配置文件\"></a>关于java项目中如何读取配置文件</h1><h2 id=\"Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\"><a href=\"#Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\" class=\"headerlink\" title=\"- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\"></a>- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules</h2><p>If you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder</span><br><span class=\"line\">location=&quot;classpath:dao.properties,</span><br><span class=\"line\">          classpath:services.properties,</span><br><span class=\"line\">          classpath:user.properties&quot;</span><br><span class=\"line\">ignore-unresolvable=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>or<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;propertyConfigurer&quot; class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;locations&quot;&gt;</span><br><span class=\"line\">        &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:dao.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:services.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:user.properties&lt;/value&gt;</span><br><span class=\"line\">        &lt;/list&gt;</span><br><span class=\"line\">    &lt;/property&gt; </span><br><span class=\"line\">    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Spring-MVC-read-file-from-src-main-resources\"><a href=\"#Spring-MVC-read-file-from-src-main-resources\" class=\"headerlink\" title=\"- Spring MVC : read file from src/main/resources\"></a>- Spring MVC : read file from src/main/resources</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resource resource = new ClassPathResource(fileLocationInClasspath);</span><br><span class=\"line\">InputStream resourceInputStream = resource.getInputStream();</span><br></pre></td></tr></table></figure>\n<h2 id=\"How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\"><a href=\"#How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\" class=\"headerlink\" title=\"- How do I load a resource and use its contents as a string in Spring\"></a>- How do I load a resource and use its contents as a string in Spring</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;org.apache.commons.io.IOUtils&quot; factory-method=&quot;toString&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>This solution requires Apache Commons IO.</p>\n<p>Another solution, suggested by @Parvez, without Apache Commons IO dependency is<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;java.lang.String&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg&gt;</span><br><span class=\"line\">        &lt;bean class=&quot;org.springframework.util.FileCopyUtils&quot; factory-method=&quot;copyToByteArray&quot;&gt;</span><br><span class=\"line\">            &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">        &lt;/bean&gt;     </span><br><span class=\"line\">    &lt;/constructor-arg&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n","sticky":0},{"title":"系统分布式情况下最终一致性方案梳理","date":"2016-08-10T02:14:29.000Z","_content":"\n## 前言\n目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。\n\n\n## 基础理论相关\n说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。\n- ACID 特性\nA（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；\nC（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；\nI（隔离性）保证事务不受外部并发操作的独立环境执行；\nD（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；\n- CAP\nC（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；\nA（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；\nP（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体\n- BASE\nBA: Basic Availability 基本业务可用性；\nS: Soft state 柔性状态；\nE: Eventual consistency 最终一致性；\n\n\n## 最终一致性的几种做法\n![](/images/transaction-001.png)\n\n \n### 单数据库情况下的事务\n如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。\n\n### 基于事务型消息队列的最终一致性\n借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。\n\n### 基于消息队列+定时补偿机制的最终一致性\n前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。\n\n### 业务系统业务逻辑的commit/rollback机制\n这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。\n\n### 业务应用系统的幂等性控制\n为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。\n\n- 查询\n查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。\n\n- MVCC方案\n多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# >= 0 。\n\n- 单独的去重表\n如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。\n\n- 分布式锁\n还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。\n\n- 删除数据\n删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。\n\n- 插入数据的唯一索引\n插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。\n\n- API层面的幂等\n这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。\n\n- 状态机幂等\n在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。\n\n### 异步回调机制的引入\nA应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。\n\n### 类似double check机制的确认机制\n还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。\n\n\n## 总结\n上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。","source":"_posts/系统分布式情况下最终一致性方案梳理.md","raw":"---\ntitle: 系统分布式情况下最终一致性方案梳理\ndate: 2016-08-10 10:14:29\ntags:\n---\n\n## 前言\n目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。\n\n\n## 基础理论相关\n说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。\n- ACID 特性\nA（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；\nC（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；\nI（隔离性）保证事务不受外部并发操作的独立环境执行；\nD（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；\n- CAP\nC（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；\nA（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；\nP（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体\n- BASE\nBA: Basic Availability 基本业务可用性；\nS: Soft state 柔性状态；\nE: Eventual consistency 最终一致性；\n\n\n## 最终一致性的几种做法\n![](/images/transaction-001.png)\n\n \n### 单数据库情况下的事务\n如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。\n\n### 基于事务型消息队列的最终一致性\n借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。\n\n### 基于消息队列+定时补偿机制的最终一致性\n前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。\n\n### 业务系统业务逻辑的commit/rollback机制\n这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。\n\n### 业务应用系统的幂等性控制\n为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。\n\n- 查询\n查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。\n\n- MVCC方案\n多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# >= 0 。\n\n- 单独的去重表\n如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。\n\n- 分布式锁\n还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。\n\n- 删除数据\n删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。\n\n- 插入数据的唯一索引\n插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。\n\n- API层面的幂等\n这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。\n\n- 状态机幂等\n在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。\n\n### 异步回调机制的引入\nA应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。\n\n### 类似double check机制的确认机制\n还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。\n\n\n## 总结\n上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。","slug":"系统分布式情况下最终一致性方案梳理","published":1,"updated":"2016-08-10T15:15:57.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghju001w30ng241xwk17","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。</p>\n<h2 id=\"基础理论相关\"><a href=\"#基础理论相关\" class=\"headerlink\" title=\"基础理论相关\"></a>基础理论相关</h2><p>说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。</p>\n<ul>\n<li>ACID 特性<br>A（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；<br>C（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；<br>I（隔离性）保证事务不受外部并发操作的独立环境执行；<br>D（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；</li>\n<li>CAP<br>C（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；<br>A（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；<br>P（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体</li>\n<li>BASE<br>BA: Basic Availability 基本业务可用性；<br>S: Soft state 柔性状态；<br>E: Eventual consistency 最终一致性；</li>\n</ul>\n<h2 id=\"最终一致性的几种做法\"><a href=\"#最终一致性的几种做法\" class=\"headerlink\" title=\"最终一致性的几种做法\"></a>最终一致性的几种做法</h2><p><img src=\"/images/transaction-001.png\" alt=\"\"></p>\n<h3 id=\"单数据库情况下的事务\"><a href=\"#单数据库情况下的事务\" class=\"headerlink\" title=\"单数据库情况下的事务\"></a>单数据库情况下的事务</h3><p>如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。</p>\n<h3 id=\"基于事务型消息队列的最终一致性\"><a href=\"#基于事务型消息队列的最终一致性\" class=\"headerlink\" title=\"基于事务型消息队列的最终一致性\"></a>基于事务型消息队列的最终一致性</h3><p>借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。</p>\n<h3 id=\"基于消息队列-定时补偿机制的最终一致性\"><a href=\"#基于消息队列-定时补偿机制的最终一致性\" class=\"headerlink\" title=\"基于消息队列+定时补偿机制的最终一致性\"></a>基于消息队列+定时补偿机制的最终一致性</h3><p>前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。</p>\n<h3 id=\"业务系统业务逻辑的commit-rollback机制\"><a href=\"#业务系统业务逻辑的commit-rollback机制\" class=\"headerlink\" title=\"业务系统业务逻辑的commit/rollback机制\"></a>业务系统业务逻辑的commit/rollback机制</h3><p>这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。</p>\n<h3 id=\"业务应用系统的幂等性控制\"><a href=\"#业务应用系统的幂等性控制\" class=\"headerlink\" title=\"业务应用系统的幂等性控制\"></a>业务应用系统的幂等性控制</h3><p>为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。</p>\n<ul>\n<li><p>查询<br>查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。</p>\n</li>\n<li><p>MVCC方案<br>多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# &gt;= 0 。</p>\n</li>\n<li><p>单独的去重表<br>如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。</p>\n</li>\n<li><p>分布式锁<br>还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。</p>\n</li>\n<li><p>删除数据<br>删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。</p>\n</li>\n<li><p>插入数据的唯一索引<br>插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。</p>\n</li>\n<li><p>API层面的幂等<br>这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。</p>\n</li>\n<li><p>状态机幂等<br>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。</p>\n</li>\n</ul>\n<h3 id=\"异步回调机制的引入\"><a href=\"#异步回调机制的引入\" class=\"headerlink\" title=\"异步回调机制的引入\"></a>异步回调机制的引入</h3><p>A应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。</p>\n<h3 id=\"类似double-check机制的确认机制\"><a href=\"#类似double-check机制的确认机制\" class=\"headerlink\" title=\"类似double check机制的确认机制\"></a>类似double check机制的确认机制</h3><p>还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。</p>\n<h2 id=\"基础理论相关\"><a href=\"#基础理论相关\" class=\"headerlink\" title=\"基础理论相关\"></a>基础理论相关</h2><p>说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。</p>\n<ul>\n<li>ACID 特性<br>A（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；<br>C（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；<br>I（隔离性）保证事务不受外部并发操作的独立环境执行；<br>D（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；</li>\n<li>CAP<br>C（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；<br>A（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；<br>P（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体</li>\n<li>BASE<br>BA: Basic Availability 基本业务可用性；<br>S: Soft state 柔性状态；<br>E: Eventual consistency 最终一致性；</li>\n</ul>\n<h2 id=\"最终一致性的几种做法\"><a href=\"#最终一致性的几种做法\" class=\"headerlink\" title=\"最终一致性的几种做法\"></a>最终一致性的几种做法</h2><p><img src=\"/images/transaction-001.png\" alt=\"\"></p>\n<h3 id=\"单数据库情况下的事务\"><a href=\"#单数据库情况下的事务\" class=\"headerlink\" title=\"单数据库情况下的事务\"></a>单数据库情况下的事务</h3><p>如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。</p>\n<h3 id=\"基于事务型消息队列的最终一致性\"><a href=\"#基于事务型消息队列的最终一致性\" class=\"headerlink\" title=\"基于事务型消息队列的最终一致性\"></a>基于事务型消息队列的最终一致性</h3><p>借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。</p>\n<h3 id=\"基于消息队列-定时补偿机制的最终一致性\"><a href=\"#基于消息队列-定时补偿机制的最终一致性\" class=\"headerlink\" title=\"基于消息队列+定时补偿机制的最终一致性\"></a>基于消息队列+定时补偿机制的最终一致性</h3><p>前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。</p>\n<h3 id=\"业务系统业务逻辑的commit-rollback机制\"><a href=\"#业务系统业务逻辑的commit-rollback机制\" class=\"headerlink\" title=\"业务系统业务逻辑的commit/rollback机制\"></a>业务系统业务逻辑的commit/rollback机制</h3><p>这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。</p>\n<h3 id=\"业务应用系统的幂等性控制\"><a href=\"#业务应用系统的幂等性控制\" class=\"headerlink\" title=\"业务应用系统的幂等性控制\"></a>业务应用系统的幂等性控制</h3><p>为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。</p>\n<ul>\n<li><p>查询<br>查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。</p>\n</li>\n<li><p>MVCC方案<br>多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# &gt;= 0 。</p>\n</li>\n<li><p>单独的去重表<br>如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。</p>\n</li>\n<li><p>分布式锁<br>还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。</p>\n</li>\n<li><p>删除数据<br>删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。</p>\n</li>\n<li><p>插入数据的唯一索引<br>插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。</p>\n</li>\n<li><p>API层面的幂等<br>这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。</p>\n</li>\n<li><p>状态机幂等<br>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。</p>\n</li>\n</ul>\n<h3 id=\"异步回调机制的引入\"><a href=\"#异步回调机制的引入\" class=\"headerlink\" title=\"异步回调机制的引入\"></a>异步回调机制的引入</h3><p>A应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。</p>\n<h3 id=\"类似double-check机制的确认机制\"><a href=\"#类似double-check机制的确认机制\" class=\"headerlink\" title=\"类似double check机制的确认机制\"></a>类似double check机制的确认机制</h3><p>还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。</p>\n","sticky":0},{"title":"在linux下部署spring boot项目过程记录","date":"2016-03-21T09:52:34.000Z","_content":"\n\n\n# 在linux下部署spring boot项目过程记录\n\n\n\n## 说明\n本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用\n\n## 环境说明\nlinux版本：CentOs7\n配备的开发环境软件服务：\n    - mysql（centos下默认使用mariadb，也可以，两者兼容）\n    - jdk\n    - ftp\n    - redis\n\n### 1. linux下开放端口\n先把一些已知要用到的端口放开了，省的后面要用到的时候连不上\n由于centos7默认没有iptables服务，所以需要先安装\n首先暂停防火墙\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\nThen, install the iptables-services package:\n```\nyum install iptables-services\n```\nEnable the service at boot-time:\n```\nsystemctl enable iptables\n```\n\n配置要放开的端口\n```\niptables -I INPUT -p tcp --dport 80 -j ACCEPT\niptables -I INPUT -p tcp --dport 22 -j ACCEPT\niptables -I INPUT -p tcp --dport 3306 -j ACCEPT\niptables -I INPUT -p tcp --dport 8080 -j ACCEPT\niptables -I INPUT -p tcp --dport 21 -j ACCEPT\niptables -I INPUT -p tcp --dport 8081 -j ACCEPT\n```\n保存配置\n```\nservice iptables save\nor\n/usr/libexec/iptables/iptables.init save\n```\n\nManaging the service开启停止防火墙服务\n```\nsystemctl [stop|start|restart] iptables\n```\n\n\n### 2. linux下安装使用mysql\n一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel\n然而，在centos7下这样安装的时候，却发现mysql-server安装不上。\n原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。\n那么，centos7下安装mysql就有两种方式\n1）使用mariadb；\n2）卸载mariadb，安装mysql\n\n#### 方法1:使用mariadb\n```\nyum install mariadb-server mariadb\nsystemctl start mariadb\nmysql -u root -p\n```\n\n#### 方法2:安装mysql：\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n安装成功后重启mysql服务。\n```\n# service mysqld restart\n```\n初次安装mysql，root账户没有密码。\n```\n[root@yl-web yl]# mysql -u root\n```\n设置密码\n```\nmysql> set password for 'root'@'localhost' =password('password');\n```\n\n#### 实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\n记录如下：\n1）在进入mysql工具时，总是有错误提示:\n```\n# mysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n```\n解决：方法操作很简单，如下：\n```\n# /etc/init.d/mysql stop\n# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n# mysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n# /etc/init.d/mysqld restart\n# mysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n```\n\n2）MySQL服务在启动的时候，不能创建pid文件。\n\n在终端看一下该目录是否存在，果然，不存在。\n于是，创建了/var/run/mysqld/目录，重启MySQL服务\n```\n[root@spark01 ~]# mkdir -p /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。\n```\n[root@spark01 ~]# ls -ld /var/run/mysqld/\ndrwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/\n[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n\n\n### 3. linux下安装jdk\n一、卸载系统自带的openjdk\n1、查询系统内置的jdk，使用命令如下：\n```\nrpm -qa | grep java\n```\n此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。\n如下：\npython-javapackages-3.4.1-11.el7.noarch\njava-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\njava-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\njava-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\ntzdata-java-2015g-1.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\njava-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n\n2、进行卸载，使用命令如下：\n```\nrpm -e --nodeps jdk相关名称\n```\n依次卸载如下：\n```\nrpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps tzdata-java-2015g-1.el7.noarch\nrpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n```\n\n二、jdk安装\n1、下载jdk并上传到/usr/java目录\njdk7下载地址为：http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。\n\n2、解压安装\n进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)\n```\nrpm -ivh jdk-7u79-linux-x64.rpm\n```\n\n3、配置profile文件\n运行如下命令\n```\nvi /etc/profile\n```\n将如下内容添加到profile文件末尾并保持\n```\nexport JAVA_HOME=/usr/java/jdk1.7.0_79\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin \n```\n/usr/java/jdk1.7.0_79 指的是jdk的路径\n\n保存之后，运行如下命令使配置生效\n```\nsource /etc/profile\n```\n检查jdk是否安装成功，运行如下命令\n```\njava -version\n```\n\n\n### 4. linux下安装redis\n1）方法1：使用命令安装\n安装redis:\n```\nyum -y install redis\n```\n启动/停止/重启 Redis\n启动服务：\n```\nsystemctl start redis.service\n```\n停止服务：\n```\nsystemctl stop redis.service\n```\n重启服务：\n```\nsystemctl restart redis.service\n```\n检查状态：\n```\nsystemctl status redis.service\n```\n随系统启动服务：\n```\nsystemctl enable redis.service\n```\n\n2）方法二：编译安装\n下载安装编译:\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nmake install\n```\n设置配置文件路径:\n```\nmkdir -p /etc/redis && cp redis.conf /etc/redis\n```\n修改配置文件：\n```\nvim /etc/redis/redis.conf\n```\n修改为： daemonize yes\n启动Redis:\n```\n/usr/local/bin/redis-server /etc/redis/redis.conf\n```\n\n\n\n### 5. linux配置ftp服务\n在安装前查看是否已安装vsftpd\n```\n[root@localhost ~]# rpm -q vsftpd\nvsftpd-3.0.2-9.el7.x86_64\n```\n如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：\n```\n[root@localhost ~]# yum -y install vsftpd\n```\n查看一下vsftpd安装在哪：\n```\n[root@localhost ~]# whereis vsftpd\nvsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz\n```\n启动vsftpd服务：\n```\n[root@localhost ~]# systemctl start vsftpd.service\n```\n修改配置\n```\nvi /etc/vsftpd/vsftpd.conf\n```\n修改如下配置：\nanonymous_enable=NO\nchroot_local_user=YES\nallow_writeable_chroot=YES #加上这行解决了无法登陆的问题\n\n启动／重新启动ftp\n```\nservice vsftpd start\nservice vsftpd restart\n```\n设置开机启动ftp\n```\nchkconfig vsftpd on\n```\n配置用户\n```\n[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser\n[root@localhost ~]# passwd ftpuser\n[root@localhost ~]# 输入密码\n```\n把 /var/www/html 的所有权给ftpuser.root\n```\n[root@localhost ~]# chown -R ftpuser.root /var/www/html\n```\n\n\n### 6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\n#### 编译打包：\n方法1：使用maven-assembly-plugin插件\n```\n<plugin>\n    <artifactId>maven-assembly-plugin</artifactId> \n    <configuration> \n        <archive>\n            <manifest>\n                <mainClass>com.iyihua.itimes.App</mainClass></manifest> \n            </archive>\n        <descriptorRefs>\n            <descriptorRef> jar-with-dependencies </descriptorRef> \n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id> \n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution> \n    </executions>\n</plugin>\n```\n运行命令：mvn assembly:assembly\n或者命令：mvn package\n\n由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是\n```\nclass {}\n```\n解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。\n\n方法2：使用spring-boot-maven-plugin插件\n由于我的project是spring boot项目，所以可以使用此方法\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>com.iyihua.itimes.App</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n运行mvn package打jar包，done！\n\n#### 上传并启动\n连接sftp\nlcd 打开本地路径\ncd 进入服务器目标路径\nput xxx.jar 把目标jar包上传到服务器对应路径\njava -jar xxx.jar 启动java程序\n","source":"_posts/在linux下部署spring-boot项目过程记录.md","raw":"---\ntitle: 在linux下部署spring boot项目过程记录\ndate: 2016-03-21 17:52:34\ntags: [linux,centos,java,spring boot,部署]\n---\n\n\n\n# 在linux下部署spring boot项目过程记录\n\n\n\n## 说明\n本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用\n\n## 环境说明\nlinux版本：CentOs7\n配备的开发环境软件服务：\n    - mysql（centos下默认使用mariadb，也可以，两者兼容）\n    - jdk\n    - ftp\n    - redis\n\n### 1. linux下开放端口\n先把一些已知要用到的端口放开了，省的后面要用到的时候连不上\n由于centos7默认没有iptables服务，所以需要先安装\n首先暂停防火墙\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\nThen, install the iptables-services package:\n```\nyum install iptables-services\n```\nEnable the service at boot-time:\n```\nsystemctl enable iptables\n```\n\n配置要放开的端口\n```\niptables -I INPUT -p tcp --dport 80 -j ACCEPT\niptables -I INPUT -p tcp --dport 22 -j ACCEPT\niptables -I INPUT -p tcp --dport 3306 -j ACCEPT\niptables -I INPUT -p tcp --dport 8080 -j ACCEPT\niptables -I INPUT -p tcp --dport 21 -j ACCEPT\niptables -I INPUT -p tcp --dport 8081 -j ACCEPT\n```\n保存配置\n```\nservice iptables save\nor\n/usr/libexec/iptables/iptables.init save\n```\n\nManaging the service开启停止防火墙服务\n```\nsystemctl [stop|start|restart] iptables\n```\n\n\n### 2. linux下安装使用mysql\n一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel\n然而，在centos7下这样安装的时候，却发现mysql-server安装不上。\n原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。\n那么，centos7下安装mysql就有两种方式\n1）使用mariadb；\n2）卸载mariadb，安装mysql\n\n#### 方法1:使用mariadb\n```\nyum install mariadb-server mariadb\nsystemctl start mariadb\nmysql -u root -p\n```\n\n#### 方法2:安装mysql：\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n安装成功后重启mysql服务。\n```\n# service mysqld restart\n```\n初次安装mysql，root账户没有密码。\n```\n[root@yl-web yl]# mysql -u root\n```\n设置密码\n```\nmysql> set password for 'root'@'localhost' =password('password');\n```\n\n#### 实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\n记录如下：\n1）在进入mysql工具时，总是有错误提示:\n```\n# mysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n```\n解决：方法操作很简单，如下：\n```\n# /etc/init.d/mysql stop\n# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n# mysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n# /etc/init.d/mysqld restart\n# mysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n```\n\n2）MySQL服务在启动的时候，不能创建pid文件。\n\n在终端看一下该目录是否存在，果然，不存在。\n于是，创建了/var/run/mysqld/目录，重启MySQL服务\n```\n[root@spark01 ~]# mkdir -p /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。\n```\n[root@spark01 ~]# ls -ld /var/run/mysqld/\ndrwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/\n[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n\n\n### 3. linux下安装jdk\n一、卸载系统自带的openjdk\n1、查询系统内置的jdk，使用命令如下：\n```\nrpm -qa | grep java\n```\n此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。\n如下：\npython-javapackages-3.4.1-11.el7.noarch\njava-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\njava-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\njava-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\ntzdata-java-2015g-1.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\njava-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n\n2、进行卸载，使用命令如下：\n```\nrpm -e --nodeps jdk相关名称\n```\n依次卸载如下：\n```\nrpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps tzdata-java-2015g-1.el7.noarch\nrpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n```\n\n二、jdk安装\n1、下载jdk并上传到/usr/java目录\njdk7下载地址为：http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。\n\n2、解压安装\n进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)\n```\nrpm -ivh jdk-7u79-linux-x64.rpm\n```\n\n3、配置profile文件\n运行如下命令\n```\nvi /etc/profile\n```\n将如下内容添加到profile文件末尾并保持\n```\nexport JAVA_HOME=/usr/java/jdk1.7.0_79\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin \n```\n/usr/java/jdk1.7.0_79 指的是jdk的路径\n\n保存之后，运行如下命令使配置生效\n```\nsource /etc/profile\n```\n检查jdk是否安装成功，运行如下命令\n```\njava -version\n```\n\n\n### 4. linux下安装redis\n1）方法1：使用命令安装\n安装redis:\n```\nyum -y install redis\n```\n启动/停止/重启 Redis\n启动服务：\n```\nsystemctl start redis.service\n```\n停止服务：\n```\nsystemctl stop redis.service\n```\n重启服务：\n```\nsystemctl restart redis.service\n```\n检查状态：\n```\nsystemctl status redis.service\n```\n随系统启动服务：\n```\nsystemctl enable redis.service\n```\n\n2）方法二：编译安装\n下载安装编译:\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nmake install\n```\n设置配置文件路径:\n```\nmkdir -p /etc/redis && cp redis.conf /etc/redis\n```\n修改配置文件：\n```\nvim /etc/redis/redis.conf\n```\n修改为： daemonize yes\n启动Redis:\n```\n/usr/local/bin/redis-server /etc/redis/redis.conf\n```\n\n\n\n### 5. linux配置ftp服务\n在安装前查看是否已安装vsftpd\n```\n[root@localhost ~]# rpm -q vsftpd\nvsftpd-3.0.2-9.el7.x86_64\n```\n如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：\n```\n[root@localhost ~]# yum -y install vsftpd\n```\n查看一下vsftpd安装在哪：\n```\n[root@localhost ~]# whereis vsftpd\nvsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz\n```\n启动vsftpd服务：\n```\n[root@localhost ~]# systemctl start vsftpd.service\n```\n修改配置\n```\nvi /etc/vsftpd/vsftpd.conf\n```\n修改如下配置：\nanonymous_enable=NO\nchroot_local_user=YES\nallow_writeable_chroot=YES #加上这行解决了无法登陆的问题\n\n启动／重新启动ftp\n```\nservice vsftpd start\nservice vsftpd restart\n```\n设置开机启动ftp\n```\nchkconfig vsftpd on\n```\n配置用户\n```\n[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser\n[root@localhost ~]# passwd ftpuser\n[root@localhost ~]# 输入密码\n```\n把 /var/www/html 的所有权给ftpuser.root\n```\n[root@localhost ~]# chown -R ftpuser.root /var/www/html\n```\n\n\n### 6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\n#### 编译打包：\n方法1：使用maven-assembly-plugin插件\n```\n<plugin>\n    <artifactId>maven-assembly-plugin</artifactId> \n    <configuration> \n        <archive>\n            <manifest>\n                <mainClass>com.iyihua.itimes.App</mainClass></manifest> \n            </archive>\n        <descriptorRefs>\n            <descriptorRef> jar-with-dependencies </descriptorRef> \n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id> \n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution> \n    </executions>\n</plugin>\n```\n运行命令：mvn assembly:assembly\n或者命令：mvn package\n\n由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是\n```\nclass {}\n```\n解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。\n\n方法2：使用spring-boot-maven-plugin插件\n由于我的project是spring boot项目，所以可以使用此方法\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>com.iyihua.itimes.App</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n运行mvn package打jar包，done！\n\n#### 上传并启动\n连接sftp\nlcd 打开本地路径\ncd 进入服务器目标路径\nput xxx.jar 把目标jar包上传到服务器对应路径\njava -jar xxx.jar 启动java程序\n","slug":"在linux下部署spring-boot项目过程记录","published":1,"updated":"2016-04-07T15:28:36.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjv001x30ngbb4u27bi","content":"<h1 id=\"在linux下部署spring-boot项目过程记录\"><a href=\"#在linux下部署spring-boot项目过程记录\" class=\"headerlink\" title=\"在linux下部署spring boot项目过程记录\"></a>在linux下部署spring boot项目过程记录</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用</p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>linux版本：CentOs7<br>配备的开发环境软件服务：</p>\n<pre><code>- mysql（centos下默认使用mariadb，也可以，两者兼容）\n- jdk\n- ftp\n- redis\n</code></pre><h3 id=\"1-linux下开放端口\"><a href=\"#1-linux下开放端口\" class=\"headerlink\" title=\"1. linux下开放端口\"></a>1. linux下开放端口</h3><p>先把一些已知要用到的端口放开了，省的后面要用到的时候连不上<br>由于centos7默认没有iptables服务，所以需要先安装<br>首先暂停防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>\n<p>Then, install the iptables-services package:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install iptables-services</span><br></pre></td></tr></table></figure></p>\n<p>Enable the service at boot-time:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables</span><br></pre></td></tr></table></figure></p>\n<p>配置要放开的端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8081 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>保存配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">or</span><br><span class=\"line\">/usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></p>\n<p>Managing the service开启停止防火墙服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl [stop|start|restart] iptables</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-linux下安装使用mysql\"><a href=\"#2-linux下安装使用mysql\" class=\"headerlink\" title=\"2. linux下安装使用mysql\"></a>2. linux下安装使用mysql</h3><p>一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel<br>然而，在centos7下这样安装的时候，却发现mysql-server安装不上。<br>原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。<br>那么，centos7下安装mysql就有两种方式<br>1）使用mariadb；<br>2）卸载mariadb，安装mysql</p>\n<h4 id=\"方法1-使用mariadb\"><a href=\"#方法1-使用mariadb\" class=\"headerlink\" title=\"方法1:使用mariadb\"></a>方法1:使用mariadb</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br><span class=\"line\">systemctl start mariadb</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2-安装mysql：\"><a href=\"#方法2-安装mysql：\" class=\"headerlink\" title=\"方法2:安装mysql：\"></a>方法2:安装mysql：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>安装成功后重启mysql服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld restart</span><br></pre></td></tr></table></figure></p>\n<p>初次安装mysql，root账户没有密码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@yl-web yl]# mysql -u root</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"><a href=\"#实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\" class=\"headerlink\" title=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"></a>实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。</h4><p>记录如下：<br>1）在进入mysql工具时，总是有错误提示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br></pre></td></tr></table></figure></p>\n<p>解决：方法操作很简单，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/init.d/mysql stop</span><br><span class=\"line\"># mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\"># mysql -u root mysql</span><br><span class=\"line\">mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos; and host=&apos;root&apos; or host=&apos;localhost&apos;;//把空的用户密码都修改成非空的密码就行了。</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">mysql&gt; quit</span><br><span class=\"line\"># /etc/init.d/mysqld restart</span><br><span class=\"line\"># mysql -uroot -p</span><br><span class=\"line\">Enter password: &lt;输入新设的密码newpassword&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2）MySQL服务在启动的时候，不能创建pid文件。</p>\n<p>在终端看一下该目录是否存在，果然，不存在。<br>于是，创建了/var/run/mysqld/目录，重启MySQL服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# mkdir -p /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<p>如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# ls -ld /var/run/mysqld/</span><br><span class=\"line\">drwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-linux下安装jdk\"><a href=\"#3-linux下安装jdk\" class=\"headerlink\" title=\"3. linux下安装jdk\"></a>3. linux下安装jdk</h3><p>一、卸载系统自带的openjdk<br>1、查询系统内置的jdk，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java</span><br></pre></td></tr></table></figure></p>\n<p>此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。<br>如下：<br>python-javapackages-3.4.1-11.el7.noarch<br>java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64<br>java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64<br>java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64<br>tzdata-java-2015g-1.el7.noarch<br>javapackages-tools-3.4.1-11.el7.noarch<br>java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</p>\n<p>2、进行卸载，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps jdk相关名称</span><br></pre></td></tr></table></figure></p>\n<p>依次卸载如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps tzdata-java-2015g-1.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>二、jdk安装<br>1、下载jdk并上传到/usr/java目录<br>jdk7下载地址为：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a> 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。</p>\n<p>2、解压安装<br>进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh jdk-7u79-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>3、配置profile文件<br>运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>将如下内容添加到profile文件末尾并保持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.7.0_79</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></p>\n<p>/usr/java/jdk1.7.0_79 指的是jdk的路径</p>\n<p>保存之后，运行如下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>检查jdk是否安装成功，运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-linux下安装redis\"><a href=\"#4-linux下安装redis\" class=\"headerlink\" title=\"4. linux下安装redis\"></a>4. linux下安装redis</h3><p>1）方法1：使用命令安装<br>安装redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install redis</span><br></pre></td></tr></table></figure></p>\n<p>启动/停止/重启 Redis<br>启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis.service</span><br></pre></td></tr></table></figure></p>\n<p>停止服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop redis.service</span><br></pre></td></tr></table></figure></p>\n<p>重启服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis.service</span><br></pre></td></tr></table></figure></p>\n<p>检查状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status redis.service</span><br></pre></td></tr></table></figure></p>\n<p>随系统启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable redis.service</span><br></pre></td></tr></table></figure></p>\n<p>2）方法二：编译安装<br>下载安装编译:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class=\"line\">tar xzf redis-2.8.17.tar.gz</span><br><span class=\"line\">cd redis-2.8.17</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<p>设置配置文件路径:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/redis &amp;&amp; cp redis.conf /etc/redis</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改为： daemonize yes<br>启动Redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-linux配置ftp服务\"><a href=\"#5-linux配置ftp服务\" class=\"headerlink\" title=\"5. linux配置ftp服务\"></a>5. linux配置ftp服务</h3><p>在安装前查看是否已安装vsftpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -q vsftpd</span><br><span class=\"line\">vsftpd-3.0.2-9.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum -y install vsftpd</span><br></pre></td></tr></table></figure></p>\n<p>查看一下vsftpd安装在哪：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# whereis vsftpd</span><br><span class=\"line\">vsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz</span><br></pre></td></tr></table></figure></p>\n<p>启动vsftpd服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改如下配置：<br>anonymous_enable=NO<br>chroot_local_user=YES<br>allow_writeable_chroot=YES #加上这行解决了无法登陆的问题</p>\n<p>启动／重新启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure></p>\n<p>设置开机启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig vsftpd on</span><br></pre></td></tr></table></figure></p>\n<p>配置用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser</span><br><span class=\"line\">[root@localhost ~]# passwd ftpuser</span><br><span class=\"line\">[root@localhost ~]# 输入密码</span><br></pre></td></tr></table></figure></p>\n<p>把 /var/www/html 的所有权给ftpuser.root<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# chown -R ftpuser.root /var/www/html</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\"><a href=\"#6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\" class=\"headerlink\" title=\"6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\"></a>6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动</h3><h4 id=\"编译打包：\"><a href=\"#编译打包：\" class=\"headerlink\" title=\"编译打包：\"></a>编译打包：</h4><p>方法1：使用maven-assembly-plugin插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;configuration&gt; </span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;&lt;/manifest&gt; </span><br><span class=\"line\">            &lt;/archive&gt;</span><br><span class=\"line\">        &lt;descriptorRefs&gt;</span><br><span class=\"line\">            &lt;descriptorRef&gt; jar-with-dependencies &lt;/descriptorRef&gt; </span><br><span class=\"line\">        &lt;/descriptorRefs&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;make-assembly&lt;/id&gt; </span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt; </span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行命令：mvn assembly:assembly<br>或者命令：mvn package</p>\n<p>由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。</p>\n<p>方法2：使用spring-boot-maven-plugin插件<br>由于我的project是spring boot项目，所以可以使用此方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/manifest&gt;</span><br><span class=\"line\">        &lt;/archive&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行mvn package打jar包，done！</p>\n<h4 id=\"上传并启动\"><a href=\"#上传并启动\" class=\"headerlink\" title=\"上传并启动\"></a>上传并启动</h4><p>连接sftp<br>lcd 打开本地路径<br>cd 进入服务器目标路径<br>put xxx.jar 把目标jar包上传到服务器对应路径<br>java -jar xxx.jar 启动java程序</p>\n","excerpt":"","more":"<h1 id=\"在linux下部署spring-boot项目过程记录\"><a href=\"#在linux下部署spring-boot项目过程记录\" class=\"headerlink\" title=\"在linux下部署spring boot项目过程记录\"></a>在linux下部署spring boot项目过程记录</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用</p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>linux版本：CentOs7<br>配备的开发环境软件服务：</p>\n<pre><code>- mysql（centos下默认使用mariadb，也可以，两者兼容）\n- jdk\n- ftp\n- redis\n</code></pre><h3 id=\"1-linux下开放端口\"><a href=\"#1-linux下开放端口\" class=\"headerlink\" title=\"1. linux下开放端口\"></a>1. linux下开放端口</h3><p>先把一些已知要用到的端口放开了，省的后面要用到的时候连不上<br>由于centos7默认没有iptables服务，所以需要先安装<br>首先暂停防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>\n<p>Then, install the iptables-services package:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install iptables-services</span><br></pre></td></tr></table></figure></p>\n<p>Enable the service at boot-time:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables</span><br></pre></td></tr></table></figure></p>\n<p>配置要放开的端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8081 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>保存配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">or</span><br><span class=\"line\">/usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></p>\n<p>Managing the service开启停止防火墙服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl [stop|start|restart] iptables</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-linux下安装使用mysql\"><a href=\"#2-linux下安装使用mysql\" class=\"headerlink\" title=\"2. linux下安装使用mysql\"></a>2. linux下安装使用mysql</h3><p>一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel<br>然而，在centos7下这样安装的时候，却发现mysql-server安装不上。<br>原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。<br>那么，centos7下安装mysql就有两种方式<br>1）使用mariadb；<br>2）卸载mariadb，安装mysql</p>\n<h4 id=\"方法1-使用mariadb\"><a href=\"#方法1-使用mariadb\" class=\"headerlink\" title=\"方法1:使用mariadb\"></a>方法1:使用mariadb</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br><span class=\"line\">systemctl start mariadb</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2-安装mysql：\"><a href=\"#方法2-安装mysql：\" class=\"headerlink\" title=\"方法2:安装mysql：\"></a>方法2:安装mysql：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>安装成功后重启mysql服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld restart</span><br></pre></td></tr></table></figure></p>\n<p>初次安装mysql，root账户没有密码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@yl-web yl]# mysql -u root</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"><a href=\"#实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\" class=\"headerlink\" title=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"></a>实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。</h4><p>记录如下：<br>1）在进入mysql工具时，总是有错误提示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br></pre></td></tr></table></figure></p>\n<p>解决：方法操作很简单，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/init.d/mysql stop</span><br><span class=\"line\"># mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\"># mysql -u root mysql</span><br><span class=\"line\">mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos; and host=&apos;root&apos; or host=&apos;localhost&apos;;//把空的用户密码都修改成非空的密码就行了。</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">mysql&gt; quit</span><br><span class=\"line\"># /etc/init.d/mysqld restart</span><br><span class=\"line\"># mysql -uroot -p</span><br><span class=\"line\">Enter password: &lt;输入新设的密码newpassword&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2）MySQL服务在启动的时候，不能创建pid文件。</p>\n<p>在终端看一下该目录是否存在，果然，不存在。<br>于是，创建了/var/run/mysqld/目录，重启MySQL服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# mkdir -p /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<p>如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# ls -ld /var/run/mysqld/</span><br><span class=\"line\">drwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-linux下安装jdk\"><a href=\"#3-linux下安装jdk\" class=\"headerlink\" title=\"3. linux下安装jdk\"></a>3. linux下安装jdk</h3><p>一、卸载系统自带的openjdk<br>1、查询系统内置的jdk，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java</span><br></pre></td></tr></table></figure></p>\n<p>此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。<br>如下：<br>python-javapackages-3.4.1-11.el7.noarch<br>java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64<br>java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64<br>java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64<br>tzdata-java-2015g-1.el7.noarch<br>javapackages-tools-3.4.1-11.el7.noarch<br>java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</p>\n<p>2、进行卸载，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps jdk相关名称</span><br></pre></td></tr></table></figure></p>\n<p>依次卸载如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps tzdata-java-2015g-1.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>二、jdk安装<br>1、下载jdk并上传到/usr/java目录<br>jdk7下载地址为：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a> 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。</p>\n<p>2、解压安装<br>进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh jdk-7u79-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>3、配置profile文件<br>运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>将如下内容添加到profile文件末尾并保持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.7.0_79</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></p>\n<p>/usr/java/jdk1.7.0_79 指的是jdk的路径</p>\n<p>保存之后，运行如下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>检查jdk是否安装成功，运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-linux下安装redis\"><a href=\"#4-linux下安装redis\" class=\"headerlink\" title=\"4. linux下安装redis\"></a>4. linux下安装redis</h3><p>1）方法1：使用命令安装<br>安装redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install redis</span><br></pre></td></tr></table></figure></p>\n<p>启动/停止/重启 Redis<br>启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis.service</span><br></pre></td></tr></table></figure></p>\n<p>停止服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop redis.service</span><br></pre></td></tr></table></figure></p>\n<p>重启服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis.service</span><br></pre></td></tr></table></figure></p>\n<p>检查状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status redis.service</span><br></pre></td></tr></table></figure></p>\n<p>随系统启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable redis.service</span><br></pre></td></tr></table></figure></p>\n<p>2）方法二：编译安装<br>下载安装编译:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class=\"line\">tar xzf redis-2.8.17.tar.gz</span><br><span class=\"line\">cd redis-2.8.17</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<p>设置配置文件路径:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/redis &amp;&amp; cp redis.conf /etc/redis</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改为： daemonize yes<br>启动Redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-linux配置ftp服务\"><a href=\"#5-linux配置ftp服务\" class=\"headerlink\" title=\"5. linux配置ftp服务\"></a>5. linux配置ftp服务</h3><p>在安装前查看是否已安装vsftpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -q vsftpd</span><br><span class=\"line\">vsftpd-3.0.2-9.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum -y install vsftpd</span><br></pre></td></tr></table></figure></p>\n<p>查看一下vsftpd安装在哪：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# whereis vsftpd</span><br><span class=\"line\">vsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz</span><br></pre></td></tr></table></figure></p>\n<p>启动vsftpd服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改如下配置：<br>anonymous_enable=NO<br>chroot_local_user=YES<br>allow_writeable_chroot=YES #加上这行解决了无法登陆的问题</p>\n<p>启动／重新启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure></p>\n<p>设置开机启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig vsftpd on</span><br></pre></td></tr></table></figure></p>\n<p>配置用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser</span><br><span class=\"line\">[root@localhost ~]# passwd ftpuser</span><br><span class=\"line\">[root@localhost ~]# 输入密码</span><br></pre></td></tr></table></figure></p>\n<p>把 /var/www/html 的所有权给ftpuser.root<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# chown -R ftpuser.root /var/www/html</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\"><a href=\"#6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\" class=\"headerlink\" title=\"6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\"></a>6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动</h3><h4 id=\"编译打包：\"><a href=\"#编译打包：\" class=\"headerlink\" title=\"编译打包：\"></a>编译打包：</h4><p>方法1：使用maven-assembly-plugin插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;configuration&gt; </span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;&lt;/manifest&gt; </span><br><span class=\"line\">            &lt;/archive&gt;</span><br><span class=\"line\">        &lt;descriptorRefs&gt;</span><br><span class=\"line\">            &lt;descriptorRef&gt; jar-with-dependencies &lt;/descriptorRef&gt; </span><br><span class=\"line\">        &lt;/descriptorRefs&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;make-assembly&lt;/id&gt; </span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt; </span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行命令：mvn assembly:assembly<br>或者命令：mvn package</p>\n<p>由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。</p>\n<p>方法2：使用spring-boot-maven-plugin插件<br>由于我的project是spring boot项目，所以可以使用此方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/manifest&gt;</span><br><span class=\"line\">        &lt;/archive&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行mvn package打jar包，done！</p>\n<h4 id=\"上传并启动\"><a href=\"#上传并启动\" class=\"headerlink\" title=\"上传并启动\"></a>上传并启动</h4><p>连接sftp<br>lcd 打开本地路径<br>cd 进入服务器目标路径<br>put xxx.jar 把目标jar包上传到服务器对应路径<br>java -jar xxx.jar 启动java程序</p>\n","sticky":0},{"title":"多版本部署如何使用nginx根据url参数api_version值进行路由","date":"2016-07-26T10:53:07.000Z","_content":"\n\n\n\n## 目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数'api_version'来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\n\n\n## 实际测试场景：\ntomcat部署启动了2个实例：\n- 127.0.0.1:8080\n- 127.0.0.1:8081\n\n本地部署一个nginx服务器，对所有请求进行代理和路由。\n部署的nginx简单配置如下：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    gzip  on;\n    server {\n        listen       80;\n        location /client {\n            if ( $arg_api_version = '1.0.0' ){\n                proxy_pass http://localhost:8080;\n                break;\n            }\n            if ( $arg_api_version = '1.0.1' ){\n                proxy_pass http://localhost:8081;\n                break;\n            }\n            proxy_pass http://localhost:8080;\n        }\n        location / {\n             proxy_pass http://localhost:8080;\n        }\n    }\n}\n```\n\n预先配置好本地host，以便直接使用域名访问。\n```\n127.0.0.1 local.xxx.com\n```\n\n## 说明：\n- 1.“listen       80;”配置nginx监听80端口，接收所有请求。\n- 2.“location /client { ... }”部分将会匹配到所有以“/client”开头的请求\n- 3.“location /client { ... }”部分，通过$http_api_version获取到url中字段名为'api_version'的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass http://localhost:8080;”走8080实例。\n- 4.“location / { ... }” 部分将会匹配其余的所有请求，路由到“http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\n\n\n","source":"_posts/多版本部署如何使用nginx根据url参数api-version值进行路由.md","raw":"---\ntitle: 多版本部署如何使用nginx根据url参数api_version值进行路由\ndate: 2016-07-26 18:53:07\ntags: [冗余部署, nginx, api_version, 路由]\n---\n\n\n\n\n## 目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数'api_version'来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\n\n\n## 实际测试场景：\ntomcat部署启动了2个实例：\n- 127.0.0.1:8080\n- 127.0.0.1:8081\n\n本地部署一个nginx服务器，对所有请求进行代理和路由。\n部署的nginx简单配置如下：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    gzip  on;\n    server {\n        listen       80;\n        location /client {\n            if ( $arg_api_version = '1.0.0' ){\n                proxy_pass http://localhost:8080;\n                break;\n            }\n            if ( $arg_api_version = '1.0.1' ){\n                proxy_pass http://localhost:8081;\n                break;\n            }\n            proxy_pass http://localhost:8080;\n        }\n        location / {\n             proxy_pass http://localhost:8080;\n        }\n    }\n}\n```\n\n预先配置好本地host，以便直接使用域名访问。\n```\n127.0.0.1 local.xxx.com\n```\n\n## 说明：\n- 1.“listen       80;”配置nginx监听80端口，接收所有请求。\n- 2.“location /client { ... }”部分将会匹配到所有以“/client”开头的请求\n- 3.“location /client { ... }”部分，通过$http_api_version获取到url中字段名为'api_version'的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass http://localhost:8080;”走8080实例。\n- 4.“location / { ... }” 部分将会匹配其余的所有请求，路由到“http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\n\n\n","slug":"多版本部署如何使用nginx根据url参数api-version值进行路由","published":1,"updated":"2016-07-26T14:21:26.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjw001z30ng5jrn3i65","content":"<h2 id=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"><a href=\"#目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\" class=\"headerlink\" title=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"></a>目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。</h2><h2 id=\"实际测试场景：\"><a href=\"#实际测试场景：\" class=\"headerlink\" title=\"实际测试场景：\"></a>实际测试场景：</h2><p>tomcat部署启动了2个实例：</p>\n<ul>\n<li>127.0.0.1:8080</li>\n<li>127.0.0.1:8081</li>\n</ul>\n<p>本地部署一个nginx服务器，对所有请求进行代理和路由。<br>部署的nginx简单配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        location /client &#123;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.0&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8080;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.1&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8081;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>预先配置好本地host，以便直接使用域名访问。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 local.xxx.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>1.“listen       80;”配置nginx监听80端口，接收所有请求。</li>\n<li>2.“location /client { … }”部分将会匹配到所有以“/client”开头的请求</li>\n<li>3.“location /client { … }”部分，通过$http_api_version获取到url中字段名为’api_version’的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass <a href=\"http://localhost:8080;”走8080实例。\" target=\"_blank\" rel=\"external\">http://localhost:8080;”走8080实例。</a></li>\n<li>4.“location / { … }” 部分将会匹配其余的所有请求，路由到“<a href=\"http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\" target=\"_blank\" rel=\"external\">http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"><a href=\"#目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\" class=\"headerlink\" title=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"></a>目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。</h2><h2 id=\"实际测试场景：\"><a href=\"#实际测试场景：\" class=\"headerlink\" title=\"实际测试场景：\"></a>实际测试场景：</h2><p>tomcat部署启动了2个实例：</p>\n<ul>\n<li>127.0.0.1:8080</li>\n<li>127.0.0.1:8081</li>\n</ul>\n<p>本地部署一个nginx服务器，对所有请求进行代理和路由。<br>部署的nginx简单配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        location /client &#123;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.0&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8080;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.1&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8081;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>预先配置好本地host，以便直接使用域名访问。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 local.xxx.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>1.“listen       80;”配置nginx监听80端口，接收所有请求。</li>\n<li>2.“location /client { … }”部分将会匹配到所有以“/client”开头的请求</li>\n<li>3.“location /client { … }”部分，通过$http_api_version获取到url中字段名为’api_version’的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass <a href=\"http://localhost:8080;”走8080实例。\">http://localhost:8080;”走8080实例。</a></li>\n<li>4.“location / { … }” 部分将会匹配其余的所有请求，路由到“<a href=\"http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\">http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。</a></li>\n</ul>\n","sticky":0},{"title":"使用Jenkins配置Git和Maven的自动化构建Tomcat项目","date":"2016-05-30T14:50:38.000Z","_content":"\n\n### 0- 前置条件\n安装jdk和tomcat\n我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。\nJenkins服务器使用8080端口，mvc项目tomcat使用8081端口。\n\n### 1 - 部署Jenkins\n\n官网下载http://jenkins-ci.org/\n我下载的是最新的2.5版本\n下载得到一个jenkins.war的war包\n可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行\n我这里是放到tomcat，启动tomcat即可.\n启动后可以在http://localhost:8080/jenkins/，看到Jenkins已经在运行\n第一次进入，需要你输入一个key,会提示您在/root/.jenkins/...某个路径下找到\n进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.\n\n### 2 - 安装相关插件\n我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。\n这两个基本是默认安装好了的.\n\n### 3 - 安装git和maven\n\n安装git\n```\nyum install git\n```\n安装maven\n```\n1、官网找到最新版的安装包：\nhttp://maven.apache.org/download.cgi\n\n拷贝文件名为 *-bin.tar.gz 的链接地址；\n\n2、下载\n# wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz\n\n3、解压\n# tar xvf apache-maven-3.3.3-bin.tar.gz\n\n如果需要：移动到其他目录\n建立软连接：# ln -s apache-maven-3.3.3 maven\n\n4、配置环境变量\n# vi /etc/profile\nexport M2_HOME=/usr/local/apache-maven\nexport PATH=$PATH:$M2_HOME/bin\n\n# source /etc/profile\n\n5、验证是否安装成功\n# mvn -version\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)\nMaven home: /opt/app/maven\nJava version: 1.8.0_51, vendor: Oracle Corporation\nJava home: /usr/java/jdk1.8.0_51/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.10.0-229.el7.x86_64\", arch: \"amd64\", family: \"unix\"\n```\n\n### 4 - 配置jdk和maven路径等\n\n选择\"系统管理\" -> \"Global Tool Configuration\"\n在里面配置好jdk，maven的路径，只需要配置它们的根路径.\n\n### 5 - 创建任务，配置项目信息\n\n选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.\n![](/images/jenkins-001.png)\n进入项目配置.\n填写项目名称\n填写Repository URL\n我这里使用的是一个git上的一个建议springmvc项目\nhttps://github.com/bingyue/easy-springmvc-maven\n如果需要，也可以配置一下构建后发送邮件到您的邮箱\n![](/images/jenkins-002.png)\n\n### 6 - 配置构建成功后的动作，添加shell\n![](/images/jenkins-003.png)\n配置项目中的“Post Steps”，设置构建完成后的动作.\n这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。\n选择Run only if build succeeds or is unstable ，点击添加Execute Shell：\nshell脚本:\n```\n#!/bin/bash\n#copy file and restart tomcat\n\ntomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65\nproject=easy-springmvc-maven\nwar_name=easy-springmvc-maven.war\nwar_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target\nserver_port=8081\nfile_path=/root/.jenkins/workspace/jenkins-test/target\n\nnow=$(date +\"%Y%m%d%H%M%S\")\necho \"the shell execute time is ${now}\"\n\necho `lsof -n -P -t -i :${server_port}`\ntomcat_pid=`lsof -n -P -t -i :${server_port}`\necho \"the tomcat_pid is ${tomcat_pid}\"\n\nif [ \"${tomcat_pid}\" != \"\" ]; then\n   kill -9 $tomcat_pid\n   echo \"kill the server\"\nfi\n\necho \"rm ${tomcat_path}/webapps/${war_name}\"\nrm ${tomcat_path}/webapps/${war_name}\n\necho \"rm -rf ${tomcat_path}/webapps/${project}\"\nrm -rf ${tomcat_path}/webapps/${project}\n\ncd $file_path\nif [ -f ${war_name} ]; then\n   cp ${war_name} ${tomcat_path}/webapps\n   echo \"cp war to webapps finished\"\nelse\n   echo \"${war_name} unexists\"\nfi\n\ncd $tomcat_path/bin\necho \"run startup\"\nsudo ./startup.sh\necho \"server restarted\"\n```\n我这里是在/usr/local/tomcat/apache-tomcat-7.0.65\n这个路径下配置了另外一个tomcat来运行测试的web项目.\nshell脚本启动tomcat的命令\"./startup.sh\"，注意要使用sudo\n\n\n\n### 7 - 运行构建项目\n打开项目的主面板，直接点击绿色的运行任务构建按钮。\n\ndone!\n\n### 8 - 其他\n这个例子使用了同一台服务器部署Jenkins和实际项目。\n实际应用则常用法是Jenkins单独部署，\n所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。\n并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。\n","source":"_posts/使用Jenkins配置Git和Maven的自动化构建Tomcat项目.md","raw":"---\ntitle: 使用Jenkins配置Git和Maven的自动化构建Tomcat项目\ndate: 2016-05-30 22:50:38\ntags: [java, jenkins, 持续集成, git, 自动化构建]\n---\n\n\n### 0- 前置条件\n安装jdk和tomcat\n我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。\nJenkins服务器使用8080端口，mvc项目tomcat使用8081端口。\n\n### 1 - 部署Jenkins\n\n官网下载http://jenkins-ci.org/\n我下载的是最新的2.5版本\n下载得到一个jenkins.war的war包\n可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行\n我这里是放到tomcat，启动tomcat即可.\n启动后可以在http://localhost:8080/jenkins/，看到Jenkins已经在运行\n第一次进入，需要你输入一个key,会提示您在/root/.jenkins/...某个路径下找到\n进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.\n\n### 2 - 安装相关插件\n我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。\n这两个基本是默认安装好了的.\n\n### 3 - 安装git和maven\n\n安装git\n```\nyum install git\n```\n安装maven\n```\n1、官网找到最新版的安装包：\nhttp://maven.apache.org/download.cgi\n\n拷贝文件名为 *-bin.tar.gz 的链接地址；\n\n2、下载\n# wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz\n\n3、解压\n# tar xvf apache-maven-3.3.3-bin.tar.gz\n\n如果需要：移动到其他目录\n建立软连接：# ln -s apache-maven-3.3.3 maven\n\n4、配置环境变量\n# vi /etc/profile\nexport M2_HOME=/usr/local/apache-maven\nexport PATH=$PATH:$M2_HOME/bin\n\n# source /etc/profile\n\n5、验证是否安装成功\n# mvn -version\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)\nMaven home: /opt/app/maven\nJava version: 1.8.0_51, vendor: Oracle Corporation\nJava home: /usr/java/jdk1.8.0_51/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.10.0-229.el7.x86_64\", arch: \"amd64\", family: \"unix\"\n```\n\n### 4 - 配置jdk和maven路径等\n\n选择\"系统管理\" -> \"Global Tool Configuration\"\n在里面配置好jdk，maven的路径，只需要配置它们的根路径.\n\n### 5 - 创建任务，配置项目信息\n\n选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.\n![](/images/jenkins-001.png)\n进入项目配置.\n填写项目名称\n填写Repository URL\n我这里使用的是一个git上的一个建议springmvc项目\nhttps://github.com/bingyue/easy-springmvc-maven\n如果需要，也可以配置一下构建后发送邮件到您的邮箱\n![](/images/jenkins-002.png)\n\n### 6 - 配置构建成功后的动作，添加shell\n![](/images/jenkins-003.png)\n配置项目中的“Post Steps”，设置构建完成后的动作.\n这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。\n选择Run only if build succeeds or is unstable ，点击添加Execute Shell：\nshell脚本:\n```\n#!/bin/bash\n#copy file and restart tomcat\n\ntomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65\nproject=easy-springmvc-maven\nwar_name=easy-springmvc-maven.war\nwar_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target\nserver_port=8081\nfile_path=/root/.jenkins/workspace/jenkins-test/target\n\nnow=$(date +\"%Y%m%d%H%M%S\")\necho \"the shell execute time is ${now}\"\n\necho `lsof -n -P -t -i :${server_port}`\ntomcat_pid=`lsof -n -P -t -i :${server_port}`\necho \"the tomcat_pid is ${tomcat_pid}\"\n\nif [ \"${tomcat_pid}\" != \"\" ]; then\n   kill -9 $tomcat_pid\n   echo \"kill the server\"\nfi\n\necho \"rm ${tomcat_path}/webapps/${war_name}\"\nrm ${tomcat_path}/webapps/${war_name}\n\necho \"rm -rf ${tomcat_path}/webapps/${project}\"\nrm -rf ${tomcat_path}/webapps/${project}\n\ncd $file_path\nif [ -f ${war_name} ]; then\n   cp ${war_name} ${tomcat_path}/webapps\n   echo \"cp war to webapps finished\"\nelse\n   echo \"${war_name} unexists\"\nfi\n\ncd $tomcat_path/bin\necho \"run startup\"\nsudo ./startup.sh\necho \"server restarted\"\n```\n我这里是在/usr/local/tomcat/apache-tomcat-7.0.65\n这个路径下配置了另外一个tomcat来运行测试的web项目.\nshell脚本启动tomcat的命令\"./startup.sh\"，注意要使用sudo\n\n\n\n### 7 - 运行构建项目\n打开项目的主面板，直接点击绿色的运行任务构建按钮。\n\ndone!\n\n### 8 - 其他\n这个例子使用了同一台服务器部署Jenkins和实际项目。\n实际应用则常用法是Jenkins单独部署，\n所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。\n并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。\n","slug":"使用Jenkins配置Git和Maven的自动化构建Tomcat项目","published":1,"updated":"2016-05-30T15:05:26.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghjy002030nga5ueeal5","content":"<h3 id=\"0-前置条件\"><a href=\"#0-前置条件\" class=\"headerlink\" title=\"0- 前置条件\"></a>0- 前置条件</h3><p>安装jdk和tomcat<br>我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。<br>Jenkins服务器使用8080端口，mvc项目tomcat使用8081端口。</p>\n<h3 id=\"1-部署Jenkins\"><a href=\"#1-部署Jenkins\" class=\"headerlink\" title=\"1 - 部署Jenkins\"></a>1 - 部署Jenkins</h3><p>官网下载<a href=\"http://jenkins-ci.org/\" target=\"_blank\" rel=\"external\">http://jenkins-ci.org/</a><br>我下载的是最新的2.5版本<br>下载得到一个jenkins.war的war包<br>可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行<br>我这里是放到tomcat，启动tomcat即可.<br>启动后可以在<a href=\"http://localhost:8080/jenkins/，看到Jenkins已经在运行\" target=\"_blank\" rel=\"external\">http://localhost:8080/jenkins/，看到Jenkins已经在运行</a><br>第一次进入，需要你输入一个key,会提示您在/root/.jenkins/…某个路径下找到<br>进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.</p>\n<h3 id=\"2-安装相关插件\"><a href=\"#2-安装相关插件\" class=\"headerlink\" title=\"2 - 安装相关插件\"></a>2 - 安装相关插件</h3><p>我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。<br>这两个基本是默认安装好了的.</p>\n<h3 id=\"3-安装git和maven\"><a href=\"#3-安装git和maven\" class=\"headerlink\" title=\"3 - 安装git和maven\"></a>3 - 安装git和maven</h3><p>安装git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure></p>\n<p>安装maven<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、官网找到最新版的安装包：</span><br><span class=\"line\">http://maven.apache.org/download.cgi</span><br><span class=\"line\"></span><br><span class=\"line\">拷贝文件名为 *-bin.tar.gz 的链接地址；</span><br><span class=\"line\"></span><br><span class=\"line\">2、下载</span><br><span class=\"line\"># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">3、解压</span><br><span class=\"line\"># tar xvf apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">如果需要：移动到其他目录</span><br><span class=\"line\">建立软连接：# ln -s apache-maven-3.3.3 maven</span><br><span class=\"line\"></span><br><span class=\"line\">4、配置环境变量</span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\">export M2_HOME=/usr/local/apache-maven</span><br><span class=\"line\">export PATH=$PATH:$M2_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">5、验证是否安装成功</span><br><span class=\"line\"># mvn -version</span><br><span class=\"line\">Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)</span><br><span class=\"line\">Maven home: /opt/app/maven</span><br><span class=\"line\">Java version: 1.8.0_51, vendor: Oracle Corporation</span><br><span class=\"line\">Java home: /usr/java/jdk1.8.0_51/jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;3.10.0-229.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-配置jdk和maven路径等\"><a href=\"#4-配置jdk和maven路径等\" class=\"headerlink\" title=\"4 - 配置jdk和maven路径等\"></a>4 - 配置jdk和maven路径等</h3><p>选择”系统管理” -&gt; “Global Tool Configuration”<br>在里面配置好jdk，maven的路径，只需要配置它们的根路径.</p>\n<h3 id=\"5-创建任务，配置项目信息\"><a href=\"#5-创建任务，配置项目信息\" class=\"headerlink\" title=\"5 - 创建任务，配置项目信息\"></a>5 - 创建任务，配置项目信息</h3><p>选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.<br><img src=\"/images/jenkins-001.png\" alt=\"\"><br>进入项目配置.<br>填写项目名称<br>填写Repository URL<br>我这里使用的是一个git上的一个建议springmvc项目<br><a href=\"https://github.com/bingyue/easy-springmvc-maven\" target=\"_blank\" rel=\"external\">https://github.com/bingyue/easy-springmvc-maven</a><br>如果需要，也可以配置一下构建后发送邮件到您的邮箱<br><img src=\"/images/jenkins-002.png\" alt=\"\"></p>\n<h3 id=\"6-配置构建成功后的动作，添加shell\"><a href=\"#6-配置构建成功后的动作，添加shell\" class=\"headerlink\" title=\"6 - 配置构建成功后的动作，添加shell\"></a>6 - 配置构建成功后的动作，添加shell</h3><p><img src=\"/images/jenkins-003.png\" alt=\"\"><br>配置项目中的“Post Steps”，设置构建完成后的动作.<br>这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。<br>选择Run only if build succeeds or is unstable ，点击添加Execute Shell：<br>shell脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#copy file and restart tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">tomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65</span><br><span class=\"line\">project=easy-springmvc-maven</span><br><span class=\"line\">war_name=easy-springmvc-maven.war</span><br><span class=\"line\">war_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target</span><br><span class=\"line\">server_port=8081</span><br><span class=\"line\">file_path=/root/.jenkins/workspace/jenkins-test/target</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date +&quot;%Y%m%d%H%M%S&quot;)</span><br><span class=\"line\">echo &quot;the shell execute time is $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">tomcat_pid=`lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">echo &quot;the tomcat_pid is $&#123;tomcat_pid&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$&#123;tomcat_pid&#125;&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">   kill -9 $tomcat_pid</span><br><span class=\"line\">   echo &quot;kill the server&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;&quot;</span><br><span class=\"line\">rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;&quot;</span><br><span class=\"line\">rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $file_path</span><br><span class=\"line\">if [ -f $&#123;war_name&#125; ]; then</span><br><span class=\"line\">   cp $&#123;war_name&#125; $&#123;tomcat_path&#125;/webapps</span><br><span class=\"line\">   echo &quot;cp war to webapps finished&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;war_name&#125; unexists&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path/bin</span><br><span class=\"line\">echo &quot;run startup&quot;</span><br><span class=\"line\">sudo ./startup.sh</span><br><span class=\"line\">echo &quot;server restarted&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我这里是在/usr/local/tomcat/apache-tomcat-7.0.65<br>这个路径下配置了另外一个tomcat来运行测试的web项目.<br>shell脚本启动tomcat的命令”./startup.sh”，注意要使用sudo</p>\n<h3 id=\"7-运行构建项目\"><a href=\"#7-运行构建项目\" class=\"headerlink\" title=\"7 - 运行构建项目\"></a>7 - 运行构建项目</h3><p>打开项目的主面板，直接点击绿色的运行任务构建按钮。</p>\n<p>done!</p>\n<h3 id=\"8-其他\"><a href=\"#8-其他\" class=\"headerlink\" title=\"8 - 其他\"></a>8 - 其他</h3><p>这个例子使用了同一台服务器部署Jenkins和实际项目。<br>实际应用则常用法是Jenkins单独部署，<br>所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。<br>并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。</p>\n","excerpt":"","more":"<h3 id=\"0-前置条件\"><a href=\"#0-前置条件\" class=\"headerlink\" title=\"0- 前置条件\"></a>0- 前置条件</h3><p>安装jdk和tomcat<br>我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。<br>Jenkins服务器使用8080端口，mvc项目tomcat使用8081端口。</p>\n<h3 id=\"1-部署Jenkins\"><a href=\"#1-部署Jenkins\" class=\"headerlink\" title=\"1 - 部署Jenkins\"></a>1 - 部署Jenkins</h3><p>官网下载<a href=\"http://jenkins-ci.org/\">http://jenkins-ci.org/</a><br>我下载的是最新的2.5版本<br>下载得到一个jenkins.war的war包<br>可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行<br>我这里是放到tomcat，启动tomcat即可.<br>启动后可以在<a href=\"http://localhost:8080/jenkins/，看到Jenkins已经在运行\">http://localhost:8080/jenkins/，看到Jenkins已经在运行</a><br>第一次进入，需要你输入一个key,会提示您在/root/.jenkins/…某个路径下找到<br>进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.</p>\n<h3 id=\"2-安装相关插件\"><a href=\"#2-安装相关插件\" class=\"headerlink\" title=\"2 - 安装相关插件\"></a>2 - 安装相关插件</h3><p>我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。<br>这两个基本是默认安装好了的.</p>\n<h3 id=\"3-安装git和maven\"><a href=\"#3-安装git和maven\" class=\"headerlink\" title=\"3 - 安装git和maven\"></a>3 - 安装git和maven</h3><p>安装git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure></p>\n<p>安装maven<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、官网找到最新版的安装包：</span><br><span class=\"line\">http://maven.apache.org/download.cgi</span><br><span class=\"line\"></span><br><span class=\"line\">拷贝文件名为 *-bin.tar.gz 的链接地址；</span><br><span class=\"line\"></span><br><span class=\"line\">2、下载</span><br><span class=\"line\"># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">3、解压</span><br><span class=\"line\"># tar xvf apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">如果需要：移动到其他目录</span><br><span class=\"line\">建立软连接：# ln -s apache-maven-3.3.3 maven</span><br><span class=\"line\"></span><br><span class=\"line\">4、配置环境变量</span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\">export M2_HOME=/usr/local/apache-maven</span><br><span class=\"line\">export PATH=$PATH:$M2_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">5、验证是否安装成功</span><br><span class=\"line\"># mvn -version</span><br><span class=\"line\">Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)</span><br><span class=\"line\">Maven home: /opt/app/maven</span><br><span class=\"line\">Java version: 1.8.0_51, vendor: Oracle Corporation</span><br><span class=\"line\">Java home: /usr/java/jdk1.8.0_51/jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;3.10.0-229.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-配置jdk和maven路径等\"><a href=\"#4-配置jdk和maven路径等\" class=\"headerlink\" title=\"4 - 配置jdk和maven路径等\"></a>4 - 配置jdk和maven路径等</h3><p>选择”系统管理” -&gt; “Global Tool Configuration”<br>在里面配置好jdk，maven的路径，只需要配置它们的根路径.</p>\n<h3 id=\"5-创建任务，配置项目信息\"><a href=\"#5-创建任务，配置项目信息\" class=\"headerlink\" title=\"5 - 创建任务，配置项目信息\"></a>5 - 创建任务，配置项目信息</h3><p>选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.<br><img src=\"/images/jenkins-001.png\" alt=\"\"><br>进入项目配置.<br>填写项目名称<br>填写Repository URL<br>我这里使用的是一个git上的一个建议springmvc项目<br><a href=\"https://github.com/bingyue/easy-springmvc-maven\">https://github.com/bingyue/easy-springmvc-maven</a><br>如果需要，也可以配置一下构建后发送邮件到您的邮箱<br><img src=\"/images/jenkins-002.png\" alt=\"\"></p>\n<h3 id=\"6-配置构建成功后的动作，添加shell\"><a href=\"#6-配置构建成功后的动作，添加shell\" class=\"headerlink\" title=\"6 - 配置构建成功后的动作，添加shell\"></a>6 - 配置构建成功后的动作，添加shell</h3><p><img src=\"/images/jenkins-003.png\" alt=\"\"><br>配置项目中的“Post Steps”，设置构建完成后的动作.<br>这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。<br>选择Run only if build succeeds or is unstable ，点击添加Execute Shell：<br>shell脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#copy file and restart tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">tomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65</span><br><span class=\"line\">project=easy-springmvc-maven</span><br><span class=\"line\">war_name=easy-springmvc-maven.war</span><br><span class=\"line\">war_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target</span><br><span class=\"line\">server_port=8081</span><br><span class=\"line\">file_path=/root/.jenkins/workspace/jenkins-test/target</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date +&quot;%Y%m%d%H%M%S&quot;)</span><br><span class=\"line\">echo &quot;the shell execute time is $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">tomcat_pid=`lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">echo &quot;the tomcat_pid is $&#123;tomcat_pid&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$&#123;tomcat_pid&#125;&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">   kill -9 $tomcat_pid</span><br><span class=\"line\">   echo &quot;kill the server&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;&quot;</span><br><span class=\"line\">rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;&quot;</span><br><span class=\"line\">rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $file_path</span><br><span class=\"line\">if [ -f $&#123;war_name&#125; ]; then</span><br><span class=\"line\">   cp $&#123;war_name&#125; $&#123;tomcat_path&#125;/webapps</span><br><span class=\"line\">   echo &quot;cp war to webapps finished&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;war_name&#125; unexists&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path/bin</span><br><span class=\"line\">echo &quot;run startup&quot;</span><br><span class=\"line\">sudo ./startup.sh</span><br><span class=\"line\">echo &quot;server restarted&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我这里是在/usr/local/tomcat/apache-tomcat-7.0.65<br>这个路径下配置了另外一个tomcat来运行测试的web项目.<br>shell脚本启动tomcat的命令”./startup.sh”，注意要使用sudo</p>\n<h3 id=\"7-运行构建项目\"><a href=\"#7-运行构建项目\" class=\"headerlink\" title=\"7 - 运行构建项目\"></a>7 - 运行构建项目</h3><p>打开项目的主面板，直接点击绿色的运行任务构建按钮。</p>\n<p>done!</p>\n<h3 id=\"8-其他\"><a href=\"#8-其他\" class=\"headerlink\" title=\"8 - 其他\"></a>8 - 其他</h3><p>这个例子使用了同一台服务器部署Jenkins和实际项目。<br>实际应用则常用法是Jenkins单独部署，<br>所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。<br>并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。</p>\n","sticky":0},{"title":"集群监控初步整理","date":"2016-03-11T01:53:20.000Z","_content":"\n### 集群监控初步整理\n\n![](/images/java-monitor.png)\n","source":"_posts/集群监控初步整理.md","raw":"---\ntitle: 集群监控初步整理\ndate: 2016-03-11 09:53:20\ntags: [java,监控,集群,monitor]\n---\n\n### 集群监控初步整理\n\n![](/images/java-monitor.png)\n","slug":"集群监控初步整理","published":1,"updated":"2016-03-12T04:09:16.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghk0002230ngbng2a04b","content":"<h3 id=\"集群监控初步整理\"><a href=\"#集群监控初步整理\" class=\"headerlink\" title=\"集群监控初步整理\"></a>集群监控初步整理</h3><p><img src=\"/images/java-monitor.png\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"集群监控初步整理\"><a href=\"#集群监控初步整理\" class=\"headerlink\" title=\"集群监控初步整理\"></a>集群监控初步整理</h3><p><img src=\"/images/java-monitor.png\" alt=\"\"></p>\n","sticky":0},{"title":"在单服务器上安装部署FastDFS+Nginx","date":"2016-07-07T02:54:21.000Z","_content":"\n# 在单服务器上安装部署FastDFS+Nginx\n\n那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。\n这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）\n我部署的服务系版本是centos6.7\n\n## FastDFS安装配置\n\n### Tracker的安装及配置\n#### 1.安装编译器\n```\nyum install -y gcc gcc-c++\n```\n\n#### 2.下载安装libevent\n```\nwget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz\ntar xvzf libevent-2.0.22-stable.tar.gz\ncd libevent-2.0.22-stable\n./configure\nmake && make install\n```\n\n#### 3.下载安装fastDFS\n```\nwget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz\n（code.google.com已无法访问，可以自己手动下载再上传到服务器）\ntar -xvzf FastDFS_v4.06.tar.gz\ncd FastDFS\n./make.sh\n./make.sh install\n```\n安装成功后/usr/local/bin下会出现一系列fastDFS命令\n\n#### 4.配置tracker\n```\nvim /etc/fdfs/tracker.conf\n```\n修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n\n#### 5.启动tracker\n```\n/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n```\n\n### Storage配置 -> Storage1配置\n正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。\n我这里只部署一个storage一个tracker，并部署在同一个服务器\n\n#### 1~3：参考Tracker安装步骤\n\n#### 4.配置storage\n```\nvim /etc/fdfs/storage.conf\n```\n修改tracker_server=192.168.1.134:22122\n修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n例子：\n```\ngroup_name=group1\nbase_path=/home/yuqing/fastdfs\nstore_path0=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.server_port=8080      #web server的端口改成8080（与nginx 端口一致）\n```\n\n#### 5.启动storage\n```\n/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n```\n启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据\n\n### 安装nginx以及fastdfs-nginx-module模块\nnginx的rewrite模块和cache模块需要先安装pcre和openssl\n#### 安装pcre\n下载pcre\n```\ntar zxvf pcre-8.12.tar.gz\ncd pcre-8.12\n./configure\nmake\nmake install\n```\n\n#### 安装openssl\ncentos下解决办法:\n```\nyum -y install openssl openssl-devel\n```\n\n#### 安装nginx\n```\ncd /home/yihua\nwget http://nginx.org/download/nginx-0.8.55.tar.gz\ntar zxvf nginx-0.8.55.tar.gz\ncd nginx-0.8.55\n./configure --prefix=/opt/nginx --with-http_stub_status_module\nmake && make install\n```\n\n#### 安装fastdfs-nginx-module\n下载并上传fastdfs-nginx-module_v1.15.tar.gz\n```\ntar xzf fastdfs-nginx-module_v1.15.tar.gz\ncd /home/yihua/nginx-0.8.55 \n./configure --add-module=/home/yihua/fastdfs-nginx-module/src\nmake; make install\n```\n\n#### 配置nginx和fastdfs-nginx-module\n```\ncp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs\nvim /etc/fdfs/mod_fastdfs.conf\n```\n修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf\n一般只需改动以下几个参数即可：\n```\nbase_path=/home/yuqing/fastdfs      #保存日志目录\ntracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号\nstorage_server_port=23000            #storage 服务器的端口号\ngroup_name=group1                    #当前服务器的 group 名\nurl_have_group_name = true           #文件 url 中是否有 group 名\nstore_path_count=1                   #存储路径个数，需要和 store_path 个数匹配\nstore_path0=/home/yuqing/fastdfs    #存储路径\nhttp.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）\ngroup_count = 1                      #设置组的个数\n```\n然后在末尾添加分组信息，目前只有一个分组，就只写一个\n```\n[group1]\ngroup_name=group1\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/home/yuqing/fastdfs\n```\n\n建立 M00 至存储目录的符号连接\n```\nln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00\n```\n将 server 段中的 listen 端口号改为 8080：\n```\nvim /usr/local/nginx/conf/nginx.conf\nlisten       8080;\n```\n在 server 段中添加fastdfs的配置\n```\n        location /group1/M00 {\n               root   /home/yuqing/fastdfs/data;\n               ngx_fastdfs_module;\n        }\n```\n\n#### 准备nginx启动脚本\n编辑 /etc/init.d/nginx，如下内容:\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.1.4.7 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n# It has a lot of features, but it's not for everyone.\n# processname: nginx\n \n# pidfile: /usr/local/nginx/logs/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\n \nnginxd=/usr/local/nginx/sbin/nginx\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/usr/local/nginx/logs/nginx.pid\nnginx_lock=/var/lock/subsys/nginx\nRETVAL=0\nprog=\"nginx\"\n \n# Source function library.\n. /etc/rc.d/init.d/functions\n \n# Source networking configuration.\n. /etc/sysconfig/network\n \n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n \n# Start nginx daemons functions.\nstart() {\n    nginx_is_run=`ps -ef | egrep 'nginx:\\s*(worker|master)\\s*process' | wc -l`\n    if [ ${nginx_is_run} -gt 0 ];then\n        echo \"nginx already running....\"\n        exit 1\n    fi\n    echo -n $\"Starting $prog: \"\n    daemon $nginxd -c ${nginx_config}\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && touch ${nginx_lock}\n    return $RETVAL\n}\n \n# Stop nginx daemons functions.\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $nginxd\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && rm -f ${nginx_lock} ${nginx_pid}\n}\n \n# Reload nginx config file\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n \n# See how we were called.\ncase \"$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    reload)\n        reload\n        ;;\n    restart)\n          stop\n        start\n        ;;\n    status)\n        status $prog\n        RETVAL=$?\n        ;;\n    *)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\n```\n\nNginx启动提示找不到libpcre.so.1解决方法\n如果是32位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib\n```\n如果是64位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib64\n```\n\n### 启动nginx\n\n```\n# chmod u+x /etc/init.d/nginx\n# chkconfig --add nginx\n# chkconfig nginx on\n# service nginx start\n正在启动 nginx：                                           [确定]\n# service nginx status\nnginx (pid 26500) 正在运行...\n```\n查看nginx的日志 错误日志logs/error.log 看是否有问题\n\n### 其他\n#### 启动nginx，tracker和storage\n重启tracker：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n重启storage：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n启动nginx：\n/usr/local/nginx/sbin/nginx\n检查nginx状态：\n/usr/local/nginx/sbin/nginx -t\n重启nginx：\n/usr/local/nginx/sbin/nginx -s reload\n\n#### tracker运行\n直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。\n```\n[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker fdfs]# netstat -antp | grep trackerd\ntcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd \n[root@tracker fdfs]# \n```\n\n#### storage运行\n```\n# fdfs_storaged /etc/fdfs/storage.conf restart\n查看端口是否起来\n# netstat -antp | grep storage\ntcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged \n```\n也可以以下命令来监控服务器的状态\n```\n# fdfs_monitor /etc/fdfs/client.conf\n```\n看到ACTIVE,就说明已经成功注册到了tracker。\n\n#### 开机启动\n设置tracker开机自动启动\n```\n[root@tracker tracker]# echo \"/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\" >> /etc/rc.local\n[root@tracker tracker]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker tracker]# \n```\n\n设置storage开机启动\n```\n[root@server1 fdfs]# echo \"/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\" >> /etc/rc.local\n[root@server1 fdfs]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\n```\n\n\n### 使用client测试文件上传\n先配置一下client\nvi /etc/fdfs/client.conf\n保证一下配置：\n```\nbase_path=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.tracker_server_port=8080\n```\nvi test.txt\n\n/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt\n得到：\n```\nThis is FastDFS client test program v4.06\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/\nfor more detail.\n\n[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group:\n        server 1. group_name=, ip_addr=192.168.1.134, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.134, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\n[root@localhost yihua]# This is FastDFS client test program v4.06\n-bash: This: command not found\nCopyright (C) 2008, Happy Fish / YuQing\n\n```\n在浏览器打开http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\n可以看见你的文件。那么就成功了。\n\ndone.","source":"_posts/在单服务器上安装部署FastDFS-Nginx.md","raw":"---\ntitle: 在单服务器上安装部署FastDFS+Nginx\ndate: 2016-07-07 10:54:21\ntags: [linux, centos, FastDFS, Nginx, 图片服务器]\n---\n\n# 在单服务器上安装部署FastDFS+Nginx\n\n那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。\n这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）\n我部署的服务系版本是centos6.7\n\n## FastDFS安装配置\n\n### Tracker的安装及配置\n#### 1.安装编译器\n```\nyum install -y gcc gcc-c++\n```\n\n#### 2.下载安装libevent\n```\nwget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz\ntar xvzf libevent-2.0.22-stable.tar.gz\ncd libevent-2.0.22-stable\n./configure\nmake && make install\n```\n\n#### 3.下载安装fastDFS\n```\nwget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz\n（code.google.com已无法访问，可以自己手动下载再上传到服务器）\ntar -xvzf FastDFS_v4.06.tar.gz\ncd FastDFS\n./make.sh\n./make.sh install\n```\n安装成功后/usr/local/bin下会出现一系列fastDFS命令\n\n#### 4.配置tracker\n```\nvim /etc/fdfs/tracker.conf\n```\n修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n\n#### 5.启动tracker\n```\n/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n```\n\n### Storage配置 -> Storage1配置\n正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。\n我这里只部署一个storage一个tracker，并部署在同一个服务器\n\n#### 1~3：参考Tracker安装步骤\n\n#### 4.配置storage\n```\nvim /etc/fdfs/storage.conf\n```\n修改tracker_server=192.168.1.134:22122\n修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n例子：\n```\ngroup_name=group1\nbase_path=/home/yuqing/fastdfs\nstore_path0=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.server_port=8080      #web server的端口改成8080（与nginx 端口一致）\n```\n\n#### 5.启动storage\n```\n/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n```\n启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据\n\n### 安装nginx以及fastdfs-nginx-module模块\nnginx的rewrite模块和cache模块需要先安装pcre和openssl\n#### 安装pcre\n下载pcre\n```\ntar zxvf pcre-8.12.tar.gz\ncd pcre-8.12\n./configure\nmake\nmake install\n```\n\n#### 安装openssl\ncentos下解决办法:\n```\nyum -y install openssl openssl-devel\n```\n\n#### 安装nginx\n```\ncd /home/yihua\nwget http://nginx.org/download/nginx-0.8.55.tar.gz\ntar zxvf nginx-0.8.55.tar.gz\ncd nginx-0.8.55\n./configure --prefix=/opt/nginx --with-http_stub_status_module\nmake && make install\n```\n\n#### 安装fastdfs-nginx-module\n下载并上传fastdfs-nginx-module_v1.15.tar.gz\n```\ntar xzf fastdfs-nginx-module_v1.15.tar.gz\ncd /home/yihua/nginx-0.8.55 \n./configure --add-module=/home/yihua/fastdfs-nginx-module/src\nmake; make install\n```\n\n#### 配置nginx和fastdfs-nginx-module\n```\ncp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs\nvim /etc/fdfs/mod_fastdfs.conf\n```\n修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf\n一般只需改动以下几个参数即可：\n```\nbase_path=/home/yuqing/fastdfs      #保存日志目录\ntracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号\nstorage_server_port=23000            #storage 服务器的端口号\ngroup_name=group1                    #当前服务器的 group 名\nurl_have_group_name = true           #文件 url 中是否有 group 名\nstore_path_count=1                   #存储路径个数，需要和 store_path 个数匹配\nstore_path0=/home/yuqing/fastdfs    #存储路径\nhttp.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）\ngroup_count = 1                      #设置组的个数\n```\n然后在末尾添加分组信息，目前只有一个分组，就只写一个\n```\n[group1]\ngroup_name=group1\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/home/yuqing/fastdfs\n```\n\n建立 M00 至存储目录的符号连接\n```\nln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00\n```\n将 server 段中的 listen 端口号改为 8080：\n```\nvim /usr/local/nginx/conf/nginx.conf\nlisten       8080;\n```\n在 server 段中添加fastdfs的配置\n```\n        location /group1/M00 {\n               root   /home/yuqing/fastdfs/data;\n               ngx_fastdfs_module;\n        }\n```\n\n#### 准备nginx启动脚本\n编辑 /etc/init.d/nginx，如下内容:\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.1.4.7 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n# It has a lot of features, but it's not for everyone.\n# processname: nginx\n \n# pidfile: /usr/local/nginx/logs/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\n \nnginxd=/usr/local/nginx/sbin/nginx\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/usr/local/nginx/logs/nginx.pid\nnginx_lock=/var/lock/subsys/nginx\nRETVAL=0\nprog=\"nginx\"\n \n# Source function library.\n. /etc/rc.d/init.d/functions\n \n# Source networking configuration.\n. /etc/sysconfig/network\n \n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n \n# Start nginx daemons functions.\nstart() {\n    nginx_is_run=`ps -ef | egrep 'nginx:\\s*(worker|master)\\s*process' | wc -l`\n    if [ ${nginx_is_run} -gt 0 ];then\n        echo \"nginx already running....\"\n        exit 1\n    fi\n    echo -n $\"Starting $prog: \"\n    daemon $nginxd -c ${nginx_config}\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && touch ${nginx_lock}\n    return $RETVAL\n}\n \n# Stop nginx daemons functions.\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $nginxd\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && rm -f ${nginx_lock} ${nginx_pid}\n}\n \n# Reload nginx config file\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n \n# See how we were called.\ncase \"$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    reload)\n        reload\n        ;;\n    restart)\n          stop\n        start\n        ;;\n    status)\n        status $prog\n        RETVAL=$?\n        ;;\n    *)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\n```\n\nNginx启动提示找不到libpcre.so.1解决方法\n如果是32位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib\n```\n如果是64位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib64\n```\n\n### 启动nginx\n\n```\n# chmod u+x /etc/init.d/nginx\n# chkconfig --add nginx\n# chkconfig nginx on\n# service nginx start\n正在启动 nginx：                                           [确定]\n# service nginx status\nnginx (pid 26500) 正在运行...\n```\n查看nginx的日志 错误日志logs/error.log 看是否有问题\n\n### 其他\n#### 启动nginx，tracker和storage\n重启tracker：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n重启storage：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n启动nginx：\n/usr/local/nginx/sbin/nginx\n检查nginx状态：\n/usr/local/nginx/sbin/nginx -t\n重启nginx：\n/usr/local/nginx/sbin/nginx -s reload\n\n#### tracker运行\n直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。\n```\n[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker fdfs]# netstat -antp | grep trackerd\ntcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd \n[root@tracker fdfs]# \n```\n\n#### storage运行\n```\n# fdfs_storaged /etc/fdfs/storage.conf restart\n查看端口是否起来\n# netstat -antp | grep storage\ntcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged \n```\n也可以以下命令来监控服务器的状态\n```\n# fdfs_monitor /etc/fdfs/client.conf\n```\n看到ACTIVE,就说明已经成功注册到了tracker。\n\n#### 开机启动\n设置tracker开机自动启动\n```\n[root@tracker tracker]# echo \"/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\" >> /etc/rc.local\n[root@tracker tracker]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker tracker]# \n```\n\n设置storage开机启动\n```\n[root@server1 fdfs]# echo \"/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\" >> /etc/rc.local\n[root@server1 fdfs]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\n```\n\n\n### 使用client测试文件上传\n先配置一下client\nvi /etc/fdfs/client.conf\n保证一下配置：\n```\nbase_path=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.tracker_server_port=8080\n```\nvi test.txt\n\n/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt\n得到：\n```\nThis is FastDFS client test program v4.06\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/\nfor more detail.\n\n[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group:\n        server 1. group_name=, ip_addr=192.168.1.134, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.134, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\n[root@localhost yihua]# This is FastDFS client test program v4.06\n-bash: This: command not found\nCopyright (C) 2008, Happy Fish / YuQing\n\n```\n在浏览器打开http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\n可以看见你的文件。那么就成功了。\n\ndone.","slug":"在单服务器上安装部署FastDFS-Nginx","published":1,"updated":"2016-07-07T14:04:19.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghk1002430ngz3qs8kxj","content":"<h1 id=\"在单服务器上安装部署FastDFS-Nginx\"><a href=\"#在单服务器上安装部署FastDFS-Nginx\" class=\"headerlink\" title=\"在单服务器上安装部署FastDFS+Nginx\"></a>在单服务器上安装部署FastDFS+Nginx</h1><p>那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。<br>这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）<br>我部署的服务系版本是centos6.7</p>\n<h2 id=\"FastDFS安装配置\"><a href=\"#FastDFS安装配置\" class=\"headerlink\" title=\"FastDFS安装配置\"></a>FastDFS安装配置</h2><h3 id=\"Tracker的安装及配置\"><a href=\"#Tracker的安装及配置\" class=\"headerlink\" title=\"Tracker的安装及配置\"></a>Tracker的安装及配置</h3><h4 id=\"1-安装编译器\"><a href=\"#1-安装编译器\" class=\"headerlink\" title=\"1.安装编译器\"></a>1.安装编译器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载安装libevent\"><a href=\"#2-下载安装libevent\" class=\"headerlink\" title=\"2.下载安装libevent\"></a>2.下载安装libevent</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">tar xvzf libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">cd libevent-2.0.22-stable</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载安装fastDFS\"><a href=\"#3-下载安装fastDFS\" class=\"headerlink\" title=\"3.下载安装fastDFS\"></a>3.下载安装fastDFS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz</span><br><span class=\"line\">（code.google.com已无法访问，可以自己手动下载再上传到服务器）</span><br><span class=\"line\">tar -xvzf FastDFS_v4.06.tar.gz</span><br><span class=\"line\">cd FastDFS</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n<p>安装成功后/usr/local/bin下会出现一系列fastDFS命令</p>\n<h4 id=\"4-配置tracker\"><a href=\"#4-配置tracker\" class=\"headerlink\" title=\"4.配置tracker\"></a>4.配置tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<p>修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）</p>\n<h4 id=\"5-启动tracker\"><a href=\"#5-启动tracker\" class=\"headerlink\" title=\"5.启动tracker\"></a>5.启动tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"Storage配置-gt-Storage1配置\"><a href=\"#Storage配置-gt-Storage1配置\" class=\"headerlink\" title=\"Storage配置 -&gt; Storage1配置\"></a>Storage配置 -&gt; Storage1配置</h3><p>正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。<br>我这里只部署一个storage一个tracker，并部署在同一个服务器</p>\n<h4 id=\"1-3：参考Tracker安装步骤\"><a href=\"#1-3：参考Tracker安装步骤\" class=\"headerlink\" title=\"1~3：参考Tracker安装步骤\"></a>1~3：参考Tracker安装步骤</h4><h4 id=\"4-配置storage\"><a href=\"#4-配置storage\" class=\"headerlink\" title=\"4.配置storage\"></a>4.配置storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>修改tracker_server=192.168.1.134:22122<br>修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_name=group1</span><br><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.server_port=8080      #web server的端口改成8080（与nginx 端口一致）</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-启动storage\"><a href=\"#5-启动storage\" class=\"headerlink\" title=\"5.启动storage\"></a>5.启动storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据</p>\n<h3 id=\"安装nginx以及fastdfs-nginx-module模块\"><a href=\"#安装nginx以及fastdfs-nginx-module模块\" class=\"headerlink\" title=\"安装nginx以及fastdfs-nginx-module模块\"></a>安装nginx以及fastdfs-nginx-module模块</h3><p>nginx的rewrite模块和cache模块需要先安装pcre和openssl</p>\n<h4 id=\"安装pcre\"><a href=\"#安装pcre\" class=\"headerlink\" title=\"安装pcre\"></a>安装pcre</h4><p>下载pcre<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf pcre-8.12.tar.gz</span><br><span class=\"line\">cd pcre-8.12</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装openssl\"><a href=\"#安装openssl\" class=\"headerlink\" title=\"安装openssl\"></a>安装openssl</h4><p>centos下解决办法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yihua</span><br><span class=\"line\">wget http://nginx.org/download/nginx-0.8.55.tar.gz</span><br><span class=\"line\">tar zxvf nginx-0.8.55.tar.gz</span><br><span class=\"line\">cd nginx-0.8.55</span><br><span class=\"line\">./configure --prefix=/opt/nginx --with-http_stub_status_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装fastdfs-nginx-module\"><a href=\"#安装fastdfs-nginx-module\" class=\"headerlink\" title=\"安装fastdfs-nginx-module\"></a>安装fastdfs-nginx-module</h4><p>下载并上传fastdfs-nginx-module_v1.15.tar.gz<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf fastdfs-nginx-module_v1.15.tar.gz</span><br><span class=\"line\">cd /home/yihua/nginx-0.8.55 </span><br><span class=\"line\">./configure --add-module=/home/yihua/fastdfs-nginx-module/src</span><br><span class=\"line\">make; make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置nginx和fastdfs-nginx-module\"><a href=\"#配置nginx和fastdfs-nginx-module\" class=\"headerlink\" title=\"配置nginx和fastdfs-nginx-module\"></a>配置nginx和fastdfs-nginx-module</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br><span class=\"line\">vim /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>\n<p>修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf<br>一般只需改动以下几个参数即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs      #保存日志目录</span><br><span class=\"line\">tracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号</span><br><span class=\"line\">storage_server_port=23000            #storage 服务器的端口号</span><br><span class=\"line\">group_name=group1                    #当前服务器的 group 名</span><br><span class=\"line\">url_have_group_name = true           #文件 url 中是否有 group 名</span><br><span class=\"line\">store_path_count=1                   #存储路径个数，需要和 store_path 个数匹配</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs    #存储路径</span><br><span class=\"line\">http.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）</span><br><span class=\"line\">group_count = 1                      #设置组的个数</span><br></pre></td></tr></table></figure></p>\n<p>然后在末尾添加分组信息，目前只有一个分组，就只写一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1]</span><br><span class=\"line\">group_name=group1</span><br><span class=\"line\">storage_server_port=23000</span><br><span class=\"line\">store_path_count=1</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br></pre></td></tr></table></figure></p>\n<p>建立 M00 至存储目录的符号连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00</span><br></pre></td></tr></table></figure></p>\n<p>将 server 段中的 listen 端口号改为 8080：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">listen       8080;</span><br></pre></td></tr></table></figure></p>\n<p>在 server 段中添加fastdfs的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /group1/M00 &#123;</span><br><span class=\"line\">       root   /home/yuqing/fastdfs/data;</span><br><span class=\"line\">       ngx_fastdfs_module;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"准备nginx启动脚本\"><a href=\"#准备nginx启动脚本\" class=\"headerlink\" title=\"准备nginx启动脚本\"></a>准备nginx启动脚本</h4><p>编辑 /etc/init.d/nginx，如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.1.4.7 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\"># It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"> </span><br><span class=\"line\"># pidfile: /usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"> </span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\">nginx_lock=/var/lock/subsys/nginx</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"> </span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"> </span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    nginx_is_run=`ps -ef | egrep &apos;nginx:\\s*(worker|master)\\s*process&apos; | wc -l`</span><br><span class=\"line\">    if [ $&#123;nginx_is_run&#125; -gt 0 ];then</span><br><span class=\"line\">        echo &quot;nginx already running....&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">    daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; touch $&#123;nginx_lock&#125;</span><br><span class=\"line\">    return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">    killproc $nginxd</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; rm -f $&#123;nginx_lock&#125; $&#123;nginx_pid&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Reload nginx config file</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">          stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<p>Nginx启动提示找不到libpcre.so.1解决方法<br>如果是32位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib</span><br></pre></td></tr></table></figure></p>\n<p>如果是64位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib64</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chmod u+x /etc/init.d/nginx</span><br><span class=\"line\"># chkconfig --add nginx</span><br><span class=\"line\"># chkconfig nginx on</span><br><span class=\"line\"># service nginx start</span><br><span class=\"line\">正在启动 nginx：                                           [确定]</span><br><span class=\"line\"># service nginx status</span><br><span class=\"line\">nginx (pid 26500) 正在运行...</span><br></pre></td></tr></table></figure>\n<p>查看nginx的日志 错误日志logs/error.log 看是否有问题</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"启动nginx，tracker和storage\"><a href=\"#启动nginx，tracker和storage\" class=\"headerlink\" title=\"启动nginx，tracker和storage\"></a>启动nginx，tracker和storage</h4><p>重启tracker：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf<br>重启storage：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf<br>启动nginx：<br>/usr/local/nginx/sbin/nginx<br>检查nginx状态：<br>/usr/local/nginx/sbin/nginx -t<br>重启nginx：<br>/usr/local/nginx/sbin/nginx -s reload</p>\n<h4 id=\"tracker运行\"><a href=\"#tracker运行\" class=\"headerlink\" title=\"tracker运行\"></a>tracker运行</h4><p>直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker fdfs]# netstat -antp | grep trackerd</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd </span><br><span class=\"line\">[root@tracker fdfs]#</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"storage运行\"><a href=\"#storage运行\" class=\"headerlink\" title=\"storage运行\"></a>storage运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_storaged /etc/fdfs/storage.conf restart</span><br><span class=\"line\">查看端口是否起来</span><br><span class=\"line\"># netstat -antp | grep storage</span><br><span class=\"line\">tcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged</span><br></pre></td></tr></table></figure>\n<p>也可以以下命令来监控服务器的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure></p>\n<p>看到ACTIVE,就说明已经成功注册到了tracker。</p>\n<h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4><p>设置tracker开机自动启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker tracker]# echo &quot;/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@tracker tracker]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker tracker]#</span><br></pre></td></tr></table></figure></p>\n<p>设置storage开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server1 fdfs]# echo &quot;/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@server1 fdfs]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用client测试文件上传\"><a href=\"#使用client测试文件上传\" class=\"headerlink\" title=\"使用client测试文件上传\"></a>使用client测试文件上传</h3><p>先配置一下client<br>vi /etc/fdfs/client.conf<br>保证一下配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.tracker_server_port=8080</span><br></pre></td></tr></table></figure></p>\n<p>vi test.txt</p>\n<p>/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt<br>得到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is FastDFS client test program v4.06</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br><span class=\"line\"></span><br><span class=\"line\">FastDFS may be copied only under the terms of the GNU General</span><br><span class=\"line\">Public License V3, which may be found in the FastDFS source kit.</span><br><span class=\"line\">Please visit the FastDFS Home Page http://www.csource.org/</span><br><span class=\"line\">for more detail.</span><br><span class=\"line\"></span><br><span class=\"line\">[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0</span><br><span class=\"line\"></span><br><span class=\"line\">tracker_query_storage_store_list_without_group:</span><br><span class=\"line\">        server 1. group_name=, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\"></span><br><span class=\"line\">group_name=group1, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\">storage_upload_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">storage_upload_slave_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">[root@localhost yihua]# This is FastDFS client test program v4.06</span><br><span class=\"line\">-bash: This: command not found</span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器打开<a href=\"http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\" target=\"_blank\" rel=\"external\">http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</a><br>可以看见你的文件。那么就成功了。</p>\n<p>done.</p>\n","excerpt":"","more":"<h1 id=\"在单服务器上安装部署FastDFS-Nginx\"><a href=\"#在单服务器上安装部署FastDFS-Nginx\" class=\"headerlink\" title=\"在单服务器上安装部署FastDFS+Nginx\"></a>在单服务器上安装部署FastDFS+Nginx</h1><p>那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。<br>这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）<br>我部署的服务系版本是centos6.7</p>\n<h2 id=\"FastDFS安装配置\"><a href=\"#FastDFS安装配置\" class=\"headerlink\" title=\"FastDFS安装配置\"></a>FastDFS安装配置</h2><h3 id=\"Tracker的安装及配置\"><a href=\"#Tracker的安装及配置\" class=\"headerlink\" title=\"Tracker的安装及配置\"></a>Tracker的安装及配置</h3><h4 id=\"1-安装编译器\"><a href=\"#1-安装编译器\" class=\"headerlink\" title=\"1.安装编译器\"></a>1.安装编译器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载安装libevent\"><a href=\"#2-下载安装libevent\" class=\"headerlink\" title=\"2.下载安装libevent\"></a>2.下载安装libevent</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">tar xvzf libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">cd libevent-2.0.22-stable</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载安装fastDFS\"><a href=\"#3-下载安装fastDFS\" class=\"headerlink\" title=\"3.下载安装fastDFS\"></a>3.下载安装fastDFS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz</span><br><span class=\"line\">（code.google.com已无法访问，可以自己手动下载再上传到服务器）</span><br><span class=\"line\">tar -xvzf FastDFS_v4.06.tar.gz</span><br><span class=\"line\">cd FastDFS</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n<p>安装成功后/usr/local/bin下会出现一系列fastDFS命令</p>\n<h4 id=\"4-配置tracker\"><a href=\"#4-配置tracker\" class=\"headerlink\" title=\"4.配置tracker\"></a>4.配置tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<p>修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）</p>\n<h4 id=\"5-启动tracker\"><a href=\"#5-启动tracker\" class=\"headerlink\" title=\"5.启动tracker\"></a>5.启动tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"Storage配置-gt-Storage1配置\"><a href=\"#Storage配置-gt-Storage1配置\" class=\"headerlink\" title=\"Storage配置 -&gt; Storage1配置\"></a>Storage配置 -&gt; Storage1配置</h3><p>正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。<br>我这里只部署一个storage一个tracker，并部署在同一个服务器</p>\n<h4 id=\"1-3：参考Tracker安装步骤\"><a href=\"#1-3：参考Tracker安装步骤\" class=\"headerlink\" title=\"1~3：参考Tracker安装步骤\"></a>1~3：参考Tracker安装步骤</h4><h4 id=\"4-配置storage\"><a href=\"#4-配置storage\" class=\"headerlink\" title=\"4.配置storage\"></a>4.配置storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>修改tracker_server=192.168.1.134:22122<br>修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_name=group1</span><br><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.server_port=8080      #web server的端口改成8080（与nginx 端口一致）</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-启动storage\"><a href=\"#5-启动storage\" class=\"headerlink\" title=\"5.启动storage\"></a>5.启动storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据</p>\n<h3 id=\"安装nginx以及fastdfs-nginx-module模块\"><a href=\"#安装nginx以及fastdfs-nginx-module模块\" class=\"headerlink\" title=\"安装nginx以及fastdfs-nginx-module模块\"></a>安装nginx以及fastdfs-nginx-module模块</h3><p>nginx的rewrite模块和cache模块需要先安装pcre和openssl</p>\n<h4 id=\"安装pcre\"><a href=\"#安装pcre\" class=\"headerlink\" title=\"安装pcre\"></a>安装pcre</h4><p>下载pcre<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf pcre-8.12.tar.gz</span><br><span class=\"line\">cd pcre-8.12</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装openssl\"><a href=\"#安装openssl\" class=\"headerlink\" title=\"安装openssl\"></a>安装openssl</h4><p>centos下解决办法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yihua</span><br><span class=\"line\">wget http://nginx.org/download/nginx-0.8.55.tar.gz</span><br><span class=\"line\">tar zxvf nginx-0.8.55.tar.gz</span><br><span class=\"line\">cd nginx-0.8.55</span><br><span class=\"line\">./configure --prefix=/opt/nginx --with-http_stub_status_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装fastdfs-nginx-module\"><a href=\"#安装fastdfs-nginx-module\" class=\"headerlink\" title=\"安装fastdfs-nginx-module\"></a>安装fastdfs-nginx-module</h4><p>下载并上传fastdfs-nginx-module_v1.15.tar.gz<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf fastdfs-nginx-module_v1.15.tar.gz</span><br><span class=\"line\">cd /home/yihua/nginx-0.8.55 </span><br><span class=\"line\">./configure --add-module=/home/yihua/fastdfs-nginx-module/src</span><br><span class=\"line\">make; make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置nginx和fastdfs-nginx-module\"><a href=\"#配置nginx和fastdfs-nginx-module\" class=\"headerlink\" title=\"配置nginx和fastdfs-nginx-module\"></a>配置nginx和fastdfs-nginx-module</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br><span class=\"line\">vim /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>\n<p>修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf<br>一般只需改动以下几个参数即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs      #保存日志目录</span><br><span class=\"line\">tracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号</span><br><span class=\"line\">storage_server_port=23000            #storage 服务器的端口号</span><br><span class=\"line\">group_name=group1                    #当前服务器的 group 名</span><br><span class=\"line\">url_have_group_name = true           #文件 url 中是否有 group 名</span><br><span class=\"line\">store_path_count=1                   #存储路径个数，需要和 store_path 个数匹配</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs    #存储路径</span><br><span class=\"line\">http.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）</span><br><span class=\"line\">group_count = 1                      #设置组的个数</span><br></pre></td></tr></table></figure></p>\n<p>然后在末尾添加分组信息，目前只有一个分组，就只写一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1]</span><br><span class=\"line\">group_name=group1</span><br><span class=\"line\">storage_server_port=23000</span><br><span class=\"line\">store_path_count=1</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br></pre></td></tr></table></figure></p>\n<p>建立 M00 至存储目录的符号连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00</span><br></pre></td></tr></table></figure></p>\n<p>将 server 段中的 listen 端口号改为 8080：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">listen       8080;</span><br></pre></td></tr></table></figure></p>\n<p>在 server 段中添加fastdfs的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /group1/M00 &#123;</span><br><span class=\"line\">       root   /home/yuqing/fastdfs/data;</span><br><span class=\"line\">       ngx_fastdfs_module;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"准备nginx启动脚本\"><a href=\"#准备nginx启动脚本\" class=\"headerlink\" title=\"准备nginx启动脚本\"></a>准备nginx启动脚本</h4><p>编辑 /etc/init.d/nginx，如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.1.4.7 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\"># It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"> </span><br><span class=\"line\"># pidfile: /usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"> </span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\">nginx_lock=/var/lock/subsys/nginx</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"> </span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"> </span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    nginx_is_run=`ps -ef | egrep &apos;nginx:\\s*(worker|master)\\s*process&apos; | wc -l`</span><br><span class=\"line\">    if [ $&#123;nginx_is_run&#125; -gt 0 ];then</span><br><span class=\"line\">        echo &quot;nginx already running....&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">    daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; touch $&#123;nginx_lock&#125;</span><br><span class=\"line\">    return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">    killproc $nginxd</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; rm -f $&#123;nginx_lock&#125; $&#123;nginx_pid&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Reload nginx config file</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">          stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<p>Nginx启动提示找不到libpcre.so.1解决方法<br>如果是32位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib</span><br></pre></td></tr></table></figure></p>\n<p>如果是64位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib64</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chmod u+x /etc/init.d/nginx</span><br><span class=\"line\"># chkconfig --add nginx</span><br><span class=\"line\"># chkconfig nginx on</span><br><span class=\"line\"># service nginx start</span><br><span class=\"line\">正在启动 nginx：                                           [确定]</span><br><span class=\"line\"># service nginx status</span><br><span class=\"line\">nginx (pid 26500) 正在运行...</span><br></pre></td></tr></table></figure>\n<p>查看nginx的日志 错误日志logs/error.log 看是否有问题</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"启动nginx，tracker和storage\"><a href=\"#启动nginx，tracker和storage\" class=\"headerlink\" title=\"启动nginx，tracker和storage\"></a>启动nginx，tracker和storage</h4><p>重启tracker：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf<br>重启storage：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf<br>启动nginx：<br>/usr/local/nginx/sbin/nginx<br>检查nginx状态：<br>/usr/local/nginx/sbin/nginx -t<br>重启nginx：<br>/usr/local/nginx/sbin/nginx -s reload</p>\n<h4 id=\"tracker运行\"><a href=\"#tracker运行\" class=\"headerlink\" title=\"tracker运行\"></a>tracker运行</h4><p>直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker fdfs]# netstat -antp | grep trackerd</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd </span><br><span class=\"line\">[root@tracker fdfs]#</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"storage运行\"><a href=\"#storage运行\" class=\"headerlink\" title=\"storage运行\"></a>storage运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_storaged /etc/fdfs/storage.conf restart</span><br><span class=\"line\">查看端口是否起来</span><br><span class=\"line\"># netstat -antp | grep storage</span><br><span class=\"line\">tcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged</span><br></pre></td></tr></table></figure>\n<p>也可以以下命令来监控服务器的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure></p>\n<p>看到ACTIVE,就说明已经成功注册到了tracker。</p>\n<h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4><p>设置tracker开机自动启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker tracker]# echo &quot;/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@tracker tracker]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker tracker]#</span><br></pre></td></tr></table></figure></p>\n<p>设置storage开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server1 fdfs]# echo &quot;/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@server1 fdfs]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用client测试文件上传\"><a href=\"#使用client测试文件上传\" class=\"headerlink\" title=\"使用client测试文件上传\"></a>使用client测试文件上传</h3><p>先配置一下client<br>vi /etc/fdfs/client.conf<br>保证一下配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.tracker_server_port=8080</span><br></pre></td></tr></table></figure></p>\n<p>vi test.txt</p>\n<p>/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt<br>得到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is FastDFS client test program v4.06</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br><span class=\"line\"></span><br><span class=\"line\">FastDFS may be copied only under the terms of the GNU General</span><br><span class=\"line\">Public License V3, which may be found in the FastDFS source kit.</span><br><span class=\"line\">Please visit the FastDFS Home Page http://www.csource.org/</span><br><span class=\"line\">for more detail.</span><br><span class=\"line\"></span><br><span class=\"line\">[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0</span><br><span class=\"line\"></span><br><span class=\"line\">tracker_query_storage_store_list_without_group:</span><br><span class=\"line\">        server 1. group_name=, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\"></span><br><span class=\"line\">group_name=group1, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\">storage_upload_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">storage_upload_slave_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">[root@localhost yihua]# This is FastDFS client test program v4.06</span><br><span class=\"line\">-bash: This: command not found</span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器打开<a href=\"http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\">http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</a><br>可以看见你的文件。那么就成功了。</p>\n<p>done.</p>\n","sticky":0},{"title":"如何使用github-pages和hexo搭建简单blog","date":"2015-12-31T07:41:30.000Z","_content":"\n前言\n- github，写代码必备\n- hexo，一个很方便的静态blog生成系统\n- 还不太熟悉，暂时不放图片\n\n步骤\n### 1.首先得有一个github账号\n没有的得先上github创建一个\n### 2.创建一个repositories\n- Repository name的填写格式是xxx.github.io\n- xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）\n- 创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置\n- 使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog\n- 接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式\n- 最后，点击“Publish page”，你的页面就公布出来了。\n\n### 3.安装hexo\n- 首先安装git\n- 安装node\n- 安装npm\n- 安装hexo\nnpm install hexo-cli -g\nnpm install hexo --save\n\n- hexo初始化\n**根据自己需要创建一个hexo文件夹\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      ├── _drafts\n|      └── _posts\n└── themes\n\n- 安装Hexo插件\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n```\n\n- 本地查看效果\n执行hexo server命令启动，然后访问localhost:4000查看效果\n\n\n### 4.创建一篇文章\n- git shell进入之前创建的hexo文件夹，hexo new \"hello world\"创建一篇新的文章\n\n### 5.同步并发布\n- hexo g 生成静态文件\n- git clone https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\n- 复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内\n\n### 6.提交更改到github\n- git add *\n- git commit -m \"代码提交信息\"\n- git push origin master\n- 输入用户名密码\n\n这样再次访问你github上的blog地址，即可发现内容已更新\n\n### 7.使用hexo别的主题美化blog样式\n- 我这里选用的是简介美观的next主题\n- 在终端窗口下，定位到 Hexo 站点目录下\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n- 启用 NexT 主题\n克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。\n- 验证主题是否启用\n运行 hexo s --debug，并访问 http://localhost:4000，确保站点正确运行\n\n### 8.同步新的更改\n现在要把新的更改同步上github，重新执行步骤5和6即可。\n当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行","source":"_posts/如何使用github-pages和hexo搭建简单blog.md","raw":"---\ntitle: 如何使用github-pages和hexo搭建简单blog\ndate: 2015-12-31 15:41:30\ntags: [git,github pages,hexo,blog]\n---\n\n前言\n- github，写代码必备\n- hexo，一个很方便的静态blog生成系统\n- 还不太熟悉，暂时不放图片\n\n步骤\n### 1.首先得有一个github账号\n没有的得先上github创建一个\n### 2.创建一个repositories\n- Repository name的填写格式是xxx.github.io\n- xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）\n- 创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置\n- 使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog\n- 接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式\n- 最后，点击“Publish page”，你的页面就公布出来了。\n\n### 3.安装hexo\n- 首先安装git\n- 安装node\n- 安装npm\n- 安装hexo\nnpm install hexo-cli -g\nnpm install hexo --save\n\n- hexo初始化\n**根据自己需要创建一个hexo文件夹\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      ├── _drafts\n|      └── _posts\n└── themes\n\n- 安装Hexo插件\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n```\n\n- 本地查看效果\n执行hexo server命令启动，然后访问localhost:4000查看效果\n\n\n### 4.创建一篇文章\n- git shell进入之前创建的hexo文件夹，hexo new \"hello world\"创建一篇新的文章\n\n### 5.同步并发布\n- hexo g 生成静态文件\n- git clone https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\n- 复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内\n\n### 6.提交更改到github\n- git add *\n- git commit -m \"代码提交信息\"\n- git push origin master\n- 输入用户名密码\n\n这样再次访问你github上的blog地址，即可发现内容已更新\n\n### 7.使用hexo别的主题美化blog样式\n- 我这里选用的是简介美观的next主题\n- 在终端窗口下，定位到 Hexo 站点目录下\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n- 启用 NexT 主题\n克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。\n- 验证主题是否启用\n运行 hexo s --debug，并访问 http://localhost:4000，确保站点正确运行\n\n### 8.同步新的更改\n现在要把新的更改同步上github，重新执行步骤5和6即可。\n当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行","slug":"如何使用github-pages和hexo搭建简单blog","published":1,"updated":"2016-02-20T04:02:04.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghk9002730ng0f939up2","content":"<p>前言</p>\n<ul>\n<li>github，写代码必备</li>\n<li>hexo，一个很方便的静态blog生成系统</li>\n<li>还不太熟悉，暂时不放图片</li>\n</ul>\n<p>步骤</p>\n<h3 id=\"1-首先得有一个github账号\"><a href=\"#1-首先得有一个github账号\" class=\"headerlink\" title=\"1.首先得有一个github账号\"></a>1.首先得有一个github账号</h3><p>没有的得先上github创建一个</p>\n<h3 id=\"2-创建一个repositories\"><a href=\"#2-创建一个repositories\" class=\"headerlink\" title=\"2.创建一个repositories\"></a>2.创建一个repositories</h3><ul>\n<li>Repository name的填写格式是xxx.github.io</li>\n<li>xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）</li>\n<li>创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置</li>\n<li>使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog</li>\n<li>接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式</li>\n<li>最后，点击“Publish page”，你的页面就公布出来了。</li>\n</ul>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><ul>\n<li>首先安装git</li>\n<li>安装node</li>\n<li>安装npm</li>\n<li><p>安装hexo<br>npm install hexo-cli -g<br>npm install hexo –save</p>\n</li>\n<li><p>hexo初始化<br>**根据自己需要创建一个hexo文件夹<br>$ hexo init <folder><br>$ cd <folder><br>$ npm install<br>新建完成后，指定文件夹的目录如下<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── scripts<br>├── source<br>|      ├── _drafts<br>|      └── _posts<br>└── themes</folder></folder></p>\n</li>\n<li><p>安装Hexo插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地查看效果<br>执行hexo server命令启动，然后访问localhost:4000查看效果</p>\n</li>\n</ul>\n<h3 id=\"4-创建一篇文章\"><a href=\"#4-创建一篇文章\" class=\"headerlink\" title=\"4.创建一篇文章\"></a>4.创建一篇文章</h3><ul>\n<li>git shell进入之前创建的hexo文件夹，hexo new “hello world”创建一篇新的文章</li>\n</ul>\n<h3 id=\"5-同步并发布\"><a href=\"#5-同步并发布\" class=\"headerlink\" title=\"5.同步并发布\"></a>5.同步并发布</h3><ul>\n<li>hexo g 生成静态文件</li>\n<li>git clone <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地</a></li>\n<li>复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内</li>\n</ul>\n<h3 id=\"6-提交更改到github\"><a href=\"#6-提交更改到github\" class=\"headerlink\" title=\"6.提交更改到github\"></a>6.提交更改到github</h3><ul>\n<li>git add *</li>\n<li>git commit -m “代码提交信息”</li>\n<li>git push origin master</li>\n<li>输入用户名密码</li>\n</ul>\n<p>这样再次访问你github上的blog地址，即可发现内容已更新</p>\n<h3 id=\"7-使用hexo别的主题美化blog样式\"><a href=\"#7-使用hexo别的主题美化blog样式\" class=\"headerlink\" title=\"7.使用hexo别的主题美化blog样式\"></a>7.使用hexo别的主题美化blog样式</h3><ul>\n<li>我这里选用的是简介美观的next主题</li>\n<li>在终端窗口下，定位到 Hexo 站点目录下<br>$ cd your-hexo-site<br>$ git clone <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>\n<li>启用 NexT 主题<br>克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。</li>\n<li>验证主题是否启用<br>运行 hexo s –debug，并访问 <a href=\"http://localhost:4000，确保站点正确运行\" target=\"_blank\" rel=\"external\">http://localhost:4000，确保站点正确运行</a></li>\n</ul>\n<h3 id=\"8-同步新的更改\"><a href=\"#8-同步新的更改\" class=\"headerlink\" title=\"8.同步新的更改\"></a>8.同步新的更改</h3><p>现在要把新的更改同步上github，重新执行步骤5和6即可。<br>当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行</p>\n","excerpt":"","more":"<p>前言</p>\n<ul>\n<li>github，写代码必备</li>\n<li>hexo，一个很方便的静态blog生成系统</li>\n<li>还不太熟悉，暂时不放图片</li>\n</ul>\n<p>步骤</p>\n<h3 id=\"1-首先得有一个github账号\"><a href=\"#1-首先得有一个github账号\" class=\"headerlink\" title=\"1.首先得有一个github账号\"></a>1.首先得有一个github账号</h3><p>没有的得先上github创建一个</p>\n<h3 id=\"2-创建一个repositories\"><a href=\"#2-创建一个repositories\" class=\"headerlink\" title=\"2.创建一个repositories\"></a>2.创建一个repositories</h3><ul>\n<li>Repository name的填写格式是xxx.github.io</li>\n<li>xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）</li>\n<li>创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置</li>\n<li>使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog</li>\n<li>接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式</li>\n<li>最后，点击“Publish page”，你的页面就公布出来了。</li>\n</ul>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><ul>\n<li>首先安装git</li>\n<li>安装node</li>\n<li>安装npm</li>\n<li><p>安装hexo<br>npm install hexo-cli -g<br>npm install hexo –save</p>\n</li>\n<li><p>hexo初始化<br>**根据自己需要创建一个hexo文件夹<br>$ hexo init <folder><br>$ cd <folder><br>$ npm install<br>新建完成后，指定文件夹的目录如下<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── scripts<br>├── source<br>|      ├── _drafts<br>|      └── _posts<br>└── themes</p>\n</li>\n<li><p>安装Hexo插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地查看效果<br>执行hexo server命令启动，然后访问localhost:4000查看效果</p>\n</li>\n</ul>\n<h3 id=\"4-创建一篇文章\"><a href=\"#4-创建一篇文章\" class=\"headerlink\" title=\"4.创建一篇文章\"></a>4.创建一篇文章</h3><ul>\n<li>git shell进入之前创建的hexo文件夹，hexo new “hello world”创建一篇新的文章</li>\n</ul>\n<h3 id=\"5-同步并发布\"><a href=\"#5-同步并发布\" class=\"headerlink\" title=\"5.同步并发布\"></a>5.同步并发布</h3><ul>\n<li>hexo g 生成静态文件</li>\n<li>git clone <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地</a></li>\n<li>复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内</li>\n</ul>\n<h3 id=\"6-提交更改到github\"><a href=\"#6-提交更改到github\" class=\"headerlink\" title=\"6.提交更改到github\"></a>6.提交更改到github</h3><ul>\n<li>git add *</li>\n<li>git commit -m “代码提交信息”</li>\n<li>git push origin master</li>\n<li>输入用户名密码</li>\n</ul>\n<p>这样再次访问你github上的blog地址，即可发现内容已更新</p>\n<h3 id=\"7-使用hexo别的主题美化blog样式\"><a href=\"#7-使用hexo别的主题美化blog样式\" class=\"headerlink\" title=\"7.使用hexo别的主题美化blog样式\"></a>7.使用hexo别的主题美化blog样式</h3><ul>\n<li>我这里选用的是简介美观的next主题</li>\n<li>在终端窗口下，定位到 Hexo 站点目录下<br>$ cd your-hexo-site<br>$ git clone <a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>\n<li>启用 NexT 主题<br>克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。</li>\n<li>验证主题是否启用<br>运行 hexo s –debug，并访问 <a href=\"http://localhost:4000，确保站点正确运行\">http://localhost:4000，确保站点正确运行</a></li>\n</ul>\n<h3 id=\"8-同步新的更改\"><a href=\"#8-同步新的更改\" class=\"headerlink\" title=\"8.同步新的更改\"></a>8.同步新的更改</h3><p>现在要把新的更改同步上github，重新执行步骤5和6即可。<br>当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行</p>\n","sticky":0},{"title":"项目管理建议","date":"2016-07-01T11:14:00.000Z","_content":"\n\n# 对项目管理制度的一些看法和建议\n\n\n## 当前存在的问题\n\n1. 技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。\n\n2. 安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。\n\n3. 从业务到产品到开发到测试上线，这个流程还可以有优化的地方。\n\n\n\n## 分析和改进建议\n\n### 针对问题1。\n使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好\n\n\n\n### 针对问题2。\n程序界有一句话，“没有完美的模型，但有一些能用。”\n既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。\n**这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。**\n\n**这里推荐使用一个团队协作管理的工具：“Worktile”。**\nWorktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。\n例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。\n如此一个可视化简单的团队协作管理。\n当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。\n\n**各状态任务完成情况一览：**\n![](/images/project-002.jpg)\n**完成任务，推动到另一状态：**\n![](/images/project-003.png)\n**报表：**\n![](/images/project-004.jpg)\n**团队日历：每个时间点要完成的任务也会在此显示**\n![](/images/project-005.png)\n\n\n\n### 针对问题3.\n以门店收银机为例，发现存在一些流程上的问题。\n**首先，说接口，有两个问题。**\n一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。\n二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。\n既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。\nRAP对我们接口开发的帮助有：\n1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。\n2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。\n![](/images/project-001.jpg)\n\n**其次，说说测试和螺旋式开发。**\n测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。\n**这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。**如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。\n","source":"_posts/项目管理建议.md","raw":"---\ntitle: 项目管理建议\ndate: 2016-07-01 19:14:00\ntags: [manager, 项目管理, RAP, Worktile]\n---\n\n\n# 对项目管理制度的一些看法和建议\n\n\n## 当前存在的问题\n\n1. 技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。\n\n2. 安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。\n\n3. 从业务到产品到开发到测试上线，这个流程还可以有优化的地方。\n\n\n\n## 分析和改进建议\n\n### 针对问题1。\n使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好\n\n\n\n### 针对问题2。\n程序界有一句话，“没有完美的模型，但有一些能用。”\n既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。\n**这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。**\n\n**这里推荐使用一个团队协作管理的工具：“Worktile”。**\nWorktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。\n例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。\n如此一个可视化简单的团队协作管理。\n当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。\n\n**各状态任务完成情况一览：**\n![](/images/project-002.jpg)\n**完成任务，推动到另一状态：**\n![](/images/project-003.png)\n**报表：**\n![](/images/project-004.jpg)\n**团队日历：每个时间点要完成的任务也会在此显示**\n![](/images/project-005.png)\n\n\n\n### 针对问题3.\n以门店收银机为例，发现存在一些流程上的问题。\n**首先，说接口，有两个问题。**\n一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。\n二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。\n既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。\nRAP对我们接口开发的帮助有：\n1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。\n2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。\n![](/images/project-001.jpg)\n\n**其次，说说测试和螺旋式开发。**\n测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。\n**这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。**如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。\n","slug":"项目管理建议","published":1,"updated":"2016-07-07T14:04:19.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirp1ghkb002930ngl2z92nvh","content":"<h1 id=\"对项目管理制度的一些看法和建议\"><a href=\"#对项目管理制度的一些看法和建议\" class=\"headerlink\" title=\"对项目管理制度的一些看法和建议\"></a>对项目管理制度的一些看法和建议</h1><h2 id=\"当前存在的问题\"><a href=\"#当前存在的问题\" class=\"headerlink\" title=\"当前存在的问题\"></a>当前存在的问题</h2><ol>\n<li><p>技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。</p>\n</li>\n<li><p>安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。</p>\n</li>\n<li><p>从业务到产品到开发到测试上线，这个流程还可以有优化的地方。</p>\n</li>\n</ol>\n<h2 id=\"分析和改进建议\"><a href=\"#分析和改进建议\" class=\"headerlink\" title=\"分析和改进建议\"></a>分析和改进建议</h2><h3 id=\"针对问题1。\"><a href=\"#针对问题1。\" class=\"headerlink\" title=\"针对问题1。\"></a>针对问题1。</h3><p>使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好</p>\n<h3 id=\"针对问题2。\"><a href=\"#针对问题2。\" class=\"headerlink\" title=\"针对问题2。\"></a>针对问题2。</h3><p>程序界有一句话，“没有完美的模型，但有一些能用。”<br>既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。<br><strong>这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。</strong></p>\n<p><strong>这里推荐使用一个团队协作管理的工具：“Worktile”。</strong><br>Worktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。<br>例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。<br>如此一个可视化简单的团队协作管理。<br>当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。</p>\n<p><strong>各状态任务完成情况一览：</strong><br><img src=\"/images/project-002.jpg\" alt=\"\"><br><strong>完成任务，推动到另一状态：</strong><br><img src=\"/images/project-003.png\" alt=\"\"><br><strong>报表：</strong><br><img src=\"/images/project-004.jpg\" alt=\"\"><br><strong>团队日历：每个时间点要完成的任务也会在此显示</strong><br><img src=\"/images/project-005.png\" alt=\"\"></p>\n<h3 id=\"针对问题3\"><a href=\"#针对问题3\" class=\"headerlink\" title=\"针对问题3.\"></a>针对问题3.</h3><p>以门店收银机为例，发现存在一些流程上的问题。<br><strong>首先，说接口，有两个问题。</strong><br>一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。<br>二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。<br>既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。<br>RAP对我们接口开发的帮助有：<br>1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。<br>2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。<br><img src=\"/images/project-001.jpg\" alt=\"\"></p>\n<p><strong>其次，说说测试和螺旋式开发。</strong><br>测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。<br><strong>这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。</strong>如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。</p>\n","excerpt":"","more":"<h1 id=\"对项目管理制度的一些看法和建议\"><a href=\"#对项目管理制度的一些看法和建议\" class=\"headerlink\" title=\"对项目管理制度的一些看法和建议\"></a>对项目管理制度的一些看法和建议</h1><h2 id=\"当前存在的问题\"><a href=\"#当前存在的问题\" class=\"headerlink\" title=\"当前存在的问题\"></a>当前存在的问题</h2><ol>\n<li><p>技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。</p>\n</li>\n<li><p>安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。</p>\n</li>\n<li><p>从业务到产品到开发到测试上线，这个流程还可以有优化的地方。</p>\n</li>\n</ol>\n<h2 id=\"分析和改进建议\"><a href=\"#分析和改进建议\" class=\"headerlink\" title=\"分析和改进建议\"></a>分析和改进建议</h2><h3 id=\"针对问题1。\"><a href=\"#针对问题1。\" class=\"headerlink\" title=\"针对问题1。\"></a>针对问题1。</h3><p>使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好</p>\n<h3 id=\"针对问题2。\"><a href=\"#针对问题2。\" class=\"headerlink\" title=\"针对问题2。\"></a>针对问题2。</h3><p>程序界有一句话，“没有完美的模型，但有一些能用。”<br>既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。<br><strong>这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。</strong></p>\n<p><strong>这里推荐使用一个团队协作管理的工具：“Worktile”。</strong><br>Worktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。<br>例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。<br>如此一个可视化简单的团队协作管理。<br>当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。</p>\n<p><strong>各状态任务完成情况一览：</strong><br><img src=\"/images/project-002.jpg\" alt=\"\"><br><strong>完成任务，推动到另一状态：</strong><br><img src=\"/images/project-003.png\" alt=\"\"><br><strong>报表：</strong><br><img src=\"/images/project-004.jpg\" alt=\"\"><br><strong>团队日历：每个时间点要完成的任务也会在此显示</strong><br><img src=\"/images/project-005.png\" alt=\"\"></p>\n<h3 id=\"针对问题3\"><a href=\"#针对问题3\" class=\"headerlink\" title=\"针对问题3.\"></a>针对问题3.</h3><p>以门店收银机为例，发现存在一些流程上的问题。<br><strong>首先，说接口，有两个问题。</strong><br>一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。<br>二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。<br>既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。<br>RAP对我们接口开发的帮助有：<br>1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。<br>2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。<br><img src=\"/images/project-001.jpg\" alt=\"\"></p>\n<p><strong>其次，说说测试和螺旋式开发。</strong><br>测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。<br><strong>这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。</strong>如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。</p>\n","sticky":0}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cirp1ghgf000030ngdh9y93xt","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghhu000i30ngneg9dzsf"},{"post_id":"cirp1ghgf000030ngdh9y93xt","tag_id":"cirp1ghh3000630ngsr3g7cv1","_id":"cirp1ghhw000k30ngvzbrd78n"},{"post_id":"cirp1ghgf000030ngdh9y93xt","tag_id":"cirp1ghhi000a30ngwhtqll75","_id":"cirp1ghhz000n30ngfjbwjb3m"},{"post_id":"cirp1ghgf000030ngdh9y93xt","tag_id":"cirp1ghho000d30ngsxdup8aa","_id":"cirp1ghi3000p30ngrnupf0vf"},{"post_id":"cirp1ghgy000430ngvp6u6f1t","tag_id":"cirp1ghhs000g30ngee1w2ig0","_id":"cirp1ghik000z30ngpkl5fqpn"},{"post_id":"cirp1ghgy000430ngvp6u6f1t","tag_id":"cirp1ghhx000l30ngk0uccphb","_id":"cirp1ghim001130ngvhdqhq0o"},{"post_id":"cirp1ghgy000430ngvp6u6f1t","tag_id":"cirp1ghi9000r30ngbapp7yg4","_id":"cirp1ghio001430ngi57wiha2"},{"post_id":"cirp1ghgy000430ngvp6u6f1t","tag_id":"cirp1ghid000u30ng9so06w7a","_id":"cirp1ghiq001630ng1x1ymi0v"},{"post_id":"cirp1ghgz000530ngf713b1ry","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghj7001c30ngmgcuvt6a"},{"post_id":"cirp1ghgz000530ngf713b1ry","tag_id":"cirp1ghii000x30ng6xf5yok9","_id":"cirp1ghj9001e30ngkc4nck3w"},{"post_id":"cirp1ghgz000530ngf713b1ry","tag_id":"cirp1ghim001230ngb1wlqrz1","_id":"cirp1ghjb001h30nghivz0j40"},{"post_id":"cirp1ghgz000530ngf713b1ry","tag_id":"cirp1ghho000d30ngsxdup8aa","_id":"cirp1ghjc001j30ngok9k2ypm"},{"post_id":"cirp1ghh4000730nguius5eg8","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghji001n30ngrmoq62hz"},{"post_id":"cirp1ghh4000730nguius5eg8","tag_id":"cirp1ghj5001b30ng6mp4vugz","_id":"cirp1ghjk001p30ngl1lcjz57"},{"post_id":"cirp1ghh4000730nguius5eg8","tag_id":"cirp1ghja001g30nguy7iyp5i","_id":"cirp1ghjp001s30ng3y738u14"},{"post_id":"cirp1ghh7000830ng68sva8oq","tag_id":"cirp1ghjg001l30ngecctsrth","_id":"cirp1ghk1002330ngy88ptsd6"},{"post_id":"cirp1ghh7000830ng68sva8oq","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghk7002530ng4ocl4lni"},{"post_id":"cirp1ghh7000830ng68sva8oq","tag_id":"cirp1ghjk001q30ngr3tir01i","_id":"cirp1ghka002830nghe9lg49i"},{"post_id":"cirp1ghh7000830ng68sva8oq","tag_id":"cirp1ghju001v30ng3pnlax4n","_id":"cirp1ghkd002a30ngx8n9k953"},{"post_id":"cirp1ghh7000830ng68sva8oq","tag_id":"cirp1ghjw001y30ngkr8ojr78","_id":"cirp1ghkd002c30ngkt9nrrzx"},{"post_id":"cirp1ghhb000930ng18yhf093","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghke002d30ngy4sr3cnx"},{"post_id":"cirp1ghhb000930ng18yhf093","tag_id":"cirp1ghk0002130ngvbtj8xbc","_id":"cirp1ghkf002f30ngkd64vsp4"},{"post_id":"cirp1ghhb000930ng18yhf093","tag_id":"cirp1ghk7002630ngenl2kua6","_id":"cirp1ghkg002g30ngyuv1q5r5"},{"post_id":"cirp1ghhj000b30ngkww4dokw","tag_id":"cirp1ghkd002b30ng1z20n9t3","_id":"cirp1ghkh002j30ngayw2j88a"},{"post_id":"cirp1ghhj000b30ngkww4dokw","tag_id":"cirp1ghkf002e30ngqreuultn","_id":"cirp1ghki002k30ng8r39ki9c"},{"post_id":"cirp1ghhj000b30ngkww4dokw","tag_id":"cirp1ghkh002h30ngu79ycmqi","_id":"cirp1ghki002m30ngnu8yyxla"},{"post_id":"cirp1ghhm000c30ngqxu0cazg","tag_id":"cirp1ghkd002b30ng1z20n9t3","_id":"cirp1ghkk002r30ng5ks5f8a1"},{"post_id":"cirp1ghhm000c30ngqxu0cazg","tag_id":"cirp1ghkh002h30ngu79ycmqi","_id":"cirp1ghkk002s30ngms48g81j"},{"post_id":"cirp1ghhm000c30ngqxu0cazg","tag_id":"cirp1ghki002n30ngmqvojl20","_id":"cirp1ghkk002u30ng2kqyc9t2"},{"post_id":"cirp1ghhm000c30ngqxu0cazg","tag_id":"cirp1ghkj002o30ngvsvvpoms","_id":"cirp1ghkk002v30ngdvm1mg5b"},{"post_id":"cirp1ghhm000c30ngqxu0cazg","tag_id":"cirp1ghkj002p30ngkcgx7sot","_id":"cirp1ghkl002x30ngq6grnxz7"},{"post_id":"cirp1ghhp000e30ngapgch7n4","tag_id":"cirp1ghkj002q30ngvjtxmbu6","_id":"cirp1ghkm003130nghkdow6nk"},{"post_id":"cirp1ghhp000e30ngapgch7n4","tag_id":"cirp1ghkk002t30ng69fi65hc","_id":"cirp1ghkm003230ng6fmvogcp"},{"post_id":"cirp1ghhp000e30ngapgch7n4","tag_id":"cirp1ghkk002w30ngztpmonc0","_id":"cirp1ghkn003430ngduwy2mcm"},{"post_id":"cirp1ghhp000e30ngapgch7n4","tag_id":"cirp1ghkl002y30ngydgbkbq5","_id":"cirp1ghkn003530ngompjy0jh"},{"post_id":"cirp1ghhp000e30ngapgch7n4","tag_id":"cirp1ghkl002z30ngtttq86rg","_id":"cirp1ghkn003730nguad9b3re"},{"post_id":"cirp1ghhq000f30ngkcxeh9fl","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghkp003a30nglmnelhao"},{"post_id":"cirp1ghhq000f30ngkcxeh9fl","tag_id":"cirp1ghkm003030ngtxjmuu08","_id":"cirp1ghkp003b30ng0wbwpbxn"},{"post_id":"cirp1ghhq000f30ngkcxeh9fl","tag_id":"cirp1ghkm003330ngdx48mim9","_id":"cirp1ghkp003d30ngtuze299f"},{"post_id":"cirp1ghhq000f30ngkcxeh9fl","tag_id":"cirp1ghkn003630ngx36bvbrs","_id":"cirp1ghkq003e30ngogwr235n"},{"post_id":"cirp1ghhq000f30ngkcxeh9fl","tag_id":"cirp1ghkn003830ngp85h8h2x","_id":"cirp1ghkq003g30ngtmqrk0ss"},{"post_id":"cirp1ghht000h30ng7r0imoyx","tag_id":"cirp1ghko003930ngen7nnmqm","_id":"cirp1ghkq003h30ngxf3hnp13"},{"post_id":"cirp1ghhv000j30ngrahrf295","tag_id":"cirp1ghkp003c30ngpd3r4fjr","_id":"cirp1ghku003l30ngspg3jj5o"},{"post_id":"cirp1ghhv000j30ngrahrf295","tag_id":"cirp1ghkq003f30ngmlh0wsz4","_id":"cirp1ghkv003m30ngin2t7jnb"},{"post_id":"cirp1ghhv000j30ngrahrf295","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghkx003o30ngzzq5e4da"},{"post_id":"cirp1ghhv000j30ngrahrf295","tag_id":"cirp1ghkl002y30ngydgbkbq5","_id":"cirp1ghkx003p30ngoiuxdv4x"},{"post_id":"cirp1ghhv000j30ngrahrf295","tag_id":"cirp1ghkr003j30ngi82kfz2o","_id":"cirp1ghky003r30ngd55dogab"},{"post_id":"cirp1ghhx000m30nges8lkgg7","tag_id":"cirp1ghko003930ngen7nnmqm","_id":"cirp1ghkz003u30ngvvt1co7z"},{"post_id":"cirp1ghhx000m30nges8lkgg7","tag_id":"cirp1ghkw003n30ng4vggvwxq","_id":"cirp1ghkz003v30ng6317a4k5"},{"post_id":"cirp1ghhx000m30nges8lkgg7","tag_id":"cirp1ghky003q30ng44acxbfc","_id":"cirp1ghl0003x30ng0u70yr8j"},{"post_id":"cirp1ghhx000m30nges8lkgg7","tag_id":"cirp1ghky003s30ngm1wxzq8p","_id":"cirp1ghl0003y30ng56f9s7ub"},{"post_id":"cirp1ghi0000o30ng644ggojp","tag_id":"cirp1ghkq003f30ngmlh0wsz4","_id":"cirp1ghl2004330ngczosmtcm"},{"post_id":"cirp1ghi0000o30ng644ggojp","tag_id":"cirp1ghkp003c30ngpd3r4fjr","_id":"cirp1ghl2004430nghnzswje0"},{"post_id":"cirp1ghi0000o30ng644ggojp","tag_id":"cirp1ghl0003z30nggzaabpl2","_id":"cirp1ghl3004630ngl13v2w5o"},{"post_id":"cirp1ghi0000o30ng644ggojp","tag_id":"cirp1ghko003930ngen7nnmqm","_id":"cirp1ghl3004730ng72oy8nvq"},{"post_id":"cirp1ghi0000o30ng644ggojp","tag_id":"cirp1ghl1004130ngxgosob1y","_id":"cirp1ghl3004930nguiacmebi"},{"post_id":"cirp1ghi4000q30ngmshzocgf","tag_id":"cirp1ghkp003c30ngpd3r4fjr","_id":"cirp1ghl4004c30ngsf5ybvw2"},{"post_id":"cirp1ghi4000q30ngmshzocgf","tag_id":"cirp1ghkq003f30ngmlh0wsz4","_id":"cirp1ghl5004d30ngwg6tqolz"},{"post_id":"cirp1ghi4000q30ngmshzocgf","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghl5004f30ng5bgblwgl"},{"post_id":"cirp1ghi4000q30ngmshzocgf","tag_id":"cirp1ghkl002y30ngydgbkbq5","_id":"cirp1ghl5004g30ngwwugqnpu"},{"post_id":"cirp1ghi4000q30ngmshzocgf","tag_id":"cirp1ghkr003j30ngi82kfz2o","_id":"cirp1ghl5004i30ngkuv04n8y"},{"post_id":"cirp1ghia000s30ng52wgbzxi","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghl7004k30ng0x5eamqo"},{"post_id":"cirp1ghia000s30ng52wgbzxi","tag_id":"cirp1ghl4004b30nghlnhdrdw","_id":"cirp1ghl7004l30nglnhrbs6l"},{"post_id":"cirp1ghia000s30ng52wgbzxi","tag_id":"cirp1ghl5004e30nga4f0rkjl","_id":"cirp1ghl8004n30ngkbzjiis3"},{"post_id":"cirp1ghia000s30ng52wgbzxi","tag_id":"cirp1ghl5004h30ngmnojwtyj","_id":"cirp1ghl8004o30ng8nlz56f5"},{"post_id":"cirp1ghic000t30nguh9o6cdn","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghl9004r30ng051gwh4p"},{"post_id":"cirp1ghic000t30nguh9o6cdn","tag_id":"cirp1ghl6004j30ngtcewqanl","_id":"cirp1ghl9004s30nguuot4wu8"},{"post_id":"cirp1ghic000t30nguh9o6cdn","tag_id":"cirp1ghl7004m30ngei8icou6","_id":"cirp1ghl9004u30ng72ggzw6s"},{"post_id":"cirp1ghic000t30nguh9o6cdn","tag_id":"cirp1ghl8004p30ngb4sytc2r","_id":"cirp1ghla004v30ngyfsh4b08"},{"post_id":"cirp1ghid000v30ng1zqx68rf","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghlb004x30ngqh77vqg3"},{"post_id":"cirp1ghid000v30ng1zqx68rf","tag_id":"cirp1ghl8004q30ng3pk72yoq","_id":"cirp1ghlb004y30ngxd74c475"},{"post_id":"cirp1ghig000w30ngphttqa10","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghlb005030ngjc9ndwka"},{"post_id":"cirp1ghig000w30ngphttqa10","tag_id":"cirp1ghl9004t30ngbmb1agg6","_id":"cirp1ghlc005130ngvskt9nke"},{"post_id":"cirp1ghig000w30ngphttqa10","tag_id":"cirp1ghla004w30ngmead276k","_id":"cirp1ghlc005330ng67ug8mtx"},{"post_id":"cirp1ghil001030ng6z1060sd","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghld005630nguyfu0cpr"},{"post_id":"cirp1ghil001030ng6z1060sd","tag_id":"cirp1ghlb004z30nghkakdiiv","_id":"cirp1ghld005730ng4wg4l589"},{"post_id":"cirp1ghil001030ng6z1060sd","tag_id":"cirp1ghlc005230ngema9qgkp","_id":"cirp1ghlf005930ng9p3cktyl"},{"post_id":"cirp1ghil001030ng6z1060sd","tag_id":"cirp1ghl8004p30ngb4sytc2r","_id":"cirp1ghlf005a30ngaossd5xc"},{"post_id":"cirp1ghin001330ngvy1zknhi","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghlg005c30ng84hcyx7f"},{"post_id":"cirp1ghin001330ngvy1zknhi","tag_id":"cirp1ghld005530ngselngb3g","_id":"cirp1ghlg005d30nga8rymnqn"},{"post_id":"cirp1ghip001530ngbc3vpjfp","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghlj005g30ngazzu5c79"},{"post_id":"cirp1ghip001530ngbc3vpjfp","tag_id":"cirp1ghld005830ng2qyfub3p","_id":"cirp1ghlj005h30ngxp95ohw1"},{"post_id":"cirp1ghip001530ngbc3vpjfp","tag_id":"cirp1ghlf005b30ng8hmv0n5x","_id":"cirp1ghlk005j30nghv1v00jr"},{"post_id":"cirp1ghip001530ngbc3vpjfp","tag_id":"cirp1ghl8004p30ngb4sytc2r","_id":"cirp1ghlk005k30ngkbsce36j"},{"post_id":"cirp1ghir001730ng1fjx4gxf","tag_id":"cirp1ghlh005f30ng7hqptlik","_id":"cirp1ghll005m30ngjjztyejy"},{"post_id":"cirp1ghir001730ng1fjx4gxf","tag_id":"cirp1ghlj005i30ng1y3874v3","_id":"cirp1ghll005n30ngxr277odq"},{"post_id":"cirp1ghiz001930ngb0x1v4k3","tag_id":"cirp1ghlk005l30ng1yokdeah","_id":"cirp1ghlm005q30ngviqzldhx"},{"post_id":"cirp1ghiz001930ngb0x1v4k3","tag_id":"cirp1ghll005o30nga16nryle","_id":"cirp1ghlm005r30nga0mz6eui"},{"post_id":"cirp1ghj1001a30ng96zuuqjn","tag_id":"cirp1ghlm005p30ngr5txlips","_id":"cirp1ghlo005u30ng1knqfmn4"},{"post_id":"cirp1ghj1001a30ng96zuuqjn","tag_id":"cirp1ghlm005s30ngi6s9ew91","_id":"cirp1ghlo005v30ngc3zgbqjr"},{"post_id":"cirp1ghj8001d30ngv1ai0q1l","tag_id":"cirp1ghjg001l30ngecctsrth","_id":"cirp1ghlp005y30ngnugza6pm"},{"post_id":"cirp1ghj8001d30ngv1ai0q1l","tag_id":"cirp1ghlo005w30nghu1ta2lo","_id":"cirp1ghlp005z30ngno9fr0va"},{"post_id":"cirp1ghj8001d30ngv1ai0q1l","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghlp006130ngy6ceikes"},{"post_id":"cirp1ghj9001f30nguu7udqdo","tag_id":"cirp1ghlo005x30ngnutkt9ve","_id":"cirp1ghls006530ngs8tg3wmk"},{"post_id":"cirp1ghj9001f30nguu7udqdo","tag_id":"cirp1ghlp006030ngie4bn0jx","_id":"cirp1ghls006630ngkcw4tsk1"},{"post_id":"cirp1ghj9001f30nguu7udqdo","tag_id":"cirp1ghlq006230ng6idutdyz","_id":"cirp1ghlt006830nghu6bv0o2"},{"post_id":"cirp1ghj9001f30nguu7udqdo","tag_id":"cirp1ghlq006330ngh8ldwwcw","_id":"cirp1ghlt006930ng3y1pe7z1"},{"post_id":"cirp1ghj9001f30nguu7udqdo","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghlu006b30ng6m9jtkji"},{"post_id":"cirp1ghjb001i30ngw960zkt4","tag_id":"cirp1ghko003930ngen7nnmqm","_id":"cirp1ghlw006e30ng9n4wcdaj"},{"post_id":"cirp1ghjb001i30ngw960zkt4","tag_id":"cirp1ghls006730ngcfb72q5x","_id":"cirp1ghlx006f30nguyfz9692"},{"post_id":"cirp1ghjb001i30ngw960zkt4","tag_id":"cirp1ghky003q30ng44acxbfc","_id":"cirp1ghlx006h30ngr3xg0vh9"},{"post_id":"cirp1ghjb001i30ngw960zkt4","tag_id":"cirp1ghky003s30ngm1wxzq8p","_id":"cirp1ghly006i30ngx00olji4"},{"post_id":"cirp1ghjc001k30ngpoo9w7yi","tag_id":"cirp1ghjg001l30ngecctsrth","_id":"cirp1ghlz006m30ng7u7sb584"},{"post_id":"cirp1ghjc001k30ngpoo9w7yi","tag_id":"cirp1ghlx006g30ngo8i06ps9","_id":"cirp1ghlz006n30ngvyj7byfg"},{"post_id":"cirp1ghjc001k30ngpoo9w7yi","tag_id":"cirp1ghly006j30ngxakwo223","_id":"cirp1ghm0006p30ngmlrt9iby"},{"post_id":"cirp1ghjc001k30ngpoo9w7yi","tag_id":"cirp1ghly006k30ngola80woi","_id":"cirp1ghm0006q30ngpe0cno6g"},{"post_id":"cirp1ghjh001m30ngepusegyy","tag_id":"cirp1ghjg001l30ngecctsrth","_id":"cirp1ghm4006v30ngxag6utzl"},{"post_id":"cirp1ghjh001m30ngepusegyy","tag_id":"cirp1ghkd002b30ng1z20n9t3","_id":"cirp1ghm4006w30ng8l3qaqgx"},{"post_id":"cirp1ghjh001m30ngepusegyy","tag_id":"cirp1ghki002n30ngmqvojl20","_id":"cirp1ghm5006y30ngccym9pta"},{"post_id":"cirp1ghjh001m30ngepusegyy","tag_id":"cirp1ghm2006s30ngb5nw11cr","_id":"cirp1ghm5006z30ngmck0w4ct"},{"post_id":"cirp1ghjh001m30ngepusegyy","tag_id":"cirp1ghm3006t30ngi5guxu5u","_id":"cirp1ghm5007130ngi8myylxk"},{"post_id":"cirp1ghji001o30ngytubhyw0","tag_id":"cirp1ghm3006u30ng09990goc","_id":"cirp1ghm7007330ngp3xlkg1k"},{"post_id":"cirp1ghji001o30ngytubhyw0","tag_id":"cirp1ghm4006x30ngdquxl0ut","_id":"cirp1ghm7007430ng0al6ccwo"},{"post_id":"cirp1ghji001o30ngytubhyw0","tag_id":"cirp1ghm5007030ngav5s1exb","_id":"cirp1ghm8007630nghhidydqi"},{"post_id":"cirp1ghjk001r30ng99kbl57v","tag_id":"cirp1ghm6007230ngjnar28k4","_id":"cirp1ghm9007830ng4sda5go2"},{"post_id":"cirp1ghjk001r30ng99kbl57v","tag_id":"cirp1ghm7007530ngk7eionu2","_id":"cirp1ghm9007930ng2c3ju1yd"},{"post_id":"cirp1ghjq001t30ngg0xratr2","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghma007d30ngq4tptkk6"},{"post_id":"cirp1ghjq001t30ngg0xratr2","tag_id":"cirp1ghjg001l30ngecctsrth","_id":"cirp1ghmb007e30ng8q7j9nxv"},{"post_id":"cirp1ghjq001t30ngg0xratr2","tag_id":"cirp1ghm8007730ngd7gyvj7o","_id":"cirp1ghmb007g30ngf9u3ce2r"},{"post_id":"cirp1ghjq001t30ngg0xratr2","tag_id":"cirp1ghm9007a30ng5ur05259","_id":"cirp1ghmb007h30ngwo83ptl3"},{"post_id":"cirp1ghjq001t30ngg0xratr2","tag_id":"cirp1ghm9007b30ngv27571ux","_id":"cirp1ghmc007j30ng9k9up04h"},{"post_id":"cirp1ghjt001u30ng3vwb9404","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghme007m30ng1eyhq0cb"},{"post_id":"cirp1ghjt001u30ng3vwb9404","tag_id":"cirp1ghlb004z30nghkakdiiv","_id":"cirp1ghme007n30ng799v142d"},{"post_id":"cirp1ghjt001u30ng3vwb9404","tag_id":"cirp1ghk7002630ngenl2kua6","_id":"cirp1ghme007p30ng7vycavt1"},{"post_id":"cirp1ghjt001u30ng3vwb9404","tag_id":"cirp1ghmb007i30ngmj7hq9bb","_id":"cirp1ghme007q30ngnoj7byx5"},{"post_id":"cirp1ghjt001u30ng3vwb9404","tag_id":"cirp1ghmc007k30ngiyenm8li","_id":"cirp1ghmf007s30ngh515dpae"},{"post_id":"cirp1ghjv001x30ngbb4u27bi","tag_id":"cirp1ghmd007l30ngxtsu33tx","_id":"cirp1ghmg007u30ngipn3q6zh"},{"post_id":"cirp1ghjv001x30ngbb4u27bi","tag_id":"cirp1ghme007o30ngfusdoi4s","_id":"cirp1ghmg007v30ngrti1wbws"},{"post_id":"cirp1ghjv001x30ngbb4u27bi","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghmh007x30ng3ceixd1j"},{"post_id":"cirp1ghjv001x30ngbb4u27bi","tag_id":"cirp1ghjg001l30ngecctsrth","_id":"cirp1ghmh007y30ngx2lrvxcs"},{"post_id":"cirp1ghjv001x30ngbb4u27bi","tag_id":"cirp1ghme007r30ngyhflrrq5","_id":"cirp1ghmi008030ngi2hfe5nt"},{"post_id":"cirp1ghjw001z30ng5jrn3i65","tag_id":"cirp1ghmf007t30ngmg9tn7aa","_id":"cirp1ghmk008330ngygy58aru"},{"post_id":"cirp1ghjw001z30ng5jrn3i65","tag_id":"cirp1ghmg007w30ngfrkc2pmp","_id":"cirp1ghmk008430ngpr8sp8bz"},{"post_id":"cirp1ghjw001z30ng5jrn3i65","tag_id":"cirp1ghmi007z30ngzqki0hph","_id":"cirp1ghmk008630ngkle568su"},{"post_id":"cirp1ghjw001z30ng5jrn3i65","tag_id":"cirp1ghmi008130ngfd48trcq","_id":"cirp1ghmk008730ngef5re44u"},{"post_id":"cirp1ghjy002030nga5ueeal5","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghmm008b30ngfwe63z57"},{"post_id":"cirp1ghjy002030nga5ueeal5","tag_id":"cirp1ghmj008230ngsstrk2ll","_id":"cirp1ghmm008c30ngesid2t4p"},{"post_id":"cirp1ghjy002030nga5ueeal5","tag_id":"cirp1ghmk008530ngtn5h9xcx","_id":"cirp1ghmn008e30ng0m3kb14u"},{"post_id":"cirp1ghjy002030nga5ueeal5","tag_id":"cirp1ghko003930ngen7nnmqm","_id":"cirp1ghmn008f30ngvt274gv6"},{"post_id":"cirp1ghjy002030nga5ueeal5","tag_id":"cirp1ghml008930ng6unzs3jj","_id":"cirp1ghmn008h30ngp5s28hk5"},{"post_id":"cirp1ghk0002230ngbng2a04b","tag_id":"cirp1ghgv000330ng8jq48087","_id":"cirp1ghmo008j30ngcexz3rqv"},{"post_id":"cirp1ghk0002230ngbng2a04b","tag_id":"cirp1ghml008a30ngibwfk50v","_id":"cirp1ghmo008k30ngho6eic9w"},{"post_id":"cirp1ghk0002230ngbng2a04b","tag_id":"cirp1ghmm008d30ngs45v08wf","_id":"cirp1ghmp008m30ng612hqtr5"},{"post_id":"cirp1ghk0002230ngbng2a04b","tag_id":"cirp1ghmn008g30ng1b3ycz2l","_id":"cirp1ghmp008n30nglxtp27uo"},{"post_id":"cirp1ghk1002430ngz3qs8kxj","tag_id":"cirp1ghmd007l30ngxtsu33tx","_id":"cirp1ghmr008s30ngxi9oo6ho"},{"post_id":"cirp1ghk1002430ngz3qs8kxj","tag_id":"cirp1ghme007o30ngfusdoi4s","_id":"cirp1ghmr008t30ngb6nftjzy"},{"post_id":"cirp1ghk1002430ngz3qs8kxj","tag_id":"cirp1ghmp008o30ngt6u34nfh","_id":"cirp1ghms008v30ngl65zi0l3"},{"post_id":"cirp1ghk1002430ngz3qs8kxj","tag_id":"cirp1ghmp008p30ngcrvxuv4n","_id":"cirp1ghms008w30ng51nb2sw1"},{"post_id":"cirp1ghk1002430ngz3qs8kxj","tag_id":"cirp1ghmq008q30ng1dtx93w6","_id":"cirp1ghms008y30ng5ouao6r2"},{"post_id":"cirp1ghk9002730ng0f939up2","tag_id":"cirp1ghko003930ngen7nnmqm","_id":"cirp1ghmu009130ng2a959v1l"},{"post_id":"cirp1ghk9002730ng0f939up2","tag_id":"cirp1ghmr008u30ngfaqmxhto","_id":"cirp1ghmu009230ng6a1hnfja"},{"post_id":"cirp1ghk9002730ng0f939up2","tag_id":"cirp1ghm6007230ngjnar28k4","_id":"cirp1ghmw009430ngzea1rn7t"},{"post_id":"cirp1ghk9002730ng0f939up2","tag_id":"cirp1ghms008z30ngy6uloecc","_id":"cirp1ghmx009530ngr8lodx67"},{"post_id":"cirp1ghkb002930ngl2z92nvh","tag_id":"cirp1ghmt009030ngjbvm8pwk","_id":"cirp1ghmz009830ngdznpu5e0"},{"post_id":"cirp1ghkb002930ngl2z92nvh","tag_id":"cirp1ghmu009330ng4axcfr2o","_id":"cirp1ghmz009930nguhdqyrgp"},{"post_id":"cirp1ghkb002930ngl2z92nvh","tag_id":"cirp1ghm4006x30ngdquxl0ut","_id":"cirp1ghmz009a30ngea3l6hph"},{"post_id":"cirp1ghkb002930ngl2z92nvh","tag_id":"cirp1ghmy009730ng3v2eo2z5","_id":"cirp1ghmz009b30ngfgsx7qce"}],"Tag":[{"name":"java","_id":"cirp1ghgv000330ng8jq48087"},{"name":"int","_id":"cirp1ghh3000630ngsr3g7cv1"},{"name":"Integer","_id":"cirp1ghhi000a30ngwhtqll75"},{"name":"j2se","_id":"cirp1ghho000d30ngsxdup8aa"},{"name":"SOA","_id":"cirp1ghhs000g30ngee1w2ig0"},{"name":"分布式事务","_id":"cirp1ghhx000l30ngk0uccphb"},{"name":"柔性事务","_id":"cirp1ghi9000r30ngbapp7yg4"},{"name":"消息事务","_id":"cirp1ghid000u30ng9so06w7a"},{"name":"array","_id":"cirp1ghii000x30ng6xf5yok9"},{"name":"print","_id":"cirp1ghim001230ngb1wlqrz1"},{"name":"synchronize","_id":"cirp1ghj5001b30ng6mp4vugz"},{"name":"ArrayList","_id":"cirp1ghja001g30nguy7iyp5i"},{"name":"spring boot","_id":"cirp1ghjg001l30ngecctsrth"},{"name":"junit","_id":"cirp1ghjk001q30ngr3tir01i"},{"name":"测试， spring mvc","_id":"cirp1ghju001v30ng3pnlax4n"},{"name":"Springboot应用中如何针对springmvc的controller写单元测试","_id":"cirp1ghjw001y30ngkr8ojr78"},{"name":"api_verion","_id":"cirp1ghk0002130ngvbtj8xbc"},{"name":"spring mvc","_id":"cirp1ghk7002630ngenl2kua6"},{"name":"mysql","_id":"cirp1ghkd002b30ng1z20n9t3"},{"name":"install","_id":"cirp1ghkf002e30ngqreuultn"},{"name":"database","_id":"cirp1ghkh002h30ngu79ycmqi"},{"name":"数据库","_id":"cirp1ghki002n30ngmqvojl20"},{"name":"主从同步","_id":"cirp1ghkj002o30ngvsvvpoms"},{"name":"master-slave","_id":"cirp1ghkj002p30ngkcgx7sot"},{"name":"react","_id":"cirp1ghkj002q30ngvjtxmbu6"},{"name":"react-native","_id":"cirp1ghkk002t30ng69fi65hc"},{"name":"nodejs","_id":"cirp1ghkk002w30ngztpmonc0"},{"name":"android","_id":"cirp1ghkl002y30ngydgbkbq5"},{"name":"windows","_id":"cirp1ghkl002z30ngtttq86rg"},{"name":"guava","_id":"cirp1ghkm003030ngtxjmuu08"},{"name":"transform objects","_id":"cirp1ghkm003330ngdx48mim9"},{"name":"convert","_id":"cirp1ghkn003630ngx36bvbrs"},{"name":"对象转换","_id":"cirp1ghkn003830ngp85h8h2x"},{"name":"git","_id":"cirp1ghko003930ngen7nnmqm"},{"name":"collect","_id":"cirp1ghkp003c30ngpd3r4fjr"},{"name":"dev","_id":"cirp1ghkq003f30ngmlh0wsz4"},{"name":"collect-of-dev","_id":"cirp1ghkr003j30ngi82kfz2o"},{"name":"branch","_id":"cirp1ghkw003n30ng4vggvwxq"},{"name":"版本控制","_id":"cirp1ghky003q30ng44acxbfc"},{"name":"分支管理","_id":"cirp1ghky003s30ngm1wxzq8p"},{"name":"post","_id":"cirp1ghl0003z30nggzaabpl2"},{"name":"resouce","_id":"cirp1ghl1004130ngxgosob1y"},{"name":"设计模式","_id":"cirp1ghl4004b30nghlnhdrdw"},{"name":"Builder","_id":"cirp1ghl5004e30nga4f0rkjl"},{"name":"design pattern","_id":"cirp1ghl5004h30ngmnojwtyj"},{"name":"io","_id":"cirp1ghl6004j30ngtcewqanl"},{"name":"整理","_id":"cirp1ghl7004m30ngei8icou6"},{"name":"思维导图","_id":"cirp1ghl8004p30ngb4sytc2r"},{"name":"static关键字","_id":"cirp1ghl8004q30ng3pk72yoq"},{"name":"patten","_id":"cirp1ghl9004t30ngbmb1agg6"},{"name":"coding","_id":"cirp1ghla004w30ngmead276k"},{"name":"spring","_id":"cirp1ghlb004z30nghkakdiiv"},{"name":"aop","_id":"cirp1ghlc005230ngema9qgkp"},{"name":"enum","_id":"cirp1ghld005530ngselngb3g"},{"name":"web","_id":"cirp1ghld005830ng2qyfub3p"},{"name":"java web","_id":"cirp1ghlf005b30ng8hmv0n5x"},{"name":"jquery","_id":"cirp1ghlh005f30ng7hqptlik"},{"name":"validate","_id":"cirp1ghlj005i30ng1y3874v3"},{"name":"springboot","_id":"cirp1ghlk005l30ng1yokdeah"},{"name":"itime","_id":"cirp1ghll005o30nga16nryle"},{"name":"支付宝","_id":"cirp1ghlm005p30ngr5txlips"},{"name":"架构","_id":"cirp1ghlm005s30ngi6s9ew91"},{"name":"shiro","_id":"cirp1ghlo005w30nghu1ta2lo"},{"name":"rest","_id":"cirp1ghlo005x30ngnutkt9ve"},{"name":"api","_id":"cirp1ghlp006030ngie4bn0jx"},{"name":"versioning","_id":"cirp1ghlq006230ng6idutdyz"},{"name":"springmvc","_id":"cirp1ghlq006330ngh8ldwwcw"},{"name":"svn","_id":"cirp1ghls006730ngcfb72q5x"},{"name":"spring cache","_id":"cirp1ghlx006g30ngo8i06ps9"},{"name":"redis","_id":"cirp1ghly006j30ngxakwo223"},{"name":"注解","_id":"cirp1ghly006k30ngola80woi"},{"name":"spring data jpa","_id":"cirp1ghm2006s30ngb5nw11cr"},{"name":"mybatis","_id":"cirp1ghm3006t30ngi5guxu5u"},{"name":"接口文档","_id":"cirp1ghm3006u30ng09990goc"},{"name":"RAP","_id":"cirp1ghm4006x30ngdquxl0ut"},{"name":"mock","_id":"cirp1ghm5007030ngav5s1exb"},{"name":"hexo","_id":"cirp1ghm6007230ngjnar28k4"},{"name":"deploy","_id":"cirp1ghm7007530ngk7eionu2"},{"name":"spring cloud","_id":"cirp1ghm8007730ngd7gyvj7o"},{"name":"微服务","_id":"cirp1ghm9007a30ng5ur05259"},{"name":"使用spring-boot+spring-cloud一步步搭建微服务架构","_id":"cirp1ghm9007b30ngv27571ux"},{"name":"读取配置文件","_id":"cirp1ghmb007i30ngmj7hq9bb"},{"name":"property file","_id":"cirp1ghmc007k30ngiyenm8li"},{"name":"linux","_id":"cirp1ghmd007l30ngxtsu33tx"},{"name":"centos","_id":"cirp1ghme007o30ngfusdoi4s"},{"name":"部署","_id":"cirp1ghme007r30ngyhflrrq5"},{"name":"冗余部署","_id":"cirp1ghmf007t30ngmg9tn7aa"},{"name":"nginx","_id":"cirp1ghmg007w30ngfrkc2pmp"},{"name":"api_version","_id":"cirp1ghmi007z30ngzqki0hph"},{"name":"路由","_id":"cirp1ghmi008130ngfd48trcq"},{"name":"jenkins","_id":"cirp1ghmj008230ngsstrk2ll"},{"name":"持续集成","_id":"cirp1ghmk008530ngtn5h9xcx"},{"name":"自动化构建","_id":"cirp1ghml008930ng6unzs3jj"},{"name":"监控","_id":"cirp1ghml008a30ngibwfk50v"},{"name":"集群","_id":"cirp1ghmm008d30ngs45v08wf"},{"name":"monitor","_id":"cirp1ghmn008g30ng1b3ycz2l"},{"name":"FastDFS","_id":"cirp1ghmp008o30ngt6u34nfh"},{"name":"Nginx","_id":"cirp1ghmp008p30ngcrvxuv4n"},{"name":"图片服务器","_id":"cirp1ghmq008q30ng1dtx93w6"},{"name":"github pages","_id":"cirp1ghmr008u30ngfaqmxhto"},{"name":"blog","_id":"cirp1ghms008z30ngy6uloecc"},{"name":"manager","_id":"cirp1ghmt009030ngjbvm8pwk"},{"name":"项目管理","_id":"cirp1ghmu009330ng4axcfr2o"},{"name":"Worktile","_id":"cirp1ghmy009730ng3v2eo2z5"}]}}