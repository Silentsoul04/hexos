{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/images/version.png","path":"images/version.png","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"source/images/java-spring-aop.png","path":"images/java-spring-aop.png","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"source/images/java-monitor.png","path":"images/java-monitor.png","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"source/images/java+io.png","path":"images/java+io.png","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0},{"_id":"themes/next/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0}],"Cache":[{"_id":"source/_posts/git-git常用-把本地项目提交到github.md","shasum":"1253ca309586ce518e60e0423b3f0b042ec34edf","modified":1455940924710},{"_id":"source/_posts/hello-world.md","shasum":"f2d681d071e06495eb62c9435a4c6c7bd84cd4cd","modified":1455940924711},{"_id":"source/_posts/java-io体系整理.md","shasum":"852f0984ffca5f03e9cec31eeb3d74044ecf3768","modified":1455943198973},{"_id":"source/_posts/java-从代码中去除if-else.md","shasum":"c1df7bdd72854b22b1c00ac9706cc761aa7a5945","modified":1455940924715},{"_id":"source/_posts/jquery-validate常用用法总结.md","shasum":"c4ce8e38ba1737176393776cf1f12fa6345d7130","modified":1455940924719},{"_id":"source/_posts/spring-aop-知识体系整理.md","shasum":"eb118d12df125da77e87bcb8260134872cdbdf67","modified":1455943896224},{"_id":"source/_posts/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存.md","shasum":"a02632a3511ffeb403778fae1272775105735162","modified":1460172357600},{"_id":"source/_posts/springboot-items-项目使用实践-springboot-get-started.md","shasum":"3199e94996c3d3db8afa97bd3a5719dbd198635c","modified":1455940924723},{"_id":"source/_posts/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用.md","shasum":"185e052d7ac21bd22a70c598b5935e52d522ea9a","modified":1460176203524},{"_id":"source/_posts/为你的项目做合理的版本控制管理.md","shasum":"d8a7af1d7c942f8e25a1297c6775cebbe2a00810","modified":1460043821330},{"_id":"source/_posts/使用hexo-deploy直接发布到github.md","shasum":"818610d597c08dbc4ea32c797336108d1caaf87e","modified":1455940924726},{"_id":"source/_posts/在linux下部署spring-boot项目过程记录.md","shasum":"93280eb03394fa70d91fd1155c7eda6b596b0609","modified":1460042916659},{"_id":"source/_posts/如何使用github-pages和hexo搭建简单blog.md","shasum":"1f2d80eb7d7b8c3eaa79afca32768a6fa1b0e6ed","modified":1455940924729},{"_id":"source/_posts/集群监控初步整理.md","shasum":"c99726e3f1b259727e488c3e9d05aa9fae7fd10f","modified":1457755756055},{"_id":"source/images/version.png","shasum":"ed57e84198ae33dd00dfbc8ca048b8caf9862d24","modified":1460172587674},{"_id":"source/tags/index.md","shasum":"195ac93007dc6de96e3d11cf0d70d2fc11ed1827","modified":1455940924732},{"_id":"source/images/java-spring-aop.png","shasum":"9c8c398fa913196dce6c5f480798d8c5afe76293","modified":1455943863131},{"_id":"source/images/java-monitor.png","shasum":"4915f75253878f92fd57b0c9dbe8f542951a9570","modified":1457755756057},{"_id":"source/images/java+io.png","shasum":"71047dc8f77224270787c3c74beeab77f99ae6f1","modified":1455941821110},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925205},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925237},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925240},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925241},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925280},{"_id":"themes/next/test.txt","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925613},{"_id":"themes/next/README.en.md","shasum":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1455940924907},{"_id":"themes/next/README.md","shasum":"b2499c61ef9cf6ee31ed5606ed43ef247c73de63","modified":1455940924910},{"_id":"themes/next/_config.yml","shasum":"299e80f4f279d44d35c2194e4e735d2c12634b0f","modified":1455940924913},{"_id":"themes/next/bower.json","shasum":"d46717b4a025790cda33d78339780c8749aee7fd","modified":1455940924917},{"_id":"themes/next/languages/de.yml","shasum":"3af67eda28640a99e17d06eec0c664e54e95fb2d","modified":1455940924920},{"_id":"themes/next/languages/default.yml","shasum":"982bfffdb6ab495867255e79d852a9adb68bd10c","modified":1455940924923},{"_id":"themes/next/languages/en.yml","shasum":"982bfffdb6ab495867255e79d852a9adb68bd10c","modified":1455940924924},{"_id":"themes/next/languages/fr-FR.yml","shasum":"eb05b50f49a29d46e90e45fabb12a14be6d7631d","modified":1455940924927},{"_id":"themes/next/languages/pt.yml","shasum":"e32711ad646d05911b515cc30e14c57f534a0045","modified":1455940924930},{"_id":"themes/next/languages/ru.yml","shasum":"4d1c2d4f4040d447a3511da51dc9fea7b177a7a6","modified":1455940924933},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"ba22a703638a23fce2cc51fcdfb1ba4dd7bcd114","modified":1455940924939},{"_id":"themes/next/languages/zh-hk.yml","shasum":"f80a494ecf23166152011cb5f4e9174fefa9197c","modified":1455940924942},{"_id":"themes/next/languages/zh-tw.yml","shasum":"f60af901f90fab657a1d27f981ad3381069842d0","modified":1455940924946},{"_id":"themes/next/layout/_layout.swig","shasum":"43dc8e01ca4d2e508db830250f2dcba7ded94830","modified":1455940924949},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"60766ca0cf5ba834d445c3304695d1a7ce0e1a36","modified":1455940924953},{"_id":"themes/next/layout/_macro/post.swig","shasum":"affea948ef5ad04dd089350340af722bcb2e7892","modified":1455940924957},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"c0f68851e8835b41fb60e7a78f096235067f7754","modified":1455940924961},{"_id":"themes/next/layout/_partials/comments.swig","shasum":"93055fc8e034037321280c182997a2a726e10c41","modified":1455940924965},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","shasum":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1455940924967},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"779fc2ec44464d66cadcc85913c49b2d8aad3d22","modified":1455940924970},{"_id":"themes/next/layout/_partials/head.swig","shasum":"471e197800829e9704ba9bb8f2d8f342c3e65c44","modified":1455940924976},{"_id":"themes/next/layout/_partials/header.swig","shasum":"8c8ae71c41722815540950ccefac47d6876d0413","modified":1455940924979},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"3c4d930d34c234725065173780a23673e1c574f5","modified":1455940924982},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1455940924985},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"73e8294939bbbb46755798215c605ebe5af5918f","modified":1455940924994},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1455940924997},{"_id":"themes/next/layout/_partials/search.swig","shasum":"1b86eb85017599392071d1230171e900045f8e69","modified":1455940924988},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1455940925000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"12684840de632eb16e53ffa863166306a756fd4f","modified":1455940925005},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1455940925013},{"_id":"themes/next/layout/_scripts/analytics/facebook-sdk.swig","shasum":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1455940925018},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1455940925023},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"5e1b2b547a8f07ea0e3ab2a97dac9cc7d1e13c9a","modified":1455940925008},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"640d4dda003f54a0dffa4508fba4d91ac0dcfa6e","modified":1455940925028},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"0aad8d447567b683108b274c841c536b2daa176d","modified":1455940925031},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1455940925036},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"b03b2f596b7b9795f63dc4174329bf14aee7a48c","modified":1455940925044},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"701dfc53d750635de2f08f08d072d6ceb83b636c","modified":1455940925047},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1455940925050},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"8eecd19c756df615afb3f5ec6a527cd7bd06d20c","modified":1455940925057},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"de1fc505acbe8dc84f7376fe6ae9871f22d5582e","modified":1455940925061},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"ac600616e83e23ee446a646c57500706936bb45e","modified":1455940925071},{"_id":"themes/next/layout/_scripts/tinysou.swig","shasum":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1455940925077},{"_id":"themes/next/layout/archive.swig","shasum":"40e899e690172d8dd19317b17ec7be94406f114f","modified":1455940925083},{"_id":"themes/next/layout/category.swig","shasum":"c777432e1587826ccad5a4aa50309763a82df52b","modified":1455940925088},{"_id":"themes/next/layout/index.swig","shasum":"56a70d0cd51ce739787da3e07638969ccb6abd2f","modified":1455940925091},{"_id":"themes/next/layout/page.swig","shasum":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1455940925095},{"_id":"themes/next/layout/post.swig","shasum":"e67a6aabe4d71cbcf01a4cace652424bd49acc9b","modified":1455940925095},{"_id":"themes/next/layout/tag.swig","shasum":"06417b0b050c66d816323b6178c9376ba2e58dd9","modified":1455940925095},{"_id":"themes/next/scripts/filters/sticky.js","shasum":"4e4c9a837e186f94f256bd6eabb89b138cfc0db6","modified":1455940925095},{"_id":"themes/next/scripts/merge-configs.js","shasum":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1455940925095},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"99b66949f18398689b904907af23c013be1b978f","modified":1455940925114},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1455940925117},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1455940925122},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"dac21141c7893ab9de697a8183d3b3f4eb7f0a5a","modified":1455940925126},{"_id":"themes/next/source/css/_common/_component/blockquote-center.styl","shasum":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1455940925129},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"0a1730773478d843e123404ab4dae24d7cb0f2b7","modified":1455940925132},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1455940925135},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"cd2ec04433d6c98a0994945475fb47155d1015c0","modified":1455940925139},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1455940925143},{"_id":"themes/next/source/css/_common/_component/group-pictures.styl","shasum":"70d7c3b5f8f2485dcce1a27e2c9b43df988fbc6f","modified":1455940925145},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1455940925148},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"88559b13ce94311405b170a0506ded91273beceb","modified":1455940925151},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"8909298333c6dfc6e3686d85e4d98c76dfcf75c9","modified":1455940925154},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"008d5f951144c7fe5c7e66dac330d5fb715a0a83","modified":1455940925157},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"f28f00b2acb0df0343e77400bcc8246b40ac046c","modified":1455940925160},{"_id":"themes/next/source/css/_common/_component/posts.styl","shasum":"52badf0e8a0a44bb67f16486ada44d945b1aba6b","modified":1455940925164},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1455940925166},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"90a36892f5f595dda58a86901782b1addbdb3b46","modified":1455940925169},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"b8e1b52b7aaa94b7c52d1681225e80f1af1219fa","modified":1455940925173},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1455940925176},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"3702c4c350524622f7dd658b05449fc425a819ef","modified":1455940925180},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"16a98866f5025c050c56e52312228355a16d00d9","modified":1455940925183},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"c46d16429b85570347373fd11db8c222f6ff914e","modified":1455940925186},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"7bdc92a55f2eee20b6b546e93e4566696b459b9d","modified":1455940925189},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"dbb0843ea5aa7c2ac2755a2d1ce60fa662f1b939","modified":1455940925192},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"692c01dcdc612c3e1e245cf93d0ace0a4e2aaf3f","modified":1455940925195},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"a9f5260198225801eb5c16345a69a7e3cab904fe","modified":1455940925199},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"df9e5a418f6e54abe69c1ab84649be46fb0c51a6","modified":1455940925202},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1455940925205},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1455940925208},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"6eaa5d9cb08ecfb2d377a475e541e41fbfe4c1b6","modified":1455940925211},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1455940925214},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"cd6527e4877f62f08e8668b020ec9f9e53f625a9","modified":1455940925217},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"9a9630b7aae08b5008f3a0ff1152bdca427ff644","modified":1455940925220},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"482784c04c0cd15a3f0d86444966fe306af7d13a","modified":1455940925223},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"406b78061c45bda0376ce2360ff2932262f5f2f0","modified":1455940925227},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"627cdd38b34b15c9fc17f4dc332b1be928f8ed0d","modified":1455940925231},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1455940925234},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1455940925236},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1455940925240},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"e4b5b56e1a035c99ebd50d00e93d89e2e8d0b735","modified":1455940925244},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"452e71caf2c37fa5a06f8d9ada81337a57485885","modified":1455940925247},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1455940925250},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"3b0a186e8d9d5cfe30dd611456b61053ea535d7b","modified":1455940925253},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1455940925256},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"f10be4b0c642104a6f533b94ac09e22019aa640e","modified":1455940925259},{"_id":"themes/next/source/css/_schemes/default/_logo.styl","shasum":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1455940925262},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"dd667be3f5f24cebdc15d0262c7d397f23d751c5","modified":1455940925265},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"e315ee6f604c2bcc44a5ef9078f5ce420c153a4b","modified":1455940925268},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"ecd76494cea5fbf592cc13ba1e4ccdfedbc5bf1b","modified":1455940925271},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"932cb9c53d64b086638adca05dcf4e2df239a8f9","modified":1455940925273},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"9bc1cad0c7a9f4fdfa665098fb5c542dc9e640db","modified":1455940925280},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1455940925283},{"_id":"themes/next/source/css/main.styl","shasum":"6bb842ad45a575774299bed3848d46475820fb9f","modified":1455940925286},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1455940925290},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1455940925294},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1455940925298},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1455940925301},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1455940925304},{"_id":"themes/next/source/images/cc-by.svg","shasum":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1455940925308},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1455940925309},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1455940925310},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1455940925310},{"_id":"themes/next/source/images/quote-l.svg","shasum":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1455940925311},{"_id":"themes/next/source/images/quote-r.svg","shasum":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1455940925312},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1455940925313},{"_id":"themes/next/source/js/bootstrap.js","shasum":"5a963f40fb81d265a31679f8f543e50ffdcc7485","modified":1455940925313},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"97640be11a524b203781c1a03f623ef0b9195a02","modified":1455940925314},{"_id":"themes/next/source/js/fancy-box.js","shasum":"fbeabc936667a9e15556c8defb5fcd582add8067","modified":1455940925315},{"_id":"themes/next/source/js/helpers.js","shasum":"69d8ae9b686a82e3a4397b61a477eb8da68bd153","modified":1455940925316},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"ccb32e0a1acf798337c9697e1aab5484b52f9df4","modified":1455940925317},{"_id":"themes/next/source/js/motion.js","shasum":"a9327a3c0a5df289799c5ffe3e8bf7dd6e407797","modified":1455940925317},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"fc57202d8d952fceb3f1ad5b6e7183f47a3f1a0e","modified":1455940925374},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1455940925381},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455940925382},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455940925383},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1455940925384},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1455940925385},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1455940925386},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1455940925387},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1455940925390},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1455940925391},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1455940925392},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1455940925393},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1455940925393},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1455940925394},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1455940925404},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1455940925413},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1455940925418},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1455940925422},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1455940925426},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1455940925432},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1455940925438},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1455940925449},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1455940925452},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1455940925456},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1455940925459},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1455940925463},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1455940925512},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","shasum":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1455940925550},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","shasum":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1455940925553},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","shasum":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1455940925556},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","shasum":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1455940925562},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","shasum":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1455940925563},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1455940925569},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1455940925599},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1455940925606},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1455940925613},{"_id":"themes/next/test/helpers.js","shasum":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1455940925621},{"_id":"themes/next/test/intern.js","shasum":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1455940925627},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1455940925470},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1455940925486},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1455940925508},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1455940925542},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1455940925504},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1455940925586},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1455940925499},{"_id":"public/tags/index.html","modified":1460176284369,"shasum":"8db0179372020e8577dc05e5d76c86f88526e6c2"},{"_id":"public/2016/04/09/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用/index.html","modified":1460176284487,"shasum":"555efa5d2a41e4f6301b6704b5039a8ca797f7e1"},{"_id":"public/2016/04/09/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存/index.html","modified":1460176284564,"shasum":"a8db9abf900a24d65acb15a79a68d0446c6d7c80"},{"_id":"public/2016/04/07/为你的项目做合理的版本控制管理/index.html","modified":1460176284637,"shasum":"f2545add6d943ff080076a50859b8ad0f2398075"},{"_id":"public/2016/03/21/在linux下部署spring-boot项目过程记录/index.html","modified":1460176284723,"shasum":"e8b299c1bc13c8d823407a285f5d43c352ba82cf"},{"_id":"public/2016/03/11/集群监控初步整理/index.html","modified":1460176284796,"shasum":"483bdab6f732681e89c254212a041ec6b77c8212"},{"_id":"public/2016/02/20/spring-aop-知识体系整理/index.html","modified":1460176284866,"shasum":"d96690663293a73fca46c1fbfc69371ea08273c4"},{"_id":"public/2016/02/20/java-io体系整理/index.html","modified":1460176284929,"shasum":"442cc865c85f094b8c2683008bddb08f1f00f179"},{"_id":"public/2016/02/20/hello-world/index.html","modified":1460176285000,"shasum":"798ddccf12b89402e08f84a72e7e64e47c401abe"},{"_id":"public/2016/02/02/java-从代码中去除if-else/index.html","modified":1460176285072,"shasum":"9b4db08e423ff4dcea410184e6f63ad56975af17"},{"_id":"public/2016/02/01/springboot-items-项目使用实践-springboot-get-started/index.html","modified":1460176285146,"shasum":"0b1d139be77b1415ef89f7fbee5abd8c51c5c021"},{"_id":"public/2016/01/04/jquery-validate常用用法总结/index.html","modified":1460176285232,"shasum":"1e47da53e348152f71c8750fe20e74766aba8fd3"},{"_id":"public/2015/12/31/git-git常用-把本地项目提交到github/index.html","modified":1460176285307,"shasum":"6eb2ac01f29289b6b4f7323deee3b1b3f6fc0fb8"},{"_id":"public/2015/12/31/使用hexo-deploy直接发布到github/index.html","modified":1460176285377,"shasum":"dfee3883ebcfdf498b7df0815ce11ecda3e39b22"},{"_id":"public/2015/12/31/如何使用github-pages和hexo搭建简单blog/index.html","modified":1460176285449,"shasum":"db9a789ead1b5089ef00dad71bce7257e5831221"},{"_id":"public/archives/index.html","modified":1460176285500,"shasum":"5a45d5db25e644806fedc9f80e04f3b24b263be1"},{"_id":"public/archives/page/2/index.html","modified":1460176285560,"shasum":"730b10a4a65c8ab02bd47eed69033d9ce4f88216"},{"_id":"public/archives/2015/index.html","modified":1460176285610,"shasum":"a7e2dbab3595492c0d60c9d5d615cf3b18f0617b"},{"_id":"public/archives/2015/12/index.html","modified":1460176285666,"shasum":"1b0b6ccf8e45ea47bd4de7e753e80d1775ac1bdb"},{"_id":"public/archives/2016/index.html","modified":1460176285725,"shasum":"1cb0f91d2806f8c25234453059468ef6c4a2a758"},{"_id":"public/archives/2016/page/2/index.html","modified":1460176285776,"shasum":"a401de4eace2c92a494a7e7af331f76c31fa402b"},{"_id":"public/archives/2016/01/index.html","modified":1460176285834,"shasum":"272a4c55a232dce0dfa7784bab2e4943347457be"},{"_id":"public/archives/2016/02/index.html","modified":1460176285882,"shasum":"1083d4f4d33b363e7980bd9a91a48c9519aa1185"},{"_id":"public/archives/2016/03/index.html","modified":1460176285939,"shasum":"fe0a4b62a56400be8633efcfafaac60758528922"},{"_id":"public/archives/2016/04/index.html","modified":1460176285991,"shasum":"d399c0dcf2bddb9797419b1481eb0c5866e11500"},{"_id":"public/atom.xml","modified":1460176285996,"shasum":"435019867cdcee85a082091f9c1a9750010194ee"},{"_id":"public/index.html","modified":1460176286073,"shasum":"872581318728a3ff5e79e584acd2d8da9a182bf6"},{"_id":"public/page/2/index.html","modified":1460176286141,"shasum":"9ee2f22bcd66ea8556967049495c81d6a4334605"},{"_id":"public/sitemap.xml","modified":1460176286143,"shasum":"b4f3ffb332aebe932a825f871ab7b51340813a55"},{"_id":"public/tags/git/index.html","modified":1460176286190,"shasum":"971c2302cb2498fbd4fefa60134888433f4b4990"},{"_id":"public/tags/java/index.html","modified":1460176286249,"shasum":"d9d9ff8f8847173c13388004c96f44d0147c858d"},{"_id":"public/tags/监控/index.html","modified":1460176286295,"shasum":"b75cb3149121dbba713afce9e4c74d727a6cd7f2"},{"_id":"public/tags/集群/index.html","modified":1460176286354,"shasum":"d9b39abb9cdfbcc39400af36b4f63d7da1a80ff5"},{"_id":"public/tags/monitor/index.html","modified":1460176286417,"shasum":"38de133ce5b499d6d6a6d732319deb3700b3403f"},{"_id":"public/tags/github-pages/index.html","modified":1460176286471,"shasum":"1ca9a059268a1bdc902331d37cd8d9cce5513491"},{"_id":"public/tags/hexo/index.html","modified":1460176286525,"shasum":"716bfe57d26e3dcdbbbcf00065b30650efe0ea38"},{"_id":"public/tags/blog/index.html","modified":1460176286590,"shasum":"f72d41ee370f6efbd54d028ca45c0951e81a1690"},{"_id":"public/tags/linux/index.html","modified":1460176286648,"shasum":"8cb4fee5b4fcb7062efbe428bb2018bd81b72aaf"},{"_id":"public/tags/centos/index.html","modified":1460176286699,"shasum":"f3ba64b75211e0addbaf45fa4a736dc7823dcfd8"},{"_id":"public/tags/spring-boot/index.html","modified":1460176286757,"shasum":"78366c2b8c7db42d32bc1b4a6b29f5805180c6b3"},{"_id":"public/tags/部署/index.html","modified":1460176286815,"shasum":"46b4f113dfc89029b46cdebdd4a74ad876c381a5"},{"_id":"public/tags/deploy/index.html","modified":1460176286890,"shasum":"3f87c184cf0903fd2ecc163032a85fc0c7e2f789"},{"_id":"public/tags/svn/index.html","modified":1460176286943,"shasum":"9cea5567cc06e71dc0a723be00183b9245832490"},{"_id":"public/tags/版本控制/index.html","modified":1460176286986,"shasum":"7e5cbebf1a2ab7fd6fd9035decd892a60e2028c3"},{"_id":"public/tags/分支管理/index.html","modified":1460176287038,"shasum":"32daf036675580a221b967546325305ef18d24b6"},{"_id":"public/tags/mysql/index.html","modified":1460176287083,"shasum":"851dedb0bb53f84bde7ab225f19ba7fee2d93da4"},{"_id":"public/tags/数据库/index.html","modified":1460176287129,"shasum":"32eb3ddafc79a06a7a4ee58a3ce49ea4ead2ab1b"},{"_id":"public/tags/spring-data-jpa/index.html","modified":1460176287183,"shasum":"2315382e41edfdeca4c39fbf0da63027f3291e8b"},{"_id":"public/tags/mybatis/index.html","modified":1460176287231,"shasum":"e508309dea30dd4608db00477f4167145cffd911"},{"_id":"public/tags/springboot/index.html","modified":1460176287273,"shasum":"96a88634107b6066a580267e08284e75709a57b0"},{"_id":"public/tags/itime/index.html","modified":1460176287328,"shasum":"0b7a150d0a6b6946d2cae6e71c04677d80c7e9b7"},{"_id":"public/tags/spring-cache/index.html","modified":1460176287367,"shasum":"bea8b871dac25bf6b9fc22d2bd91f9d7113bfefa"},{"_id":"public/tags/redis/index.html","modified":1460176287418,"shasum":"90ee756eca9e3b69642c208668e1e3b507838e4b"},{"_id":"public/tags/注解/index.html","modified":1460176287462,"shasum":"2b353950bec61dd595866caa2a03dd406b465df1"},{"_id":"public/tags/spring/index.html","modified":1460176287506,"shasum":"138b3b16c4e167a1fddde29f8ad28fe80734739a"},{"_id":"public/tags/aop/index.html","modified":1460176287557,"shasum":"604199549c6c5c9918a3ef0c3ca51de9a3bfc1e2"},{"_id":"public/tags/思维导图/index.html","modified":1460176287612,"shasum":"aaf0ad7715a4145f316bd2f2ce8f410cbc97fd1e"},{"_id":"public/tags/jquery/index.html","modified":1460176287654,"shasum":"b4a58f124c2c16d2854e6a9853edf1d6b8361af6"},{"_id":"public/tags/validate/index.html","modified":1460176287709,"shasum":"7427a598133a0d5e538de2d7b9a8bd5f7804f411"},{"_id":"public/tags/patten/index.html","modified":1460176287756,"shasum":"32b1d5116dec82805d785374a822c878d305e907"},{"_id":"public/tags/coding/index.html","modified":1460176287782,"shasum":"8226b633c652fd2e8f13d767ee662deae5a6c3c3"},{"_id":"public/tags/io/index.html","modified":1460176287846,"shasum":"df66a5a4597cb7783815d9bb7baad592aef173c8"},{"_id":"public/tags/整理/index.html","modified":1460176287891,"shasum":"5c4739c99e7e5d799b89f1f209b46ad9affea404"}],"Category":[],"Data":[],"Page":[{"title":"All tags","date":"2016-01-04T07:25:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-01-04 15:25:00\ntype: \"tags\"\n---\n","updated":"2016-02-20T04:02:04.732Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cimsn3m5i0003fwngv6cg1lhp"}],"Post":[{"title":"[git]git常用-把本地项目提交到github","date":"2015-12-31T10:04:12.000Z","_content":"\n### 1.把本地项目提交到github\ntouch README.md //新建说明文件\ngit init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录\ngit add . //添加当前目录中的所有文件到索引\ngit commit -m \"first commit\" //提交到本地源码库，并附加提交注释\ngit remote add origin https://github.com/chape/test.git //添加到远程项目，别名为origin\ngit push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交\n\n\n### 2.如果有error: failed to push some refs to 'https://github.com/YihuaWanglv/myhexo.git'\n有如下几种解决方法：\n\n1.使用强制push的方法：\n$ git push -u origin master -f \n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n2.push前先将远程repository修改pull下来\n$ git pull origin master\n$ git push -u origin master\n3.若不想merge远程和本地修改，可以先创建新的分支：\n$ git branch [name]\n然后push\n$ git push -u origin [name]\n\n\n","source":"_posts/git-git常用-把本地项目提交到github.md","raw":"---\ntitle: '[git]git常用-把本地项目提交到github'\ndate: 2015-12-31 18:04:12\ntags: [git]\n---\n\n### 1.把本地项目提交到github\ntouch README.md //新建说明文件\ngit init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录\ngit add . //添加当前目录中的所有文件到索引\ngit commit -m \"first commit\" //提交到本地源码库，并附加提交注释\ngit remote add origin https://github.com/chape/test.git //添加到远程项目，别名为origin\ngit push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交\n\n\n### 2.如果有error: failed to push some refs to 'https://github.com/YihuaWanglv/myhexo.git'\n有如下几种解决方法：\n\n1.使用强制push的方法：\n$ git push -u origin master -f \n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n2.push前先将远程repository修改pull下来\n$ git pull origin master\n$ git push -u origin master\n3.若不想merge远程和本地修改，可以先创建新的分支：\n$ git branch [name]\n然后push\n$ git push -u origin [name]\n\n\n","slug":"git-git常用-把本地项目提交到github","published":1,"updated":"2016-02-20T04:02:04.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m530000fwng27rgpx0m","sticky":0},{"title":"集群监控初步整理","date":"2016-03-11T01:53:20.000Z","_content":"\n### 集群监控初步整理\n\n![](/images/java-monitor.png)\n","source":"_posts/集群监控初步整理.md","raw":"---\ntitle: 集群监控初步整理\ndate: 2016-03-11 09:53:20\ntags: [java,监控,集群,monitor]\n---\n\n### 集群监控初步整理\n\n![](/images/java-monitor.png)\n","slug":"集群监控初步整理","published":1,"updated":"2016-03-12T04:09:16.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m6k0004fwng00hom51c","sticky":0},{"title":"如何使用github-pages和hexo搭建简单blog","date":"2015-12-31T07:41:30.000Z","_content":"\n前言\n- github，写代码必备\n- hexo，一个很方便的静态blog生成系统\n- 还不太熟悉，暂时不放图片\n\n步骤\n### 1.首先得有一个github账号\n没有的得先上github创建一个\n### 2.创建一个repositories\n- Repository name的填写格式是xxx.github.io\n- xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）\n- 创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置\n- 使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog\n- 接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式\n- 最后，点击“Publish page”，你的页面就公布出来了。\n\n### 3.安装hexo\n- 首先安装git\n- 安装node\n- 安装npm\n- 安装hexo\nnpm install hexo-cli -g\nnpm install hexo --save\n\n- hexo初始化\n**根据自己需要创建一个hexo文件夹\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      ├── _drafts\n|      └── _posts\n└── themes\n\n- 安装Hexo插件\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n```\n\n- 本地查看效果\n执行hexo server命令启动，然后访问localhost:4000查看效果\n\n\n### 4.创建一篇文章\n- git shell进入之前创建的hexo文件夹，hexo new \"hello world\"创建一篇新的文章\n\n### 5.同步并发布\n- hexo g 生成静态文件\n- git clone https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\n- 复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内\n\n### 6.提交更改到github\n- git add *\n- git commit -m \"代码提交信息\"\n- git push origin master\n- 输入用户名密码\n\n这样再次访问你github上的blog地址，即可发现内容已更新\n\n### 7.使用hexo别的主题美化blog样式\n- 我这里选用的是简介美观的next主题\n- 在终端窗口下，定位到 Hexo 站点目录下\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n- 启用 NexT 主题\n克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。\n- 验证主题是否启用\n运行 hexo s --debug，并访问 http://localhost:4000，确保站点正确运行\n\n### 8.同步新的更改\n现在要把新的更改同步上github，重新执行步骤5和6即可。\n当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行","source":"_posts/如何使用github-pages和hexo搭建简单blog.md","raw":"---\ntitle: 如何使用github-pages和hexo搭建简单blog\ndate: 2015-12-31 15:41:30\ntags: [git,github pages,hexo,blog]\n---\n\n前言\n- github，写代码必备\n- hexo，一个很方便的静态blog生成系统\n- 还不太熟悉，暂时不放图片\n\n步骤\n### 1.首先得有一个github账号\n没有的得先上github创建一个\n### 2.创建一个repositories\n- Repository name的填写格式是xxx.github.io\n- xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）\n- 创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置\n- 使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog\n- 接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式\n- 最后，点击“Publish page”，你的页面就公布出来了。\n\n### 3.安装hexo\n- 首先安装git\n- 安装node\n- 安装npm\n- 安装hexo\nnpm install hexo-cli -g\nnpm install hexo --save\n\n- hexo初始化\n**根据自己需要创建一个hexo文件夹\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      ├── _drafts\n|      └── _posts\n└── themes\n\n- 安装Hexo插件\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n```\n\n- 本地查看效果\n执行hexo server命令启动，然后访问localhost:4000查看效果\n\n\n### 4.创建一篇文章\n- git shell进入之前创建的hexo文件夹，hexo new \"hello world\"创建一篇新的文章\n\n### 5.同步并发布\n- hexo g 生成静态文件\n- git clone https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\n- 复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内\n\n### 6.提交更改到github\n- git add *\n- git commit -m \"代码提交信息\"\n- git push origin master\n- 输入用户名密码\n\n这样再次访问你github上的blog地址，即可发现内容已更新\n\n### 7.使用hexo别的主题美化blog样式\n- 我这里选用的是简介美观的next主题\n- 在终端窗口下，定位到 Hexo 站点目录下\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n- 启用 NexT 主题\n克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。\n- 验证主题是否启用\n运行 hexo s --debug，并访问 http://localhost:4000，确保站点正确运行\n\n### 8.同步新的更改\n现在要把新的更改同步上github，重新执行步骤5和6即可。\n当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行","slug":"如何使用github-pages和hexo搭建简单blog","published":1,"updated":"2016-02-20T04:02:04.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m6q000dfwng04eb68ms","sticky":0},{"title":"在linux下部署spring boot项目过程记录","date":"2016-03-21T09:52:34.000Z","_content":"\n\n\n# 在linux下部署spring boot项目过程记录\n\n\n\n## 说明\n本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用\n\n## 环境说明\nlinux版本：CentOs7\n配备的开发环境软件服务：\n    - mysql（centos下默认使用mariadb，也可以，两者兼容）\n    - jdk\n    - ftp\n    - redis\n\n### 1. linux下开放端口\n先把一些已知要用到的端口放开了，省的后面要用到的时候连不上\n由于centos7默认没有iptables服务，所以需要先安装\n首先暂停防火墙\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\nThen, install the iptables-services package:\n```\nyum install iptables-services\n```\nEnable the service at boot-time:\n```\nsystemctl enable iptables\n```\n\n配置要放开的端口\n```\niptables -I INPUT -p tcp --dport 80 -j ACCEPT\niptables -I INPUT -p tcp --dport 22 -j ACCEPT\niptables -I INPUT -p tcp --dport 3306 -j ACCEPT\niptables -I INPUT -p tcp --dport 8080 -j ACCEPT\niptables -I INPUT -p tcp --dport 21 -j ACCEPT\niptables -I INPUT -p tcp --dport 8081 -j ACCEPT\n```\n保存配置\n```\nservice iptables save\nor\n/usr/libexec/iptables/iptables.init save\n```\n\nManaging the service开启停止防火墙服务\n```\nsystemctl [stop|start|restart] iptables\n```\n\n\n### 2. linux下安装使用mysql\n一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel\n然而，在centos7下这样安装的时候，却发现mysql-server安装不上。\n原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。\n那么，centos7下安装mysql就有两种方式\n1）使用mariadb；\n2）卸载mariadb，安装mysql\n\n#### 方法1:使用mariadb\n```\nyum install mariadb-server mariadb\nsystemctl start mariadb\nmysql -u root -p\n```\n\n#### 方法2:安装mysql：\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n安装成功后重启mysql服务。\n```\n# service mysqld restart\n```\n初次安装mysql，root账户没有密码。\n```\n[root@yl-web yl]# mysql -u root\n```\n设置密码\n```\nmysql> set password for 'root'@'localhost' =password('password');\n```\n\n#### 实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\n记录如下：\n1）在进入mysql工具时，总是有错误提示:\n```\n# mysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n```\n解决：方法操作很简单，如下：\n```\n# /etc/init.d/mysql stop\n# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n# mysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n# /etc/init.d/mysqld restart\n# mysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n```\n\n2）MySQL服务在启动的时候，不能创建pid文件。\n\n在终端看一下该目录是否存在，果然，不存在。\n于是，创建了/var/run/mysqld/目录，重启MySQL服务\n```\n[root@spark01 ~]# mkdir -p /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。\n```\n[root@spark01 ~]# ls -ld /var/run/mysqld/\ndrwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/\n[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n\n\n### 3. linux下安装jdk\n一、卸载系统自带的openjdk\n1、查询系统内置的jdk，使用命令如下：\n```\nrpm -qa | grep java\n```\n此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。\n如下：\npython-javapackages-3.4.1-11.el7.noarch\njava-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\njava-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\njava-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\ntzdata-java-2015g-1.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\njava-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n\n2、进行卸载，使用命令如下：\n```\nrpm -e --nodeps jdk相关名称\n```\n依次卸载如下：\n```\nrpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps tzdata-java-2015g-1.el7.noarch\nrpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n```\n\n二、jdk安装\n1、下载jdk并上传到/usr/java目录\njdk7下载地址为：http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。\n\n2、解压安装\n进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)\n```\nrpm -ivh jdk-7u79-linux-x64.rpm\n```\n\n3、配置profile文件\n运行如下命令\n```\nvi /etc/profile\n```\n将如下内容添加到profile文件末尾并保持\n```\nexport JAVA_HOME=/usr/java/jdk1.7.0_79\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin \n```\n/usr/java/jdk1.7.0_79 指的是jdk的路径\n\n保存之后，运行如下命令使配置生效\n```\nsource /etc/profile\n```\n检查jdk是否安装成功，运行如下命令\n```\njava -version\n```\n\n\n### 4. linux下安装redis\n1）方法1：使用命令安装\n安装redis:\n```\nyum -y install redis\n```\n启动/停止/重启 Redis\n启动服务：\n```\nsystemctl start redis.service\n```\n停止服务：\n```\nsystemctl stop redis.service\n```\n重启服务：\n```\nsystemctl restart redis.service\n```\n检查状态：\n```\nsystemctl status redis.service\n```\n随系统启动服务：\n```\nsystemctl enable redis.service\n```\n\n2）方法二：编译安装\n下载安装编译:\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nmake install\n```\n设置配置文件路径:\n```\nmkdir -p /etc/redis && cp redis.conf /etc/redis\n```\n修改配置文件：\n```\nvim /etc/redis/redis.conf\n```\n修改为： daemonize yes\n启动Redis:\n```\n/usr/local/bin/redis-server /etc/redis/redis.conf\n```\n\n\n\n### 5. linux配置ftp服务\n在安装前查看是否已安装vsftpd\n```\n[root@localhost ~]# rpm -q vsftpd\nvsftpd-3.0.2-9.el7.x86_64\n```\n如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：\n```\n[root@localhost ~]# yum -y install vsftpd\n```\n查看一下vsftpd安装在哪：\n```\n[root@localhost ~]# whereis vsftpd\nvsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz\n```\n启动vsftpd服务：\n```\n[root@localhost ~]# systemctl start vsftpd.service\n```\n修改配置\n```\nvi /etc/vsftpd/vsftpd.conf\n```\n修改如下配置：\nanonymous_enable=NO\nchroot_local_user=YES\nallow_writeable_chroot=YES #加上这行解决了无法登陆的问题\n\n启动／重新启动ftp\n```\nservice vsftpd start\nservice vsftpd restart\n```\n设置开机启动ftp\n```\nchkconfig vsftpd on\n```\n配置用户\n```\n[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser\n[root@localhost ~]# passwd ftpuser\n[root@localhost ~]# 输入密码\n```\n把 /var/www/html 的所有权给ftpuser.root\n```\n[root@localhost ~]# chown -R ftpuser.root /var/www/html\n```\n\n\n### 6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\n#### 编译打包：\n方法1：使用maven-assembly-plugin插件\n```\n<plugin>\n    <artifactId>maven-assembly-plugin</artifactId> \n    <configuration> \n        <archive>\n            <manifest>\n                <mainClass>com.iyihua.itimes.App</mainClass></manifest> \n            </archive>\n        <descriptorRefs>\n            <descriptorRef> jar-with-dependencies </descriptorRef> \n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id> \n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution> \n    </executions>\n</plugin>\n```\n运行命令：mvn assembly:assembly\n或者命令：mvn package\n\n由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是\n```\nclass {}\n```\n解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。\n\n方法2：使用spring-boot-maven-plugin插件\n由于我的project是spring boot项目，所以可以使用此方法\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>com.iyihua.itimes.App</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n运行mvn package打jar包，done！\n\n#### 上传并启动\n连接sftp\nlcd 打开本地路径\ncd 进入服务器目标路径\nput xxx.jar 把目标jar包上传到服务器对应路径\njava -jar xxx.jar 启动java程序\n","source":"_posts/在linux下部署spring-boot项目过程记录.md","raw":"---\ntitle: 在linux下部署spring boot项目过程记录\ndate: 2016-03-21 17:52:34\ntags: [linux,centos,java,spring boot,部署]\n---\n\n\n\n# 在linux下部署spring boot项目过程记录\n\n\n\n## 说明\n本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用\n\n## 环境说明\nlinux版本：CentOs7\n配备的开发环境软件服务：\n    - mysql（centos下默认使用mariadb，也可以，两者兼容）\n    - jdk\n    - ftp\n    - redis\n\n### 1. linux下开放端口\n先把一些已知要用到的端口放开了，省的后面要用到的时候连不上\n由于centos7默认没有iptables服务，所以需要先安装\n首先暂停防火墙\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\nThen, install the iptables-services package:\n```\nyum install iptables-services\n```\nEnable the service at boot-time:\n```\nsystemctl enable iptables\n```\n\n配置要放开的端口\n```\niptables -I INPUT -p tcp --dport 80 -j ACCEPT\niptables -I INPUT -p tcp --dport 22 -j ACCEPT\niptables -I INPUT -p tcp --dport 3306 -j ACCEPT\niptables -I INPUT -p tcp --dport 8080 -j ACCEPT\niptables -I INPUT -p tcp --dport 21 -j ACCEPT\niptables -I INPUT -p tcp --dport 8081 -j ACCEPT\n```\n保存配置\n```\nservice iptables save\nor\n/usr/libexec/iptables/iptables.init save\n```\n\nManaging the service开启停止防火墙服务\n```\nsystemctl [stop|start|restart] iptables\n```\n\n\n### 2. linux下安装使用mysql\n一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel\n然而，在centos7下这样安装的时候，却发现mysql-server安装不上。\n原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。\n那么，centos7下安装mysql就有两种方式\n1）使用mariadb；\n2）卸载mariadb，安装mysql\n\n#### 方法1:使用mariadb\n```\nyum install mariadb-server mariadb\nsystemctl start mariadb\nmysql -u root -p\n```\n\n#### 方法2:安装mysql：\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n安装成功后重启mysql服务。\n```\n# service mysqld restart\n```\n初次安装mysql，root账户没有密码。\n```\n[root@yl-web yl]# mysql -u root\n```\n设置密码\n```\nmysql> set password for 'root'@'localhost' =password('password');\n```\n\n#### 实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\n记录如下：\n1）在进入mysql工具时，总是有错误提示:\n```\n# mysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n```\n解决：方法操作很简单，如下：\n```\n# /etc/init.d/mysql stop\n# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n# mysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n# /etc/init.d/mysqld restart\n# mysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n```\n\n2）MySQL服务在启动的时候，不能创建pid文件。\n\n在终端看一下该目录是否存在，果然，不存在。\n于是，创建了/var/run/mysqld/目录，重启MySQL服务\n```\n[root@spark01 ~]# mkdir -p /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。\n```\n[root@spark01 ~]# ls -ld /var/run/mysqld/\ndrwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/\n[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n\n\n### 3. linux下安装jdk\n一、卸载系统自带的openjdk\n1、查询系统内置的jdk，使用命令如下：\n```\nrpm -qa | grep java\n```\n此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。\n如下：\npython-javapackages-3.4.1-11.el7.noarch\njava-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\njava-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\njava-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\ntzdata-java-2015g-1.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\njava-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n\n2、进行卸载，使用命令如下：\n```\nrpm -e --nodeps jdk相关名称\n```\n依次卸载如下：\n```\nrpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps tzdata-java-2015g-1.el7.noarch\nrpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n```\n\n二、jdk安装\n1、下载jdk并上传到/usr/java目录\njdk7下载地址为：http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。\n\n2、解压安装\n进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)\n```\nrpm -ivh jdk-7u79-linux-x64.rpm\n```\n\n3、配置profile文件\n运行如下命令\n```\nvi /etc/profile\n```\n将如下内容添加到profile文件末尾并保持\n```\nexport JAVA_HOME=/usr/java/jdk1.7.0_79\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin \n```\n/usr/java/jdk1.7.0_79 指的是jdk的路径\n\n保存之后，运行如下命令使配置生效\n```\nsource /etc/profile\n```\n检查jdk是否安装成功，运行如下命令\n```\njava -version\n```\n\n\n### 4. linux下安装redis\n1）方法1：使用命令安装\n安装redis:\n```\nyum -y install redis\n```\n启动/停止/重启 Redis\n启动服务：\n```\nsystemctl start redis.service\n```\n停止服务：\n```\nsystemctl stop redis.service\n```\n重启服务：\n```\nsystemctl restart redis.service\n```\n检查状态：\n```\nsystemctl status redis.service\n```\n随系统启动服务：\n```\nsystemctl enable redis.service\n```\n\n2）方法二：编译安装\n下载安装编译:\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nmake install\n```\n设置配置文件路径:\n```\nmkdir -p /etc/redis && cp redis.conf /etc/redis\n```\n修改配置文件：\n```\nvim /etc/redis/redis.conf\n```\n修改为： daemonize yes\n启动Redis:\n```\n/usr/local/bin/redis-server /etc/redis/redis.conf\n```\n\n\n\n### 5. linux配置ftp服务\n在安装前查看是否已安装vsftpd\n```\n[root@localhost ~]# rpm -q vsftpd\nvsftpd-3.0.2-9.el7.x86_64\n```\n如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：\n```\n[root@localhost ~]# yum -y install vsftpd\n```\n查看一下vsftpd安装在哪：\n```\n[root@localhost ~]# whereis vsftpd\nvsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz\n```\n启动vsftpd服务：\n```\n[root@localhost ~]# systemctl start vsftpd.service\n```\n修改配置\n```\nvi /etc/vsftpd/vsftpd.conf\n```\n修改如下配置：\nanonymous_enable=NO\nchroot_local_user=YES\nallow_writeable_chroot=YES #加上这行解决了无法登陆的问题\n\n启动／重新启动ftp\n```\nservice vsftpd start\nservice vsftpd restart\n```\n设置开机启动ftp\n```\nchkconfig vsftpd on\n```\n配置用户\n```\n[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser\n[root@localhost ~]# passwd ftpuser\n[root@localhost ~]# 输入密码\n```\n把 /var/www/html 的所有权给ftpuser.root\n```\n[root@localhost ~]# chown -R ftpuser.root /var/www/html\n```\n\n\n### 6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\n#### 编译打包：\n方法1：使用maven-assembly-plugin插件\n```\n<plugin>\n    <artifactId>maven-assembly-plugin</artifactId> \n    <configuration> \n        <archive>\n            <manifest>\n                <mainClass>com.iyihua.itimes.App</mainClass></manifest> \n            </archive>\n        <descriptorRefs>\n            <descriptorRef> jar-with-dependencies </descriptorRef> \n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id> \n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution> \n    </executions>\n</plugin>\n```\n运行命令：mvn assembly:assembly\n或者命令：mvn package\n\n由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是\n```\nclass {}\n```\n解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。\n\n方法2：使用spring-boot-maven-plugin插件\n由于我的project是spring boot项目，所以可以使用此方法\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>com.iyihua.itimes.App</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n运行mvn package打jar包，done！\n\n#### 上传并启动\n连接sftp\nlcd 打开本地路径\ncd 进入服务器目标路径\nput xxx.jar 把目标jar包上传到服务器对应路径\njava -jar xxx.jar 启动java程序\n","slug":"在linux下部署spring-boot项目过程记录","published":1,"updated":"2016-04-07T15:28:36.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m6w000lfwngmwjx259k","sticky":0},{"title":"使用hexo-deploy直接发布到github","date":"2015-12-31T09:08:52.000Z","_content":"\n本文说明如何使用hexo deploy直接提交到github发布文章。\n\n### 1.npm安装需要的东西\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-deployer-ftpsync --save\n\n\n### 2.修改配置文件_config.yml\ndeploy:\n  type: git\n  repository: https://github.com/YihuaWanglv/yihuawanglv.github.io.git\n  branch: master\n\n### 3.执行命令提交发布\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n\nover.\n\n\n### 参考：https://hexo.io/zh-cn/docs/deployment.html\n","source":"_posts/使用hexo-deploy直接发布到github.md","raw":"---\ntitle: 使用hexo-deploy直接发布到github\ndate: 2015-12-31 17:08:52\ntags: [hexo,deploy]\n---\n\n本文说明如何使用hexo deploy直接提交到github发布文章。\n\n### 1.npm安装需要的东西\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-deployer-ftpsync --save\n\n\n### 2.修改配置文件_config.yml\ndeploy:\n  type: git\n  repository: https://github.com/YihuaWanglv/yihuawanglv.github.io.git\n  branch: master\n\n### 3.执行命令提交发布\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n\nover.\n\n\n### 参考：https://hexo.io/zh-cn/docs/deployment.html\n","slug":"使用hexo-deploy直接发布到github","published":1,"updated":"2016-02-20T04:02:04.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m74000vfwngjudmf0z0","sticky":0},{"title":"为你的项目做合理的版本控制管理","date":"2016-04-07T15:32:15.000Z","_content":"\n### 一款经典的分支管理规范\n![](/images/version.png)\n\n### \n我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。\n\n1.\n最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。\n\n2.\n我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。\n\n3.\n当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。\n\n4.\n当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。\n\n5.\n当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。\n\n6.\n对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。","source":"_posts/为你的项目做合理的版本控制管理.md","raw":"---\ntitle: 为你的项目做合理的版本控制管理\ndate: 2016-04-07 23:32:15\ntags: [git,svn,版本控制,分支管理]\n---\n\n### 一款经典的分支管理规范\n![](/images/version.png)\n\n### \n我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。\n\n1.\n最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。\n\n2.\n我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。\n\n3.\n当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。\n\n4.\n当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。\n\n5.\n当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。\n\n6.\n对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。","slug":"为你的项目做合理的版本控制管理","published":1,"updated":"2016-04-07T15:43:41.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m78000zfwng5jqnp223","sticky":0},{"title":"[springboot]在spring项目中连接数据库以及spring-datajpa和mybatis的使用","date":"2016-04-09T03:37:07.000Z","_content":"\n## 1.在项目中添加数据库配置（添加数据源等配置）\nspring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。\n比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。\n如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。\n在启动类添加注解：\n@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}\n\n回到数据源配置上来。\n首先,在配置文件application.properties里面配置数据库url\n```\nspring.datasource.url=jdbc:mysql://localhost/dbname\nspring.datasource.username=username\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n使用mysql数据库，还需要添加maven依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n然后，添加数据库配置类\n\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        return sessionFactory.getObject();\n    }\n}\n```\n如此，项目中就有了数据源\n\n\n## 2.在项目中使用spring-data-jpa\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n添加Repository类：\n```\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.CrudRepository;\n\nimport com.xxx.xxx.model.User;\n\npublic interface UserRepository extends CrudRepository<User, Long> {\n\n    Page<User> findAll(Pageable pageable);\n    Page<User> findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);\n    User findByNameAndTypeAllIgnoringCase(String name, Integer type);\n    User findByName(String name);\n}\n```\npring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现\n这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。\n然后你只需添加一些你需要的额外接口方法。\n同样你只需按照其约定的方式写好接口方法，而不需要具体实现。\n\n使用：\n在需要的地方注解注入即可。\n@Autowrite UserRepository userRepository;\n\n\n## 3.在项目中使用mybatis\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.2.2</version>\n</dependency>\n```\n\nmybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。\n你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。\n\n注解sql例子：\n```\npublic interface ItemMapper {\n    @Select(\"select * from item\")\n    List<Item> findAll();\n}\n```\n而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。\n\n当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。\n首先需要改一下DatabaseConfig配置类：\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\n@MapperScan(basePackages=\"com.xxx.xxx.mapper\")\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        sessionFactory.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        return sessionFactory.getObject();\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);\n    }\n}\n```\n添加mybatis配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <package name=\"com.xxx.xxx.model\"/>\n    </typeAliases>\n    <mappers>\n        <mapper resource=\"mapper/xxxMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n具体Mapper实现类：\n```\n@Component\npublic class ItemMapper {\n    @Autowired private SqlSessionTemplate sqlSessionTemplate;\n\n    public Item selectItemById(long id) {\n        return this.sqlSessionTemplate.selectOne(\"selectItemById\", id);\n    }\n}\n```\n\ndone！","source":"_posts/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用.md","raw":"---\ntitle: '[springboot]在spring项目中连接数据库以及spring-datajpa和mybatis的使用'\ndate: 2016-04-09 11:37:07\ntags: [spring boot,mysql,数据库,spring data jpa,mybatis]\n---\n\n## 1.在项目中添加数据库配置（添加数据源等配置）\nspring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。\n比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。\n如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。\n在启动类添加注解：\n@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}\n\n回到数据源配置上来。\n首先,在配置文件application.properties里面配置数据库url\n```\nspring.datasource.url=jdbc:mysql://localhost/dbname\nspring.datasource.username=username\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n使用mysql数据库，还需要添加maven依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n然后，添加数据库配置类\n\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        return sessionFactory.getObject();\n    }\n}\n```\n如此，项目中就有了数据源\n\n\n## 2.在项目中使用spring-data-jpa\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n添加Repository类：\n```\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.CrudRepository;\n\nimport com.xxx.xxx.model.User;\n\npublic interface UserRepository extends CrudRepository<User, Long> {\n\n    Page<User> findAll(Pageable pageable);\n    Page<User> findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);\n    User findByNameAndTypeAllIgnoringCase(String name, Integer type);\n    User findByName(String name);\n}\n```\npring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现\n这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。\n然后你只需添加一些你需要的额外接口方法。\n同样你只需按照其约定的方式写好接口方法，而不需要具体实现。\n\n使用：\n在需要的地方注解注入即可。\n@Autowrite UserRepository userRepository;\n\n\n## 3.在项目中使用mybatis\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.2.2</version>\n</dependency>\n```\n\nmybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。\n你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。\n\n注解sql例子：\n```\npublic interface ItemMapper {\n    @Select(\"select * from item\")\n    List<Item> findAll();\n}\n```\n而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。\n\n当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。\n首先需要改一下DatabaseConfig配置类：\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\n@MapperScan(basePackages=\"com.xxx.xxx.mapper\")\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        sessionFactory.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        return sessionFactory.getObject();\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);\n    }\n}\n```\n添加mybatis配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <package name=\"com.xxx.xxx.model\"/>\n    </typeAliases>\n    <mappers>\n        <mapper resource=\"mapper/xxxMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n具体Mapper实现类：\n```\n@Component\npublic class ItemMapper {\n    @Autowired private SqlSessionTemplate sqlSessionTemplate;\n\n    public Item selectItemById(long id) {\n        return this.sqlSessionTemplate.selectOne(\"selectItemById\", id);\n    }\n}\n```\n\ndone！","slug":"springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用","published":1,"updated":"2016-04-09T04:30:03.524Z","_id":"cimsn3m7e0017fwngm6wdb548","comments":1,"layout":"post","photos":[],"link":"","sticky":0},{"title":"[springboot][items][项目使用实践]springboot get started","date":"2016-02-01T09:10:18.000Z","_content":"\n往后将通过一个时间记录web app项目，实践并记录spring boot的使用\n为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。\n\n### 1.pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\n","source":"_posts/springboot-items-项目使用实践-springboot-get-started.md","raw":"---\ntitle: '[springboot][items][项目使用实践]springboot get started'\ndate: 2016-02-01 17:10:18\ntags: [springboot,itime]\n---\n\n往后将通过一个时间记录web app项目，实践并记录spring boot的使用\n为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。\n\n### 1.pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\n","slug":"springboot-items-项目使用实践-springboot-get-started","published":1,"updated":"2016-02-20T04:02:04.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m7p001ifwngxk4ljyv7","sticky":0},{"title":"[spring-boot]springboot实践之在项目中使用spring-cache和redis实现缓存","date":"2016-04-09T02:43:01.000Z","_content":"\n## 1.首先需要准备一个redis服务端作为缓存\nredis下载安装启动，比较简单，请google之。\n\n## 2.项目依赖\n使用spring boot和spring cache，需要springboot依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n```\n连接redis，需要spring data redis和jedis包\n```\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n    </dependency>\n```\n\n## 3.程序配置实现与使用\n不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。\n\n### 添加redis cache相关的config类，如下：\n```\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\n@EnableCaching\npublic class RedisCacheConfig extends CachingConfigurerSupport {\n    @Bean\n    public JedisConnectionFactory redisConnectionFactory() {\n        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();\n        redisConnectionFactory.setHostName(\"127.0.0.1\");\n        redisConnectionFactory.setPort(6379);\n        return redisConnectionFactory;\n    }\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory cf) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(cf);\n        return redisTemplate;\n    }\n    @Bean(name = \"redisCacheManager\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        cacheManager.setDefaultExpiration(300);\n        return cacheManager;\n    }\n}\n```\n@Configuration标记此java类为spring boot的配置类\n@EnableCaching标记为项目启用缓存\n@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean>\n从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。\n其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。\n\n### 如何使用？\n使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可\n下面是一个例子：\n```\n    @Cacheable(value = \"find\")\n    public List<Object> find(Long id) {\n        ...\n    }\n    @CacheEvict(value = \"find\", allEntries = true)\n    public Object saveProject(Object object) {\n        ...\n    }\n    @CacheEvict(value = \"find\" , allEntries = true)\n    public void deleteProject(Long id) {\n        ...\n    }\n```\n这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。\n但如果实际数据改变了怎么办？\n我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：\n每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。\n@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。\n\n这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。","source":"_posts/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存.md","raw":"---\ntitle: '[spring-boot]springboot实践之在项目中使用spring-cache和redis实现缓存'\ndate: 2016-04-09 10:43:01\ntags: [spring boot,spring cache,redis,注解]\n---\n\n## 1.首先需要准备一个redis服务端作为缓存\nredis下载安装启动，比较简单，请google之。\n\n## 2.项目依赖\n使用spring boot和spring cache，需要springboot依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n```\n连接redis，需要spring data redis和jedis包\n```\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n    </dependency>\n```\n\n## 3.程序配置实现与使用\n不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。\n\n### 添加redis cache相关的config类，如下：\n```\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\n@EnableCaching\npublic class RedisCacheConfig extends CachingConfigurerSupport {\n    @Bean\n    public JedisConnectionFactory redisConnectionFactory() {\n        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();\n        redisConnectionFactory.setHostName(\"127.0.0.1\");\n        redisConnectionFactory.setPort(6379);\n        return redisConnectionFactory;\n    }\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory cf) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(cf);\n        return redisTemplate;\n    }\n    @Bean(name = \"redisCacheManager\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        cacheManager.setDefaultExpiration(300);\n        return cacheManager;\n    }\n}\n```\n@Configuration标记此java类为spring boot的配置类\n@EnableCaching标记为项目启用缓存\n@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean>\n从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。\n其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。\n\n### 如何使用？\n使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可\n下面是一个例子：\n```\n    @Cacheable(value = \"find\")\n    public List<Object> find(Long id) {\n        ...\n    }\n    @CacheEvict(value = \"find\", allEntries = true)\n    public Object saveProject(Object object) {\n        ...\n    }\n    @CacheEvict(value = \"find\" , allEntries = true)\n    public void deleteProject(Long id) {\n        ...\n    }\n```\n这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。\n但如果实际数据改变了怎么办？\n我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：\n每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。\n@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。\n\n这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。","slug":"spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存","published":1,"updated":"2016-04-09T03:25:57.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m7t001nfwngqz6826s1","sticky":0},{"title":"spring aop 知识体系整理","date":"2016-02-20T04:48:30.000Z","_content":"\nspring aop 整理\n参考：\n     1.https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\n     2.http://blog.csdn.net/dreamrealised/article/details/12885739\n思维导图：\n     http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\n\n![](/images/java-spring-aop.png)","source":"_posts/spring-aop-知识体系整理.md","raw":"---\ntitle: spring aop 知识体系整理\ndate: 2016-02-20 12:48:30\ntags: [java,spring,aop,思维导图]\n---\n\nspring aop 整理\n参考：\n     1.https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\n     2.http://blog.csdn.net/dreamrealised/article/details/12885739\n思维导图：\n     http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\n\n![](/images/java-spring-aop.png)","slug":"spring-aop-知识体系整理","published":1,"updated":"2016-02-20T04:51:36.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m80001vfwngigajm9b1","sticky":0},{"title":"jquery-validate常用用法总结","date":"2016-01-04T09:05:28.000Z","_content":"\n\n1. juqry validate中，如何对使用ajax提交的方式进行校验？\n有两种方式\n    1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。\n    2)使用valid方法，监听form的submit事件，当$('#form').valid()返回true的时候再提交。\n    ```\n        //通过监听form的submit事件，对form进行ajax提交。\n         $('#formId').submit(function() {\n             if (!$(\"#formId\").valid()) \n                 return false;\n             $(this).omAjaxSubmit({});\n             return false; //此处必须返回false，阻止常规的form提交\n         });\n    ```\n2. juqry validate中，如何对校验错误的提示信息位置和样式进行更改？\n    1）js代码：\n    ```\n    $(function(){  \n        $(\"#form1\").validate({  \n            errorPlacement: function (error, element) {  \n                error.appendTo(element.parent(\"td\"));  \n            },  \n            rules:{              \n            }  \n        });  \n        $(\"[name$='.sign']\").each(function(){  \n            $(this).rules(\"add\",{required:true,messages:{required:\"至少选择一个选项\"}});  \n        });  \n    }); \n    ```\n    2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了\n    ```\n        <style>  \n        label.error {   \n            color:Red;   \n            font-size:13px;   \n            margin-left:5px;   \n            padding-left:16px;   \n        }   \n        </style> \n    ```\n    3) 校验时机，可以自定义在js中想要的时候去校验\n    ```\n        $('.selector').click(function() {\n            if ($(\"selector of you form\").valid()) {\n                alert('in');\n            } else {\n                alert('out');\n            }\n        });\n        $(\"selector of you form\").validate({\n            rules: {\n                receiveDayFrom: {\n                    required: true\n                }\n            }\n        }); \n    ```\n    4) 例子：\n    ```\n        $(\"#form\").validate({\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            },\n            errorPlacement: function ($error, $element) {\n                var name = $element.attr(\"name\");\n                $(\"#error\" + name).append($error);\n            }\n        });\n    ```\n        or:\n    ```\n        $(\"#form\").validate({\n            errorLabelContainer: \"#errors\",\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            }\n        });\n    ```\n\n3. 如何添加自定义的校验？\n\n- 添加一个方法\n    ```\n    // 字符验证，只能包含英文、数字、下划线等字符。    \n    jQuery.validator.addMethod(\"nameStringCheck\", function(value, element) {   \n         return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); \n    }, \"只能包含英文、数字、下划线等字符\");\n    ```\n- 在validate配置中使用新加的方法\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                required: true,\n                nameStringCheck: true\n            }\n        }\n    });\n    ```\n\n4. 如何使用ajax请求进行远程校验\n    ```\n    jQuery.validator.addMethod(\"checkUnique\", function(value, element) {\n        return validateUsernameByAjax(value, element.name, 'ajax请求地址');\n    }, \"此输入的值不可用\");\n    ```\n\n    ```\n    /**\n     * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true\n     */\n    function validateUsernameByAjax(value, fieldname, url) {\n        var _request = url + \"?\"+fieldname+\"=\"+value;\n        var deferred = $.Deferred();//创建一个延迟对象\n        $.ajax({\n            url:_request,\n            async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码\n            dataType:\"json\",\n            success:function(data) {\n                if (data.status === \"error\" || data.status === \"fail\") {\n                    deferred.reject();\n                } else{\n                    deferred.resolve();  \n                }\n            }\n        });\n        //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功\n        return deferred.state() == \"resolved\" ? true : false;\n    }\n    ```\n\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                checkUnique: true\n            }\n        }\n    });\n    ```\n","source":"_posts/jquery-validate常用用法总结.md","raw":"---\ntitle: jquery-validate常用用法总结\ndate: 2016-01-04 17:05:28\ntags: [jquery,validate]\n---\n\n\n1. juqry validate中，如何对使用ajax提交的方式进行校验？\n有两种方式\n    1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。\n    2)使用valid方法，监听form的submit事件，当$('#form').valid()返回true的时候再提交。\n    ```\n        //通过监听form的submit事件，对form进行ajax提交。\n         $('#formId').submit(function() {\n             if (!$(\"#formId\").valid()) \n                 return false;\n             $(this).omAjaxSubmit({});\n             return false; //此处必须返回false，阻止常规的form提交\n         });\n    ```\n2. juqry validate中，如何对校验错误的提示信息位置和样式进行更改？\n    1）js代码：\n    ```\n    $(function(){  \n        $(\"#form1\").validate({  \n            errorPlacement: function (error, element) {  \n                error.appendTo(element.parent(\"td\"));  \n            },  \n            rules:{              \n            }  \n        });  \n        $(\"[name$='.sign']\").each(function(){  \n            $(this).rules(\"add\",{required:true,messages:{required:\"至少选择一个选项\"}});  \n        });  \n    }); \n    ```\n    2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了\n    ```\n        <style>  \n        label.error {   \n            color:Red;   \n            font-size:13px;   \n            margin-left:5px;   \n            padding-left:16px;   \n        }   \n        </style> \n    ```\n    3) 校验时机，可以自定义在js中想要的时候去校验\n    ```\n        $('.selector').click(function() {\n            if ($(\"selector of you form\").valid()) {\n                alert('in');\n            } else {\n                alert('out');\n            }\n        });\n        $(\"selector of you form\").validate({\n            rules: {\n                receiveDayFrom: {\n                    required: true\n                }\n            }\n        }); \n    ```\n    4) 例子：\n    ```\n        $(\"#form\").validate({\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            },\n            errorPlacement: function ($error, $element) {\n                var name = $element.attr(\"name\");\n                $(\"#error\" + name).append($error);\n            }\n        });\n    ```\n        or:\n    ```\n        $(\"#form\").validate({\n            errorLabelContainer: \"#errors\",\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            }\n        });\n    ```\n\n3. 如何添加自定义的校验？\n\n- 添加一个方法\n    ```\n    // 字符验证，只能包含英文、数字、下划线等字符。    \n    jQuery.validator.addMethod(\"nameStringCheck\", function(value, element) {   \n         return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); \n    }, \"只能包含英文、数字、下划线等字符\");\n    ```\n- 在validate配置中使用新加的方法\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                required: true,\n                nameStringCheck: true\n            }\n        }\n    });\n    ```\n\n4. 如何使用ajax请求进行远程校验\n    ```\n    jQuery.validator.addMethod(\"checkUnique\", function(value, element) {\n        return validateUsernameByAjax(value, element.name, 'ajax请求地址');\n    }, \"此输入的值不可用\");\n    ```\n\n    ```\n    /**\n     * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true\n     */\n    function validateUsernameByAjax(value, fieldname, url) {\n        var _request = url + \"?\"+fieldname+\"=\"+value;\n        var deferred = $.Deferred();//创建一个延迟对象\n        $.ajax({\n            url:_request,\n            async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码\n            dataType:\"json\",\n            success:function(data) {\n                if (data.status === \"error\" || data.status === \"fail\") {\n                    deferred.reject();\n                } else{\n                    deferred.resolve();  \n                }\n            }\n        });\n        //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功\n        return deferred.state() == \"resolved\" ? true : false;\n    }\n    ```\n\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                checkUnique: true\n            }\n        }\n    });\n    ```\n","slug":"jquery-validate常用用法总结","published":1,"updated":"2016-02-20T04:02:04.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m860023fwngvtl9k5kg","sticky":0},{"title":"[java]从代码中去除if-else","date":"2016-02-02T08:09:30.000Z","_content":"\n有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？\n\n首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。\n\n当判断到确实需要优化if else，方法有很多，总结如下。\n1. 使用map.\n2. 使用枚举.\n3. 多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。\n当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。\n\n下面举例。\n要优化的原if else语句：\n```\nint code;\nif(\"Name\".equals(str))\n    code = 0;\nelse if(\"Age\".equals(str))\n    code = 1;\nelse if(\"Address\".equals(str))\n    code = 2;\n```\n\n## 使用map优化\n```\npublic final static Map map = new HashMap();  \nstatic {  \n    map.put(\"Name\", 0);  \n    map.put(\"Age\", 1);\n    map.put(\"Address\", 2);  \n}\n\nint code = map.get(type);\n```\n\n## 使用枚举优化\n```\npublic enum Codes {\n    Name(0), Age(1), Address(2);\n    public int code;\n    Codes(int code){\n        this.code = code;\n    }\n}\n\nint code = Codes.valueOf(str).code;\n```\n\n## 使用多态优化\n```\nICode iCode = (ICode)Class.forName(\"com.xxx.\" + str).newInstance();\n\nint code = iCode.getCode();\n```\n\n\n## “责任链”如何优化if else？\n首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。\n\n好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。\n\n现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。\n\n好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。\n\n现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。\n\n到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）\n\n最后，我们为了交流方便，把这种组合方式称为“责任链”。\n\n\n## 使用状态模式优化if else\n参考：http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html","source":"_posts/java-从代码中去除if-else.md","raw":"---\ntitle: '[java]从代码中去除if-else'\ndate: 2016-02-02 16:09:30\ntags: [java,patten,coding]\n---\n\n有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？\n\n首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。\n\n当判断到确实需要优化if else，方法有很多，总结如下。\n1. 使用map.\n2. 使用枚举.\n3. 多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。\n当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。\n\n下面举例。\n要优化的原if else语句：\n```\nint code;\nif(\"Name\".equals(str))\n    code = 0;\nelse if(\"Age\".equals(str))\n    code = 1;\nelse if(\"Address\".equals(str))\n    code = 2;\n```\n\n## 使用map优化\n```\npublic final static Map map = new HashMap();  \nstatic {  \n    map.put(\"Name\", 0);  \n    map.put(\"Age\", 1);\n    map.put(\"Address\", 2);  \n}\n\nint code = map.get(type);\n```\n\n## 使用枚举优化\n```\npublic enum Codes {\n    Name(0), Age(1), Address(2);\n    public int code;\n    Codes(int code){\n        this.code = code;\n    }\n}\n\nint code = Codes.valueOf(str).code;\n```\n\n## 使用多态优化\n```\nICode iCode = (ICode)Class.forName(\"com.xxx.\" + str).newInstance();\n\nint code = iCode.getCode();\n```\n\n\n## “责任链”如何优化if else？\n首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。\n\n好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。\n\n现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。\n\n好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。\n\n现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。\n\n到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）\n\n最后，我们为了交流方便，把这种组合方式称为“责任链”。\n\n\n## 使用状态模式优化if else\n参考：http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html","slug":"java-从代码中去除if-else","published":1,"updated":"2016-02-20T04:02:04.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m890028fwng4kwaysry","sticky":0},{"title":"java-io体系整理","date":"2016-02-20T04:20:38.000Z","_content":"\n### java io体系使用整理\n- 来源：http://www.importnew.com/17714.html\n- 思维导图：http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\n\n![](/images/java+io.png)","source":"_posts/java-io体系整理.md","raw":"---\ntitle: java-io体系整理\ndate: 2016-02-20 12:20:38\ntags: [java,io,整理,思维导图]\n---\n\n### java io体系使用整理\n- 来源：http://www.importnew.com/17714.html\n- 思维导图：http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\n\n![](/images/java+io.png)","slug":"java-io体系整理","published":1,"updated":"2016-02-20T04:39:58.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m8d002efwng6irz7b3x","sticky":0},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-02-20T04:02:04.711Z","updated":"2016-02-20T04:02:04.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimsn3m8l002lfwngbapp4l1m","sticky":0}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cimsn3m530000fwng27rgpx0m","tag_id":"cimsn3m5b0001fwngzkr730ep","_id":"cimsn3m5d0002fwng6kiyerc3"},{"post_id":"cimsn3m6k0004fwng00hom51c","tag_id":"cimsn3m6m0005fwng9v4wp9fv","_id":"cimsn3m6o0009fwngy6vmtg1l"},{"post_id":"cimsn3m6k0004fwng00hom51c","tag_id":"cimsn3m6n0006fwng3wklptoq","_id":"cimsn3m6o000afwngksiyn0s9"},{"post_id":"cimsn3m6k0004fwng00hom51c","tag_id":"cimsn3m6n0007fwngs51ek9m3","_id":"cimsn3m6o000bfwngzs5xydj5"},{"post_id":"cimsn3m6k0004fwng00hom51c","tag_id":"cimsn3m6n0008fwngm9rm6j98","_id":"cimsn3m6o000cfwngr76bcrnv"},{"post_id":"cimsn3m6q000dfwng04eb68ms","tag_id":"cimsn3m5b0001fwngzkr730ep","_id":"cimsn3m6t000hfwngh1vu8elu"},{"post_id":"cimsn3m6q000dfwng04eb68ms","tag_id":"cimsn3m6r000efwng1jzqwfon","_id":"cimsn3m6t000ifwngydgspydi"},{"post_id":"cimsn3m6q000dfwng04eb68ms","tag_id":"cimsn3m6r000ffwngs8jlb4i8","_id":"cimsn3m6t000jfwng7t8gmesn"},{"post_id":"cimsn3m6q000dfwng04eb68ms","tag_id":"cimsn3m6s000gfwngv473ay2q","_id":"cimsn3m6t000kfwngyrnxd06q"},{"post_id":"cimsn3m6w000lfwngmwjx259k","tag_id":"cimsn3m6y000mfwng1wuip0ug","_id":"cimsn3m71000qfwngpl0uflu7"},{"post_id":"cimsn3m6w000lfwngmwjx259k","tag_id":"cimsn3m6z000nfwngdeffn885","_id":"cimsn3m71000rfwngijrqykbc"},{"post_id":"cimsn3m6w000lfwngmwjx259k","tag_id":"cimsn3m6m0005fwng9v4wp9fv","_id":"cimsn3m71000sfwngzl8wr394"},{"post_id":"cimsn3m6w000lfwngmwjx259k","tag_id":"cimsn3m6z000ofwngnmf1zmaz","_id":"cimsn3m72000tfwngw2qes106"},{"post_id":"cimsn3m6w000lfwngmwjx259k","tag_id":"cimsn3m70000pfwngiwlpnvnv","_id":"cimsn3m72000ufwnghja5gs1w"},{"post_id":"cimsn3m74000vfwngjudmf0z0","tag_id":"cimsn3m6r000ffwngs8jlb4i8","_id":"cimsn3m76000xfwng8ketfvaj"},{"post_id":"cimsn3m74000vfwngjudmf0z0","tag_id":"cimsn3m76000wfwngy5ss0yfl","_id":"cimsn3m76000yfwngw29138nm"},{"post_id":"cimsn3m78000zfwng5jqnp223","tag_id":"cimsn3m5b0001fwngzkr730ep","_id":"cimsn3m7b0013fwnggsgzcjuo"},{"post_id":"cimsn3m78000zfwng5jqnp223","tag_id":"cimsn3m790010fwngggk4rl5a","_id":"cimsn3m7b0014fwng93yccdth"},{"post_id":"cimsn3m78000zfwng5jqnp223","tag_id":"cimsn3m7a0011fwngq3age6hw","_id":"cimsn3m7b0015fwnga81703m0"},{"post_id":"cimsn3m78000zfwng5jqnp223","tag_id":"cimsn3m7a0012fwng1jolk5iq","_id":"cimsn3m7c0016fwng5dejmuus"},{"post_id":"cimsn3m7e0017fwngm6wdb548","tag_id":"cimsn3m6z000ofwngnmf1zmaz","_id":"cimsn3m7i001cfwngnpnq37eh"},{"post_id":"cimsn3m7e0017fwngm6wdb548","tag_id":"cimsn3m7g0018fwngche7tj7k","_id":"cimsn3m7j001dfwnghdtxcebo"},{"post_id":"cimsn3m7e0017fwngm6wdb548","tag_id":"cimsn3m7h0019fwngfhkj4c0c","_id":"cimsn3m7j001efwng83qolspu"},{"post_id":"cimsn3m7e0017fwngm6wdb548","tag_id":"cimsn3m7h001afwngiao5bjiz","_id":"cimsn3m7j001ffwngxsfi3lhy"},{"post_id":"cimsn3m7e0017fwngm6wdb548","tag_id":"cimsn3m7i001bfwngvjyxkosg","_id":"cimsn3m7j001gfwngptzawm95"},{"post_id":"cimsn3m7p001ifwngxk4ljyv7","tag_id":"cimsn3m7q001jfwngzw2oek99","_id":"cimsn3m7r001lfwngc63vxxlx"},{"post_id":"cimsn3m7p001ifwngxk4ljyv7","tag_id":"cimsn3m7q001kfwngljqw32kz","_id":"cimsn3m7r001mfwng3ubgf4u3"},{"post_id":"cimsn3m7t001nfwngqz6826s1","tag_id":"cimsn3m6z000ofwngnmf1zmaz","_id":"cimsn3m7w001rfwng6dexqwjv"},{"post_id":"cimsn3m7t001nfwngqz6826s1","tag_id":"cimsn3m7v001ofwngzr06u79v","_id":"cimsn3m7x001sfwngeitcg2js"},{"post_id":"cimsn3m7t001nfwngqz6826s1","tag_id":"cimsn3m7w001pfwngf9pxwk61","_id":"cimsn3m7x001tfwngwj7mv69t"},{"post_id":"cimsn3m7t001nfwngqz6826s1","tag_id":"cimsn3m7w001qfwngc9b1gma1","_id":"cimsn3m7y001ufwng2vcbpw1w"},{"post_id":"cimsn3m80001vfwngigajm9b1","tag_id":"cimsn3m6m0005fwng9v4wp9fv","_id":"cimsn3m83001zfwng5vbq3x2t"},{"post_id":"cimsn3m80001vfwngigajm9b1","tag_id":"cimsn3m81001wfwngu8mb11il","_id":"cimsn3m830020fwngpzxopv2s"},{"post_id":"cimsn3m80001vfwngigajm9b1","tag_id":"cimsn3m82001xfwng4jf3ahed","_id":"cimsn3m840021fwng7idqkzrl"},{"post_id":"cimsn3m80001vfwngigajm9b1","tag_id":"cimsn3m83001yfwngciqwsqnn","_id":"cimsn3m840022fwng5wxmc0xm"},{"post_id":"cimsn3m860023fwngvtl9k5kg","tag_id":"cimsn3m870024fwng8xf7m3iw","_id":"cimsn3m880026fwngim1xt0by"},{"post_id":"cimsn3m860023fwngvtl9k5kg","tag_id":"cimsn3m880025fwngflm16qmh","_id":"cimsn3m880027fwngqoqy6i6o"},{"post_id":"cimsn3m890028fwng4kwaysry","tag_id":"cimsn3m6m0005fwng9v4wp9fv","_id":"cimsn3m8b002bfwngf29bx73f"},{"post_id":"cimsn3m890028fwng4kwaysry","tag_id":"cimsn3m8b0029fwngmqenxuiq","_id":"cimsn3m8c002cfwng750wxoy9"},{"post_id":"cimsn3m890028fwng4kwaysry","tag_id":"cimsn3m8b002afwng9p3xvpkh","_id":"cimsn3m8c002dfwngkfhb3fn4"},{"post_id":"cimsn3m8d002efwng6irz7b3x","tag_id":"cimsn3m6m0005fwng9v4wp9fv","_id":"cimsn3m8i002hfwnga6vt2naa"},{"post_id":"cimsn3m8d002efwng6irz7b3x","tag_id":"cimsn3m8f002ffwng6xp7o4du","_id":"cimsn3m8i002ifwngl49akto9"},{"post_id":"cimsn3m8d002efwng6irz7b3x","tag_id":"cimsn3m8h002gfwngy15gfz71","_id":"cimsn3m8j002jfwngj67r98kh"},{"post_id":"cimsn3m8d002efwng6irz7b3x","tag_id":"cimsn3m83001yfwngciqwsqnn","_id":"cimsn3m8j002kfwngrs5zc348"}],"Tag":[{"name":"git","_id":"cimsn3m5b0001fwngzkr730ep"},{"name":"java","_id":"cimsn3m6m0005fwng9v4wp9fv"},{"name":"监控","_id":"cimsn3m6n0006fwng3wklptoq"},{"name":"集群","_id":"cimsn3m6n0007fwngs51ek9m3"},{"name":"monitor","_id":"cimsn3m6n0008fwngm9rm6j98"},{"name":"github pages","_id":"cimsn3m6r000efwng1jzqwfon"},{"name":"hexo","_id":"cimsn3m6r000ffwngs8jlb4i8"},{"name":"blog","_id":"cimsn3m6s000gfwngv473ay2q"},{"name":"linux","_id":"cimsn3m6y000mfwng1wuip0ug"},{"name":"centos","_id":"cimsn3m6z000nfwngdeffn885"},{"name":"spring boot","_id":"cimsn3m6z000ofwngnmf1zmaz"},{"name":"部署","_id":"cimsn3m70000pfwngiwlpnvnv"},{"name":"deploy","_id":"cimsn3m76000wfwngy5ss0yfl"},{"name":"svn","_id":"cimsn3m790010fwngggk4rl5a"},{"name":"版本控制","_id":"cimsn3m7a0011fwngq3age6hw"},{"name":"分支管理","_id":"cimsn3m7a0012fwng1jolk5iq"},{"name":"mysql","_id":"cimsn3m7g0018fwngche7tj7k"},{"name":"数据库","_id":"cimsn3m7h0019fwngfhkj4c0c"},{"name":"spring data jpa","_id":"cimsn3m7h001afwngiao5bjiz"},{"name":"mybatis","_id":"cimsn3m7i001bfwngvjyxkosg"},{"name":"springboot","_id":"cimsn3m7q001jfwngzw2oek99"},{"name":"itime","_id":"cimsn3m7q001kfwngljqw32kz"},{"name":"spring cache","_id":"cimsn3m7v001ofwngzr06u79v"},{"name":"redis","_id":"cimsn3m7w001pfwngf9pxwk61"},{"name":"注解","_id":"cimsn3m7w001qfwngc9b1gma1"},{"name":"spring","_id":"cimsn3m81001wfwngu8mb11il"},{"name":"aop","_id":"cimsn3m82001xfwng4jf3ahed"},{"name":"思维导图","_id":"cimsn3m83001yfwngciqwsqnn"},{"name":"jquery","_id":"cimsn3m870024fwng8xf7m3iw"},{"name":"validate","_id":"cimsn3m880025fwngflm16qmh"},{"name":"patten","_id":"cimsn3m8b0029fwngmqenxuiq"},{"name":"coding","_id":"cimsn3m8b002afwng9p3xvpkh"},{"name":"io","_id":"cimsn3m8f002ffwng6xp7o4du"},{"name":"整理","_id":"cimsn3m8h002gfwngy15gfz71"}]}}