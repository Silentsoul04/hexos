{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/frame-zhifubao-002.png","path":"images/frame-zhifubao-002.png","modified":1,"renderable":0},{"_id":"source/images/default_avatar.jpg","path":"images/default_avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-025.png","path":"images/frame-zhifubao-025.png","modified":1,"renderable":0},{"_id":"source/images/ireport_design_table.png","path":"images/ireport_design_table.png","modified":1,"renderable":0},{"_id":"source/images/ireport_design_ui_01.png","path":"images/ireport_design_ui_01.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-030.jpeg","path":"images/frame-zhifubao-030.jpeg","modified":1,"renderable":0},{"_id":"source/images/ireport_design_ui_02.png","path":"images/ireport_design_ui_02.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-031.jpeg","path":"images/frame-zhifubao-031.jpeg","modified":1,"renderable":0},{"_id":"source/images/jenkins-maven-001.png","path":"images/jenkins-maven-001.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-maven-002.png","path":"images/jenkins-maven-002.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-maven-005.png","path":"images/jenkins-maven-005.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-maven-004.png","path":"images/jenkins-maven-004.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-maven-003.png","path":"images/jenkins-maven-003.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-maven-006.png","path":"images/jenkins-maven-006.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-maven-007.png","path":"images/jenkins-maven-007.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-04.png","path":"images/microservice-jenkins-04.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-03.png","path":"images/microservice-jenkins-03.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-06.png","path":"images/microservice-jenkins-06.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-01.png","path":"images/microservice-jenkins-01.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-05.png","path":"images/microservice-jenkins-05.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-07.png","path":"images/microservice-jenkins-07.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-02.png","path":"images/microservice-jenkins-02.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-08.png","path":"images/microservice-jenkins-08.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-11.png","path":"images/microservice-jenkins-11.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-09.png","path":"images/microservice-jenkins-09.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-12.png","path":"images/microservice-jenkins-12.png","modified":1,"renderable":0},{"_id":"source/images/microservice-jenkins-10.png","path":"images/microservice-jenkins-10.png","modified":1,"renderable":0},{"_id":"source/images/rap-001.png","path":"images/rap-001.png","modified":1,"renderable":0},{"_id":"source/images/project-111.png","path":"images/project-111.png","modified":1,"renderable":0},{"_id":"source/images/project-004.jpg","path":"images/project-004.jpg","modified":1,"renderable":0},{"_id":"source/images/rap-003.png","path":"images/rap-003.png","modified":1,"renderable":0},{"_id":"source/images/rap-004.png","path":"images/rap-004.png","modified":1,"renderable":0},{"_id":"source/images/rap-006.png","path":"images/rap-006.png","modified":1,"renderable":0},{"_id":"source/images/rap-005.png","path":"images/rap-005.png","modified":1,"renderable":0},{"_id":"source/images/rap-007.png","path":"images/rap-007.png","modified":1,"renderable":0},{"_id":"source/images/rap-002.png","path":"images/rap-002.png","modified":1,"renderable":0},{"_id":"source/images/react-002.png","path":"images/react-002.png","modified":1,"renderable":0},{"_id":"source/images/rap-009.png","path":"images/rap-009.png","modified":1,"renderable":0},{"_id":"source/images/rap-008.png","path":"images/rap-008.png","modified":1,"renderable":0},{"_id":"source/images/react-004.png","path":"images/react-004.png","modified":1,"renderable":0},{"_id":"source/images/react-003.png","path":"images/react-003.png","modified":1,"renderable":0},{"_id":"source/images/react-001.png","path":"images/react-001.png","modified":1,"renderable":0},{"_id":"source/images/react-005.png","path":"images/react-005.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-001.png","path":"images/spring-transaction-001.png","modified":1,"renderable":0},{"_id":"source/images/react-007.png","path":"images/react-007.png","modified":1,"renderable":0},{"_id":"source/images/react-006.png","path":"images/react-006.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-002.png","path":"images/spring-transaction-002.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-003.png","path":"images/spring-transaction-003.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-004.png","path":"images/spring-transaction-004.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-006.png","path":"images/spring-transaction-006.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-005.png","path":"images/spring-transaction-005.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-007.png","path":"images/spring-transaction-007.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-009.png","path":"images/spring-transaction-009.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-010.png","path":"images/spring-transaction-010.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-011.png","path":"images/spring-transaction-011.png","modified":1,"renderable":0},{"_id":"source/images/version.png","path":"images/version.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-006.png","path":"images/frame-zhifubao-006.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-012.png","path":"images/frame-zhifubao-012.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-013.png","path":"images/frame-zhifubao-013.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-021.png","path":"images/frame-zhifubao-021.png","modified":1,"renderable":0},{"_id":"source/images/introduce-2-2.png","path":"images/introduce-2-2.png","modified":1,"renderable":0},{"_id":"source/images/framework-microservices.png","path":"images/framework-microservices.png","modified":1,"renderable":0},{"_id":"source/images/java-spring-aop.png","path":"images/java-spring-aop.png","modified":1,"renderable":0},{"_id":"source/images/java-web.png","path":"images/java-web.png","modified":1,"renderable":0},{"_id":"source/images/project-002.jpg","path":"images/project-002.jpg","modified":1,"renderable":0},{"_id":"source/images/project-005.png","path":"images/project-005.png","modified":1,"renderable":0},{"_id":"source/images/spring-transaction-008.png","path":"images/spring-transaction-008.png","modified":1,"renderable":0},{"_id":"source/images/transaction-001.png","path":"images/transaction-001.png","modified":1,"renderable":0},{"_id":"source/images/test-001.png","path":"images/test-001.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-007.png","path":"images/frame-zhifubao-007.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-003.png","path":"images/frame-zhifubao-003.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-016.png","path":"images/frame-zhifubao-016.png","modified":1,"renderable":0},{"_id":"source/images/java-monitor.png","path":"images/java-monitor.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-002.png","path":"images/jenkins-002.png","modified":1,"renderable":0},{"_id":"source/images/project-001.jpg","path":"images/project-001.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/frame-zhifubao-004.png","path":"images/frame-zhifubao-004.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-023.png","path":"images/frame-zhifubao-023.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-026.png","path":"images/frame-zhifubao-026.png","modified":1,"renderable":0},{"_id":"source/images/java+io.png","path":"images/java+io.png","modified":1,"renderable":0},{"_id":"source/images/jenkins-001.png","path":"images/jenkins-001.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"source/images/project-110.png","path":"images/project-110.png","modified":1,"renderable":0},{"_id":"source/images/test-002.png","path":"images/test-002.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-005.png","path":"images/frame-zhifubao-005.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-010.png","path":"images/frame-zhifubao-010.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-011.png","path":"images/frame-zhifubao-011.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-018.png","path":"images/frame-zhifubao-018.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-029.png","path":"images/frame-zhifubao-029.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":1,"renderable":1},{"_id":"source/images/jenkins-003.png","path":"images/jenkins-003.png","modified":1,"renderable":0},{"_id":"source/images/project-003.png","path":"images/project-003.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"source/images/frame-zhifubao-009.png","path":"images/frame-zhifubao-009.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-008.png","path":"images/frame-zhifubao-008.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-015.png","path":"images/frame-zhifubao-015.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-014.png","path":"images/frame-zhifubao-014.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-019.png","path":"images/frame-zhifubao-019.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-022.png","path":"images/frame-zhifubao-022.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-028.png","path":"images/frame-zhifubao-028.png","modified":1,"renderable":0},{"_id":"source/images/post-gatsby-01","path":"images/post-gatsby-01","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/images/frame-zhifubao-017.png","path":"images/frame-zhifubao-017.png","modified":1,"renderable":0},{"_id":"source/images/frame-zhifubao-020.png","path":"images/frame-zhifubao-020.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/frame-zhifubao-027.png","path":"images/frame-zhifubao-027.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/images/frame-zhifubao-001.png","path":"images/frame-zhifubao-001.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"source/images/frame-zhifubao-024.png","path":"images/frame-zhifubao-024.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/test.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925613},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1455940924892},{"_id":"themes/next/.gitignore","hash":"f9b9e6ccc15e4a649e017e78b13b1d1494231a99","modified":1455940924895},{"_id":"themes/next/.hound.yml","hash":"db672ad0100d3802539ae5ffa3a270f71e107d58","modified":1455940924898},{"_id":"themes/next/.javascript_ignore","hash":"a44fc7feb9e41c99053d2abda1b0cd6306543d52","modified":1455940924900},{"_id":"themes/next/.jshintrc","hash":"49b54f7b862f20d15edb1b172ef341a048ec4a9f","modified":1455940924903},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1455940924890},{"_id":"themes/next/_config.yml","hash":"299e80f4f279d44d35c2194e4e735d2c12634b0f","modified":1455940924913},{"_id":"themes/next/bower.json","hash":"d46717b4a025790cda33d78339780c8749aee7fd","modified":1455940924917},{"_id":"themes/next/README.md","hash":"b2499c61ef9cf6ee31ed5606ed43ef247c73de63","modified":1455940924910},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1455940924907},{"_id":"source/_posts/Emacs快速指南.md","hash":"42660f2ef61f94f359f3bf85f8552d800c2a6332","modified":1536426798962},{"_id":"source/_posts/How-to-synchronize-ArrayList-in-java-with-example.md","hash":"f258c07c3073c03a9ea8d1880a185263d2c547e4","modified":1469717875280},{"_id":"source/_posts/Java-中int和Integer的区别.md","hash":"cc17e681cd866988bc49f1d8ae72904771f79c8c","modified":1470656006578},{"_id":"source/_posts/JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid.md","hash":"5b92d156416a68ee5a1406fd120dd78387780c7c","modified":1536426002883},{"_id":"source/_posts/ReactJS静态网站生成器-Gatsby.md","hash":"a0e5bae3cbd1dd6c6b2f89386e458508e9fee1bb","modified":1536426002885},{"_id":"source/_posts/ELK-Kafka企业日志收集平台搭建总结.md","hash":"3fc14186687a5ca692225ab1544673c7e1fcd048","modified":1482038050660},{"_id":"source/_posts/Springboot应用中如何针对springmvc的controller写单元测试.md","hash":"eb2dddc4cdd3c33521b3da3394d3cd18572983b1","modified":1469250106330},{"_id":"source/_posts/What-s-the-simplest-way-to-print-a-Java-array.md","hash":"07b0233e562a34cb9a12e3569431ef174f9207e7","modified":1470656006582},{"_id":"source/_posts/SOA分布式事务解决方案.md","hash":"a5f4882579c0531e1461000cfe9d3c1db79a63a6","modified":1470842157203},{"_id":"source/_posts/Windows下开启React-Native征途.md","hash":"358a806ae976bb3625ef4a042f80e85b27ac88ef","modified":1465007161845},{"_id":"source/_posts/Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目.md","hash":"294a8086f8550cd8b1c9960ef5b94b7216914468","modified":1464790154708},{"_id":"source/_posts/centos6下安装配置mysql，并开启mysql的远程登录.md","hash":"04879f260199ea205ab459e87968676b868eb77c","modified":1461589456768},{"_id":"source/_posts/Transform-objects-with-guava-使用Guava库转换对象.md","hash":"7fb64bcdee4dc118cefc4ef6ac6bf9b532b665bf","modified":1469250420563},{"_id":"source/_posts/centos6环境下配置mysql主从同步.md","hash":"ed975ade6b61c63e6fcb24ab5b2ad1d824ab555c","modified":1461590733126},{"_id":"source/_posts/dev-collect-2016-06-06-collect-of-im-netty-android-etc.md","hash":"8fd53cf548630720b6fcca3eb3ab009077ce5eac","modified":1465218462450},{"_id":"source/_posts/dev-collect-2016-06-collect-of-dev.md","hash":"60cbdf3c78db25500aaf59db6a6cb4b5a6b22ffe","modified":1468239321828},{"_id":"source/_posts/api-version-4种在springmvc中进行api版本控制的处理方法.md","hash":"6da4a06a63de7cea31591ff48833755cfc05d4fd","modified":1467302219038},{"_id":"source/_posts/hexo生成的静态文件如何更新到自己的服务器上.md","hash":"75adafd35c5e3bd63f36875823426ee2726ec6ce","modified":1536514126792},{"_id":"source/_posts/dev-collect-2016-08-collect-of-dev.md","hash":"4485290c359529dc0869b0f8d418c23cd68c616e","modified":1473177133802},{"_id":"source/_posts/dev-collect-2016-07-collect-of-dev.md","hash":"e3483db3af6be9cb250d7dc83bdb6c57ae9f5503","modified":1470235356539},{"_id":"source/_posts/git-git分支使用和管理.md","hash":"687ec93033d3c93d5b6629b12bdbb9e947ae9c22","modified":1465218382607},{"_id":"source/_posts/hello-world.md","hash":"f2d681d071e06495eb62c9435a4c6c7bd84cd4cd","modified":1455940924711},{"_id":"source/_posts/java-design-pattern-java设计模式之Builder模式.md","hash":"5ae27af8b350722972a5ef4934ae3d5cf9bd5b01","modified":1462698012177},{"_id":"source/_posts/git如何使用-记一些常用的git使用方法.md","hash":"188991d6a393f7e7f5d1d19f2e39458118446ece","modified":1489218577872},{"_id":"source/_posts/java-static-关键字总结.md","hash":"d9ff757d52f3aca87b5abd14eab1f9718051563e","modified":1462724055474},{"_id":"source/_posts/git-git常用-把本地项目提交到github.md","hash":"1253ca309586ce518e60e0423b3f0b042ec34edf","modified":1455940924710},{"_id":"source/_posts/java-从代码中去除if-else.md","hash":"c1df7bdd72854b22b1c00ac9706cc761aa7a5945","modified":1455940924715},{"_id":"source/_posts/java-io体系整理.md","hash":"852f0984ffca5f03e9cec31eeb3d74044ecf3768","modified":1455943198973},{"_id":"source/_posts/java-web知识体系.md","hash":"997e0ddfae392299fc0a37d6b8b9cc5cac048a88","modified":1462374433154},{"_id":"source/_posts/java-enum-典型用法.md","hash":"d86ab73346b38a67dd0e324da411c6cdd12e4b80","modified":1462723635203},{"_id":"source/_posts/java自动化测试整理.md","hash":"2c6187e62b60c9679da007d48e09dc9294f742a7","modified":1471623545891},{"_id":"source/_posts/microservices-03-Zookeeper注册发现服务.md","hash":"d27844a3cee278885366d5dc593f96bf47fa3683","modified":1490795040364},{"_id":"source/_posts/java并发学习-一.md","hash":"0d8f6571d7e81b25ba010b2c5746b410259b4dd4","modified":1504712471628},{"_id":"source/_posts/jquery-validate常用用法总结.md","hash":"c4ce8e38ba1737176393776cf1f12fa6345d7130","modified":1455940924719},{"_id":"source/_posts/microservices-01-Spring-boot开发微服务.md","hash":"4476005b278ed8d8e3e0d1e695864486cb042c48","modified":1490795023110},{"_id":"source/_posts/microservices-02-Nodejs-Express作为微服务api网关.md","hash":"45f28541fb9815728f57a4c2addd9a3809cbeff3","modified":1490795032072},{"_id":"source/_posts/microservices-06-Jenkins执行自动化的构建.md","hash":"c2f87e7a8c3d67809dd0ae02e5b7c9a440b1cbc3","modified":1490795058611},{"_id":"source/_posts/microservices-04-Docker作为服务运行容器.md","hash":"d3b21e4aa8d88ba328e9c46776126b3eccc9ca59","modified":1490795046957},{"_id":"source/_posts/microservices-05-Gitlab作为代码仓库.md","hash":"dd32c67bddbad5cddc7647cb99ccd6b1349d7eea","modified":1490795051015},{"_id":"source/_posts/shell-从svn更新代码maven打包后部署的一个简单脚本.md","hash":"3ecc7f07506f19aa1c496ea45f9d11406573ac91","modified":1489218882480},{"_id":"source/_posts/mosquitto使用记录与服务器调试.md","hash":"09f16c44385382842177eeb2ecbcaf4d936d1729","modified":1536426002887},{"_id":"source/_posts/springboot-items-项目使用实践-springboot-get-started.md","hash":"3199e94996c3d3db8afa97bd3a5719dbd198635c","modified":1455940924723},{"_id":"source/_posts/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用.md","hash":"185e052d7ac21bd22a70c598b5935e52d522ea9a","modified":1460176203524},{"_id":"source/_posts/springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro.md","hash":"2897ecec759bdb619abbf5e6840d3f1dd24547f9","modified":1460241867345},{"_id":"source/_posts/spring-aop-知识体系整理.md","hash":"eb118d12df125da77e87bcb8260134872cdbdf67","modified":1455943896224},{"_id":"source/_posts/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存.md","hash":"a02632a3511ffeb403778fae1272775105735162","modified":1460172357600},{"_id":"source/_posts/【转】-支付宝架构与技术.md","hash":"b601d2bcc061a2c9ea508054ddcfcaf19c5a3528","modified":1470842300132},{"_id":"source/_posts/spring事务用法演进.md","hash":"2600c7b715995af28dd28b926a9ec30373459f2c","modified":1473176944673},{"_id":"source/_posts/为你的项目做合理的版本控制管理.md","hash":"d8a7af1d7c942f8e25a1297c6775cebbe2a00810","modified":1460043821330},{"_id":"source/_posts/springmvc-rest-api-versioning.md","hash":"76860d3947d6777ac35f278d52f6b85a16f6c918","modified":1462289858979},{"_id":"source/_posts/使用Nginx作为简单的图片服务器.md","hash":"eb31a6229aaf8d5544c532c6071272825dcff737","modified":1489162273863},{"_id":"source/_posts/使用hexo-deploy直接发布到github.md","hash":"818610d597c08dbc4ea32c797336108d1caaf87e","modified":1455940924726},{"_id":"source/_posts/事务管理-spring事务使用注意点、数据库事务的隔离级别与锁.md","hash":"81e9dd7d8c308b32d3a0ef7a5d3c64dd0d4a6c0d","modified":1536426002889},{"_id":"source/_posts/使用Jenkins配置Git和Maven的自动化构建Tomcat项目.md","hash":"733e0454d854cf23213b19a8685062f8b1bfce74","modified":1464620726125},{"_id":"source/_posts/使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用.md","hash":"0eaaebfc7d9942b9b5f0b9af6e087c31a100dd14","modified":1468243820548},{"_id":"source/_posts/关于java项目中如何读取配置文件.md","hash":"9f6b1902af401cd53669a3633d2b4bbd8b209f08","modified":1469196283942},{"_id":"source/_posts/使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository.md","hash":"1dbe509d25eea6cd7c9bc14485c5106c80e3859d","modified":1489157383170},{"_id":"source/_posts/如何使用github-pages和hexo搭建简单blog.md","hash":"1f2d80eb7d7b8c3eaa79afca32768a6fa1b0e6ed","modified":1455940924729},{"_id":"source/_posts/多版本部署如何使用nginx根据url参数api-version值进行路由.md","hash":"f0937513b5656762b0bb22dc0c9149069c2c0e1c","modified":1469542886520},{"_id":"source/_posts/在单服务器上安装部署FastDFS-Nginx.md","hash":"947004a063d82d83aa577a18dc95018d5def326e","modified":1467900259326},{"_id":"source/_posts/文档写作与部署工具docsify.md","hash":"6c3b233f74d8409de7160ea54769110b1c778735","modified":1536426002891},{"_id":"source/_posts/系统分布式情况下最终一致性方案梳理.md","hash":"168424874e19d2a58d0cda70d7dd6dd29b3d335d","modified":1470842157211},{"_id":"source/_posts/集群监控初步整理.md","hash":"c99726e3f1b259727e488c3e9d05aa9fae7fd10f","modified":1457755756055},{"_id":"source/_posts/项目管理建议.md","hash":"7ae4b5a58ec048733614b85e00e1f79f7138e37a","modified":1467900259329},{"_id":"source/tags/index.md","hash":"195ac93007dc6de96e3d11cf0d70d2fc11ed1827","modified":1455940924732},{"_id":"source/_posts/使用RAP作为接口管理和调试的工具.md","hash":"ae4bdc1f7933942f79f332d09892b48148d97f3d","modified":1468238937865},{"_id":"source/_posts/动态报表模块设计.md","hash":"8272436de3094845915b718c77373ae4c57bb464","modified":1482047416673},{"_id":"source/_posts/在linux下部署spring-boot项目过程记录.md","hash":"93280eb03394fa70d91fd1155c7eda6b596b0609","modified":1460042916659},{"_id":"source/images/frame-zhifubao-002.png","hash":"a512d6e799ad379dfc35369367d074437257d2e8","modified":1470842157218},{"_id":"source/images/default_avatar.jpg","hash":"d691cdfbb0b969c1de50b94d35371fee64287cae","modified":1460242378660},{"_id":"source/images/frame-zhifubao-025.png","hash":"7c693a9022ef18ea1df8addab9bf9bfd92f6a455","modified":1470842157288},{"_id":"source/images/ireport_design_table.png","hash":"a3fc5e0883eff0f6eef6eb9789c131fbcd9a0831","modified":1482031996286},{"_id":"source/images/ireport_design_ui_01.png","hash":"8486b1c9e7f02479f0dad6fdcbdae666e6429d99","modified":1482037524201},{"_id":"source/images/frame-zhifubao-030.jpeg","hash":"c33706562b896515af1aab415ae2a9e72df83730","modified":1470842157307},{"_id":"source/images/ireport_design_ui_02.png","hash":"9cdbeb6d87f0ec1186822ddac3a54590f2643331","modified":1482037564879},{"_id":"source/images/frame-zhifubao-031.jpeg","hash":"6608d9c2bef7a78909bf499125d5f28a40050656","modified":1470842157311},{"_id":"source/images/jenkins-maven-001.png","hash":"af088cbb859501fc70ec4b16c49b4fe7e21dce5d","modified":1464786953175},{"_id":"source/images/jenkins-maven-002.png","hash":"e332c729c8d2803f26c3687eb5f734bb454ab528","modified":1464786953177},{"_id":"source/images/jenkins-maven-005.png","hash":"6e10df6bdc2cb256ba98025f7b0c52b463d16e33","modified":1464786953181},{"_id":"source/images/jenkins-maven-004.png","hash":"1f0afdeb4d232e7109966ff6b6a47417efd8c381","modified":1464786953179},{"_id":"source/images/jenkins-maven-003.png","hash":"b108d0cdb5baeec16c1f72ef25636cff67f9a2b5","modified":1464786953178},{"_id":"source/images/jenkins-maven-006.png","hash":"76b4d166cb227049fda0fcbfbceaa42ca05c6352","modified":1464786953182},{"_id":"source/images/jenkins-maven-007.png","hash":"bc49291f05ff432c835d1be7fb9906d474f8452c","modified":1464788558856},{"_id":"source/images/microservice-jenkins-04.png","hash":"f24de060a7d82b16b668465992b1898ecdb536a3","modified":1490791939956},{"_id":"source/images/microservice-jenkins-03.png","hash":"2656dde09e7690886cf6e14e0f9fb26eed78b3b1","modified":1490791939953},{"_id":"source/images/microservice-jenkins-06.png","hash":"ed8c8b43bb9d8699bee6938fee43ee61ee5c6eb7","modified":1490791939961},{"_id":"source/images/microservice-jenkins-01.png","hash":"0eec70bc9fb55a67eab20f288cc7c4a0cc2fdc87","modified":1490791939949},{"_id":"source/images/microservice-jenkins-05.png","hash":"24f9abe2cfc2e947b3d6339979f90f6ec624538a","modified":1490791939959},{"_id":"source/images/microservice-jenkins-07.png","hash":"a143db69613d748279973d4fbcd8088ee2623626","modified":1490791939963},{"_id":"source/images/microservice-jenkins-02.png","hash":"1d4385d7508ba420b430b8b79f766b497f90a15a","modified":1490791939951},{"_id":"source/images/microservice-jenkins-08.png","hash":"9a8e5063d3a90bee93c902495550ebfca6b06ba0","modified":1490791939965},{"_id":"source/images/microservice-jenkins-11.png","hash":"a9c54230ea9b3f0b325f600fc00f474433151f99","modified":1490791939970},{"_id":"source/images/microservice-jenkins-09.png","hash":"1306741aae198ebf5b0b85e411f05c5ec52b64ae","modified":1490791939967},{"_id":"source/images/microservice-jenkins-12.png","hash":"b965251c5d6667b5afcbd4e30a2d58598eb11250","modified":1490791939971},{"_id":"source/images/microservice-jenkins-10.png","hash":"d6a01b3ba771335080701dbe5a65a4eb83c010d2","modified":1490791939969},{"_id":"source/images/rap-001.png","hash":"2b82c3b377f766e3d8c8e290e3397a63df90a2c1","modified":1468238937871},{"_id":"source/images/project-111.png","hash":"06265ebd8f641701edc1f3b900d055124dff5573","modified":1468238937870},{"_id":"source/images/project-004.jpg","hash":"f113d1b139db0087243a0e27ed37b1a2889855d1","modified":1467511080934},{"_id":"source/images/rap-003.png","hash":"ce5ccc665a0d552cc461e43236d690ae0a9df158","modified":1468238937873},{"_id":"source/images/rap-004.png","hash":"baa2f76303f26f5a90cc59c414e18778b4dfd6e2","modified":1468238937874},{"_id":"source/images/rap-006.png","hash":"d435997ffb7fb61f19c662c945db5ef08a3456af","modified":1468238937877},{"_id":"source/images/rap-005.png","hash":"db58b4073d4e39a713450cdafb6936c9e53162b8","modified":1468238937876},{"_id":"source/images/rap-007.png","hash":"9e71e103c64dbde351e1649c8c54481cfc5cbe5e","modified":1468238937878},{"_id":"source/images/rap-002.png","hash":"71b8d6aaea273c2659260186acdeb6dd5d3f9ee9","modified":1468238937872},{"_id":"source/images/react-002.png","hash":"052ffb65d91a0a846b44ae45d69f3932133ded5d","modified":1465006230063},{"_id":"source/images/rap-009.png","hash":"30521d8625f15ace936e4400f38bd36357e230ac","modified":1468238937881},{"_id":"source/images/rap-008.png","hash":"ecc3c58cba8ebbce42d4a0784a4679c990a0633c","modified":1468238937879},{"_id":"source/images/react-004.png","hash":"4966fcea781dd0aff04a6be2028da5aedc971568","modified":1465006267803},{"_id":"source/images/react-003.png","hash":"af89843f48b7b8e6686c5dc444c7772f2db4329a","modified":1465006247917},{"_id":"source/images/react-001.png","hash":"d6f1b6f721bd34891e700e056d51b180c911a932","modified":1465005907704},{"_id":"source/images/react-005.png","hash":"defd51b0d7343e103ee62469705495c472f1c3fe","modified":1465006490849},{"_id":"source/images/spring-transaction-001.png","hash":"fb96b57119e36c71ee55507f3cc23c27118cc111","modified":1471623545989},{"_id":"source/images/react-007.png","hash":"9b3a0f9c5f3cac5646527dd1c6e098ede9aafcaa","modified":1465006696833},{"_id":"source/images/react-006.png","hash":"6baa6b39976d095d71fd5f0eddea76713ed3cbf1","modified":1465006625134},{"_id":"source/images/spring-transaction-002.png","hash":"5edad50003d176347f17b7e37e1fad95fc2620b6","modified":1471623546002},{"_id":"source/images/spring-transaction-003.png","hash":"13fb0573de05e37889f559b9b1d875c57b750b9a","modified":1471623546008},{"_id":"source/images/spring-transaction-004.png","hash":"d1816736b67f25ef69eaa39d579930398efbbb2b","modified":1471623546016},{"_id":"source/images/spring-transaction-006.png","hash":"c2f5e00a35c79cdc5d1a41c27a167ebb5952bdb3","modified":1471623546045},{"_id":"source/images/spring-transaction-005.png","hash":"859e629dcb8ee7c7452f9ee14ac318c333b303ed","modified":1471623546041},{"_id":"source/images/spring-transaction-007.png","hash":"b6d8900e63229b2e4394f442cab063597c0788b7","modified":1471623546050},{"_id":"source/images/spring-transaction-009.png","hash":"204a012c3799fc38bed46e081bfe06076c82c4f8","modified":1471623546071},{"_id":"source/images/spring-transaction-010.png","hash":"9ac222fa8c0795095d9c24906458fc67524d5899","modified":1471623546074},{"_id":"source/images/spring-transaction-011.png","hash":"790ee8f98d6100935904b0af087226ae0f2ba603","modified":1471623546081},{"_id":"themes/next/languages/default.yml","hash":"982bfffdb6ab495867255e79d852a9adb68bd10c","modified":1455940924923},{"_id":"themes/next/languages/de.yml","hash":"3af67eda28640a99e17d06eec0c664e54e95fb2d","modified":1455940924920},{"_id":"source/images/version.png","hash":"ed57e84198ae33dd00dfbc8ca048b8caf9862d24","modified":1460172587674},{"_id":"themes/next/languages/en.yml","hash":"982bfffdb6ab495867255e79d852a9adb68bd10c","modified":1455940924924},{"_id":"themes/next/languages/ru.yml","hash":"4d1c2d4f4040d447a3511da51dc9fea7b177a7a6","modified":1455940924933},{"_id":"themes/next/languages/fr-FR.yml","hash":"eb05b50f49a29d46e90e45fabb12a14be6d7631d","modified":1455940924927},{"_id":"themes/next/languages/pt.yml","hash":"e32711ad646d05911b515cc30e14c57f534a0045","modified":1455940924930},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ba22a703638a23fce2cc51fcdfb1ba4dd7bcd114","modified":1455940924939},{"_id":"themes/next/languages/zh-hk.yml","hash":"f80a494ecf23166152011cb5f4e9174fefa9197c","modified":1455940924942},{"_id":"themes/next/languages/zh-tw.yml","hash":"f60af901f90fab657a1d27f981ad3381069842d0","modified":1455940924946},{"_id":"themes/next/layout/_layout.swig","hash":"43dc8e01ca4d2e508db830250f2dcba7ded94830","modified":1455940924949},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1455940925095},{"_id":"themes/next/layout/category.swig","hash":"c777432e1587826ccad5a4aa50309763a82df52b","modified":1455940925088},{"_id":"themes/next/layout/archive.swig","hash":"40e899e690172d8dd19317b17ec7be94406f114f","modified":1455940925083},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1455940925095},{"_id":"themes/next/layout/index.swig","hash":"56a70d0cd51ce739787da3e07638969ccb6abd2f","modified":1455940925091},{"_id":"themes/next/layout/post.swig","hash":"e67a6aabe4d71cbcf01a4cace652424bd49acc9b","modified":1455940925095},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1455940925616},{"_id":"themes/next/layout/tag.swig","hash":"06417b0b050c66d816323b6178c9376ba2e58dd9","modified":1455940925095},{"_id":"source/images/frame-zhifubao-006.png","hash":"d6aa19f5f358267fac4e5bcbcaadc10fa0f905a9","modified":1470842157229},{"_id":"source/images/frame-zhifubao-012.png","hash":"5500683062269a4ec9183b519797dae30bc09fbb","modified":1470842157247},{"_id":"source/images/frame-zhifubao-013.png","hash":"b06c6ad5a9b025f0eea567d32e17bca3f71a602e","modified":1470842157249},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1455940925621},{"_id":"source/images/frame-zhifubao-021.png","hash":"17d782adcac73bf0eef7813074fa1fefcedc09dc","modified":1470842157276},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1455940925627},{"_id":"source/images/introduce-2-2.png","hash":"b6ce9da78d1dd597c76d61f9cab047aff41d1baa","modified":1467510911329},{"_id":"source/images/framework-microservices.png","hash":"5af9bc26a78463d435adccfdab7878649a5979d2","modified":1490791939948},{"_id":"source/images/java-spring-aop.png","hash":"9c8c398fa913196dce6c5f480798d8c5afe76293","modified":1455943863131},{"_id":"source/images/java-web.png","hash":"2129f154eff906515903c96639e48ab076024bd2","modified":1462374215616},{"_id":"source/images/project-002.jpg","hash":"1e0807295d3464bf956d94d91ef089da0ebf3c03","modified":1467510954242},{"_id":"source/images/project-005.png","hash":"383af846ce2608b4501f677efd37657a1c83f633","modified":1467511140280},{"_id":"source/images/spring-transaction-008.png","hash":"5bae179fb350d9c2fd8b1ca1631ba7275e6886b7","modified":1471623546065},{"_id":"source/images/transaction-001.png","hash":"e22e36a5f86485f6a13c6e33ffc10e7718260be1","modified":1470842157314},{"_id":"source/images/test-001.png","hash":"c604ed3de2921435e6b21268484f3077b541b441","modified":1471623546142},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925287},{"_id":"source/images/frame-zhifubao-007.png","hash":"1110e6bdba9aaf6dbf06480ab0b167bde0a3860b","modified":1470842157231},{"_id":"source/images/frame-zhifubao-003.png","hash":"e21ace37d5305e9d27a8c007c340074db0535ca9","modified":1470842157220},{"_id":"source/images/frame-zhifubao-016.png","hash":"927892af29e9e878e498110561a64875f48de215","modified":1470842157259},{"_id":"source/images/java-monitor.png","hash":"4915f75253878f92fd57b0c9dbe8f542951a9570","modified":1457755756057},{"_id":"source/images/jenkins-002.png","hash":"3da279a40ea23dd0c279491671f8e4af20c832ce","modified":1464620054532},{"_id":"source/images/project-001.jpg","hash":"b132cddf404d1ae32a8490f3e3200778c7675647","modified":1467508829537},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"c0f68851e8835b41fb60e7a78f096235067f7754","modified":1455940924961},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"60766ca0cf5ba834d445c3304695d1a7ce0e1a36","modified":1455940924953},{"_id":"themes/next/layout/_macro/post.swig","hash":"affea948ef5ad04dd089350340af722bcb2e7892","modified":1455940924957},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1455940924967},{"_id":"themes/next/layout/_partials/footer.swig","hash":"779fc2ec44464d66cadcc85913c49b2d8aad3d22","modified":1455940924970},{"_id":"themes/next/layout/_partials/header.swig","hash":"8c8ae71c41722815540950ccefac47d6876d0413","modified":1455940924979},{"_id":"themes/next/layout/_partials/old-browsers.swig","hash":"3c4d930d34c234725065173780a23673e1c574f5","modified":1455940924982},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1455940924985},{"_id":"themes/next/layout/_partials/search.swig","hash":"1b86eb85017599392071d1230171e900045f8e69","modified":1455940924988},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","hash":"0aad8d447567b683108b274c841c536b2daa176d","modified":1455940925031},{"_id":"themes/next/layout/_scripts/analytics.swig","hash":"5e1b2b547a8f07ea0e3ab2a97dac9cc7d1e13c9a","modified":1455940925008},{"_id":"themes/next/layout/_partials/comments.swig","hash":"93055fc8e034037321280c182997a2a726e10c41","modified":1455940924965},{"_id":"themes/next/layout/_scripts/fancy-box.swig","hash":"701dfc53d750635de2f08f08d072d6ceb83b636c","modified":1455940925047},{"_id":"themes/next/layout/_scripts/helpers.swig","hash":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1455940925050},{"_id":"themes/next/layout/_scripts/motion.swig","hash":"de1fc505acbe8dc84f7376fe6ae9871f22d5582e","modified":1455940925061},{"_id":"themes/next/layout/_partials/head.swig","hash":"471e197800829e9704ba9bb8f2d8f342c3e65c44","modified":1455940924976},{"_id":"themes/next/scripts/filters/sticky.js","hash":"4e4c9a837e186f94f256bd6eabb89b138cfc0db6","modified":1455940925095},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1455940925114},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1455940925122},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1455940925117},{"_id":"themes/next/layout/_scripts/mathjax.swig","hash":"8eecd19c756df615afb3f5ec6a527cd7bd06d20c","modified":1455940925057},{"_id":"themes/next/layout/_scripts/baidushare.swig","hash":"640d4dda003f54a0dffa4508fba4d91ac0dcfa6e","modified":1455940925028},{"_id":"themes/next/source/css/main.styl","hash":"6bb842ad45a575774299bed3848d46475820fb9f","modified":1455940925286},{"_id":"themes/next/source/js/bootstrap.js","hash":"5a963f40fb81d265a31679f8f543e50ffdcc7485","modified":1455940925313},{"_id":"themes/next/layout/_scripts/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1455940925077},{"_id":"themes/next/source/js/fancy-box.js","hash":"fbeabc936667a9e15556c8defb5fcd582add8067","modified":1455940925315},{"_id":"themes/next/source/js/helpers.js","hash":"69d8ae9b686a82e3a4397b61a477eb8da68bd153","modified":1455940925316},{"_id":"themes/next/source/js/hook-duoshuo.js","hash":"ccb32e0a1acf798337c9697e1aab5484b52f9df4","modified":1455940925317},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","hash":"97640be11a524b203781c1a03f623ef0b9195a02","modified":1455940925314},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1455940925294},{"_id":"themes/next/source/js/motion.js","hash":"a9327a3c0a5df289799c5ffe3e8bf7dd6e407797","modified":1455940925317},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1455940925298},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1455940925301},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1455940925304},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1455940925308},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1455940925310},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1455940925309},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1455940925290},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1455940925310},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1455940925313},{"_id":"source/images/frame-zhifubao-004.png","hash":"e7b7975e9c1fe61155885d6a6e448d0c5c62ee10","modified":1470842157223},{"_id":"source/images/frame-zhifubao-023.png","hash":"722bcba989c19b80254bbd33e49cb7bc02075214","modified":1470842157283},{"_id":"source/images/frame-zhifubao-026.png","hash":"57a94be3b1e300c5134ecb15ac59356fc1d5c820","modified":1470842157291},{"_id":"source/images/java+io.png","hash":"71047dc8f77224270787c3c74beeab77f99ae6f1","modified":1455941821110},{"_id":"source/images/jenkins-001.png","hash":"cd5717677538c32515d05c9edc19e849158122d7","modified":1464620012714},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1455940925312},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1455940925311},{"_id":"source/images/project-110.png","hash":"40f9b142781860af0154b25c8a0c7bd689a15144","modified":1468238937869},{"_id":"source/images/test-002.png","hash":"ed647bc05ab6bcb7ab264525b471d675c213c51a","modified":1471623546164},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925237},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925240},{"_id":"themes/next/source/css/_mixins/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925241},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925280},{"_id":"source/images/frame-zhifubao-005.png","hash":"28ecd95d1b212e356223af2875b06ad54e003fac","modified":1470842157227},{"_id":"source/images/frame-zhifubao-010.png","hash":"7276723a5aab070a73d0c9cde69a28a11bd1dcbb","modified":1470842157242},{"_id":"source/images/frame-zhifubao-011.png","hash":"32da9064cdd2a7e1344aa3332ed6d2765d22aab4","modified":1470842157245},{"_id":"source/images/frame-zhifubao-018.png","hash":"a628af82e067c27c7c5d0e11218392a3188a717d","modified":1470842157267},{"_id":"source/images/frame-zhifubao-029.png","hash":"23f9eb423894d253cdc6a5f97472ddaf482b80d4","modified":1470842157301},{"_id":"themes/next/source/js/ua-parser.min.js","hash":"fc57202d8d952fceb3f1ad5b6e7183f47a3f1a0e","modified":1455940925374},{"_id":"source/images/jenkins-003.png","hash":"70e0c22b81b099d4e5005f97fb2be4c3eeef0a0c","modified":1464620081934},{"_id":"source/images/project-003.png","hash":"f3b12d92757164334be71d0b071b4cc67740b5f5","modified":1467510991467},{"_id":"themes/next/layout/_scripts/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1455940925018},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1455940925023},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1455940924997},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1455940925000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1455940925013},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1455940925005},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"73e8294939bbbb46755798215c605ebe5af5918f","modified":1455940924994},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1455940925036},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","hash":"b03b2f596b7b9795f63dc4174329bf14aee7a48c","modified":1455940925044},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1455940925236},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1455940925240},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"932cb9c53d64b086638adca05dcf4e2df239a8f9","modified":1455940925273},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"ac600616e83e23ee446a646c57500706936bb45e","modified":1455940925071},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1455940925283},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9bc1cad0c7a9f4fdfa665098fb5c542dc9e640db","modified":1455940925280},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1455940925377},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1455940925380},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1455940925417},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1455940925426},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1455940925418},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1455940925422},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1455940925441},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1455940925448},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1455940925444},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1455940925452},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1455940925515},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1455940925546},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1455940925449},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1455940925553},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1455940925550},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1455940925556},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1455940925563},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1455940925566},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1455940925562},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1455940925569},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1455940925606},{"_id":"source/images/frame-zhifubao-009.png","hash":"31ec39e073c508e4061f62de0c237343c05a2c6f","modified":1470842157239},{"_id":"source/images/frame-zhifubao-008.png","hash":"895ac38cbc05552cc395a833e8ad5220c59998cb","modified":1470842157235},{"_id":"source/images/frame-zhifubao-015.png","hash":"4690b7633ddfea9ef7b50769d3f63cfb79c7d494","modified":1470842157256},{"_id":"source/images/frame-zhifubao-014.png","hash":"ce735cfefe399bfa33541a1d0433e6f924aca75b","modified":1470842157253},{"_id":"source/images/frame-zhifubao-019.png","hash":"cd97690d87d261f63892fafcaa506667c16958fc","modified":1470842157270},{"_id":"source/images/frame-zhifubao-022.png","hash":"c1849018e73832aee84d868c48ed09bb3ddb87c6","modified":1470842157280},{"_id":"source/images/frame-zhifubao-028.png","hash":"bd1a3a020fc30c59560c60a1848d1ff7adaea331","modified":1470842157298},{"_id":"source/images/post-gatsby-01","hash":"5f199530e4840364068499c0af45a55df83f5d7e","modified":1536426002900},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1455940925599},{"_id":"themes/next/source/css/_common/_page/home.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1455940925205},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1455940925613},{"_id":"source/images/frame-zhifubao-017.png","hash":"1bd0feecb884cb60a1f2874f66377d744b5ee305","modified":1470842157263},{"_id":"source/images/frame-zhifubao-020.png","hash":"f026ab6e8ca1e19eeeec02dec20328b0ed434bda","modified":1470842157274},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","hash":"dac21141c7893ab9de697a8183d3b3f4eb7f0a5a","modified":1455940925126},{"_id":"themes/next/source/css/_common/_component/buttons.styl","hash":"0a1730773478d843e123404ab4dae24d7cb0f2b7","modified":1455940925132},{"_id":"themes/next/source/css/_common/_component/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1455940925135},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","hash":"cd2ec04433d6c98a0994945475fb47155d1015c0","modified":1455940925139},{"_id":"themes/next/source/css/_common/_component/gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1455940925143},{"_id":"themes/next/source/css/_common/_component/group-pictures.styl","hash":"70d7c3b5f8f2485dcce1a27e2c9b43df988fbc6f","modified":1455940925145},{"_id":"themes/next/source/css/_common/_component/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1455940925129},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1455940925148},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","hash":"8909298333c6dfc6e3686d85e4d98c76dfcf75c9","modified":1455940925154},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","hash":"008d5f951144c7fe5c7e66dac330d5fb715a0a83","modified":1455940925157},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","hash":"f28f00b2acb0df0343e77400bcc8246b40ac046c","modified":1455940925160},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1455940925166},{"_id":"themes/next/source/css/_common/_component/posts.styl","hash":"52badf0e8a0a44bb67f16486ada44d945b1aba6b","modified":1455940925164},{"_id":"themes/next/source/css/_common/_core/base.styl","hash":"90a36892f5f595dda58a86901782b1addbdb3b46","modified":1455940925169},{"_id":"themes/next/source/css/_common/_core/helpers.styl","hash":"b8e1b52b7aaa94b7c52d1681225e80f1af1219fa","modified":1455940925173},{"_id":"themes/next/source/css/_common/_core/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1455940925176},{"_id":"themes/next/source/css/_common/_core/tables.styl","hash":"16a98866f5025c050c56e52312228355a16d00d9","modified":1455940925183},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","hash":"c46d16429b85570347373fd11db8c222f6ff914e","modified":1455940925186},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","hash":"7bdc92a55f2eee20b6b546e93e4566696b459b9d","modified":1455940925189},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","hash":"dbb0843ea5aa7c2ac2755a2d1ce60fa662f1b939","modified":1455940925192},{"_id":"themes/next/source/css/_common/_component/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1455940925151},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","hash":"692c01dcdc612c3e1e245cf93d0ace0a4e2aaf3f","modified":1455940925195},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","hash":"a9f5260198225801eb5c16345a69a7e3cab904fe","modified":1455940925199},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1455940925208},{"_id":"themes/next/source/css/_common/_section/body.styl","hash":"6eaa5d9cb08ecfb2d377a475e541e41fbfe4c1b6","modified":1455940925211},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","hash":"3702c4c350524622f7dd658b05449fc425a819ef","modified":1455940925180},{"_id":"themes/next/source/css/_common/_section/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1455940925214},{"_id":"themes/next/source/css/_common/_section/header.styl","hash":"cd6527e4877f62f08e8668b020ec9f9e53f625a9","modified":1455940925217},{"_id":"themes/next/source/css/_common/_page/archive.styl","hash":"df9e5a418f6e54abe69c1ab84649be46fb0c51a6","modified":1455940925202},{"_id":"themes/next/source/css/_common/_page/categories.styl","hash":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1455940925205},{"_id":"themes/next/source/css/_common/_section/layout.styl","hash":"9a9630b7aae08b5008f3a0ff1152bdca427ff644","modified":1455940925220},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"e4b5b56e1a035c99ebd50d00e93d89e2e8d0b735","modified":1455940925244},{"_id":"themes/next/source/css/_common/_section/media.styl","hash":"482784c04c0cd15a3f0d86444966fe306af7d13a","modified":1455940925223},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","hash":"406b78061c45bda0376ce2360ff2932262f5f2f0","modified":1455940925227},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"3b0a186e8d9d5cfe30dd611456b61053ea535d7b","modified":1455940925253},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1455940925250},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"452e71caf2c37fa5a06f8d9ada81337a57485885","modified":1455940925247},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1455940925256},{"_id":"themes/next/source/css/_schemes/default/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1455940925262},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"f10be4b0c642104a6f533b94ac09e22019aa640e","modified":1455940925259},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455940925382},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1455940925381},{"_id":"themes/next/source/css/_schemes/default/index.styl","hash":"ecd76494cea5fbf592cc13ba1e4ccdfedbc5bf1b","modified":1455940925271},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","hash":"dd667be3f5f24cebdc15d0262c7d397f23d751c5","modified":1455940925265},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455940925383},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1455940925384},{"_id":"themes/next/source/css/_schemes/default/_search.styl","hash":"e315ee6f604c2bcc44a5ef9078f5ce420c153a4b","modified":1455940925268},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1455940925394},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1455940925386},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1455940925385},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1455940925404},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1455940925432},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1455940925459},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1455940925413},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1455940925456},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1455940925463},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1455940925438},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1455940925542},{"_id":"source/images/frame-zhifubao-027.png","hash":"a18b0f2f3943d81b3a09d5f9dc3a943fa36f7c60","modified":1470842157295},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1455940925512},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1455940925470},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1455940925586},{"_id":"source/images/frame-zhifubao-001.png","hash":"476af3a6e32b0079ebd3e55df7fadad4a939de4e","modified":1470842157216},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1455940925508},{"_id":"source/images/frame-zhifubao-024.png","hash":"50fcb2ab435443a5caf11ab491b4cd781310ab72","modified":1470842157287},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1455940925486},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1455940925387},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","hash":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1455940925234},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","hash":"627cdd38b34b15c9fc17f4dc332b1be928f8ed0d","modified":1455940925231},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1455940925391},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1455940925390},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1455940925393},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1455940925504},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1455940925392},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1455940925393},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1455940925499},{"_id":"public/atom.xml","hash":"9cf405519d0acd8b3610e06940265299edf29452","modified":1536514178916},{"_id":"public/sitemap.xml","hash":"21285531b97497c0ec7e1fe965b0ceaca60af828","modified":1536514179036},{"_id":"public/2018/09/10/hexo生成的静态文件如何更新到自己的服务器上/index.html","hash":"e2003c67b93650645a638dfa1a203df95e0d15ed","modified":1536514179076},{"_id":"public/archives/page/3/index.html","hash":"e35e69a47ee58e45d10d19965688496fc7a05616","modified":1536514179076},{"_id":"public/archives/page/5/index.html","hash":"53843b5b5bac6c5e03e42f2c61129ff2c78fc657","modified":1536514179076},{"_id":"public/archives/page/7/index.html","hash":"14ac37d6ac123e8c4b5d844545298dc06187e364","modified":1536514179076},{"_id":"public/archives/2015/index.html","hash":"2c7e6734176ec8dbd314110f0b478298794fe9d4","modified":1536514179076},{"_id":"public/archives/2015/12/index.html","hash":"88f9e2bbe9642162706861be9023feb263c4dba0","modified":1536514179076},{"_id":"public/archives/2016/index.html","hash":"eeeba9bddb7bb966242b01a23917f9c291bc9143","modified":1536514179076},{"_id":"public/archives/2016/page/3/index.html","hash":"33224c7e0c36f87a89c3664d3275a2f1d98d747a","modified":1536514179076},{"_id":"public/archives/2016/page/5/index.html","hash":"ee163b0d92bf835b5f12874c62bb959b9356dc91","modified":1536514179076},{"_id":"public/archives/2016/01/index.html","hash":"05a0a1dd6804ede1993c376a7ea8942839fdd27d","modified":1536514179077},{"_id":"public/archives/2016/02/index.html","hash":"242454c6eaf67f46dc01f71cd8fa05b9bb490c09","modified":1536514179077},{"_id":"public/archives/2016/03/index.html","hash":"ba2b44e9aba5fcc87abba34c1e502e6817e4e7f0","modified":1536514179077},{"_id":"public/archives/2016/04/index.html","hash":"6059c9a46601faac7e102b3b193c28e1dde443a7","modified":1536514179077},{"_id":"public/archives/2016/05/index.html","hash":"5bef339a08984d04a217a5be4eca993b25326c88","modified":1536514179077},{"_id":"public/archives/2016/06/index.html","hash":"cc382c81294690b5c1775a4e9d304372c4612ff7","modified":1536514179077},{"_id":"public/archives/2016/07/index.html","hash":"64f2ef08bf5208ec7e0f67ebeb30079fdc975071","modified":1536514179077},{"_id":"public/archives/2016/08/index.html","hash":"b72845514a0a27a77fbe4ab833ed2c9d8360e03d","modified":1536514179077},{"_id":"public/archives/2016/09/index.html","hash":"578473806c94d028364d0c0989d0e079180a4e4c","modified":1536514179077},{"_id":"public/archives/2016/12/index.html","hash":"0ddf6c663e00c4dfd91caa297edba095e852b630","modified":1536514179077},{"_id":"public/archives/2017/index.html","hash":"f7edd3a8446243b560c61472bdf002eb14ff86ac","modified":1536514179077},{"_id":"public/archives/2017/page/2/index.html","hash":"f53f4c50fb05325a288336ef2cb4cefaf5fb1e60","modified":1536514179078},{"_id":"public/archives/2017/03/index.html","hash":"445ebd07e69d49f358a210e2516b7f449ecd8192","modified":1536514179078},{"_id":"public/archives/2017/09/index.html","hash":"12ac5b0b24f57da72c5c77b7511c9bda5869a73d","modified":1536514179078},{"_id":"public/archives/2018/index.html","hash":"1fedcca206957c5388fc51226b5b96fb16a4956a","modified":1536514179079},{"_id":"public/archives/2018/02/index.html","hash":"15590b83492003e600f98db2bdbc2c6dd3b5c8ef","modified":1536514179079},{"_id":"public/archives/2018/03/index.html","hash":"3f7fc9edd828fd41cc8cd43a34dc8cb952ba28e2","modified":1536514179079},{"_id":"public/archives/2018/09/index.html","hash":"d50d855bb1196d9ee4cf6751cc05e01220ecae2d","modified":1536514179079},{"_id":"public/tags/Emacs/index.html","hash":"2d5a4b193c83095ad9596cef3a91a1523f07908f","modified":1536514179079},{"_id":"public/tags/指南/index.html","hash":"91ba6f01d524d683690b0946f5f8b261b103fc83","modified":1536514179080},{"_id":"public/tags/编辑器/index.html","hash":"3060bf2f1fff56e53cb1b8f8082c49c37a6c93c7","modified":1536514179080},{"_id":"public/tags/java/index.html","hash":"4e9ba2d261524a0e6bcd5b090a6abbc29267c1b0","modified":1536514179080},{"_id":"public/tags/java/page/2/index.html","hash":"fac861ba52857f0196117b45ac02219b093c1b5a","modified":1536514179080},{"_id":"public/tags/java/page/3/index.html","hash":"9cb68964e0f45dbeb62e468f384f40b63b258e62","modified":1536514179080},{"_id":"public/tags/java/page/4/index.html","hash":"97b97a1dcf84c6b0eb4505e35a99ff7122e21d1a","modified":1536514179080},{"_id":"public/tags/synchronize/index.html","hash":"ec06fbb2d8e6897f336cbccb2e70fd180dd0079f","modified":1536514179080},{"_id":"public/tags/ArrayList/index.html","hash":"81178894e18134828b83b41eb6c73feb2f18e6f9","modified":1536514179080},{"_id":"public/tags/int/index.html","hash":"b88474b28d8d33625e0016b38f98e82d0b69ae6f","modified":1536514179080},{"_id":"public/tags/Integer/index.html","hash":"3cf055d459e9226cb78b72d67100e2cd01e6b4ce","modified":1536514179080},{"_id":"public/tags/j2se/index.html","hash":"26d55d92ed1d015a649364fbd866995aa78e1c35","modified":1536514179081},{"_id":"public/tags/error/index.html","hash":"07469218930052d9d622e2dd6139172681241a07","modified":1536514179081},{"_id":"public/tags/tomcat/index.html","hash":"ab5628731d9d84eab3016a1eba9ab973a999ec0c","modified":1536514179081},{"_id":"public/tags/spring-boot/index.html","hash":"a11e889637e2be40ac5a4ce61f7372fb62c0964c","modified":1536514179081},{"_id":"public/tags/html/index.html","hash":"2df9777456ad38ec8e2821ecea50e9a2ad945fee","modified":1536514179081},{"_id":"public/tags/reactjs/index.html","hash":"088fbf9c39e9b0b656fdb24be7e0a4b618ac92a9","modified":1536514179081},{"_id":"public/tags/node/index.html","hash":"18b33ee342ebc91d18c9f9ff29e3ba00dca715d5","modified":1536514179081},{"_id":"public/tags/npm/index.html","hash":"6035ee2ba65aa382718df7a10dbd6e5bacd45a89","modified":1536514179081},{"_id":"public/tags/静态网站/index.html","hash":"87773c55305683618f36a830930c0ffb0514979f","modified":1536514179081},{"_id":"public/tags/ELK/index.html","hash":"c4fca27ec67cf2dd2581b190c4be5de9570d0b1a","modified":1536514179082},{"_id":"public/tags/elasticsearch/index.html","hash":"f9dd9691b0f671fdbc4e7a519ad63f28e5215a27","modified":1536514179082},{"_id":"public/tags/es/index.html","hash":"d9d883306bb5ab69453657f83c866a2da61c3d77","modified":1536514179082},{"_id":"public/tags/kafka/index.html","hash":"dbbb4fc40d21dfe338053193930e89dc251d943e","modified":1536514179082},{"_id":"public/tags/zookeeper/index.html","hash":"32d407ac2e32be2d02ce3eb17daa117f1fd412c0","modified":1536514179082},{"_id":"public/tags/kibana/index.html","hash":"256ec539fb209ae1f9d40d6c25c185792a004a6e","modified":1536514179082},{"_id":"public/tags/logstash/index.html","hash":"769b6891c4f8ffb9b653f8bd1f15b9c473a5a0ad","modified":1536514179082},{"_id":"public/tags/nginx/index.html","hash":"926896cf8f62017653b6779e2f7a866f4b2059e1","modified":1536514179082},{"_id":"public/tags/log/index.html","hash":"d609b37efed40211178820c221c2003b8d27de28","modified":1536514179082},{"_id":"public/tags/junit/index.html","hash":"2a08b6aaa358bcd7bfb25e1156ef12420ea2f699","modified":1536514179083},{"_id":"public/tags/测试，-spring-mvc/index.html","hash":"dce0d8bb81c1b58583412447702fa27e3c5ad6f5","modified":1536514179083},{"_id":"public/tags/Springboot应用中如何针对springmvc的controller写单元测试/index.html","hash":"24b4c1958e7ba7a19863d32cde5e1ea25a96949d","modified":1536514179083},{"_id":"public/tags/array/index.html","hash":"abff157787d59036d616182ac401f7e3bf444cd6","modified":1536514179083},{"_id":"public/tags/print/index.html","hash":"52d14b97f8578adb5b85fabbde00e88a507778ae","modified":1536514179083},{"_id":"public/tags/SOA/index.html","hash":"b02535d361b0cfd4127f3d28c07e88c597e34d77","modified":1536514179083},{"_id":"public/tags/分布式事务/index.html","hash":"28d71634047766a5c13454e1f4dd4b1da51e26d3","modified":1536514179083},{"_id":"public/tags/柔性事务/index.html","hash":"6730f9d39a7ee34ffa0bc95b6d550c4cd6d7f06e","modified":1536514179083},{"_id":"public/tags/消息事务/index.html","hash":"0dcd7104da0c0a9aecc1fb6ff1969baadea3297b","modified":1536514179083},{"_id":"public/tags/react/index.html","hash":"e66cba26c308ea3fcb46cb452f49091e1cc03616","modified":1536514179083},{"_id":"public/tags/react-native/index.html","hash":"9f7cc85663ec65d2f534f2080cd6754ee67b8a2a","modified":1536514179084},{"_id":"public/tags/nodejs/index.html","hash":"43d1d5784c6383d1b9216d1e56c6e7e83865b141","modified":1536514179084},{"_id":"public/tags/android/index.html","hash":"796a6f8a6815e871dab1f1e286776e88423d017f","modified":1536514179084},{"_id":"public/tags/windows/index.html","hash":"b1d6eec4abc4a594fe98e0d60fb841849c8bb70b","modified":1536514179084},{"_id":"public/tags/mysql/index.html","hash":"d1fa73388ff6f7c08c16d816ef1e028229a6da99","modified":1536514179084},{"_id":"public/tags/install/index.html","hash":"6bdae43d24dbcd96257848343d631335ae54c8ea","modified":1536514179084},{"_id":"public/tags/database/index.html","hash":"df81eafe1c6513ef796d739df5bec28b82022e3c","modified":1536514179084},{"_id":"public/tags/guava/index.html","hash":"e5a636136ee1406f50f257d2053cc01eb71ba504","modified":1536514179085},{"_id":"public/tags/transform-objects/index.html","hash":"e1df847fb8bd2eab61e73d4b849893b358e76c74","modified":1536514179085},{"_id":"public/tags/convert/index.html","hash":"de622de96f2d3fc69e0f8d407b9bb8bc84c39941","modified":1536514179085},{"_id":"public/tags/对象转换/index.html","hash":"b01fb30d3352e3cb4de78be7087bff8cd36fda17","modified":1536514179085},{"_id":"public/tags/数据库/index.html","hash":"60123652080bea65ef28aa45883fc836145b3140","modified":1536514179086},{"_id":"public/tags/主从同步/index.html","hash":"61ff2421ef5342a04c2e70d7aa2633d1a7006f28","modified":1536514179086},{"_id":"public/tags/master-slave/index.html","hash":"7db449c05dd5e06c0c4a673c0cd446048840fac6","modified":1536514179086},{"_id":"public/tags/dev/index.html","hash":"3aaaf1258823b58b139181bd93b1526a5ae618c6","modified":1536514179086},{"_id":"public/tags/collect/index.html","hash":"ac4c1bb6710306a95e3cbc43bdde37749621e9e1","modified":1536514179086},{"_id":"public/tags/post/index.html","hash":"075e863cab8b4cbe63fe31bb6d8c43786996fdac","modified":1536514179086},{"_id":"public/tags/git/index.html","hash":"71c2bf95e779f6956bfd17d89fd760ff09ea94ec","modified":1536514179086},{"_id":"public/tags/resouce/index.html","hash":"3d6853d9aa6149e3ce48655d0e8c2c54dcc72f8b","modified":1536514179086},{"_id":"public/tags/collect-of-dev/index.html","hash":"b9d9c4df19190e92f1299be8d7811880c048d99b","modified":1536514179086},{"_id":"public/tags/api-verion/index.html","hash":"6023590185cdf2c13f369ebdb1a3c640c1cbd309","modified":1536514179087},{"_id":"public/tags/spring-mvc/index.html","hash":"172dcedf181d9a6d89bc14e445adcb648c1c5663","modified":1536514179087},{"_id":"public/tags/hexo/index.html","hash":"37d03cd8d22b8478ad3fba4275b27aa02ef106ef","modified":1536514179087},{"_id":"public/tags/blog/index.html","hash":"a06312219cfc2bfd2163d4cbb85481a0f10ab5f3","modified":1536514179087},{"_id":"public/tags/自动发布/index.html","hash":"4e7b7b62e57d884d442d938bbaa1cc576be14182","modified":1536514179087},{"_id":"public/tags/自动部署/index.html","hash":"edbd34c7c855c986090df1985fc9e36d18b6ef28","modified":1536514179088},{"_id":"public/tags/云服务/index.html","hash":"266d62f6c81807056c610388b7339bd711d5094b","modified":1536514179088},{"_id":"public/tags/branch/index.html","hash":"f6bf72dcde1a58ad8800fa803b335b56910ffb3e","modified":1536514179088},{"_id":"public/tags/版本控制/index.html","hash":"8b41031050f69b2e5e8d9aa05cf7f105257de3f2","modified":1536514179088},{"_id":"public/tags/分支管理/index.html","hash":"2620d9e0bed8605d45eab52319e8990bd2639d95","modified":1536514179088},{"_id":"public/tags/设计模式/index.html","hash":"c53dcff01d93ade07d407ee2828001d734302052","modified":1536514179089},{"_id":"public/tags/Builder/index.html","hash":"64775013ba215b4f372cfcfebeac0074906b614e","modified":1536514179089},{"_id":"public/tags/design-pattern/index.html","hash":"cab3a968621559dc0f4008392f37b88e7c021ac8","modified":1536514179089},{"_id":"public/tags/github/index.html","hash":"42b12f039300d1add9a31193cd8d70ad9993ab3a","modified":1536514179089},{"_id":"public/tags/使用方法/index.html","hash":"7b4f9cd9f2bb5aabfd8590cce99c1bf0bcac4ac8","modified":1536514179090},{"_id":"public/tags/static关键字/index.html","hash":"a869c0e90f70ad14bb4fd41d08fcec8c569df4ca","modified":1536514179090},{"_id":"public/tags/patten/index.html","hash":"0fdc60e19fd5c959e2efbf1e355223851055c3d2","modified":1536514179090},{"_id":"public/tags/coding/index.html","hash":"cff4cadc03ea47a926efdbc79a0d27a62f3e64da","modified":1536514179090},{"_id":"public/tags/io/index.html","hash":"f2c6fdea85e75a99b7197c3f443121cc40538519","modified":1536514179090},{"_id":"public/tags/整理/index.html","hash":"1ad05adfe8a301f0a55383114cf96f446e51b377","modified":1536514179090},{"_id":"public/tags/思维导图/index.html","hash":"818ed9ab45446546dd655c92179d9e1532694eca","modified":1536514179090},{"_id":"public/tags/web/index.html","hash":"8c4194de44d37d2884ff96836f4fe17fc11a7efe","modified":1536514179090},{"_id":"public/tags/java-web/index.html","hash":"2b28641ba03916b5e7df22d3cd86d9072b70f98a","modified":1536514179090},{"_id":"public/tags/enum/index.html","hash":"b0ada94b514724f0a99709da4f5c52b0a36a5b6f","modified":1536514179091},{"_id":"public/tags/Test/index.html","hash":"443c415d21fdb018be5e89f8773fb0694dc8731c","modified":1536514179091},{"_id":"public/tags/测试/index.html","hash":"d5138388ac83abd75b70eb79f9e2dd21d990a918","modified":1536514179091},{"_id":"public/tags/单元测试/index.html","hash":"42eec84ff20e4bb7d5a307fefe0e94a4e842a0e3","modified":1536514179091},{"_id":"public/tags/自动化测试/index.html","hash":"b6913fcb24e122fa9aed8287f8f01b59fcca264e","modified":1536514179091},{"_id":"public/tags/microservices/index.html","hash":"c1c8d1a2c9457bf4663704ec27d3cbcd5c8ea058","modified":1536514179091},{"_id":"public/tags/微服务/index.html","hash":"2fd4a1e13efa7d796cf2332a2d3b99963a13fbb5","modified":1536514179091},{"_id":"public/tags/服务注册/index.html","hash":"41a7728a1dceb54bc0a521ce576780fd29409c96","modified":1536514179091},{"_id":"public/tags/服务发现/index.html","hash":"3cf753861e95afe7d4a89fd5db14221992d08be4","modified":1536514179091},{"_id":"public/tags/并发/index.html","hash":"cb7521677bd60edbab3fbb2104723a6bc170b448","modified":1536514179091},{"_id":"public/tags/多线程/index.html","hash":"ae5b878666fc5910b6f719252efd4ea60efee10b","modified":1536514179091},{"_id":"public/tags/jquery/index.html","hash":"4ca7b8e4855b7b74e0b4d1a673294f6726dca7ef","modified":1536514179091},{"_id":"public/tags/validate/index.html","hash":"3172abeb3edd772af46b509a263cfa6b9f49692b","modified":1536514179092},{"_id":"public/tags/Node-js/index.html","hash":"ab1bb6e98596c32cebc2a21d8a12921d050062c0","modified":1536514179092},{"_id":"public/tags/Express/index.html","hash":"57ae71fc2829d8e805297cfeb1d2adca4041726d","modified":1536514179092},{"_id":"public/tags/api网关/index.html","hash":"63401416de02e04fb23e67e13b43d2f53da8656b","modified":1536514179092},{"_id":"public/tags/api-gateway/index.html","hash":"2de2dc36649e13f59473011f99dcfc4ba6305a9c","modified":1536514179092},{"_id":"public/tags/jenkins/index.html","hash":"77d8a1743bf9219a4a543d82805faca3b1578506","modified":1536514179092},{"_id":"public/tags/自动化/index.html","hash":"f85a7e502860f8e67cd0972da7e495efd58313af","modified":1536514179092},{"_id":"public/tags/构建/index.html","hash":"7eed8953104bdcc3f1bd0781f2d59e2d4ef1a064","modified":1536514179092},{"_id":"public/tags/docker/index.html","hash":"0e8e6ec3914c16238ca8bf83a679ceffb3a43b5b","modified":1536514179092},{"_id":"public/tags/centos7/index.html","hash":"cc2ed0b6aaf7b9f3fef896831e84730977a6377a","modified":1536514179092},{"_id":"public/tags/gitlab/index.html","hash":"6fadcee583f14b74264b8323151e86370add3f2c","modified":1536514179095},{"_id":"public/tags/代码仓库/index.html","hash":"3a95615c71f3649d0352813f7e59a92dca277f1d","modified":1536514179095},{"_id":"public/tags/shell/index.html","hash":"2b4bb5d107a22cf6162fdb2e1d49a34c2158da9d","modified":1536514179095},{"_id":"public/tags/sh/index.html","hash":"e06c4a8b5ceeb03315542ddc0ce7aa923a3bb4f5","modified":1536514179095},{"_id":"public/tags/linux/index.html","hash":"49651a3d52e14ca08527a1fa20a889f85af04c95","modified":1536514179096},{"_id":"public/tags/mosquitto/index.html","hash":"509cc568bbac52b06c266e152155129563640bc1","modified":1536514179096},{"_id":"public/tags/mqtt/index.html","hash":"63916995f0b0d0784e52a4c8b02fc89939fb2f67","modified":1536514179096},{"_id":"public/tags/服务器配置/index.html","hash":"e774427ef2ab27752a353fc0d0d80132a9854c53","modified":1536514179096},{"_id":"public/tags/springboot/index.html","hash":"3267e6b0c650bfa50721f1d9e487f9236cd2ddc8","modified":1536514179096},{"_id":"public/tags/itime/index.html","hash":"dd2eb68d03aa6628bf62cf1e4eed5d1a7b00389e","modified":1536514179096},{"_id":"public/tags/spring-data-jpa/index.html","hash":"af0c01bfe8d035a0c151cd194f09bf4f3a0686a6","modified":1536514179096},{"_id":"public/tags/mybatis/index.html","hash":"7970c95e47faa65bc8dfd1363e3d8b6c9254d61d","modified":1536514179096},{"_id":"public/tags/shiro/index.html","hash":"585f6bba176c2bf0be8ee59ae55583958542daae","modified":1536514179096},{"_id":"public/tags/spring/index.html","hash":"b3639c6d95603d80e5a5f8652cf29f23b496b2a3","modified":1536514179096},{"_id":"public/tags/aop/index.html","hash":"543ab1fc594550058186523a4d4bbe7627d3e86c","modified":1536514179096},{"_id":"public/tags/spring-cache/index.html","hash":"8c57d64bbc868be988bd1092ceaddb2821edd28b","modified":1536514179096},{"_id":"public/tags/redis/index.html","hash":"caed9553f3f5aaa02dbef958652c124fe1a6ed11","modified":1536514179096},{"_id":"public/tags/注解/index.html","hash":"f4dd33b74effaafec920384c5510782525844b8e","modified":1536514179097},{"_id":"public/tags/支付宝/index.html","hash":"c808ec7a3a73139181727662b1e9f7c2afd4b96b","modified":1536514179097},{"_id":"public/tags/架构/index.html","hash":"f45da8e91795a98dfc62b46c8f13ae98663879dc","modified":1536514179097},{"_id":"public/tags/transaction/index.html","hash":"35522fa4eb5e7f5e50039f0ac31626785a9a1f6c","modified":1536514179098},{"_id":"public/tags/事务/index.html","hash":"4ec7d5d2f03d9d7035f41794db8af03ec2375573","modified":1536514179098},{"_id":"public/tags/svn/index.html","hash":"a09d6fa35036b2e7acc20f787e54ce58de3eb9f6","modified":1536514179098},{"_id":"public/tags/rest/index.html","hash":"00c286737b6598a8f1550c3510f9b9b2bf4ef9d2","modified":1536514179099},{"_id":"public/tags/api/index.html","hash":"07bcb599b718f964097f28de539179a2ef41677e","modified":1536514179099},{"_id":"public/tags/versioning/index.html","hash":"8150bbe7dd2916afe8148ade3524fa367b21b357","modified":1536514179099},{"_id":"public/tags/springmvc/index.html","hash":"663c6e2d22da63fd8e73ef3e1567e977c049c45f","modified":1536514179099},{"_id":"public/tags/ngnix/index.html","hash":"2ef9358dbea6dd9793b3ae0428cf6e9d787a6d95","modified":1536514179099},{"_id":"public/tags/picture/index.html","hash":"685fa4986df658c957f68d54428a209266c8717c","modified":1536514179100},{"_id":"public/tags/server/index.html","hash":"4a9d4b52ac1e3c567bf5e877cefa08fad1a96a9a","modified":1536514179100},{"_id":"public/tags/deploy/index.html","hash":"e14cf182bd090e45c0b4dcc2ab67803aef2e703e","modified":1536514179100},{"_id":"public/tags/spring事务/index.html","hash":"3cd0386db8369b04582d38040615eac3171799cb","modified":1536514179100},{"_id":"public/tags/Transactional/index.html","hash":"85f32ae8a5fd676f0e917b37bbd869de932dc930","modified":1536514179101},{"_id":"public/tags/数据库事务/index.html","hash":"0b851ab4b1771294fe140d6b2c9bb8a4d4612adf","modified":1536514179101},{"_id":"public/tags/持续集成/index.html","hash":"1f6f3830a4cdc5639ac96fe6cf64adef6daf3e0f","modified":1536514179101},{"_id":"public/tags/锁/index.html","hash":"3a6225b38603293b101546b7f74cecb6ed475f12","modified":1536514179101},{"_id":"public/tags/自动化构建/index.html","hash":"7a1a6da3d981696fe689a64f3a4cca2f439daa6a","modified":1536514179101},{"_id":"public/tags/spring-cloud/index.html","hash":"f010d4c1e2aa7233ca23f9696d3e15c2645b3149","modified":1536514179101},{"_id":"public/tags/使用spring-boot-spring-cloud一步步搭建微服务架构/index.html","hash":"9832e49c6fb463ac42da9a5c4898beeaf41c4615","modified":1536514179101},{"_id":"public/tags/读取配置文件/index.html","hash":"6f1a3d077abfe81ec47c1937bd4e79459843b89c","modified":1536514179101},{"_id":"public/tags/property-file/index.html","hash":"f62153329c61e76fe380428b5316bceaa88503d4","modified":1536514179101},{"_id":"public/tags/github-trending/index.html","hash":"fb116c06e3ba48c74309e1c9324c4c81bd2b039f","modified":1536514179101},{"_id":"public/tags/Runtime/index.html","hash":"a98f275af0e2964ec57da41c24becf08d4c16c16","modified":1536514179102},{"_id":"public/tags/github-repository/index.html","hash":"5499e86eb2867ee244c6251064701b570aebe937","modified":1536514179102},{"_id":"public/tags/github-pages/index.html","hash":"6d2cc3816f1d5dd30f5c11e408a28a14cf63d6c6","modified":1536514179102},{"_id":"public/tags/冗余部署/index.html","hash":"9207aaac6fece9c788b7e697dec2842412b48a28","modified":1536514179102},{"_id":"public/tags/api-version/index.html","hash":"66927ee6ec625b4f35cd9c705e48eb839fe7a970","modified":1536514179102},{"_id":"public/tags/路由/index.html","hash":"5b6ae65ec4688092fdda1e094068d1d6fe841dd2","modified":1536514179102},{"_id":"public/tags/centos/index.html","hash":"922dd5236a69300281f3a827025696661294fb4c","modified":1536514179102},{"_id":"public/tags/FastDFS/index.html","hash":"270a64318a7ea03e3d027bf7a3c665eaabb0721e","modified":1536514179102},{"_id":"public/tags/Nginx/index.html","hash":"9bd1e888b439d3541d4371201e3c993a47e57fed","modified":1536514179102},{"_id":"public/tags/图片服务器/index.html","hash":"8f25b6d9d2debb33346dfe21227f5b2953f1a0ff","modified":1536514179102},{"_id":"public/tags/doc/index.html","hash":"b74b59f6e97e79be3c6448a21426a8481819711b","modified":1536514179102},{"_id":"public/tags/docs/index.html","hash":"2b7638b69659564841d166102bb85dc83240ebef","modified":1536514179102},{"_id":"public/tags/markdown/index.html","hash":"2f3db80ab907cccb5b6e1936b8a664f0c49a2354","modified":1536514179103},{"_id":"public/tags/docsify/index.html","hash":"ed1cab2ece56b389438336a171aee7d16e2c119f","modified":1536514179103},{"_id":"public/tags/监控/index.html","hash":"ad8ef04415474864b02a9aa0c66adc186c4bfab1","modified":1536514179103},{"_id":"public/tags/集群/index.html","hash":"865112315e58e26dc44ab972093f3aa92f928b3f","modified":1536514179103},{"_id":"public/tags/monitor/index.html","hash":"131d37e4f6745a004d07325def625a8910569b64","modified":1536514179103},{"_id":"public/tags/manager/index.html","hash":"c371cb53f149098fc64095b07681fe8cc90694b4","modified":1536514179103},{"_id":"public/tags/项目管理/index.html","hash":"7e060699787eb78c2d0af84f7d2b6651661f0f25","modified":1536514179103},{"_id":"public/tags/RAP/index.html","hash":"5cbf61dcc4228e21c1f201d7600dbc9d42fd82c8","modified":1536514179103},{"_id":"public/tags/Worktile/index.html","hash":"d388e1b6287eb4930b443651f6bbd4e6bbfc1838","modified":1536514179103},{"_id":"public/tags/接口文档/index.html","hash":"52ef0cddb12710fb771d1cece82b1f1ed719ed0a","modified":1536514179103},{"_id":"public/tags/mock/index.html","hash":"05274cf570ef4037be684304f85c7008f087d4dc","modified":1536514179103},{"_id":"public/tags/部署/index.html","hash":"2202e2ce7addd7cdef3fcb1ef19963daf699e2ca","modified":1536514179104},{"_id":"public/tags/index.html","hash":"df1abdb17f441e54f8e0714821c6b490f5de28f5","modified":1536514179104},{"_id":"public/2018/09/09/Emacs快速指南/index.html","hash":"7c56b6b7cbfdcde3f202df4cf720a68cae9ea697","modified":1536514179104},{"_id":"public/2018/03/15/ReactJS静态网站生成器-Gatsby/index.html","hash":"9151365b26685c8c57dc71ac1ff72f32f74b9289","modified":1536514179104},{"_id":"public/2018/03/14/文档写作与部署工具docsify/index.html","hash":"c1d91b59aec344e7f22ebbc2063da9a409a554d4","modified":1536514179104},{"_id":"public/2018/02/25/JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid/index.html","hash":"4d2965a0443b6b0bdfe7951a7a6aa64c7fed1397","modified":1536514179104},{"_id":"public/2018/02/25/mosquitto使用记录与服务器调试/index.html","hash":"634f3a20eb7bb3b12438cabd8d00ebe33fc71456","modified":1536514179104},{"_id":"public/2018/02/25/事务管理-spring事务使用注意点、数据库事务的隔离级别与锁/index.html","hash":"49e11884d6308c35aac4a92508af566eb9a072d7","modified":1536514179104},{"_id":"public/2017/09/06/java并发学习-一/index.html","hash":"bc95daf956c7a6e19219d3b9a05afaf2cd6f3fb9","modified":1536514179105},{"_id":"public/2017/03/29/microservices-01-Spring-boot开发微服务/index.html","hash":"ccea4fcf354b9c3a4a99b6e8b1ba263239d75da1","modified":1536514179105},{"_id":"public/2017/03/29/microservices-06-Jenkins执行自动化的构建/index.html","hash":"f11919c008db4a3a6f491a80971782dabb66cc61","modified":1536514179105},{"_id":"public/2017/03/29/microservices-05-Gitlab作为代码仓库/index.html","hash":"c6feebb36216599512f4d44b1041f1a394338c53","modified":1536514179105},{"_id":"public/2017/03/29/microservices-04-Docker作为服务运行容器/index.html","hash":"0afc2d8a0f8c3c87e3ce434c61d2003d06984134","modified":1536514179105},{"_id":"public/2017/03/29/microservices-03-Zookeeper注册发现服务/index.html","hash":"fe3c4d997d611ba4b9a7a6bb1a71028d222a2d8d","modified":1536514179105},{"_id":"public/2017/03/29/microservices-02-Nodejs-Express作为微服务api网关/index.html","hash":"16dc1ae4b6c209706b0a914f80bc0de105af089c","modified":1536514179105},{"_id":"public/2017/03/11/shell-从svn更新代码maven打包后部署的一个简单脚本/index.html","hash":"e7cf757e5cbbc9b8b83d455b90cba129fd139541","modified":1536514179105},{"_id":"public/2017/03/11/git如何使用-记一些常用的git使用方法/index.html","hash":"8518a61795ca2934784b2efd77458ea1eca7c220","modified":1536514179105},{"_id":"public/2017/03/10/使用Nginx作为简单的图片服务器/index.html","hash":"39b248adf7490acfc913b93348818b1a48df40b0","modified":1536514179105},{"_id":"public/2017/03/10/使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository/index.html","hash":"b054ea6f754afc9386cb5785a156a94c7815be98","modified":1536514179105},{"_id":"public/2016/12/18/动态报表模块设计/index.html","hash":"8e522f6c82532475d8416ed8e524b26c2eabae2a","modified":1536514179106},{"_id":"public/2016/12/08/hello-world/index.html","hash":"0310b5e7132147cc17b733a3e809c969ec474af7","modified":1536514179106},{"_id":"public/2016/09/09/ELK-Kafka企业日志收集平台搭建总结/index.html","hash":"742935abe5c131a1a6225fbe7377800a3250ac13","modified":1536514179106},{"_id":"public/2016/09/06/dev-collect-2016-08-collect-of-dev/index.html","hash":"865df180f3a87d9feaa96319ab08b8727b454657","modified":1536514179106},{"_id":"public/2016/08/18/spring事务用法演进/index.html","hash":"e11817b730b5e2b995a70887c6de7e89b8b4fd40","modified":1536514179106},{"_id":"public/2016/08/12/java自动化测试整理/index.html","hash":"7b8e862812b2967ab1c44ecad754f9a60c534d36","modified":1536514179106},{"_id":"public/2016/08/10/【转】-支付宝架构与技术/index.html","hash":"a785db930a99d46f0e860b64f566c9f881eb147a","modified":1536514179106},{"_id":"public/2016/08/10/系统分布式情况下最终一致性方案梳理/index.html","hash":"d2008535ac8c6c9645294f9354ca2fc8438c3971","modified":1536514179106},{"_id":"public/2016/08/10/SOA分布式事务解决方案/index.html","hash":"2086e1d747b7dc17bf9fd4789d6b97701ff03ed1","modified":1536514179106},{"_id":"public/2016/08/08/What-s-the-simplest-way-to-print-a-Java-array/index.html","hash":"940595c28b6cb45586ab393c0bf03867fed99443","modified":1536514179107},{"_id":"public/2016/08/04/Java-中int和Integer的区别/index.html","hash":"1c3cdb6c904e049f6ad9dbc06b512f9f87670fe0","modified":1536514179107},{"_id":"public/2016/08/03/dev-collect-2016-07-collect-of-dev/index.html","hash":"23462ecf254c9230170696b52ef282b1b66f1a94","modified":1536514179107},{"_id":"public/2016/07/28/How-to-synchronize-ArrayList-in-java-with-example/index.html","hash":"009269c58766190db1ffd8177e405a27f7cb873d","modified":1536514179107},{"_id":"public/2016/07/26/多版本部署如何使用nginx根据url参数api-version值进行路由/index.html","hash":"9f3e028663d98fa8e2601af638452cd4f54c124c","modified":1536514179107},{"_id":"public/2016/07/23/Transform-objects-with-guava-使用Guava库转换对象/index.html","hash":"ae97be0041c8bd5b2e758703d7876dfcc63f2225","modified":1536514179107},{"_id":"public/2016/07/23/Springboot应用中如何针对springmvc的controller写单元测试/index.html","hash":"de2f6bc88c28c4fce9acec34f20b542c7f7a4935","modified":1536514179107},{"_id":"public/2016/07/22/关于java项目中如何读取配置文件/index.html","hash":"730788c520411b46f8bfeae5ad4b74c8ca48b6fa","modified":1536514179107},{"_id":"public/2016/07/11/使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用/index.html","hash":"c382ff77148b4402717de9df90812bebfb991e56","modified":1536514179107},{"_id":"public/2016/07/08/使用RAP作为接口管理和调试的工具/index.html","hash":"7aaac24a4af4247614d82adfebd134f55f825537","modified":1536514179107},{"_id":"public/2016/07/07/dev-collect-2016-06-collect-of-dev/index.html","hash":"3e76b7b35674b8ee02cfbd5cfef52a187ea55d99","modified":1536514179108},{"_id":"public/2016/07/07/在单服务器上安装部署FastDFS-Nginx/index.html","hash":"aa2ca372cacc216f4bdaf19f3d08daa412ca24a4","modified":1536514179108},{"_id":"public/2016/07/01/项目管理建议/index.html","hash":"627364413edad9486673aadc15d16ba57e0960f6","modified":1536514179108},{"_id":"public/2016/06/28/api-version-4种在springmvc中进行api版本控制的处理方法/index.html","hash":"663f27a3309e19141d81962d1f79c25ca44e633c","modified":1536514179108},{"_id":"public/2016/06/06/dev-collect-2016-06-06-collect-of-im-netty-android-etc/index.html","hash":"9b5790540ef0fd7f082814968e59b8d4bfc5e28e","modified":1536514179108},{"_id":"public/2016/06/06/git-git分支使用和管理/index.html","hash":"19ab69f177dfa986c1c04774677cfef20a34e0c4","modified":1536514179108},{"_id":"public/2016/06/04/Windows下开启React-Native征途/index.html","hash":"bf5753698f3be467ef7024243853f2b5f33fba8d","modified":1536514179108},{"_id":"public/2016/06/01/Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目/index.html","hash":"b83b116ef4622c33d10c4585387e38331211fcf0","modified":1536514179108},{"_id":"public/2016/05/30/使用Jenkins配置Git和Maven的自动化构建Tomcat项目/index.html","hash":"2bf8c0fc03e095348475ba8eb5be5114223dfca0","modified":1536514179108},{"_id":"public/2016/05/09/java-static-关键字总结/index.html","hash":"7ab0348843a92ce4b98d5487cc0177bd847adf30","modified":1536514179109},{"_id":"public/2016/05/08/java-enum-典型用法/index.html","hash":"312ce24ab39a03d073ae728c55bb69fd6d61db7c","modified":1536514179109},{"_id":"public/2016/05/08/java-design-pattern-java设计模式之Builder模式/index.html","hash":"5dcfe08043f8f5ef189c26ad2c38e36776c0215e","modified":1536514179109},{"_id":"public/2016/05/04/java-web知识体系/index.html","hash":"9b44e2c92880adacc85c8839aa8779164e37ce55","modified":1536514179109},{"_id":"public/2016/05/03/springmvc-rest-api-versioning/index.html","hash":"666a419b26167ab674ac35ce1c16c5dc652d9884","modified":1536514179109},{"_id":"public/2016/04/25/centos6环境下配置mysql主从同步/index.html","hash":"df8c3e46955bdcbcd6a7d574d1a958867256a45a","modified":1536514179109},{"_id":"public/2016/04/25/centos6下安装配置mysql，并开启mysql的远程登录/index.html","hash":"b24a4ac349714c802f6f2f9c07ebf49da4d0a83e","modified":1536514179109},{"_id":"public/2016/04/09/springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro/index.html","hash":"8e6d2f1b14c48947029582e1f3b666df408cb5b5","modified":1536514179109},{"_id":"public/2016/04/09/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用/index.html","hash":"0dc773cf04b01fc044dddf6293b46a4789e25839","modified":1536514179110},{"_id":"public/2016/04/09/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存/index.html","hash":"01991af6c88c1960f4c14631a736328ad11c3782","modified":1536514179110},{"_id":"public/2016/04/07/为你的项目做合理的版本控制管理/index.html","hash":"98ab4e93a6938313fcbe75449d3bf743de3093a4","modified":1536514179110},{"_id":"public/2016/03/21/在linux下部署spring-boot项目过程记录/index.html","hash":"7c35199be73067f316dcce3727cca54d9e334f88","modified":1536514179110},{"_id":"public/2016/03/11/集群监控初步整理/index.html","hash":"b3ec9b6cbef890343b85f7d8e06980bb0fdf6798","modified":1536514179110},{"_id":"public/2016/02/20/spring-aop-知识体系整理/index.html","hash":"9a044596526c7fa275c0864053cb638f3b7be718","modified":1536514179110},{"_id":"public/2016/02/20/java-io体系整理/index.html","hash":"2ee3f413ec67e3bd5effdfab9c368607d615ccc6","modified":1536514179110},{"_id":"public/2016/02/02/java-从代码中去除if-else/index.html","hash":"1dd7ffb43f94adeabc12af33b41a9d1eb7a029b9","modified":1536514179110},{"_id":"public/2016/02/01/springboot-items-项目使用实践-springboot-get-started/index.html","hash":"e545c6e72a2396203e943555fe20e95f005c90c2","modified":1536514179110},{"_id":"public/2016/01/04/jquery-validate常用用法总结/index.html","hash":"329fb0a9492e55ebe493cd8fc1828de112ca9e66","modified":1536514179111},{"_id":"public/2015/12/31/git-git常用-把本地项目提交到github/index.html","hash":"584285a30236093091d63b04864428b9b993b103","modified":1536514179111},{"_id":"public/2015/12/31/使用hexo-deploy直接发布到github/index.html","hash":"72bde420213aa4197930a349f81896bd20cba013","modified":1536514179111},{"_id":"public/2015/12/31/如何使用github-pages和hexo搭建简单blog/index.html","hash":"b9b974779ed8767e5b7b2c01bfb22e01ff08e270","modified":1536514179111},{"_id":"public/archives/index.html","hash":"6fb9848c51c3e121ed81e26bdd131648e97dbc14","modified":1536514179111},{"_id":"public/archives/page/2/index.html","hash":"589234a9c0e9da979a1c5b548e2291e246d93bd3","modified":1536514179111},{"_id":"public/archives/page/4/index.html","hash":"ac55a630e8b390d79407aac64b033db48a4869e3","modified":1536514179111},{"_id":"public/archives/page/6/index.html","hash":"62ccf41e08ad52317a28c67f8fbc719f8d7fe551","modified":1536514179111},{"_id":"public/archives/2016/page/2/index.html","hash":"c71dbc59acefc64cc4e873acc2aa3f81f5b5b2dc","modified":1536514179111},{"_id":"public/archives/2016/page/4/index.html","hash":"7c085e91b78a0227da7a061d01139c6526b43ea4","modified":1536514179112},{"_id":"public/page/2/index.html","hash":"8a36b5377bf0a98a96aadbbc3a0222bc40a40959","modified":1536514179113},{"_id":"public/page/4/index.html","hash":"05911101dcb572fecb3431abb0fed6b60d2fc7c7","modified":1536514179113},{"_id":"public/page/3/index.html","hash":"8de29c7c683baf6422ab0c7253daf5f7d7e966de","modified":1536514179113},{"_id":"public/index.html","hash":"0a296e9c5905fe55da646b1096b125a65ade48b4","modified":1536514179113},{"_id":"public/page/5/index.html","hash":"e7b099603b7d0014b4d3ef6df65c8895a311a9c8","modified":1536514179113},{"_id":"public/page/6/index.html","hash":"b9b11a01a3867b32b3fe41217d8eab19f2f3d475","modified":1536514179113},{"_id":"public/page/7/index.html","hash":"3490c1b0a47cf98d79459bc4d25b5359e9291a82","modified":1536514179114},{"_id":"public/images/frame-zhifubao-002.png","hash":"a512d6e799ad379dfc35369367d074437257d2e8","modified":1536514179281},{"_id":"public/images/default_avatar.jpg","hash":"d691cdfbb0b969c1de50b94d35371fee64287cae","modified":1536514179282},{"_id":"public/images/frame-zhifubao-025.png","hash":"7c693a9022ef18ea1df8addab9bf9bfd92f6a455","modified":1536514179282},{"_id":"public/images/ireport_design_table.png","hash":"a3fc5e0883eff0f6eef6eb9789c131fbcd9a0831","modified":1536514179282},{"_id":"public/images/ireport_design_ui_01.png","hash":"8486b1c9e7f02479f0dad6fdcbdae666e6429d99","modified":1536514179282},{"_id":"public/images/frame-zhifubao-030.jpeg","hash":"c33706562b896515af1aab415ae2a9e72df83730","modified":1536514179282},{"_id":"public/images/ireport_design_ui_02.png","hash":"9cdbeb6d87f0ec1186822ddac3a54590f2643331","modified":1536514179282},{"_id":"public/images/frame-zhifubao-031.jpeg","hash":"6608d9c2bef7a78909bf499125d5f28a40050656","modified":1536514179283},{"_id":"public/images/jenkins-maven-001.png","hash":"af088cbb859501fc70ec4b16c49b4fe7e21dce5d","modified":1536514179283},{"_id":"public/images/jenkins-maven-002.png","hash":"e332c729c8d2803f26c3687eb5f734bb454ab528","modified":1536514179283},{"_id":"public/images/jenkins-maven-005.png","hash":"6e10df6bdc2cb256ba98025f7b0c52b463d16e33","modified":1536514179283},{"_id":"public/images/jenkins-maven-004.png","hash":"1f0afdeb4d232e7109966ff6b6a47417efd8c381","modified":1536514179283},{"_id":"public/images/jenkins-maven-003.png","hash":"b108d0cdb5baeec16c1f72ef25636cff67f9a2b5","modified":1536514179283},{"_id":"public/images/jenkins-maven-006.png","hash":"76b4d166cb227049fda0fcbfbceaa42ca05c6352","modified":1536514179283},{"_id":"public/images/jenkins-maven-007.png","hash":"bc49291f05ff432c835d1be7fb9906d474f8452c","modified":1536514179284},{"_id":"public/images/microservice-jenkins-04.png","hash":"f24de060a7d82b16b668465992b1898ecdb536a3","modified":1536514179284},{"_id":"public/images/microservice-jenkins-03.png","hash":"2656dde09e7690886cf6e14e0f9fb26eed78b3b1","modified":1536514179284},{"_id":"public/images/microservice-jenkins-06.png","hash":"ed8c8b43bb9d8699bee6938fee43ee61ee5c6eb7","modified":1536514179284},{"_id":"public/images/microservice-jenkins-01.png","hash":"0eec70bc9fb55a67eab20f288cc7c4a0cc2fdc87","modified":1536514179284},{"_id":"public/images/microservice-jenkins-05.png","hash":"24f9abe2cfc2e947b3d6339979f90f6ec624538a","modified":1536514179284},{"_id":"public/images/microservice-jenkins-07.png","hash":"a143db69613d748279973d4fbcd8088ee2623626","modified":1536514179285},{"_id":"public/images/microservice-jenkins-02.png","hash":"1d4385d7508ba420b430b8b79f766b497f90a15a","modified":1536514179285},{"_id":"public/images/microservice-jenkins-08.png","hash":"9a8e5063d3a90bee93c902495550ebfca6b06ba0","modified":1536514179285},{"_id":"public/images/microservice-jenkins-11.png","hash":"a9c54230ea9b3f0b325f600fc00f474433151f99","modified":1536514179285},{"_id":"public/images/microservice-jenkins-09.png","hash":"1306741aae198ebf5b0b85e411f05c5ec52b64ae","modified":1536514179285},{"_id":"public/images/microservice-jenkins-12.png","hash":"b965251c5d6667b5afcbd4e30a2d58598eb11250","modified":1536514179285},{"_id":"public/images/microservice-jenkins-10.png","hash":"d6a01b3ba771335080701dbe5a65a4eb83c010d2","modified":1536514179285},{"_id":"public/images/rap-001.png","hash":"2b82c3b377f766e3d8c8e290e3397a63df90a2c1","modified":1536514179286},{"_id":"public/images/project-111.png","hash":"06265ebd8f641701edc1f3b900d055124dff5573","modified":1536514179286},{"_id":"public/images/project-004.jpg","hash":"f113d1b139db0087243a0e27ed37b1a2889855d1","modified":1536514179286},{"_id":"public/images/rap-003.png","hash":"ce5ccc665a0d552cc461e43236d690ae0a9df158","modified":1536514179286},{"_id":"public/images/rap-004.png","hash":"baa2f76303f26f5a90cc59c414e18778b4dfd6e2","modified":1536514179286},{"_id":"public/images/rap-006.png","hash":"d435997ffb7fb61f19c662c945db5ef08a3456af","modified":1536514179286},{"_id":"public/images/rap-005.png","hash":"db58b4073d4e39a713450cdafb6936c9e53162b8","modified":1536514179286},{"_id":"public/images/rap-007.png","hash":"9e71e103c64dbde351e1649c8c54481cfc5cbe5e","modified":1536514179286},{"_id":"public/images/rap-002.png","hash":"71b8d6aaea273c2659260186acdeb6dd5d3f9ee9","modified":1536514179287},{"_id":"public/images/react-002.png","hash":"052ffb65d91a0a846b44ae45d69f3932133ded5d","modified":1536514179288},{"_id":"public/images/rap-009.png","hash":"30521d8625f15ace936e4400f38bd36357e230ac","modified":1536514179288},{"_id":"public/images/rap-008.png","hash":"ecc3c58cba8ebbce42d4a0784a4679c990a0633c","modified":1536514179288},{"_id":"public/images/react-004.png","hash":"4966fcea781dd0aff04a6be2028da5aedc971568","modified":1536514179289},{"_id":"public/images/react-003.png","hash":"af89843f48b7b8e6686c5dc444c7772f2db4329a","modified":1536514179289},{"_id":"public/images/react-001.png","hash":"d6f1b6f721bd34891e700e056d51b180c911a932","modified":1536514179290},{"_id":"public/images/react-005.png","hash":"defd51b0d7343e103ee62469705495c472f1c3fe","modified":1536514179290},{"_id":"public/images/spring-transaction-001.png","hash":"fb96b57119e36c71ee55507f3cc23c27118cc111","modified":1536514179291},{"_id":"public/images/react-007.png","hash":"9b3a0f9c5f3cac5646527dd1c6e098ede9aafcaa","modified":1536514179291},{"_id":"public/images/spring-transaction-002.png","hash":"5edad50003d176347f17b7e37e1fad95fc2620b6","modified":1536514179292},{"_id":"public/images/react-006.png","hash":"6baa6b39976d095d71fd5f0eddea76713ed3cbf1","modified":1536514179293},{"_id":"public/images/spring-transaction-003.png","hash":"13fb0573de05e37889f559b9b1d875c57b750b9a","modified":1536514179293},{"_id":"public/images/spring-transaction-004.png","hash":"d1816736b67f25ef69eaa39d579930398efbbb2b","modified":1536514179293},{"_id":"public/images/spring-transaction-006.png","hash":"c2f5e00a35c79cdc5d1a41c27a167ebb5952bdb3","modified":1536514179293},{"_id":"public/images/spring-transaction-005.png","hash":"859e629dcb8ee7c7452f9ee14ac318c333b303ed","modified":1536514179294},{"_id":"public/images/spring-transaction-007.png","hash":"b6d8900e63229b2e4394f442cab063597c0788b7","modified":1536514179294},{"_id":"public/images/spring-transaction-009.png","hash":"204a012c3799fc38bed46e081bfe06076c82c4f8","modified":1536514179295},{"_id":"public/images/spring-transaction-010.png","hash":"9ac222fa8c0795095d9c24906458fc67524d5899","modified":1536514179295},{"_id":"public/images/spring-transaction-011.png","hash":"790ee8f98d6100935904b0af087226ae0f2ba603","modified":1536514179295},{"_id":"public/images/version.png","hash":"ed57e84198ae33dd00dfbc8ca048b8caf9862d24","modified":1536514179295},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1536514179296},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1536514179296},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1536514179296},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1536514179296},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1536514179296},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536514179297},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1536514179297},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1536514179297},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536514179297},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536514179297},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1536514179297},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1536514179297},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1536514179298},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1536514179298},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536514179298},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536514179298},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536514179298},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536514179298},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536514179298},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536514179298},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1536514179298},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1536514179299},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536514179299},{"_id":"public/images/frame-zhifubao-006.png","hash":"d6aa19f5f358267fac4e5bcbcaadc10fa0f905a9","modified":1536514180989},{"_id":"public/images/frame-zhifubao-012.png","hash":"5500683062269a4ec9183b519797dae30bc09fbb","modified":1536514180991},{"_id":"public/images/frame-zhifubao-013.png","hash":"b06c6ad5a9b025f0eea567d32e17bca3f71a602e","modified":1536514180998},{"_id":"public/images/frame-zhifubao-021.png","hash":"17d782adcac73bf0eef7813074fa1fefcedc09dc","modified":1536514180999},{"_id":"public/images/introduce-2-2.png","hash":"b6ce9da78d1dd597c76d61f9cab047aff41d1baa","modified":1536514180999},{"_id":"public/images/framework-microservices.png","hash":"5af9bc26a78463d435adccfdab7878649a5979d2","modified":1536514180999},{"_id":"public/images/java-spring-aop.png","hash":"9c8c398fa913196dce6c5f480798d8c5afe76293","modified":1536514181000},{"_id":"public/images/java-web.png","hash":"2129f154eff906515903c96639e48ab076024bd2","modified":1536514181000},{"_id":"public/images/project-002.jpg","hash":"1e0807295d3464bf956d94d91ef089da0ebf3c03","modified":1536514181000},{"_id":"public/images/project-005.png","hash":"383af846ce2608b4501f677efd37657a1c83f633","modified":1536514181000},{"_id":"public/images/spring-transaction-008.png","hash":"5bae179fb350d9c2fd8b1ca1631ba7275e6886b7","modified":1536514181000},{"_id":"public/images/transaction-001.png","hash":"e22e36a5f86485f6a13c6e33ffc10e7718260be1","modified":1536514181000},{"_id":"public/images/test-001.png","hash":"c604ed3de2921435e6b21268484f3077b541b441","modified":1536514181000},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1536514181000},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1536514181001},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1536514181001},{"_id":"public/js/fancy-box.js","hash":"b5fa638ed371b5f658b0826ec4afee25d9986ef2","modified":1536514181278},{"_id":"public/js/bootstrap.js","hash":"f9b637b6d064f728d7dc2b6b5058a006a4454299","modified":1536514181278},{"_id":"public/js/helpers.js","hash":"c15216ef897334362789ba37464298948b2eef95","modified":1536514181278},{"_id":"public/js/hook-duoshuo.js","hash":"eedaf52377991728f1e3e94f2bc4bf23ec41ecea","modified":1536514181278},{"_id":"public/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1536514181278},{"_id":"public/js/motion.js","hash":"b4132517fe499538ad725094593fb7ead8c04bf7","modified":1536514181278},{"_id":"public/js/ua-parser.min.js","hash":"1148fa2bcb8b2e40c31e5f597bf794a57369a2e6","modified":1536514181278},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1536514181279},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1536514181279},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1536514181279},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1536514181279},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1536514181279},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1536514181279},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536514181279},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536514181279},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1536514181279},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536514181279},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536514181280},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536514181280},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536514181280},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536514181281},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536514181281},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536514181281},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536514181281},{"_id":"public/css/main.css","hash":"a98a308d6a6c31153787c7bfda9dc0a177de97fc","modified":1536514181281},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536514181282},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536514181282},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536514181283},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536514181283},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536514181283},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1536514181284},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1536514181284},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536514181284},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536514181284},{"_id":"public/images/frame-zhifubao-007.png","hash":"1110e6bdba9aaf6dbf06480ab0b167bde0a3860b","modified":1536514181284},{"_id":"public/images/frame-zhifubao-003.png","hash":"e21ace37d5305e9d27a8c007c340074db0535ca9","modified":1536514181284},{"_id":"public/images/frame-zhifubao-016.png","hash":"927892af29e9e878e498110561a64875f48de215","modified":1536514181284},{"_id":"public/images/java-monitor.png","hash":"4915f75253878f92fd57b0c9dbe8f542951a9570","modified":1536514181285},{"_id":"public/images/jenkins-002.png","hash":"3da279a40ea23dd0c279491671f8e4af20c832ce","modified":1536514181285},{"_id":"public/images/project-001.jpg","hash":"b132cddf404d1ae32a8490f3e3200778c7675647","modified":1536514181286},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1536514181286},{"_id":"public/images/frame-zhifubao-004.png","hash":"e7b7975e9c1fe61155885d6a6e448d0c5c62ee10","modified":1536514181411},{"_id":"public/images/frame-zhifubao-023.png","hash":"722bcba989c19b80254bbd33e49cb7bc02075214","modified":1536514181411},{"_id":"public/images/frame-zhifubao-026.png","hash":"57a94be3b1e300c5134ecb15ac59356fc1d5c820","modified":1536514181412},{"_id":"public/images/java+io.png","hash":"71047dc8f77224270787c3c74beeab77f99ae6f1","modified":1536514181412},{"_id":"public/images/jenkins-001.png","hash":"cd5717677538c32515d05c9edc19e849158122d7","modified":1536514181413},{"_id":"public/images/project-110.png","hash":"40f9b142781860af0154b25c8a0c7bd689a15144","modified":1536514181414},{"_id":"public/images/test-002.png","hash":"ed647bc05ab6bcb7ab264525b471d675c213c51a","modified":1536514181415},{"_id":"public/images/frame-zhifubao-005.png","hash":"28ecd95d1b212e356223af2875b06ad54e003fac","modified":1536514181429},{"_id":"public/images/frame-zhifubao-010.png","hash":"7276723a5aab070a73d0c9cde69a28a11bd1dcbb","modified":1536514181429},{"_id":"public/images/frame-zhifubao-011.png","hash":"32da9064cdd2a7e1344aa3332ed6d2765d22aab4","modified":1536514181429},{"_id":"public/images/frame-zhifubao-018.png","hash":"a628af82e067c27c7c5d0e11218392a3188a717d","modified":1536514181431},{"_id":"public/images/frame-zhifubao-029.png","hash":"23f9eb423894d253cdc6a5f97472ddaf482b80d4","modified":1536514181431},{"_id":"public/images/jenkins-003.png","hash":"70e0c22b81b099d4e5005f97fb2be4c3eeef0a0c","modified":1536514181440},{"_id":"public/images/project-003.png","hash":"f3b12d92757164334be71d0b071b4cc67740b5f5","modified":1536514181440},{"_id":"public/images/frame-zhifubao-009.png","hash":"31ec39e073c508e4061f62de0c237343c05a2c6f","modified":1536514181595},{"_id":"public/images/frame-zhifubao-008.png","hash":"895ac38cbc05552cc395a833e8ad5220c59998cb","modified":1536514181595},{"_id":"public/images/frame-zhifubao-015.png","hash":"4690b7633ddfea9ef7b50769d3f63cfb79c7d494","modified":1536514181600},{"_id":"public/images/frame-zhifubao-014.png","hash":"ce735cfefe399bfa33541a1d0433e6f924aca75b","modified":1536514181601},{"_id":"public/images/frame-zhifubao-019.png","hash":"cd97690d87d261f63892fafcaa506667c16958fc","modified":1536514181602},{"_id":"public/images/post-gatsby-01","hash":"5f199530e4840364068499c0af45a55df83f5d7e","modified":1536514181602},{"_id":"public/images/frame-zhifubao-028.png","hash":"bd1a3a020fc30c59560c60a1848d1ff7adaea331","modified":1536514181603},{"_id":"public/images/frame-zhifubao-022.png","hash":"c1849018e73832aee84d868c48ed09bb3ddb87c6","modified":1536514181604},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1536514181604},{"_id":"public/images/frame-zhifubao-020.png","hash":"f026ab6e8ca1e19eeeec02dec20328b0ed434bda","modified":1536514181829},{"_id":"public/images/frame-zhifubao-017.png","hash":"1bd0feecb884cb60a1f2874f66377d744b5ee305","modified":1536514181829},{"_id":"public/images/frame-zhifubao-027.png","hash":"a18b0f2f3943d81b3a09d5f9dc3a943fa36f7c60","modified":1536514184546},{"_id":"public/images/frame-zhifubao-001.png","hash":"476af3a6e32b0079ebd3e55df7fadad4a939de4e","modified":1536514184642},{"_id":"public/images/frame-zhifubao-024.png","hash":"50fcb2ab435443a5caf11ab491b4cd781310ab72","modified":1536514184642}],"Category":[],"Data":[],"Page":[{"title":"All tags","date":"2016-01-04T07:25:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-01-04 15:25:00\ntype: \"tags\"\n---\n","updated":"2016-02-20T04:02:04.732Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjlv4uslt000100uuuwo0ew1h","content":"","excerpt":"","more":""}],"Post":[{"title":"Emacs快速指南","date":"2018-09-08T17:09:59.000Z","_content":"\n\nEmacs 快速指南.（查看版权声明请至本文末尾）\n\n【注意：位于【】之间的内容是译注，比如本行，下同。】\n\nEmacs 键盘命令通常包含 CONTROL 键（有时候以 CTRL 或 CTL 来标示）和\nMETA 键（有时候用 EDIT 或 ALT 来标示）。为了避免每次都要写出全名，我们\n约定使用下述缩写：\n\n C-<chr>  表示当输入字符 <chr> 时按住 CONTROL 键。\n          因此 C-f 就表示：按住 CONTROL 键再输入 f。\n\n M-<chr>  表示当输入字符 <chr> 时按住 META（或 EDIT 或 ALT）键。\n          如果你的键盘上没有 META 、EDIT 或 ALT 键，用下述方法也等效：\n          先按一下 ESC 键然后放开，再输入 <chr>。我们用 <ESC> 来表示\n          ESC 键。\n\n重要提示：要退出 Emacs，请用 C-x C-c（两个连续的组合键）。\n要退出一个正在运行中的命令，请用 C-g。\n下文中左边顶行的“>>”字样用来提示你尝试键盘命令。比如：\n\n\n\n\n\n[本页当中特意留出一些空白是出于教学目的，请继续往后阅读]\n\n\n\n\n\n>> 现在输入 C-v （查看下一屏文字）移动到下一屏。\n   （别紧张，在输入字符 v 的同时注意要按住 CONTROL 键）\n   从现在开始，每读完当前一屏你都需要这样做一次。\n\n值得注意的是，当你从上一屏滚到下一屏时，中间会有两行的重复；这样做是为\n了维持滚屏的连续性，方便你顺畅、连续地阅读。\n\n用编辑器，开门第一件事就是学会在文字中移动。你已经知道了 C-v 可以向下移\n动一屏，要往上移，请用 M-v （也就是按住 META 键，然后输入v，如果你没有\nMETA、EDIT 或 ALT 键那么就先按 <ESC> 再按 v）。\n\n>>  试试 M-v，然后再试试 C-v，来回遛几次。\n\n\n* 小结（SUMMARY）\n-----------------\n\n以下命令在翻页浏览时相当有用：\n\n        C-v     向前移动一屏\n        M-v     向后移动一屏\n        C-l     重绘屏幕，并将光标所在行置于屏幕的中央\n                （注意是 CONTROL-L，不是 CONTROL-1）\n\n>> 找到光标，留意其附近的文字，然后输入 C-l。\n   找找光标在哪里，你会发现其附近的文字与之前相同，位置却变为屏幕的中心。\n   如果你再次输入 C-l ，附近的文字将移动到屏幕的顶端。再次输入 C-l ，\n   文字将移动到底端。\n\n如果你的键盘上有 PageUp 和 PageDn，也可以用这两个键来滚屏。不过使用\nC-v 和 M-v 的效率要更高一些。\n\n\n* 基本的光标控制（BASIC CURSOR CONTROL）\n----------------------------------------\n\n整屏的移动很有用，但是如何在文字中精确定位呢？\n\n有几种方式可以选择。用方向键当然可以，不过更有效率的方法是保持双手位于\n主键盘区，然后使用 C-p 、 C-b 、 C-f 和 C-n 这四个命令。它们的功能和方\n向键是一样的，如下图所示：\n\n                             上一行 C-p\n                                  :\n                                  :\n            向左移 C-b .... 目前光标位置 .... 向右移 C-f\n                                  :\n                                  :\n                             下一行 C-n\n\n>> 用 C-n 或 C-p 将光标移到上图的中央。\n   按 C-l，整幅图会被显示在屏幕的中央。\n\n“P N B F”四个字母分别代表了四个词，用这四个词记忆这些组合键会更容易：\nP 代表 previous（上一行），N 代表 next（下一行），B 代表 backward（回\n退），而 F 则代表 forward（前进）。这些组合键今后将与你形影不离。\n\n>> 按几次 C-n 把光标往下挪到这里。\n\n>> 用 C-f 把光标移动到这一行，然后再用 C-p 往上挪。\n   注意观察当光标在一行的中央时 C-p 命令的行为。\n\n每行文字都以一个“换行符”结束，“换行符”把行与行区分开来。（通常情况下，\n一个文件的最后一行会有一个换行符，但是 Emacs 不强制要求这一点。）\n\n>> 在一行的行头输入 C-b。\n   光标应该会移动到前一行的行尾，因为光标在回退过程中越过了换行符。\n\n同样 C-f 也可以像 C-b 一样越过换行符。\n\n>> 连按几次 C-b，感受一下光标的移动。\n   然后按几次 C-f 回到本行的行尾。\n   再按一次 C-f，光标会移动到下一行。\n\n当你移动光标穿越屏幕的上下边界时，在边界外的文字会移动到屏幕内，这称为\n“滚动”（scrolling）。滚动使得光标可以被移动到文字中的任何位置，并且还\n不会让光标跑到屏幕外边去。\n\n>> 用 C-n 将光标下移，一直越过屏幕边界，同时观察发生了什么变化。\n\n如果你嫌一个字符一个字符地挪光标太慢，你还可以一个词一个词地跳。M-f\n(META-f) 可以将光标往前移动一个词，而 M-b 则是往后移。【这里的“词”指\n英文单词，对中文来说，则是指移动到下一个标点符号。】\n\n>> 试试 M-f 和 M-b。\n\n如果光标停在一个词的中间，M-f 会移动到这个词的末尾。如果光标处于词与词\n之间的空白处，M-f 会移动到下一个词的末尾。M-b 的功能类似，只是方向相反。\n\n>> 按几次 M-f 和 M-b，中间夹杂一些 C-f 和 C-b。\n   你可以观察到 M-f 和 M-b 在不同位置上所表现出来的不同行为。\n\n请注意 C-f 、C-b 和 M-f 、M-b 两对之间的类比关系。通常的惯例是：META 系\n列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 CONTROL\n系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。\n\n类似的惯例在“行”与“句子”之间也同样适用：C-a 和 C-e 可以将光标移动到\n“一行”的头部和尾部；而 M-a 和 M-e 则将光标移动到“一句”的头部和尾部。\n\n>> 按两次 C-a，再按两次 C-e。\n   按两次 M-a，再按两次 M-e。\n\n想一想为什么重复的 C-a 命令会没有作用，而重复的 M-a 命令则会让光标不断\n地回退到上一个句子。虽然这个类比规律并不严格，但是很自然。\n\n光标停留的位置也可以称作“点位”（point）。或者干脆说，光标指示出了屏幕\n上“点位”在文本中的位置。\n\n这里对简单的光标移动命令做一个总结，其中也包括了整词和整句的移动：\n\n        C-f     向右移动一个字符\n        C-b     向左移动一个字符\n\n        M-f     向右移动一个词【对中文是移动到下一个标点符号】\n        M-b     向左移动一个词【对中文是移动到上一个标点符号】\n\n        C-n     移动到下一行\n        C-p     移动到上一行\n\n        C-a     移动到行首\n        C-e     移动到行尾\n\n        M-a     移动到句首\n        M-e     移动到句尾\n\n>> 把上面所有的命令都练习几次，这些可都是最常用的命令。\n\n这里还要介绍两个重要的光标移动命令：M-< （META 小于号）可以将光标移动到\n所有文字的最开头；M-> （META 大于号）可以将光标移动到所有文字的最末尾。\n\n注意，在大部分键盘上，小于号（<）需要用上档键（Shift）来输入，所以在这\n些键盘上你应该用 Shift 键来输入 M-<，如果不按 Shift 键，你输入的会是\nM-comma（META 逗号）。\n\n>> 试一试 M-< ，移到本快速指南的最开始。\n   然后再按几次 C-v 回到这里。\n\n>> 试一试 M-> ，移到本快速指南的最末尾。\n   然后再按几次 M-v 回到这里。\n\n如果你的键盘上有方向键的话，也可以用它们来移动光标。不过我们有三个理由\n推荐你学习 C-b 、C-f 、C-n 、和 C-p：（1）它们在任何键盘上都能用。（2）\n当你熟练使用 Emacs 之后，你会发现用这些组合键比用方向键要快得多，因为你\n的手不需要离开打字区。（3）一旦你习惯了使用这些组合键，你也可以很容易地\n适应其它更高级的光标移动命令。\n\n大部分的 Emacs 命令接受数字参数，并且对于多数命令而言，这些数字参数的作\n用是指定命令的重复次数。为一个命令指定数字参数（也就是重复次数）的方法\n是：先输入 C-u，然后输入数字作为参数，最后再输入命令。如果你有META （或\nEDIT 或 ALT）键，那么还有另一种办法：按住 META 键不放，然后输入数字。不\n过我们还是建议你用 C-u，因为它在任何终端机上都能用。这种数字参数也称为\n“前缀参数”，意思是说这个参数是先于使用它的命令而输入的。\n\n举例来说， C-u 8 C-f 会向前移动 8 个字符。\n\n>> 为 C-n 或者 C-p 指定一个数字参数，这样你可以只用一个命令就把光标移动\n   到本行的附近。\n\n虽然大部分命令把数字参数解释为其重复次数，但是也有些命令例外，它们将数\n字参数另做它用。比如有些命令（我们目前还没学到）仅仅将前缀参数作为一个\n标志――只要给出有一个前缀参数，不管其值为何，它都会改变命令的功能。\n\n而 C-v 和 M-v 则属于另一种类型的例外。当给定一个参数时，它们将滚动你指\n定的“行数”，而不是“屏数”。举例来说，C-u 8 C-v 将文本向下滚动 8 行。\n\n>> 现在试试看，输入 C-u 8 C-v。\n\n这个命令应该已经将文字向上滚动了 8 行。如果你想将它再次地向下滚动，你可\n以给定一个参数然后执行 M-v。\n\n如果你正在使用图形界面，比如 X 或者微软的 Windows，那么在 Emacs窗\n口的一边应该有一个长方形的区域叫“滚动条”。你可以用鼠标操纵滚动条来滚动\n文字。\n\n如果你的鼠标有滚轮的话，你也可以使用滚轮来滚动。\n\n* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）\n-----------------------------------------------\n\n如果 Emacs 对你的命令失去响应，你可以用 C-g 来安全地终止这条命令。C-g\n也可以终止一条执行过久的命令。\n\nC-g 还可以取消数字参数和只输入到一半的命令。\n\n>> 输入 C-u 100 设定一个值为 100 的数字参数，然后按 C-g。\n   现在再按 C-f，光标应该只会移动一个字符，因为你已经用 C-g 取消了参数。\n\n如果你不小心按了一下 <ESC>，你也可以用 C-g 来取消它。\n【这个说法似乎有问题，因为按照这个按键顺序输入的应该是 C-M-g。\n  取消 <ESC> 的正确做法是再连按两次 <ESC>。】\n\n\n* 被禁用的命令（DISABLED COMMANDS）\n-----------------------------------\n\n有一些 Emacs 命令被“禁用”了，以避免初学者在不了解其确切功能的情况下误\n用而造成麻烦。\n\n如果你用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令\n到底是干什么的，询问你是否要继续，并在得到你的肯定之后再执行这命令。\n\n如果你真的想用这条命令，在 Emacs 询问你的时候应该按空格。一般来说，如果\n你不想用，就按“n”。\n\n>> 试试 C-x C-l （这是一个被禁用的命令）\n   然后用 n 来回答询问。\n\n\n* 窗格（WINDOWS）\n-----------------\n\nEmacs 可以有多个“窗格”，每个窗格显示不同的文字。后面会介绍怎么对付多个窗\n格，现在我们先学会如何关掉多余的窗格。其实也很简单：\n\n        C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。\n\n也就是先按 CONTROL-x 然后再按 1。C-x 1 会保留光标所在的窗格，并将其扩大\n到整个屏幕，同时关掉所有其它的窗格。\n\n>> 把光标移到本行然后输入 C-u 0 C-l。\n\n>> 输入 C-h k C-f。观察当一个新窗格出现时当前窗格（用来显示\n   C-f 命令的文档）是如何缩小的。\n\n>> 输入 C-x 1 关掉文档窗格。\n\n有一系列命令是以 CONTROL-x 开始的，这些命令许多都跟“窗格、文件、缓冲区\n【缓冲区（buffer）会在后文详细介绍】”等等诸如此类的东西有关，其中有些\n命令可能包含了 2 个、3 个或者 4 个字符。\n\n\n* 插入与删除（INSERTING AND DELETING）\n--------------------------------------\n\n插入文字很简单，直接敲键盘就可以了。普通的字符，比如 A、7、* 等等，会\n随着你的输入而插入。要插入一个换行符，输入 <Return>（这个键在键盘上有\n时会被标注成“Enter”）。\n\n你可以用 <DEL> 来删除光标左边的字符，这个键通常被标注为“Backspace”――跟\n你在 Emacs 之外的用法应该一样，删除最后一个输入的字符。\n\n你的键盘上可能有另外一个键，标注着 <Delete>，但那个不是我们所说的 <DEL>。\n\n>> 现在就来试试――敲点字，然后按几下 <DEL> 删除它们。\n   不用担心文件被修改，你做什么都没关系，这里就是专给你练习用的。\n\n如果一行文字很长、超出了窗格的宽度，显示不下的部分会在紧邻的下一行继续\n显示。如果你使用的是图形界面，文本区域两边的狭窄区域（左右“边缘”）会出\n现小小的转弯箭头，表明这是某一行的接续显示。如果你使用的是文本终端，接\n续显示由屏幕最右边一列的一个反斜线（“\\”）来表示。\n\n>> 输入文字，一直到屏幕的右边界，然后继续。\n你会看到一个接续行出现。\n\n>> 用 <DEL> 删掉一些文字，直到此行长度小于窗格宽度，接续行就消失了。\n\n换行符跟其它字符一样可以被删除。两行中间的换行符被删除后，这两行将会合\n并成一行。如果合并后的这一行太长，超出了窗格宽度，它就会以一个接续行来\n显示。\n\n>> 移动光标到某行的开头并输入 <DEL>。\n   这时该行将与其前一行一起被合并为一行。\n\n>> 输入 <Return> 重新插入你刚才删除的换行符。\n\n<Return> 是一个特殊的键，因为按下这个键后，得到的可能不仅仅是一个换行\n符。根据周围文本的不同，Emacs 可能会在换行符之后插入一些空白字符，这样，\n当你在新的一行开始打字时，文本会自动与前一行对齐。\n\n>> 这是一个自动缩进的例子。\n   在这一行的末尾输入 <Return>。\n\n可以看到，在插入换行符之后，Emacs 插入了空格，因此光标移动到了“在”这个\n字的下面。\n\n前面讲过，大部分的 Emacs 命令都可以指定重复次数，这其中也包括输入字符的\n命令。重复执行输入字符的命令实际上就是输入多个相同的字符。\n\n>>  试试 C-u 8 *，这将会插入 ********。\n\n好，现在你应该已经掌握了最基本的的文本插入和修改功能，其实删除还可以\n“以词为单位”进行，下面是一个关于“删除”操作的小结：\n\n        <DEL>        删除光标前的一个字符\n        C-d          删除光标后的一个字符\n\n        M-<DEL>      移除光标前的一个词\n        M-d          移除光标后的一个词\n\n        C-k          移除从光标到“行尾”间的字符\n        M-k          移除从光标到“句尾”间的字符\n\n【可能你已经注意到了“删除（delete）”和“移除（kill）”的用词区别，后\n文会有详细说明。】\n\n注意“<DEL> 和 C-d”还有“M-<DEL> 和 M-d”是根据前述惯例从 C-f和 M-f 衍生\n出来的（其实<DEL>不是控制字符，我们先忽略这一点）。C-k和 M-k 的关系在\n某种程度上与 C-e 和 M-e 一样――如果把“一行”和“一句”作一个类比的话。\n\n你也可以用一种通用的办法来移除缓冲区里的任何一部分：首先把光标移动到你\n想要移除的区域的一端，然后按 C-<SPC>（<SPC>指空格）【注意，C-<SPC> 往\n往被中文用户设定成输入法热键，如果这样，C-<SPC> 就被系统拦截而无法传递\n给 Emacs 了，在这种情况下可以使用C-@。】，然后将光标移动到你准备移除的\n文字的另一端。这个时候， Emacs 会高亮光标和你按下 C-<SPC> 之间的文本。\n最后，按下 C-w 。这样就可以把位于这两点之间的所有文字移除了。\n\n>> 移动光标到上一段开头的“你”字。\n>> 输入 C-<SPC> 。Emacs 应该会在屏幕的下方显示一个“Mark set”的消息。\n>> 移动光标到第二行中的“端”字。\n>> 输入 C-w，从“你”开始到“端”之前的文字被全部移除。\n\n注意,“移除（kill）”和“删除（delete）”的不同在于被移除的东西可以被重新\n插入（在任何位置），而被删除的就不能使用相同的方法重新插入了（不过可以\n通过撤销一个删除命令来做到，后文会提到）。【实际上，移除掉的东西虽然看\n起来“消失”了，但实际上被 Emacs 记录了下来，因此还可以找回来；而删除掉\n的东西虽然也可能还在内存里，但是已经被 Emacs“抛弃”了，所以就找不回来\n了。】重新插入被移除的文字称为“召回（yank）”。一般而言，那些可能消除很\n多文字的命令会把消除掉的文字记录下来（它们被设定成了“可召回”），而那些\n只消除一个字符或者只消除空白的命令就不会记录被消除的内容（自然你也就无\n法召回了）。\n\n>> 移动光标到一非空白行的行头，然后输入 C-k 移除那一行上的文字。\n\n>> 再次 C-k，你可以看到它移除了跟在那一行后面的换行符。\n\n注意，单独的 C-k 会把一行的内容移除，而第二个 C-k 则会移除换行符，并使\n其后所有的行都向上移动。C-k 处理数字参数的方式很特别，它会把参数指定的\n那么多行连同其后的换行符一起移除，而不仅仅是重复 C-k 而已。比如 C-u 2\nC-k 会把两行以及它们的换行符移除；而如果只是输入 C-k 两次显然不是这个结\n果。\n\n重新插入被移除的文字恢复的动作称为“召回（yanking）”。（就好像把别人从你身边\n移走的东西又猛力地拉回来。）你可以在你删除文字的地方召回，也可以在别的\n地方召回，还可以多次召回同样的文字以得到它的多个拷贝。很多其它的编辑器\n把移除和召回叫做“剪切”和“粘贴” （详情可见 Emacs 使用手册里的术语表）。\n\n召回的命令是 C-y。它会在光标所在处插入你最后移除的文字。\n\n>> 试试看，输入 C-y 将文字召回。\n\n如果你一次连按了好几下 C-k，那么所有被移除的行会被存储在一起，只要一个\nC-y 就可以把它们都召回。\n\n>> 在这里试试，连续按几次 C-k。\n\n现在再来恢复刚刚被我们移除的文字：\n\n>> 按 C-y。然后把光标往下移动几行，再按一次 C-y。\n   现在你应该知道怎么复制文字了。\n\nC-y 可以召回最近一次移除的内容，那如何召回前几次移除的内容呢？它们当然\n没有丢，你可以用 M-y 来召回它们。在用 C-y 召回最近移除的文字之后，紧接\n着再按 M-y 就可以召回再前一次被移除的内容，再按一次 M-y 又可以召回再上\n一次的……连续使用 M-y 直到找到你想要召回的东西，然后什么也不用做，继续\n编辑就行了。\n\n如果连续按 M-y 很多次，你可能会回到起始点，也就是最近移除的文字。\n【看得出这实际上是一个环。】\n\n>> 移除一行，移动一下光标，然后再移除另外一行。\n   按 C-y 将第二次移除的那行召回来。\n   紧接着再按 M-y，它将会被第一次移除的那行取代。\n   试着再按几下 M-y 看看会发生什么。\n   再继续，直到第二行被召回来，然后再做个几次。\n   如果感兴趣，你可以试着给 M-y 指定一个正的或负的参数。\n\n\n* 撤销（UNDO）\n--------------\n\n如果你修改了一段文字，又觉得改得不好，可以用 undo 命令进行撤销：C-/。\n\n通常 C-/ 会消除一个命令所造成的所有改变；如果你在一行中连续多次地使用\nC-/，你会把以前的命令也依次撤销。\n\n但是有两个例外：\n1） 没有改变文字的命令不算（包括光标移动命令和滚动命令）\n2） 从键盘输入的字符以组为单位――每组最多 20 个字符――来进行处理。\n    （这是为了减少你在撤销“插入文字”动作时需要输入 C-/ 的次数）\n\n>> 用 C-k 将这一行移除，然后输入 C-/ ，它会再次出现。\n\nC-_ 也是撤销命令；它的作用跟 C-/ 一样，但是它比较容易多次输入。在\n某些终端上，输入 C-/ 实际上向 Emacs 发送的是 C-_ 。\n另外， C-x u 和 C-/ 完全一样，但是按起来有些麻烦。\n\n数字参数对于 C-/ 、 C-_ 和 C-x u 的意义是执行撤销的重复次数。\n\n\n* 文件（FILE）\n--------------\n\n想保存工作成果就要记得存盘，否则一旦退出 Emacs 你编辑的文字就会丢失。要\n存盘，就要在编辑前“寻找”到一个存盘文件。（这个过程通常也被称为“访问”\n文件。）\n\n寻找到一个文件意味着你可以在 Emacs 里查看这个文件的内容。从许多角度看，\n这就等于你在直接编辑这个文件，只是你所做的修改只有在“存盘”的时候才会\n被写入文件。也正因为如此，你可以丢弃一个写到一半的文件而不必把这个残缺\n文件也保存到计算机上。在存盘的时候，Emacs 会把存盘前的文件重命名保存，\n以防你改完之后又想反悔。\n\n在屏幕的下方，你应该能够看到头部有短线“-”的一行，行首通常是一些诸如“\n-:--- TUTORIAL.cn”的文字，这些文字代表了你当前正在访问的文件。比如你现\n在正在访问的文件是对 Emacs 快速指南的一份临时拷贝，叫做“TUTORIAL.cn”。\n每当Emacs 寻找到一个文件，文件名就会出现在这个位置。\n\n寻找文件的命令有一个特点，那就是你必须给出文件名。我们称这个命令“读入\n了一个参数”（在这里，这个参数显然就是文件名）。在你输入这条命令之后：\n\n        C-x C-f   寻找一个文件\n\nEmacs 会提示你输入文件名。你输入的文件名会出现在屏幕最底端的一行，这一\n行被称为小缓冲（minibuffer），在小缓冲里你可以使用通常的 Emacs 编辑命令\n来编辑文件名。\n\n在小缓冲里输入文件名（其实输入其它东西也一样）时可以用 C-g 取消。\n\n>> 输入 C-x C-f，然后输入 C-g\n   这会关掉小缓冲，同时也会取消使用小缓冲的 C-x C-f 命令。\n   当然了，你也没有找任何文件。\n\n用 <Return> 结束文件名的输入。之后，小缓冲会消失，C-x C-f 将会去寻找你\n指定的文件。小缓冲在 C-x C-f 命令结束之后也会消失。\n\n文件被显示在了屏幕上，你可以开始编辑了。存盘用这条命令：\n\n        C-x C-s   储存这个文件\n\n这条命令把 Emacs 中的文字存储到文件中。第一次存盘的时候 Emacs 会将原文\n件重命名以备份。重命名的规则通常是在原文件名之后添加一个“~”字符。\n【对许多人来说，这是一个烦人的特性，关掉文件备份可以用如下命令：\n  M-x customize-variable <Return> make-backup-files <Return>】\n\n存盘结束后，Emacs 会显示写入文件的文件名。你最好养成经常存盘的习惯，这\n可以减少系统崩溃和死机给你带来的损失（也可参见下面的“自动保存”一节）。\n\n>> 输入 C-x C-s TUTORIAL.cn <Return> 。\n   这将会把该指南保存为一个名为 TUTORIAL.cn 的文件，并且在屏幕的下方显\n   示一条消息：“Wrote ...TUTORIAL.cn”。\n\n你不但可以寻找一个已有的文件来查看或编辑，还可以寻找一个不存在的文件。\n实际上这正是 Emacs 创建新文件的方法：找到不存在的新文件。事实上，只有\n在存盘的时候，Emacs 才会真正创建这个文件。而在这之后的一切就跟编辑一个\n已有文件没有区别了。\n\n\n* 缓冲区（BUFFER）\n------------------\n\n你可以用 C-x C-f 找到并打开第二个文件，但第一个文件仍然在 Emacs 中。要\n切回第一个文件，一种办法是再用一次 C-x C-f。这样，你就可以在 Emacs 中同\n时打开多个文件。\n\nEmacs 把每个编辑中的文件都放在一个称为“缓冲区（buffer）”的地方。每寻\n找到一个文件，Emacs 就在其内部开辟一个缓冲区。用下面的命令可以列出当前\n所有的缓冲区：\n\n        C-x C-b   列出缓冲区\n\n>> 现在就试一下 C-x C-b\n\n观察一下缓冲区是如何被命名的，它很可能跟与其对应的文件同名。实际上，一\n个 Emacs 窗格里的任何文字都是某个缓冲区的一部分。\n\n>> 输入 C-x 1 离开缓冲区列表\n\n不管存在多少缓冲区，任何时候都只能有一个“当前”缓冲区，也就是你正在编\n辑的这个。如果你想编辑其它的缓冲区，就必须“切换”过去。上面讲过，用\nC-x C-f 是一种办法。不过还有一个更简单的办法，那就是用 C-x b。用这条命\n令，你必须输入缓冲区的名称。\n\n>> 通过输入 C-x C-f foo <Return> 创建一个名为“foo”的文件。\n   然后输入 C-x b TUTORIAL.cn <Return> 回到这里。\n\n大多数情况下，缓冲区与跟其对应的文件是同名的（不包括目录名），不过这也\n不是绝对的。用 C-x C-b 得到的缓冲区列表总是显示缓冲区名。\n\n缓冲区未必有对应文件。显示缓冲区列表的缓冲区（叫做“*Buffer List*”）就\n是这样。这个 TUTORIAL.cn 缓冲区起初没有对应的文件，但是现在有了，因为\n在前一节你输入了 C-x C-s ， 将它保存成了一个文件。\n\n“*Messages*”缓冲区也没有对应文件，这个缓冲区里存放的都是在 Emacs 底部\n出现的消息。\n\n>> 输入 C-x b *Messages* <Return> 瞅瞅消息缓冲区里都有什么东西。\n   然后再输入 C-x b TUTORIAL.cn <Return> 回到这里。\n\n如果你对某个文件做了些修改，然后切换到另一个文件，这个动作并不会帮你把\n前一个文件存盘。对第一个文件的修改仍然仅存在于 Emacs 中，也就是在它对\n应的缓冲区里。并且，对第二个文件的修改也不会影响到第一个文件。这很有用，\n但也意味着你需要一个简便的办法来保存第一个文件的缓冲区。先切换回那个缓\n冲区，再用 C-x C-s 存盘，太麻烦了。你需要一个更简便的方法，而 Emacs 已\n经为你准备好了：\n\n        C-x s   保存多个缓冲区\n\nC-x s 会找出所有已被修改但尚未存盘的缓冲区，然后向你逐个询问：是否需要\n存盘？\n\n>> 插入一行文字，然后输入 C-x s。\n   它应该会问你，是否要储存名为 TUTORIAL.cn 的缓冲区？\n   按“y”告诉它你想存盘。\n\n\n* 命令集扩展（EXTENDING THE COMMAND SET）\n-----------------------------------------\n\nEmacs 的命令就像天上的星星，数也数不清。把它们都对应到 CONTROL 和 META\n组合键上显然是不可能的。Emacs 用扩展（eXtend）命令来解决这个问题，扩展\n命令有两种风格：\n\n        C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。\n        M-x     命令名扩展。M-x 之后输入一个命令名。\n\n很多扩展命令都相当有用，虽然与你已经学过的命令比起来，他们可能不那么常\n用。我们早已经见过一些扩展命令了，比如用 C-x C-f 寻找文件和用 C-x C-s\n保存文件；退出 Emacs 用的 C-x C-c 也是扩展命令。（不用担心退出 Emacs 会\n给你带来什么损失，Emacs 会在退出之前提醒你存盘的。）\n\n如果你使用图形界面，你不需要任何特殊的命令来切换 Emacs 和其他应用程序。\n你可以使用鼠标或者窗口管理器的命令。然而，如果你使用只能同时显示一个应\n用程序的文本终端，你需要“挂起” Emacs ，以切换到其他的应用程序。\n\nC-z 可以暂时离开 Emacs――当然，你还可以再回来。在允许 C-z 的系统中，C-z\n会把 Emacs“挂起”，也就是说，它会回到 shell但不杀死 Emacs 的进程。在常\n用的 shell 中，通常可以用“fg”或者“%emacs”命令再次回到 Emacs 中。\n\n你最好在打算退出登陆的时候再用 C-x C-c。在把 Emacs 当做一个临时的编辑\n器的时候（比如被一个邮件处理程序调用），也可以用 C-x C-c 退出。\n\nC-x 的扩展命令有很多，下面列出的是你已经学过的：\n\n        C-x C-f         寻找文件。\n        C-x C-s         保存文件。\n        C-x C-b         列出缓冲区。\n        C-x C-c         离开 Emacs。\n        C-x 1           关掉其它所有窗格，只保留一个。\n        C-x u           撤销。\n\n用命令名扩展的命令通常并不常用，或只用在部分模式下。比如\nreplace-string（字符串替换）这个命令，它会把一个字符串替换成另一个。在\n输入 M-x 之后，Emacs 会在屏幕底端向你询问并等待你输入命令名。如果你想\n输入“replace-string”，其实只需要敲“repl s<TAB>”就行了，Emacs 会帮你自\n动补齐。输入完之后按 <Return> 提交。\n\n字符串替换命令需要两个参数――被替换的字符串和用来替换它的字符串。每个\n参数的输入都以换行符来结束。\n\n>> 将光标移到本行下面第二行的空白处，然后输入\n   M-x repl s<Return>changed<Return>altered<Return>。\n\n   【以下保留一行原文，以应练习之需：】\n   Notice how this line has changed: you've replaced...\n\n请注意这一行的变化：在光标之后的范围内，你已经将“changed”这个词――不\n论它在哪里出现――全部用“altered”替换掉了。\n\n\n* 自动保存（AUTO SAVE）\n-----------------------\n\n如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你\n所做的修改就很可能会丢失。为了避免这样的不幸发生，Emacs 会定期将正在编\n辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个\n“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫\n“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。\n\n所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保\n存文件）然后输入 M-x recover file <Return> 来恢复你的自动保存文件。在\n提示确认的时候，输入 yes<Return>。\n\n\n* 回显区（ECHO AREA）\n---------------------\n\n如果 Emacs 发现你输入多字符命令的节奏很慢，它会在窗格的下方称为“回显区”\n的地方给你提示。回显区位于屏幕的最下面一行。\n\n\n* 状态栏（MODE LINE）\n---------------------\n\n位于回显区正上方的一行被称为“状态栏”。状态栏上会显示一些信息，比如：\n\n -:**- TUTORIAL.cn 63% L749 (Fundamental)\n\n状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息。\n\n你应该知道文件名的意思吧？就是你找到的那个文件嘛。-NN%-- 显示的是光标在\n全文中的位置。如果位于文件的开头，那么就显示 --Top-- 而不是 --00%--；如\n果位于文件的末尾，就显示 --Bot--。如果文件很小，一屏就足以显示全部内容，\n那么状态栏会显示 --All--。\n\n“L” 和其后的数字给出了光标所在行的行号。\n\n最开头的星号（*）表示你已经对文字做过改动。刚刚打开的文件肯定没有被改动\n过，所以状态栏上显示的不是星号而是短线（-）。\n\n状态栏上小括号里的内容告诉你当前正在使用的编辑模式。缺省的模式是\nFundamental，就是你现在正在使用的这个。它是一种“主模式”。\n\nEmacs 的主模式林林总总。有用来编辑程序代码的――比如 Lisp 模式；也有用\n来编辑各种自然语言文本的――比如 Text 模式。任何情况下只能应用一个主模\n式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方。\n\n主模式通常会改变一些命令的行为。比方说，不管编辑什么语言的程序代码，你\n都可以用一个相同的命令来添加注释。但是在不同的语言中注释的语法往往是不\n同的，这时不同的主模式就会用各自不同的语法规则来添加注释。主模式都是可\n以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental\n模式。\n\n编辑自然语言文本――比如现在――应该用 Text 模式。\n\n>> 输入 M-x text-mode <Return>。\n\n别担心，什么都没变。不过细心一些可以发现，M-f 和 M-b 现在把单引号（'）\n视为词的一部分了。而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号\n视为分隔单词的符号。\n\n主模式通常都会搞一些类似的小动作，因为很多命令其实完成的是“相同的工\n作”，只是在不同环境下会有不同的工作方式而已。【所谓“求同存异”，在\nEmacs 里得到了很好的体现】\n\n用 C-h m 可以查看当前主模式的文档。\n\n>> 把光标移动到下一行。\n>> 用 C-l C-l 将本行带到屏幕的最上方。\n>> 输入 C-h m，看看 Text 模式与 Fundamental 模式有哪些不同。\n>> 输入 C-x 1 关掉文档窗格。\n\n主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minor\nmode）存在。辅模式并不能替代主模式，而是提供一些辅助的功能。每个辅模式\n都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关。所以你可以不\n使用辅模式，也可以只使用一个或同时使用多个辅模式。\n\n有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文本\n的时候。启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行。\n\n用 M-x auto-fill-mode <Return> 启动自动折行模式。再用一次这条命令，自\n动折行模式会被关闭。也就是说，如果自动折行模式没有被开启，这个命令会开\n启它；如果已经开启了，这个命令会关闭它。所以我们说，这个命令可以用来\n“开关（toggle）”模式。\n\n>> 现在输入 M-x auto-fill-mode <Return>。然后随便敲点什么，直到你看到它\n   分成两行。你必须敲一些空格，因为 Auto Fill 只在空白处进行断行。\n   【输入空格对英文来说是必须的，而对中文则不必。】\n\n行边界通常被设定为 70 个字符【这里指英文字符】，你可以用 C-x f 命令配合\n数字参数来重新设定它。\n\n>> 输入 C-x f 并传递参数 20： C-u 2 0 C-x f。\n   然后输入一些文字，观察 Emacs 的自动折行动作\n   最后再用 C-x f 将边界设回 70。\n\n如果你在段落的中间做了一些修改，那么自动折行模式不会替你把整个段落重新\n折行，你需要用 M-q 手动折行。注意，光标必须位于你需要折行的那一段里。\n\n>> 移动光标到前一段中，然后输入 M-q。\n\n\n* 搜索（SEARCHING）\n-------------------\n\nEmacs 可以向前或向后搜索字符串（“字符串”指的是一组连续的字符）。搜索命\n令是一个移动光标的命令：搜索成功后，光标会停留在搜索目标出现的地方。\n\nEmacs 的搜索命令是“渐进的（incremental）”。意思是搜索与输入同时进行：\n你在键盘上一字一句地输入搜索词的过程中，Emacs 就已经开始替你搜索了。\n\nC-s 是向前搜索，C-r 是向后搜索。不过手别这么快！别着急试。\n\n在按下 C-s 之后，回显区里会有“I-search”字样出现，表明目前 Emacs 正处\n于“渐进搜索”状态，并等待你输入搜索字串。按 <Return> 可以结束搜索。\n\n>> 输入 C-s 开始一个搜索。注意敲慢一点，一次输入一个字符。\n   慢慢输入“cursor”这个词，每敲一个字都停顿一下并观察光标。\n   现在你应该已曾经找到“cursor”这个词了。\n>> 再按一次 C-s，搜索下一个“cursor”出现的位置。\n>> 现在按四次 <DEL> ，看看光标是如何移动的。\n>> 敲 <Return> 结束搜索。\n\n看仔细了么？在一次渐进式搜索中，Emacs 会尝试跳到搜索目标出现的位置。要\n跳到下一个命中位置，就再按一次 C-s。如果找不到目标，Emacs 会发出“哔”\n的一声，告诉你搜索失败。在整个过程中，都可以用 C-g 来终止搜索。【你会发\n现 C-g 会让光标回到搜索开始的位置，而 <Return> 则让光标留在搜索结果上，\n这是很有用的功能。】\n\n在渐进式搜索中，按 <DEL> 会“撤回”到最近一次搜索的命中位置。如果之前没\n有一个命中， <DEL> 会抹去搜索字符串中的最后一个字符。比如你已经输入了\n“c”，光标就停在“c”第一次出现的位置，再输入“u”，光标停在“cu”第一次出现\n的位置，这时再按 <DEL> ，“u”就从搜索字串中消失了，然后光标会回到“c”第\n一次出现的位置。\n\n另外，如果你在搜索的时候输入了 control 或者 meta 组合键的话，搜索可能会\n结束。（也有例外，比如 C-s 和 C-r 这些用于搜索的命令。）\n\n前面说的都是“向下”搜索，如果想“向上”搜索，可以用 C-r。C-r 与 C-s\n相比除了搜索方向相反之外，其余的操作都一样。\n\n\n* 多窗格（MULTIPLE WINDOWS）\n----------------------------\n\nEmacs 的迷人之处很多，能够在屏幕上同时显示多个窗格就是其中之一。\n\n>> 移动光标到这一行，然后输入 C-l C-l。\n\n>> 现在输入 C-x 2，它会将屏幕划分成两个窗格。\n   这两个窗格里显示的都是本篇快速指南，而光标则停留在上方的窗格里。\n\n>> 试试用 C-M-v 滚动下方的窗格。\n   （如果你并没有 META 键，用 ESC C-v 也可以。）\n   【向上滚动是 C-M-S-v，也就是同时按住 CONTROL、META 和 SHIFT 再按 v】\n\n>> 输入 C-x o（“o”指的是“其它（other）”），\n   将光标转移到下方的窗格。\n\n>> 在下方的窗格中，用 C-v 和 M-v 来滚动。\n   同时继续在上方的窗格里阅读这些指导。\n\n>> 再输入 C-x o 将光标移回到上方的窗格里。\n   光标会回到它在上方窗格中原本所在的位置。\n\n连续使用 C-x o 可以遍历所有窗格。“被选中的窗格”，也就是绝大多数的编辑\n操作所发生的地方，是在你不打字时闪烁光标的那个窗格。其他的窗格有它们自\n己的光标位置； 如果你在图形界面下运行 Emacs ，这些光标是镂空的长方形。\n\n当你在一个窗格中编辑，但用另一个窗格作为参考的时候，C-M-v 是很有用的命\n令。无需离开被选中的窗格，你就可以用 C-M-v 命令滚动另外一个窗格中的文\n字。【比如翻译和校对就很适合用这种方式进行。】\n\nC-M-v 是一个 CONTROL-META 组合键。如果你有 META （或 Alt）键的话，可以\n同时按住CONTROL 和 META 键并输入 v。CONTROL 和 META 键先按哪个都可以，\n因为它们只是用来“修饰（modify）”你输入的字符的。\n\n如果你并没有 META 键，你也可以用 ESC 来代替，不过这样的话就要注意按键顺\n序了：你必须先输入 ESC ，然后再输入 CONTROL-v。CONTROL-ESC v 是没用的，\n因为 ESC 本身是一个字符键，而不是一个修饰键（modifier key）。\n\n>> （在上方窗格里）输入 C-x 1 关掉下方窗格。\n\n（如果你在下方的窗格里输入 C-x 1，那么就会关掉上方的窗格。你可以把这个\n命令看成是“只保留一个窗格”――就是我们正在编辑的这个。）\n\n不同的窗格可以显示不同的缓冲区。如果你在一个窗格里用 C-x C-f 打开了一个\n文件，另一个窗格并不会发生什么变化。任何一个窗格里都可以用来打开文件。\n\n用下面的方法可以在一个新开窗格里打开文件：\n\n>> 输入 C-x 4 C-f，紧跟着输入一个文件名，再用 <Return> 结束。\n   可以看到你指定的文件出现在下方的窗格中，同时光标也跳到了那里。\n\n>> 输入 C-x o 回到上方的窗格，然后再用 C-x 1 关掉下方窗格。\n\n\n* 多窗口（MULTIPLE FRAMES）\n------------------\n\nEmacs 可以创建多个窗口。窗口由许多窗格以及菜单、滚动条、回显区等组成。\n在图形界面下，多个窗口可以同时显示出来。在文本终端中，只能同时显示一个\n窗口。\n\n>> 输入 M-x make-frame <Return>。\n 可以看到一个新的窗口出现在了你的屏幕上。\n\n你可以在新的窗口里做最初的窗口里可以做的任何事情。第一个窗口没有什么特\n别的。\n\n>> 输入 M-x delete-frame <Return>.\n 这个命令将会关闭选中的窗口。\n\n你也可以通过图形系统来关闭某个窗口（通常是在窗口上面的某个角落里的一个\n“X”按钮）。如果你关闭的是 Emacs 进程的最后一个窗口， Emacs 将会退出。\n\n\n* 递归编辑（RECURSIVE EDITING LEVELS）\n--------------------------------------\n\n有时候你会进入所谓的“递归编辑”。递归编辑状态由位于状态栏的方括号所指\n示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到\n[(Fundamental)]，而不是 (Fundamental)。【比如在用 M-% 进行交互式替换的\n时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模式，\n这就是所谓的递归编辑。】\n\n离开递归编辑可以用 ESC ESC ESC。这是一个最通用的“离开”命令，你甚至可\n以使用它来关掉多余的窗格，或者离开小缓冲。\n\n>> 输入 M-x 进入小缓冲；然后输入 ESC ESC ESC 离开。\n\n你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的\n命令和其参数（arguments）。\n\n\n* 获得更多帮助（GETTING MORE HELP）\n-----------------------------------\n\n本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水，不至于束手无策望洋兴\n叹。有关 Emacs 的话题可谓汗牛充栋，这里自然是难尽万一。不过 Emacs 很理\n解你求知若渴的心情，因为它提供的强大功能实在是太多了。为此，Emacs 提供\n了一些命令来查看 Emacs 的命令文档，这些命令都以 CONTROL-h 开头，这个字\n符也因此被称为“帮助（Help）字符”。\n\n要使用帮助（Help）功能，请先输入 C-h，然后再输入一个字符以说明你需要什\n么帮助。如果你连自己到底需要什么帮助都不知道，那么就输入 C-h ?，Emacs\n会告诉你它能提供了哪些帮助。如果你按了 C-h 又想反悔，可以用 C-g 取消。\n\n（如果你按 C-h 之后没有任何帮助信息显示出来，那么试试 F1 键或者 M-x help <Return> 。）\n\n最基本的帮助功能是 C-h c。输入 C-h c 之后再输入一个组合键，Emacs 会给出\n这个命令的简要说明。\n\n>> 输入 C-h c C-p。\n\n显示的消息应该会是这样：\n\n        C-p runs the command previous-line\n\n这条消息显示了 C-p 命令对应的函数名。命令的功能由函数完成，所以函数名\n本身也可以被看成是最简单的文档――至少对于你已经学过的命令来说，它们的函\n数名足以解释它们的功能了。\n\n多字符命令一样可以用 C-h c 来查看。\n\n想得到更多的信息，请把 C-h c 换成 C-h k 试试看。\n\n>> 输入 C-h k C-p。\n\n上面的命令会新打开一个 Emacs 窗格以显示函数的名称及其文档。你读完之后可\n以用 C-x 1 关掉这个帮助窗格。当然你并不需要立即这样做，你完全可以先在编\n辑窗格里做点别的事情，然后再关掉帮助窗格。\n\n还有一些其它有用的 C-h 命令：\n\n   C-h f        解释一个函数。需要输入函数名。\n\n>> 试试看，输入 C-h f previous-line <Return>。\n   Emacs 会给出它所知道的所有有关“实现 C-p 命令功能的函数”的信息。\n\nC-h v 用来显示 Emacs 变量的文档。Emacs 变量可以被用来“定制 Emacs 的行\n为”。同样，你需要输入变量的名称。\n\n   C-h a        相关命令搜索（Command Apropos）。\n                输入一个关键词然后 Emacs 会列出所有命令名中包含此关键词\n                的命令。这些命令全都可以用 M-x 来启动。对于某些命令来说，\n                相关命令搜索还会列出一两个组合键。\n\n>> 输入 C-h a file <Return>。\n\nEmacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中含\n有“file”的命令。你可以看到像“C-x C-f”这样的组合键显示在“find-file”\n这样的命令名的旁边。\n\n>> 用 C-M-v 来回滚动 help 窗格，多试几次。\n\n>> 输入 C-x 1 来删除 help 窗格。\n\n   C-h i        阅读手册（也就是通常讲的 Info）。\n                这个命令会打开一个称为“*info*”的特殊缓冲区，在那里，\n                你可以阅读安装在系统里的软件包使用手册。要读 Emacs 的使\n                用手册，按 m emacs <Return> 就可以了。如果你之前从没用\n                过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使\n                用指南。在看完本快速指南之后，Emacs Info 会成为你的主要\n                参考文档。\n\n\n* 更多精彩（MORE FEATURES）\n---------------------------\n\n想学习更多的使用技巧，Emacs 使用手册（manual）值得一读。你可以读纸版的\n书，也可以在 Emacs 中读（可以从 Help 菜单进入或者按 C-h r）。提两个你\n可能会很感兴趣的功能吧，一个是可以帮你少敲键盘的 completion（自动补全），\n另一个是方便文件处理的 dired（目录编辑）。\n\nCompletion 可以替你节省不必要的键盘输入。比如说你想切换到 *Message* 缓\n冲区，你就可以用 C-x b *M<Tab> 来完成。只要 Emacs 能够根据你已经输入的\n文字确定你想要输入的内容，它就会自动帮你补齐。Completion 也可用于命令\n名和文件名。有关 Completion 的详细说明可以在 Emacs Info 中的\n“Completion”一节里找到。\n\nDired 能够在一个缓冲区里列出一个目录下的所有文件（可以选择是否也列出子\n目录），然后你可以在这个文件列表上完成对文件的移动、访问、重命名或删除\n等等操作。Dired 也在 Emacs 使用手册中有详细介绍，参见“Dired”一节。\n\nEmacs 使用手册里还有许许多多的精彩功能等着你来了解。\n\n\n* 总结（CONCLUSION）\n--------------------\n\n要退出 Emacs 请用 C-x C-c。\n\n本文完全是为零起点新手所写的起步教程。如果你觉得哪里还看不明白，千万不\n要怀疑自己，那一定是我们没有写好。我们永远欢迎你的不满和抱怨。\n\n\n* 翻译（TRANSLATION）\n---------------------\n\n翻译：孙一江 <sunyijiang@gmail.com>\n维护：薛富侨 <xfq.free@gmail.com>\n校对：水木社区（www.newsmth.net）Emacs 板众多网友及众多 Emacs 中文用户\n\nEmacs 快速指南（Tutorial）早有两个刘昭宏的中文译本，繁简各一。其简体版本\n（TUTORIAL.cn）基本由繁体版本（TUTORIAL.zh）经词语替换而得。然而繁简中文\n不仅在用词习惯上有所不同，更有诸多表达方式与句法方面的差异，因此一直以来\n用户使用 TUTORIAL.cn 都会略觉生硬和晦涩。这次重新翻译 TUTORIAL.cn 的动机\n正是源于这种体验，希望我们的工作能够让本文更好地发挥其作用。TUTORIAL.zh\n的译文质量很高，在翻译过程中给予过我们许多借鉴和参考，在此对刘昭宏的工作\n表示感谢。\n\n翻译过程中最大的挑战莫过于术语译词的选择了。经过水木社区 Emacs 板热心\n网友小范围内的讨论，我们选择了现在的译法。用户的广泛参与是自由软件生命\n力的源泉，所以如果你有任何建议、勘误或想法，请用你喜欢的方式向我们提出。\n你可以通过电子邮件直接联系维护者，也可以放到 GNU Emacs 的开发邮件列表\n或者水木社区的 Emacs 板上进行讨论。\n\n下面列出主要术语的译词对照，并给出注释说明：\n\n    command               命令\n    cursor                光标\n    scrolling             滚动\n    numeric argument      数字参数\n    window                窗格 [1]\n    insert                插入\n    delete                删除 [2]\n    kill                  移除 [2]\n    yank                  召回 [2]\n    undo                  撤销\n    file                  文件\n    buffer                缓冲区\n    minibuffer            小缓冲\n    echo area             回显区\n    mode line             状态栏\n    search                搜索\n    incremental search    渐进式搜索 [3]\n\n对于其他没有提到的术语，读者可以参考 Emacs 使用手册里的术语表。\n\n[1] “window”一词在计算机相关的领域一般都被译为“窗口”。但是在 Emacs\n    中，还有一个“frame”的概念。在被广泛使用的 X 窗口系统和微软的视窗\n    （Windows）系列操作系统中，Emacs 的一个“frame”就是一个“窗口”，因\n    此把 Emacs 中的“frame”译成“窗口”更加符合通常的习惯。这样，Emacs\n    中的“window”就只能译成“窗格”了。我们认为 Emacs 中 window 和\n    frame 的关系用窗格和窗口来类比是十分形象的。\n\n    《学习GNU Emacs》（第二版）一书对“window”和“frame”的翻译与本教程\n    刚好相反（分别译作“窗口”和“窗格”）。在此特别注明，以消除可能产生\n    的疑惑。（感谢李旭章 <lixuzhang@gmail.com> 指出）\n\n[2] 对于“delete”和“kill”的区别，正文已经给出了详细的说明。“删除”和\n    “移除”相比较起来，前者更多地隐含着“破坏”和“不可恢复”的意思，而\n    后者更多地隐含着“被转移”和“可恢复”的意思。因此分别选择它们作为上\n    述两词的译词，希望能够体现出区别。“yank”在中文文档中鲜有对应译词出\n    现，翻译的困难较大。究其本意是：“a strong sudden pull”（参见韦氏词\n    典），即“猛然拉回”。在原文档中 yank 被引申为“将先前移除的东西再移\n    回来”这个意思，所以我们选择了“召回”一词与其对应。\n\n[3] “incremental”一词在计算机著作中广泛出现，被广泛接受的中文译词有两\n    个：“增量的”和“渐进的”。“incremental search”翻译成“增量式搜索\n    ”或者“渐进式搜索”都讲得通，且都有各自的形象之处。还是参考原文对其\n    的解释：“... means that the search happens while you type in the\n    string to search for”。意思是之所以称其为“incremental search”，是\n    因为“在你输入搜索字符串的过程中，搜索就已经在进行了”。我们认为“增\n    量的”更加强调在现有基础上的变化（比如“增量备份”，“增量编译”）；\n    而“渐进的”更加强调过程的逐渐发展，也更加符合原文的意思。因此我们选\n    择将“incremental search”译作“渐进式搜索”。\n\n\n* 版权声明（COPYING）\n---------------------\n\nThis tutorial descends from a long line of Emacs tutorials\nstarting with the one written by Stuart Cracraft for the original Emacs.\n\nThis version of the tutorial is a part of GNU Emacs.  It is copyrighted\nand comes with permission to distribute copies on certain conditions:\n\n  Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,\n  Inc.\n\n  This file is part of GNU Emacs.\n\n  GNU Emacs is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  GNU Emacs is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.\n\nPlease read the file COPYING and then do give copies of GNU Emacs to\nyour friends.  Help stamp out software obstructionism (\"ownership\") by\nusing, writing, and sharing free software!\n\n【下面为版权声明的译文，仅供参考。实际法律效力以英文原文为准。】\n\n本快速指南沿袭自历史悠久的 Emacs 快速指南，可上溯至 Stuart Cracraft 为最\n初的 Emacs 所作的版本。\n\n本篇指南是 GNU Emacs 的一部分，并允许在下列条件的约束下发行其拷贝：\n\n   Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,\n   Inc.\n\n   本文件为 GNU Emacs 的一部分。\n\n   GNU Emacs 为自由软件；您可依据自由软件基金会所发表的GNU通用公共授权\n   条款，对本程序再次发布和/或修改；无论您依据的是本授权的第三版，或\n   （您可选的）任一日后发行的版本。\n\n   GNU Emacs 是基于使用目的而加以发布，然而不负任何担保责任；亦无对适\n   售性或特定目的适用性所为的默示性担保。详情请参照GNU通用公共授权。\n\n   您应已收到附随于 GNU Emacs 的GNU通用公共授权的副本；如果没有，请参照\n   <https://www.gnu.org/licenses/>.\n\n敬请阅读文件“COPYING”，然后向你的朋友们分发 GNU Emacs 拷贝。让我们以使\n用、编写和分享自由软件的实际行动来共同祛除软件障碍主义（所谓的“所有\n权”）！\n\n;;; Local Variables:\n;;; coding: utf-8\n;;; End:\n","source":"_posts/Emacs快速指南.md","raw":"---\ntitle: Emacs快速指南\ndate: 2018-09-09 01:09:59\ntags: [Emacs, 指南, 编辑器]\n---\n\n\nEmacs 快速指南.（查看版权声明请至本文末尾）\n\n【注意：位于【】之间的内容是译注，比如本行，下同。】\n\nEmacs 键盘命令通常包含 CONTROL 键（有时候以 CTRL 或 CTL 来标示）和\nMETA 键（有时候用 EDIT 或 ALT 来标示）。为了避免每次都要写出全名，我们\n约定使用下述缩写：\n\n C-<chr>  表示当输入字符 <chr> 时按住 CONTROL 键。\n          因此 C-f 就表示：按住 CONTROL 键再输入 f。\n\n M-<chr>  表示当输入字符 <chr> 时按住 META（或 EDIT 或 ALT）键。\n          如果你的键盘上没有 META 、EDIT 或 ALT 键，用下述方法也等效：\n          先按一下 ESC 键然后放开，再输入 <chr>。我们用 <ESC> 来表示\n          ESC 键。\n\n重要提示：要退出 Emacs，请用 C-x C-c（两个连续的组合键）。\n要退出一个正在运行中的命令，请用 C-g。\n下文中左边顶行的“>>”字样用来提示你尝试键盘命令。比如：\n\n\n\n\n\n[本页当中特意留出一些空白是出于教学目的，请继续往后阅读]\n\n\n\n\n\n>> 现在输入 C-v （查看下一屏文字）移动到下一屏。\n   （别紧张，在输入字符 v 的同时注意要按住 CONTROL 键）\n   从现在开始，每读完当前一屏你都需要这样做一次。\n\n值得注意的是，当你从上一屏滚到下一屏时，中间会有两行的重复；这样做是为\n了维持滚屏的连续性，方便你顺畅、连续地阅读。\n\n用编辑器，开门第一件事就是学会在文字中移动。你已经知道了 C-v 可以向下移\n动一屏，要往上移，请用 M-v （也就是按住 META 键，然后输入v，如果你没有\nMETA、EDIT 或 ALT 键那么就先按 <ESC> 再按 v）。\n\n>>  试试 M-v，然后再试试 C-v，来回遛几次。\n\n\n* 小结（SUMMARY）\n-----------------\n\n以下命令在翻页浏览时相当有用：\n\n        C-v     向前移动一屏\n        M-v     向后移动一屏\n        C-l     重绘屏幕，并将光标所在行置于屏幕的中央\n                （注意是 CONTROL-L，不是 CONTROL-1）\n\n>> 找到光标，留意其附近的文字，然后输入 C-l。\n   找找光标在哪里，你会发现其附近的文字与之前相同，位置却变为屏幕的中心。\n   如果你再次输入 C-l ，附近的文字将移动到屏幕的顶端。再次输入 C-l ，\n   文字将移动到底端。\n\n如果你的键盘上有 PageUp 和 PageDn，也可以用这两个键来滚屏。不过使用\nC-v 和 M-v 的效率要更高一些。\n\n\n* 基本的光标控制（BASIC CURSOR CONTROL）\n----------------------------------------\n\n整屏的移动很有用，但是如何在文字中精确定位呢？\n\n有几种方式可以选择。用方向键当然可以，不过更有效率的方法是保持双手位于\n主键盘区，然后使用 C-p 、 C-b 、 C-f 和 C-n 这四个命令。它们的功能和方\n向键是一样的，如下图所示：\n\n                             上一行 C-p\n                                  :\n                                  :\n            向左移 C-b .... 目前光标位置 .... 向右移 C-f\n                                  :\n                                  :\n                             下一行 C-n\n\n>> 用 C-n 或 C-p 将光标移到上图的中央。\n   按 C-l，整幅图会被显示在屏幕的中央。\n\n“P N B F”四个字母分别代表了四个词，用这四个词记忆这些组合键会更容易：\nP 代表 previous（上一行），N 代表 next（下一行），B 代表 backward（回\n退），而 F 则代表 forward（前进）。这些组合键今后将与你形影不离。\n\n>> 按几次 C-n 把光标往下挪到这里。\n\n>> 用 C-f 把光标移动到这一行，然后再用 C-p 往上挪。\n   注意观察当光标在一行的中央时 C-p 命令的行为。\n\n每行文字都以一个“换行符”结束，“换行符”把行与行区分开来。（通常情况下，\n一个文件的最后一行会有一个换行符，但是 Emacs 不强制要求这一点。）\n\n>> 在一行的行头输入 C-b。\n   光标应该会移动到前一行的行尾，因为光标在回退过程中越过了换行符。\n\n同样 C-f 也可以像 C-b 一样越过换行符。\n\n>> 连按几次 C-b，感受一下光标的移动。\n   然后按几次 C-f 回到本行的行尾。\n   再按一次 C-f，光标会移动到下一行。\n\n当你移动光标穿越屏幕的上下边界时，在边界外的文字会移动到屏幕内，这称为\n“滚动”（scrolling）。滚动使得光标可以被移动到文字中的任何位置，并且还\n不会让光标跑到屏幕外边去。\n\n>> 用 C-n 将光标下移，一直越过屏幕边界，同时观察发生了什么变化。\n\n如果你嫌一个字符一个字符地挪光标太慢，你还可以一个词一个词地跳。M-f\n(META-f) 可以将光标往前移动一个词，而 M-b 则是往后移。【这里的“词”指\n英文单词，对中文来说，则是指移动到下一个标点符号。】\n\n>> 试试 M-f 和 M-b。\n\n如果光标停在一个词的中间，M-f 会移动到这个词的末尾。如果光标处于词与词\n之间的空白处，M-f 会移动到下一个词的末尾。M-b 的功能类似，只是方向相反。\n\n>> 按几次 M-f 和 M-b，中间夹杂一些 C-f 和 C-b。\n   你可以观察到 M-f 和 M-b 在不同位置上所表现出来的不同行为。\n\n请注意 C-f 、C-b 和 M-f 、M-b 两对之间的类比关系。通常的惯例是：META 系\n列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 CONTROL\n系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。\n\n类似的惯例在“行”与“句子”之间也同样适用：C-a 和 C-e 可以将光标移动到\n“一行”的头部和尾部；而 M-a 和 M-e 则将光标移动到“一句”的头部和尾部。\n\n>> 按两次 C-a，再按两次 C-e。\n   按两次 M-a，再按两次 M-e。\n\n想一想为什么重复的 C-a 命令会没有作用，而重复的 M-a 命令则会让光标不断\n地回退到上一个句子。虽然这个类比规律并不严格，但是很自然。\n\n光标停留的位置也可以称作“点位”（point）。或者干脆说，光标指示出了屏幕\n上“点位”在文本中的位置。\n\n这里对简单的光标移动命令做一个总结，其中也包括了整词和整句的移动：\n\n        C-f     向右移动一个字符\n        C-b     向左移动一个字符\n\n        M-f     向右移动一个词【对中文是移动到下一个标点符号】\n        M-b     向左移动一个词【对中文是移动到上一个标点符号】\n\n        C-n     移动到下一行\n        C-p     移动到上一行\n\n        C-a     移动到行首\n        C-e     移动到行尾\n\n        M-a     移动到句首\n        M-e     移动到句尾\n\n>> 把上面所有的命令都练习几次，这些可都是最常用的命令。\n\n这里还要介绍两个重要的光标移动命令：M-< （META 小于号）可以将光标移动到\n所有文字的最开头；M-> （META 大于号）可以将光标移动到所有文字的最末尾。\n\n注意，在大部分键盘上，小于号（<）需要用上档键（Shift）来输入，所以在这\n些键盘上你应该用 Shift 键来输入 M-<，如果不按 Shift 键，你输入的会是\nM-comma（META 逗号）。\n\n>> 试一试 M-< ，移到本快速指南的最开始。\n   然后再按几次 C-v 回到这里。\n\n>> 试一试 M-> ，移到本快速指南的最末尾。\n   然后再按几次 M-v 回到这里。\n\n如果你的键盘上有方向键的话，也可以用它们来移动光标。不过我们有三个理由\n推荐你学习 C-b 、C-f 、C-n 、和 C-p：（1）它们在任何键盘上都能用。（2）\n当你熟练使用 Emacs 之后，你会发现用这些组合键比用方向键要快得多，因为你\n的手不需要离开打字区。（3）一旦你习惯了使用这些组合键，你也可以很容易地\n适应其它更高级的光标移动命令。\n\n大部分的 Emacs 命令接受数字参数，并且对于多数命令而言，这些数字参数的作\n用是指定命令的重复次数。为一个命令指定数字参数（也就是重复次数）的方法\n是：先输入 C-u，然后输入数字作为参数，最后再输入命令。如果你有META （或\nEDIT 或 ALT）键，那么还有另一种办法：按住 META 键不放，然后输入数字。不\n过我们还是建议你用 C-u，因为它在任何终端机上都能用。这种数字参数也称为\n“前缀参数”，意思是说这个参数是先于使用它的命令而输入的。\n\n举例来说， C-u 8 C-f 会向前移动 8 个字符。\n\n>> 为 C-n 或者 C-p 指定一个数字参数，这样你可以只用一个命令就把光标移动\n   到本行的附近。\n\n虽然大部分命令把数字参数解释为其重复次数，但是也有些命令例外，它们将数\n字参数另做它用。比如有些命令（我们目前还没学到）仅仅将前缀参数作为一个\n标志――只要给出有一个前缀参数，不管其值为何，它都会改变命令的功能。\n\n而 C-v 和 M-v 则属于另一种类型的例外。当给定一个参数时，它们将滚动你指\n定的“行数”，而不是“屏数”。举例来说，C-u 8 C-v 将文本向下滚动 8 行。\n\n>> 现在试试看，输入 C-u 8 C-v。\n\n这个命令应该已经将文字向上滚动了 8 行。如果你想将它再次地向下滚动，你可\n以给定一个参数然后执行 M-v。\n\n如果你正在使用图形界面，比如 X 或者微软的 Windows，那么在 Emacs窗\n口的一边应该有一个长方形的区域叫“滚动条”。你可以用鼠标操纵滚动条来滚动\n文字。\n\n如果你的鼠标有滚轮的话，你也可以使用滚轮来滚动。\n\n* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）\n-----------------------------------------------\n\n如果 Emacs 对你的命令失去响应，你可以用 C-g 来安全地终止这条命令。C-g\n也可以终止一条执行过久的命令。\n\nC-g 还可以取消数字参数和只输入到一半的命令。\n\n>> 输入 C-u 100 设定一个值为 100 的数字参数，然后按 C-g。\n   现在再按 C-f，光标应该只会移动一个字符，因为你已经用 C-g 取消了参数。\n\n如果你不小心按了一下 <ESC>，你也可以用 C-g 来取消它。\n【这个说法似乎有问题，因为按照这个按键顺序输入的应该是 C-M-g。\n  取消 <ESC> 的正确做法是再连按两次 <ESC>。】\n\n\n* 被禁用的命令（DISABLED COMMANDS）\n-----------------------------------\n\n有一些 Emacs 命令被“禁用”了，以避免初学者在不了解其确切功能的情况下误\n用而造成麻烦。\n\n如果你用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令\n到底是干什么的，询问你是否要继续，并在得到你的肯定之后再执行这命令。\n\n如果你真的想用这条命令，在 Emacs 询问你的时候应该按空格。一般来说，如果\n你不想用，就按“n”。\n\n>> 试试 C-x C-l （这是一个被禁用的命令）\n   然后用 n 来回答询问。\n\n\n* 窗格（WINDOWS）\n-----------------\n\nEmacs 可以有多个“窗格”，每个窗格显示不同的文字。后面会介绍怎么对付多个窗\n格，现在我们先学会如何关掉多余的窗格。其实也很简单：\n\n        C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。\n\n也就是先按 CONTROL-x 然后再按 1。C-x 1 会保留光标所在的窗格，并将其扩大\n到整个屏幕，同时关掉所有其它的窗格。\n\n>> 把光标移到本行然后输入 C-u 0 C-l。\n\n>> 输入 C-h k C-f。观察当一个新窗格出现时当前窗格（用来显示\n   C-f 命令的文档）是如何缩小的。\n\n>> 输入 C-x 1 关掉文档窗格。\n\n有一系列命令是以 CONTROL-x 开始的，这些命令许多都跟“窗格、文件、缓冲区\n【缓冲区（buffer）会在后文详细介绍】”等等诸如此类的东西有关，其中有些\n命令可能包含了 2 个、3 个或者 4 个字符。\n\n\n* 插入与删除（INSERTING AND DELETING）\n--------------------------------------\n\n插入文字很简单，直接敲键盘就可以了。普通的字符，比如 A、7、* 等等，会\n随着你的输入而插入。要插入一个换行符，输入 <Return>（这个键在键盘上有\n时会被标注成“Enter”）。\n\n你可以用 <DEL> 来删除光标左边的字符，这个键通常被标注为“Backspace”――跟\n你在 Emacs 之外的用法应该一样，删除最后一个输入的字符。\n\n你的键盘上可能有另外一个键，标注着 <Delete>，但那个不是我们所说的 <DEL>。\n\n>> 现在就来试试――敲点字，然后按几下 <DEL> 删除它们。\n   不用担心文件被修改，你做什么都没关系，这里就是专给你练习用的。\n\n如果一行文字很长、超出了窗格的宽度，显示不下的部分会在紧邻的下一行继续\n显示。如果你使用的是图形界面，文本区域两边的狭窄区域（左右“边缘”）会出\n现小小的转弯箭头，表明这是某一行的接续显示。如果你使用的是文本终端，接\n续显示由屏幕最右边一列的一个反斜线（“\\”）来表示。\n\n>> 输入文字，一直到屏幕的右边界，然后继续。\n你会看到一个接续行出现。\n\n>> 用 <DEL> 删掉一些文字，直到此行长度小于窗格宽度，接续行就消失了。\n\n换行符跟其它字符一样可以被删除。两行中间的换行符被删除后，这两行将会合\n并成一行。如果合并后的这一行太长，超出了窗格宽度，它就会以一个接续行来\n显示。\n\n>> 移动光标到某行的开头并输入 <DEL>。\n   这时该行将与其前一行一起被合并为一行。\n\n>> 输入 <Return> 重新插入你刚才删除的换行符。\n\n<Return> 是一个特殊的键，因为按下这个键后，得到的可能不仅仅是一个换行\n符。根据周围文本的不同，Emacs 可能会在换行符之后插入一些空白字符，这样，\n当你在新的一行开始打字时，文本会自动与前一行对齐。\n\n>> 这是一个自动缩进的例子。\n   在这一行的末尾输入 <Return>。\n\n可以看到，在插入换行符之后，Emacs 插入了空格，因此光标移动到了“在”这个\n字的下面。\n\n前面讲过，大部分的 Emacs 命令都可以指定重复次数，这其中也包括输入字符的\n命令。重复执行输入字符的命令实际上就是输入多个相同的字符。\n\n>>  试试 C-u 8 *，这将会插入 ********。\n\n好，现在你应该已经掌握了最基本的的文本插入和修改功能，其实删除还可以\n“以词为单位”进行，下面是一个关于“删除”操作的小结：\n\n        <DEL>        删除光标前的一个字符\n        C-d          删除光标后的一个字符\n\n        M-<DEL>      移除光标前的一个词\n        M-d          移除光标后的一个词\n\n        C-k          移除从光标到“行尾”间的字符\n        M-k          移除从光标到“句尾”间的字符\n\n【可能你已经注意到了“删除（delete）”和“移除（kill）”的用词区别，后\n文会有详细说明。】\n\n注意“<DEL> 和 C-d”还有“M-<DEL> 和 M-d”是根据前述惯例从 C-f和 M-f 衍生\n出来的（其实<DEL>不是控制字符，我们先忽略这一点）。C-k和 M-k 的关系在\n某种程度上与 C-e 和 M-e 一样――如果把“一行”和“一句”作一个类比的话。\n\n你也可以用一种通用的办法来移除缓冲区里的任何一部分：首先把光标移动到你\n想要移除的区域的一端，然后按 C-<SPC>（<SPC>指空格）【注意，C-<SPC> 往\n往被中文用户设定成输入法热键，如果这样，C-<SPC> 就被系统拦截而无法传递\n给 Emacs 了，在这种情况下可以使用C-@。】，然后将光标移动到你准备移除的\n文字的另一端。这个时候， Emacs 会高亮光标和你按下 C-<SPC> 之间的文本。\n最后，按下 C-w 。这样就可以把位于这两点之间的所有文字移除了。\n\n>> 移动光标到上一段开头的“你”字。\n>> 输入 C-<SPC> 。Emacs 应该会在屏幕的下方显示一个“Mark set”的消息。\n>> 移动光标到第二行中的“端”字。\n>> 输入 C-w，从“你”开始到“端”之前的文字被全部移除。\n\n注意,“移除（kill）”和“删除（delete）”的不同在于被移除的东西可以被重新\n插入（在任何位置），而被删除的就不能使用相同的方法重新插入了（不过可以\n通过撤销一个删除命令来做到，后文会提到）。【实际上，移除掉的东西虽然看\n起来“消失”了，但实际上被 Emacs 记录了下来，因此还可以找回来；而删除掉\n的东西虽然也可能还在内存里，但是已经被 Emacs“抛弃”了，所以就找不回来\n了。】重新插入被移除的文字称为“召回（yank）”。一般而言，那些可能消除很\n多文字的命令会把消除掉的文字记录下来（它们被设定成了“可召回”），而那些\n只消除一个字符或者只消除空白的命令就不会记录被消除的内容（自然你也就无\n法召回了）。\n\n>> 移动光标到一非空白行的行头，然后输入 C-k 移除那一行上的文字。\n\n>> 再次 C-k，你可以看到它移除了跟在那一行后面的换行符。\n\n注意，单独的 C-k 会把一行的内容移除，而第二个 C-k 则会移除换行符，并使\n其后所有的行都向上移动。C-k 处理数字参数的方式很特别，它会把参数指定的\n那么多行连同其后的换行符一起移除，而不仅仅是重复 C-k 而已。比如 C-u 2\nC-k 会把两行以及它们的换行符移除；而如果只是输入 C-k 两次显然不是这个结\n果。\n\n重新插入被移除的文字恢复的动作称为“召回（yanking）”。（就好像把别人从你身边\n移走的东西又猛力地拉回来。）你可以在你删除文字的地方召回，也可以在别的\n地方召回，还可以多次召回同样的文字以得到它的多个拷贝。很多其它的编辑器\n把移除和召回叫做“剪切”和“粘贴” （详情可见 Emacs 使用手册里的术语表）。\n\n召回的命令是 C-y。它会在光标所在处插入你最后移除的文字。\n\n>> 试试看，输入 C-y 将文字召回。\n\n如果你一次连按了好几下 C-k，那么所有被移除的行会被存储在一起，只要一个\nC-y 就可以把它们都召回。\n\n>> 在这里试试，连续按几次 C-k。\n\n现在再来恢复刚刚被我们移除的文字：\n\n>> 按 C-y。然后把光标往下移动几行，再按一次 C-y。\n   现在你应该知道怎么复制文字了。\n\nC-y 可以召回最近一次移除的内容，那如何召回前几次移除的内容呢？它们当然\n没有丢，你可以用 M-y 来召回它们。在用 C-y 召回最近移除的文字之后，紧接\n着再按 M-y 就可以召回再前一次被移除的内容，再按一次 M-y 又可以召回再上\n一次的……连续使用 M-y 直到找到你想要召回的东西，然后什么也不用做，继续\n编辑就行了。\n\n如果连续按 M-y 很多次，你可能会回到起始点，也就是最近移除的文字。\n【看得出这实际上是一个环。】\n\n>> 移除一行，移动一下光标，然后再移除另外一行。\n   按 C-y 将第二次移除的那行召回来。\n   紧接着再按 M-y，它将会被第一次移除的那行取代。\n   试着再按几下 M-y 看看会发生什么。\n   再继续，直到第二行被召回来，然后再做个几次。\n   如果感兴趣，你可以试着给 M-y 指定一个正的或负的参数。\n\n\n* 撤销（UNDO）\n--------------\n\n如果你修改了一段文字，又觉得改得不好，可以用 undo 命令进行撤销：C-/。\n\n通常 C-/ 会消除一个命令所造成的所有改变；如果你在一行中连续多次地使用\nC-/，你会把以前的命令也依次撤销。\n\n但是有两个例外：\n1） 没有改变文字的命令不算（包括光标移动命令和滚动命令）\n2） 从键盘输入的字符以组为单位――每组最多 20 个字符――来进行处理。\n    （这是为了减少你在撤销“插入文字”动作时需要输入 C-/ 的次数）\n\n>> 用 C-k 将这一行移除，然后输入 C-/ ，它会再次出现。\n\nC-_ 也是撤销命令；它的作用跟 C-/ 一样，但是它比较容易多次输入。在\n某些终端上，输入 C-/ 实际上向 Emacs 发送的是 C-_ 。\n另外， C-x u 和 C-/ 完全一样，但是按起来有些麻烦。\n\n数字参数对于 C-/ 、 C-_ 和 C-x u 的意义是执行撤销的重复次数。\n\n\n* 文件（FILE）\n--------------\n\n想保存工作成果就要记得存盘，否则一旦退出 Emacs 你编辑的文字就会丢失。要\n存盘，就要在编辑前“寻找”到一个存盘文件。（这个过程通常也被称为“访问”\n文件。）\n\n寻找到一个文件意味着你可以在 Emacs 里查看这个文件的内容。从许多角度看，\n这就等于你在直接编辑这个文件，只是你所做的修改只有在“存盘”的时候才会\n被写入文件。也正因为如此，你可以丢弃一个写到一半的文件而不必把这个残缺\n文件也保存到计算机上。在存盘的时候，Emacs 会把存盘前的文件重命名保存，\n以防你改完之后又想反悔。\n\n在屏幕的下方，你应该能够看到头部有短线“-”的一行，行首通常是一些诸如“\n-:--- TUTORIAL.cn”的文字，这些文字代表了你当前正在访问的文件。比如你现\n在正在访问的文件是对 Emacs 快速指南的一份临时拷贝，叫做“TUTORIAL.cn”。\n每当Emacs 寻找到一个文件，文件名就会出现在这个位置。\n\n寻找文件的命令有一个特点，那就是你必须给出文件名。我们称这个命令“读入\n了一个参数”（在这里，这个参数显然就是文件名）。在你输入这条命令之后：\n\n        C-x C-f   寻找一个文件\n\nEmacs 会提示你输入文件名。你输入的文件名会出现在屏幕最底端的一行，这一\n行被称为小缓冲（minibuffer），在小缓冲里你可以使用通常的 Emacs 编辑命令\n来编辑文件名。\n\n在小缓冲里输入文件名（其实输入其它东西也一样）时可以用 C-g 取消。\n\n>> 输入 C-x C-f，然后输入 C-g\n   这会关掉小缓冲，同时也会取消使用小缓冲的 C-x C-f 命令。\n   当然了，你也没有找任何文件。\n\n用 <Return> 结束文件名的输入。之后，小缓冲会消失，C-x C-f 将会去寻找你\n指定的文件。小缓冲在 C-x C-f 命令结束之后也会消失。\n\n文件被显示在了屏幕上，你可以开始编辑了。存盘用这条命令：\n\n        C-x C-s   储存这个文件\n\n这条命令把 Emacs 中的文字存储到文件中。第一次存盘的时候 Emacs 会将原文\n件重命名以备份。重命名的规则通常是在原文件名之后添加一个“~”字符。\n【对许多人来说，这是一个烦人的特性，关掉文件备份可以用如下命令：\n  M-x customize-variable <Return> make-backup-files <Return>】\n\n存盘结束后，Emacs 会显示写入文件的文件名。你最好养成经常存盘的习惯，这\n可以减少系统崩溃和死机给你带来的损失（也可参见下面的“自动保存”一节）。\n\n>> 输入 C-x C-s TUTORIAL.cn <Return> 。\n   这将会把该指南保存为一个名为 TUTORIAL.cn 的文件，并且在屏幕的下方显\n   示一条消息：“Wrote ...TUTORIAL.cn”。\n\n你不但可以寻找一个已有的文件来查看或编辑，还可以寻找一个不存在的文件。\n实际上这正是 Emacs 创建新文件的方法：找到不存在的新文件。事实上，只有\n在存盘的时候，Emacs 才会真正创建这个文件。而在这之后的一切就跟编辑一个\n已有文件没有区别了。\n\n\n* 缓冲区（BUFFER）\n------------------\n\n你可以用 C-x C-f 找到并打开第二个文件，但第一个文件仍然在 Emacs 中。要\n切回第一个文件，一种办法是再用一次 C-x C-f。这样，你就可以在 Emacs 中同\n时打开多个文件。\n\nEmacs 把每个编辑中的文件都放在一个称为“缓冲区（buffer）”的地方。每寻\n找到一个文件，Emacs 就在其内部开辟一个缓冲区。用下面的命令可以列出当前\n所有的缓冲区：\n\n        C-x C-b   列出缓冲区\n\n>> 现在就试一下 C-x C-b\n\n观察一下缓冲区是如何被命名的，它很可能跟与其对应的文件同名。实际上，一\n个 Emacs 窗格里的任何文字都是某个缓冲区的一部分。\n\n>> 输入 C-x 1 离开缓冲区列表\n\n不管存在多少缓冲区，任何时候都只能有一个“当前”缓冲区，也就是你正在编\n辑的这个。如果你想编辑其它的缓冲区，就必须“切换”过去。上面讲过，用\nC-x C-f 是一种办法。不过还有一个更简单的办法，那就是用 C-x b。用这条命\n令，你必须输入缓冲区的名称。\n\n>> 通过输入 C-x C-f foo <Return> 创建一个名为“foo”的文件。\n   然后输入 C-x b TUTORIAL.cn <Return> 回到这里。\n\n大多数情况下，缓冲区与跟其对应的文件是同名的（不包括目录名），不过这也\n不是绝对的。用 C-x C-b 得到的缓冲区列表总是显示缓冲区名。\n\n缓冲区未必有对应文件。显示缓冲区列表的缓冲区（叫做“*Buffer List*”）就\n是这样。这个 TUTORIAL.cn 缓冲区起初没有对应的文件，但是现在有了，因为\n在前一节你输入了 C-x C-s ， 将它保存成了一个文件。\n\n“*Messages*”缓冲区也没有对应文件，这个缓冲区里存放的都是在 Emacs 底部\n出现的消息。\n\n>> 输入 C-x b *Messages* <Return> 瞅瞅消息缓冲区里都有什么东西。\n   然后再输入 C-x b TUTORIAL.cn <Return> 回到这里。\n\n如果你对某个文件做了些修改，然后切换到另一个文件，这个动作并不会帮你把\n前一个文件存盘。对第一个文件的修改仍然仅存在于 Emacs 中，也就是在它对\n应的缓冲区里。并且，对第二个文件的修改也不会影响到第一个文件。这很有用，\n但也意味着你需要一个简便的办法来保存第一个文件的缓冲区。先切换回那个缓\n冲区，再用 C-x C-s 存盘，太麻烦了。你需要一个更简便的方法，而 Emacs 已\n经为你准备好了：\n\n        C-x s   保存多个缓冲区\n\nC-x s 会找出所有已被修改但尚未存盘的缓冲区，然后向你逐个询问：是否需要\n存盘？\n\n>> 插入一行文字，然后输入 C-x s。\n   它应该会问你，是否要储存名为 TUTORIAL.cn 的缓冲区？\n   按“y”告诉它你想存盘。\n\n\n* 命令集扩展（EXTENDING THE COMMAND SET）\n-----------------------------------------\n\nEmacs 的命令就像天上的星星，数也数不清。把它们都对应到 CONTROL 和 META\n组合键上显然是不可能的。Emacs 用扩展（eXtend）命令来解决这个问题，扩展\n命令有两种风格：\n\n        C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。\n        M-x     命令名扩展。M-x 之后输入一个命令名。\n\n很多扩展命令都相当有用，虽然与你已经学过的命令比起来，他们可能不那么常\n用。我们早已经见过一些扩展命令了，比如用 C-x C-f 寻找文件和用 C-x C-s\n保存文件；退出 Emacs 用的 C-x C-c 也是扩展命令。（不用担心退出 Emacs 会\n给你带来什么损失，Emacs 会在退出之前提醒你存盘的。）\n\n如果你使用图形界面，你不需要任何特殊的命令来切换 Emacs 和其他应用程序。\n你可以使用鼠标或者窗口管理器的命令。然而，如果你使用只能同时显示一个应\n用程序的文本终端，你需要“挂起” Emacs ，以切换到其他的应用程序。\n\nC-z 可以暂时离开 Emacs――当然，你还可以再回来。在允许 C-z 的系统中，C-z\n会把 Emacs“挂起”，也就是说，它会回到 shell但不杀死 Emacs 的进程。在常\n用的 shell 中，通常可以用“fg”或者“%emacs”命令再次回到 Emacs 中。\n\n你最好在打算退出登陆的时候再用 C-x C-c。在把 Emacs 当做一个临时的编辑\n器的时候（比如被一个邮件处理程序调用），也可以用 C-x C-c 退出。\n\nC-x 的扩展命令有很多，下面列出的是你已经学过的：\n\n        C-x C-f         寻找文件。\n        C-x C-s         保存文件。\n        C-x C-b         列出缓冲区。\n        C-x C-c         离开 Emacs。\n        C-x 1           关掉其它所有窗格，只保留一个。\n        C-x u           撤销。\n\n用命令名扩展的命令通常并不常用，或只用在部分模式下。比如\nreplace-string（字符串替换）这个命令，它会把一个字符串替换成另一个。在\n输入 M-x 之后，Emacs 会在屏幕底端向你询问并等待你输入命令名。如果你想\n输入“replace-string”，其实只需要敲“repl s<TAB>”就行了，Emacs 会帮你自\n动补齐。输入完之后按 <Return> 提交。\n\n字符串替换命令需要两个参数――被替换的字符串和用来替换它的字符串。每个\n参数的输入都以换行符来结束。\n\n>> 将光标移到本行下面第二行的空白处，然后输入\n   M-x repl s<Return>changed<Return>altered<Return>。\n\n   【以下保留一行原文，以应练习之需：】\n   Notice how this line has changed: you've replaced...\n\n请注意这一行的变化：在光标之后的范围内，你已经将“changed”这个词――不\n论它在哪里出现――全部用“altered”替换掉了。\n\n\n* 自动保存（AUTO SAVE）\n-----------------------\n\n如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你\n所做的修改就很可能会丢失。为了避免这样的不幸发生，Emacs 会定期将正在编\n辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个\n“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫\n“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。\n\n所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保\n存文件）然后输入 M-x recover file <Return> 来恢复你的自动保存文件。在\n提示确认的时候，输入 yes<Return>。\n\n\n* 回显区（ECHO AREA）\n---------------------\n\n如果 Emacs 发现你输入多字符命令的节奏很慢，它会在窗格的下方称为“回显区”\n的地方给你提示。回显区位于屏幕的最下面一行。\n\n\n* 状态栏（MODE LINE）\n---------------------\n\n位于回显区正上方的一行被称为“状态栏”。状态栏上会显示一些信息，比如：\n\n -:**- TUTORIAL.cn 63% L749 (Fundamental)\n\n状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息。\n\n你应该知道文件名的意思吧？就是你找到的那个文件嘛。-NN%-- 显示的是光标在\n全文中的位置。如果位于文件的开头，那么就显示 --Top-- 而不是 --00%--；如\n果位于文件的末尾，就显示 --Bot--。如果文件很小，一屏就足以显示全部内容，\n那么状态栏会显示 --All--。\n\n“L” 和其后的数字给出了光标所在行的行号。\n\n最开头的星号（*）表示你已经对文字做过改动。刚刚打开的文件肯定没有被改动\n过，所以状态栏上显示的不是星号而是短线（-）。\n\n状态栏上小括号里的内容告诉你当前正在使用的编辑模式。缺省的模式是\nFundamental，就是你现在正在使用的这个。它是一种“主模式”。\n\nEmacs 的主模式林林总总。有用来编辑程序代码的――比如 Lisp 模式；也有用\n来编辑各种自然语言文本的――比如 Text 模式。任何情况下只能应用一个主模\n式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方。\n\n主模式通常会改变一些命令的行为。比方说，不管编辑什么语言的程序代码，你\n都可以用一个相同的命令来添加注释。但是在不同的语言中注释的语法往往是不\n同的，这时不同的主模式就会用各自不同的语法规则来添加注释。主模式都是可\n以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental\n模式。\n\n编辑自然语言文本――比如现在――应该用 Text 模式。\n\n>> 输入 M-x text-mode <Return>。\n\n别担心，什么都没变。不过细心一些可以发现，M-f 和 M-b 现在把单引号（'）\n视为词的一部分了。而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号\n视为分隔单词的符号。\n\n主模式通常都会搞一些类似的小动作，因为很多命令其实完成的是“相同的工\n作”，只是在不同环境下会有不同的工作方式而已。【所谓“求同存异”，在\nEmacs 里得到了很好的体现】\n\n用 C-h m 可以查看当前主模式的文档。\n\n>> 把光标移动到下一行。\n>> 用 C-l C-l 将本行带到屏幕的最上方。\n>> 输入 C-h m，看看 Text 模式与 Fundamental 模式有哪些不同。\n>> 输入 C-x 1 关掉文档窗格。\n\n主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minor\nmode）存在。辅模式并不能替代主模式，而是提供一些辅助的功能。每个辅模式\n都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关。所以你可以不\n使用辅模式，也可以只使用一个或同时使用多个辅模式。\n\n有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文本\n的时候。启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行。\n\n用 M-x auto-fill-mode <Return> 启动自动折行模式。再用一次这条命令，自\n动折行模式会被关闭。也就是说，如果自动折行模式没有被开启，这个命令会开\n启它；如果已经开启了，这个命令会关闭它。所以我们说，这个命令可以用来\n“开关（toggle）”模式。\n\n>> 现在输入 M-x auto-fill-mode <Return>。然后随便敲点什么，直到你看到它\n   分成两行。你必须敲一些空格，因为 Auto Fill 只在空白处进行断行。\n   【输入空格对英文来说是必须的，而对中文则不必。】\n\n行边界通常被设定为 70 个字符【这里指英文字符】，你可以用 C-x f 命令配合\n数字参数来重新设定它。\n\n>> 输入 C-x f 并传递参数 20： C-u 2 0 C-x f。\n   然后输入一些文字，观察 Emacs 的自动折行动作\n   最后再用 C-x f 将边界设回 70。\n\n如果你在段落的中间做了一些修改，那么自动折行模式不会替你把整个段落重新\n折行，你需要用 M-q 手动折行。注意，光标必须位于你需要折行的那一段里。\n\n>> 移动光标到前一段中，然后输入 M-q。\n\n\n* 搜索（SEARCHING）\n-------------------\n\nEmacs 可以向前或向后搜索字符串（“字符串”指的是一组连续的字符）。搜索命\n令是一个移动光标的命令：搜索成功后，光标会停留在搜索目标出现的地方。\n\nEmacs 的搜索命令是“渐进的（incremental）”。意思是搜索与输入同时进行：\n你在键盘上一字一句地输入搜索词的过程中，Emacs 就已经开始替你搜索了。\n\nC-s 是向前搜索，C-r 是向后搜索。不过手别这么快！别着急试。\n\n在按下 C-s 之后，回显区里会有“I-search”字样出现，表明目前 Emacs 正处\n于“渐进搜索”状态，并等待你输入搜索字串。按 <Return> 可以结束搜索。\n\n>> 输入 C-s 开始一个搜索。注意敲慢一点，一次输入一个字符。\n   慢慢输入“cursor”这个词，每敲一个字都停顿一下并观察光标。\n   现在你应该已曾经找到“cursor”这个词了。\n>> 再按一次 C-s，搜索下一个“cursor”出现的位置。\n>> 现在按四次 <DEL> ，看看光标是如何移动的。\n>> 敲 <Return> 结束搜索。\n\n看仔细了么？在一次渐进式搜索中，Emacs 会尝试跳到搜索目标出现的位置。要\n跳到下一个命中位置，就再按一次 C-s。如果找不到目标，Emacs 会发出“哔”\n的一声，告诉你搜索失败。在整个过程中，都可以用 C-g 来终止搜索。【你会发\n现 C-g 会让光标回到搜索开始的位置，而 <Return> 则让光标留在搜索结果上，\n这是很有用的功能。】\n\n在渐进式搜索中，按 <DEL> 会“撤回”到最近一次搜索的命中位置。如果之前没\n有一个命中， <DEL> 会抹去搜索字符串中的最后一个字符。比如你已经输入了\n“c”，光标就停在“c”第一次出现的位置，再输入“u”，光标停在“cu”第一次出现\n的位置，这时再按 <DEL> ，“u”就从搜索字串中消失了，然后光标会回到“c”第\n一次出现的位置。\n\n另外，如果你在搜索的时候输入了 control 或者 meta 组合键的话，搜索可能会\n结束。（也有例外，比如 C-s 和 C-r 这些用于搜索的命令。）\n\n前面说的都是“向下”搜索，如果想“向上”搜索，可以用 C-r。C-r 与 C-s\n相比除了搜索方向相反之外，其余的操作都一样。\n\n\n* 多窗格（MULTIPLE WINDOWS）\n----------------------------\n\nEmacs 的迷人之处很多，能够在屏幕上同时显示多个窗格就是其中之一。\n\n>> 移动光标到这一行，然后输入 C-l C-l。\n\n>> 现在输入 C-x 2，它会将屏幕划分成两个窗格。\n   这两个窗格里显示的都是本篇快速指南，而光标则停留在上方的窗格里。\n\n>> 试试用 C-M-v 滚动下方的窗格。\n   （如果你并没有 META 键，用 ESC C-v 也可以。）\n   【向上滚动是 C-M-S-v，也就是同时按住 CONTROL、META 和 SHIFT 再按 v】\n\n>> 输入 C-x o（“o”指的是“其它（other）”），\n   将光标转移到下方的窗格。\n\n>> 在下方的窗格中，用 C-v 和 M-v 来滚动。\n   同时继续在上方的窗格里阅读这些指导。\n\n>> 再输入 C-x o 将光标移回到上方的窗格里。\n   光标会回到它在上方窗格中原本所在的位置。\n\n连续使用 C-x o 可以遍历所有窗格。“被选中的窗格”，也就是绝大多数的编辑\n操作所发生的地方，是在你不打字时闪烁光标的那个窗格。其他的窗格有它们自\n己的光标位置； 如果你在图形界面下运行 Emacs ，这些光标是镂空的长方形。\n\n当你在一个窗格中编辑，但用另一个窗格作为参考的时候，C-M-v 是很有用的命\n令。无需离开被选中的窗格，你就可以用 C-M-v 命令滚动另外一个窗格中的文\n字。【比如翻译和校对就很适合用这种方式进行。】\n\nC-M-v 是一个 CONTROL-META 组合键。如果你有 META （或 Alt）键的话，可以\n同时按住CONTROL 和 META 键并输入 v。CONTROL 和 META 键先按哪个都可以，\n因为它们只是用来“修饰（modify）”你输入的字符的。\n\n如果你并没有 META 键，你也可以用 ESC 来代替，不过这样的话就要注意按键顺\n序了：你必须先输入 ESC ，然后再输入 CONTROL-v。CONTROL-ESC v 是没用的，\n因为 ESC 本身是一个字符键，而不是一个修饰键（modifier key）。\n\n>> （在上方窗格里）输入 C-x 1 关掉下方窗格。\n\n（如果你在下方的窗格里输入 C-x 1，那么就会关掉上方的窗格。你可以把这个\n命令看成是“只保留一个窗格”――就是我们正在编辑的这个。）\n\n不同的窗格可以显示不同的缓冲区。如果你在一个窗格里用 C-x C-f 打开了一个\n文件，另一个窗格并不会发生什么变化。任何一个窗格里都可以用来打开文件。\n\n用下面的方法可以在一个新开窗格里打开文件：\n\n>> 输入 C-x 4 C-f，紧跟着输入一个文件名，再用 <Return> 结束。\n   可以看到你指定的文件出现在下方的窗格中，同时光标也跳到了那里。\n\n>> 输入 C-x o 回到上方的窗格，然后再用 C-x 1 关掉下方窗格。\n\n\n* 多窗口（MULTIPLE FRAMES）\n------------------\n\nEmacs 可以创建多个窗口。窗口由许多窗格以及菜单、滚动条、回显区等组成。\n在图形界面下，多个窗口可以同时显示出来。在文本终端中，只能同时显示一个\n窗口。\n\n>> 输入 M-x make-frame <Return>。\n 可以看到一个新的窗口出现在了你的屏幕上。\n\n你可以在新的窗口里做最初的窗口里可以做的任何事情。第一个窗口没有什么特\n别的。\n\n>> 输入 M-x delete-frame <Return>.\n 这个命令将会关闭选中的窗口。\n\n你也可以通过图形系统来关闭某个窗口（通常是在窗口上面的某个角落里的一个\n“X”按钮）。如果你关闭的是 Emacs 进程的最后一个窗口， Emacs 将会退出。\n\n\n* 递归编辑（RECURSIVE EDITING LEVELS）\n--------------------------------------\n\n有时候你会进入所谓的“递归编辑”。递归编辑状态由位于状态栏的方括号所指\n示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到\n[(Fundamental)]，而不是 (Fundamental)。【比如在用 M-% 进行交互式替换的\n时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模式，\n这就是所谓的递归编辑。】\n\n离开递归编辑可以用 ESC ESC ESC。这是一个最通用的“离开”命令，你甚至可\n以使用它来关掉多余的窗格，或者离开小缓冲。\n\n>> 输入 M-x 进入小缓冲；然后输入 ESC ESC ESC 离开。\n\n你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的\n命令和其参数（arguments）。\n\n\n* 获得更多帮助（GETTING MORE HELP）\n-----------------------------------\n\n本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水，不至于束手无策望洋兴\n叹。有关 Emacs 的话题可谓汗牛充栋，这里自然是难尽万一。不过 Emacs 很理\n解你求知若渴的心情，因为它提供的强大功能实在是太多了。为此，Emacs 提供\n了一些命令来查看 Emacs 的命令文档，这些命令都以 CONTROL-h 开头，这个字\n符也因此被称为“帮助（Help）字符”。\n\n要使用帮助（Help）功能，请先输入 C-h，然后再输入一个字符以说明你需要什\n么帮助。如果你连自己到底需要什么帮助都不知道，那么就输入 C-h ?，Emacs\n会告诉你它能提供了哪些帮助。如果你按了 C-h 又想反悔，可以用 C-g 取消。\n\n（如果你按 C-h 之后没有任何帮助信息显示出来，那么试试 F1 键或者 M-x help <Return> 。）\n\n最基本的帮助功能是 C-h c。输入 C-h c 之后再输入一个组合键，Emacs 会给出\n这个命令的简要说明。\n\n>> 输入 C-h c C-p。\n\n显示的消息应该会是这样：\n\n        C-p runs the command previous-line\n\n这条消息显示了 C-p 命令对应的函数名。命令的功能由函数完成，所以函数名\n本身也可以被看成是最简单的文档――至少对于你已经学过的命令来说，它们的函\n数名足以解释它们的功能了。\n\n多字符命令一样可以用 C-h c 来查看。\n\n想得到更多的信息，请把 C-h c 换成 C-h k 试试看。\n\n>> 输入 C-h k C-p。\n\n上面的命令会新打开一个 Emacs 窗格以显示函数的名称及其文档。你读完之后可\n以用 C-x 1 关掉这个帮助窗格。当然你并不需要立即这样做，你完全可以先在编\n辑窗格里做点别的事情，然后再关掉帮助窗格。\n\n还有一些其它有用的 C-h 命令：\n\n   C-h f        解释一个函数。需要输入函数名。\n\n>> 试试看，输入 C-h f previous-line <Return>。\n   Emacs 会给出它所知道的所有有关“实现 C-p 命令功能的函数”的信息。\n\nC-h v 用来显示 Emacs 变量的文档。Emacs 变量可以被用来“定制 Emacs 的行\n为”。同样，你需要输入变量的名称。\n\n   C-h a        相关命令搜索（Command Apropos）。\n                输入一个关键词然后 Emacs 会列出所有命令名中包含此关键词\n                的命令。这些命令全都可以用 M-x 来启动。对于某些命令来说，\n                相关命令搜索还会列出一两个组合键。\n\n>> 输入 C-h a file <Return>。\n\nEmacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中含\n有“file”的命令。你可以看到像“C-x C-f”这样的组合键显示在“find-file”\n这样的命令名的旁边。\n\n>> 用 C-M-v 来回滚动 help 窗格，多试几次。\n\n>> 输入 C-x 1 来删除 help 窗格。\n\n   C-h i        阅读手册（也就是通常讲的 Info）。\n                这个命令会打开一个称为“*info*”的特殊缓冲区，在那里，\n                你可以阅读安装在系统里的软件包使用手册。要读 Emacs 的使\n                用手册，按 m emacs <Return> 就可以了。如果你之前从没用\n                过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使\n                用指南。在看完本快速指南之后，Emacs Info 会成为你的主要\n                参考文档。\n\n\n* 更多精彩（MORE FEATURES）\n---------------------------\n\n想学习更多的使用技巧，Emacs 使用手册（manual）值得一读。你可以读纸版的\n书，也可以在 Emacs 中读（可以从 Help 菜单进入或者按 C-h r）。提两个你\n可能会很感兴趣的功能吧，一个是可以帮你少敲键盘的 completion（自动补全），\n另一个是方便文件处理的 dired（目录编辑）。\n\nCompletion 可以替你节省不必要的键盘输入。比如说你想切换到 *Message* 缓\n冲区，你就可以用 C-x b *M<Tab> 来完成。只要 Emacs 能够根据你已经输入的\n文字确定你想要输入的内容，它就会自动帮你补齐。Completion 也可用于命令\n名和文件名。有关 Completion 的详细说明可以在 Emacs Info 中的\n“Completion”一节里找到。\n\nDired 能够在一个缓冲区里列出一个目录下的所有文件（可以选择是否也列出子\n目录），然后你可以在这个文件列表上完成对文件的移动、访问、重命名或删除\n等等操作。Dired 也在 Emacs 使用手册中有详细介绍，参见“Dired”一节。\n\nEmacs 使用手册里还有许许多多的精彩功能等着你来了解。\n\n\n* 总结（CONCLUSION）\n--------------------\n\n要退出 Emacs 请用 C-x C-c。\n\n本文完全是为零起点新手所写的起步教程。如果你觉得哪里还看不明白，千万不\n要怀疑自己，那一定是我们没有写好。我们永远欢迎你的不满和抱怨。\n\n\n* 翻译（TRANSLATION）\n---------------------\n\n翻译：孙一江 <sunyijiang@gmail.com>\n维护：薛富侨 <xfq.free@gmail.com>\n校对：水木社区（www.newsmth.net）Emacs 板众多网友及众多 Emacs 中文用户\n\nEmacs 快速指南（Tutorial）早有两个刘昭宏的中文译本，繁简各一。其简体版本\n（TUTORIAL.cn）基本由繁体版本（TUTORIAL.zh）经词语替换而得。然而繁简中文\n不仅在用词习惯上有所不同，更有诸多表达方式与句法方面的差异，因此一直以来\n用户使用 TUTORIAL.cn 都会略觉生硬和晦涩。这次重新翻译 TUTORIAL.cn 的动机\n正是源于这种体验，希望我们的工作能够让本文更好地发挥其作用。TUTORIAL.zh\n的译文质量很高，在翻译过程中给予过我们许多借鉴和参考，在此对刘昭宏的工作\n表示感谢。\n\n翻译过程中最大的挑战莫过于术语译词的选择了。经过水木社区 Emacs 板热心\n网友小范围内的讨论，我们选择了现在的译法。用户的广泛参与是自由软件生命\n力的源泉，所以如果你有任何建议、勘误或想法，请用你喜欢的方式向我们提出。\n你可以通过电子邮件直接联系维护者，也可以放到 GNU Emacs 的开发邮件列表\n或者水木社区的 Emacs 板上进行讨论。\n\n下面列出主要术语的译词对照，并给出注释说明：\n\n    command               命令\n    cursor                光标\n    scrolling             滚动\n    numeric argument      数字参数\n    window                窗格 [1]\n    insert                插入\n    delete                删除 [2]\n    kill                  移除 [2]\n    yank                  召回 [2]\n    undo                  撤销\n    file                  文件\n    buffer                缓冲区\n    minibuffer            小缓冲\n    echo area             回显区\n    mode line             状态栏\n    search                搜索\n    incremental search    渐进式搜索 [3]\n\n对于其他没有提到的术语，读者可以参考 Emacs 使用手册里的术语表。\n\n[1] “window”一词在计算机相关的领域一般都被译为“窗口”。但是在 Emacs\n    中，还有一个“frame”的概念。在被广泛使用的 X 窗口系统和微软的视窗\n    （Windows）系列操作系统中，Emacs 的一个“frame”就是一个“窗口”，因\n    此把 Emacs 中的“frame”译成“窗口”更加符合通常的习惯。这样，Emacs\n    中的“window”就只能译成“窗格”了。我们认为 Emacs 中 window 和\n    frame 的关系用窗格和窗口来类比是十分形象的。\n\n    《学习GNU Emacs》（第二版）一书对“window”和“frame”的翻译与本教程\n    刚好相反（分别译作“窗口”和“窗格”）。在此特别注明，以消除可能产生\n    的疑惑。（感谢李旭章 <lixuzhang@gmail.com> 指出）\n\n[2] 对于“delete”和“kill”的区别，正文已经给出了详细的说明。“删除”和\n    “移除”相比较起来，前者更多地隐含着“破坏”和“不可恢复”的意思，而\n    后者更多地隐含着“被转移”和“可恢复”的意思。因此分别选择它们作为上\n    述两词的译词，希望能够体现出区别。“yank”在中文文档中鲜有对应译词出\n    现，翻译的困难较大。究其本意是：“a strong sudden pull”（参见韦氏词\n    典），即“猛然拉回”。在原文档中 yank 被引申为“将先前移除的东西再移\n    回来”这个意思，所以我们选择了“召回”一词与其对应。\n\n[3] “incremental”一词在计算机著作中广泛出现，被广泛接受的中文译词有两\n    个：“增量的”和“渐进的”。“incremental search”翻译成“增量式搜索\n    ”或者“渐进式搜索”都讲得通，且都有各自的形象之处。还是参考原文对其\n    的解释：“... means that the search happens while you type in the\n    string to search for”。意思是之所以称其为“incremental search”，是\n    因为“在你输入搜索字符串的过程中，搜索就已经在进行了”。我们认为“增\n    量的”更加强调在现有基础上的变化（比如“增量备份”，“增量编译”）；\n    而“渐进的”更加强调过程的逐渐发展，也更加符合原文的意思。因此我们选\n    择将“incremental search”译作“渐进式搜索”。\n\n\n* 版权声明（COPYING）\n---------------------\n\nThis tutorial descends from a long line of Emacs tutorials\nstarting with the one written by Stuart Cracraft for the original Emacs.\n\nThis version of the tutorial is a part of GNU Emacs.  It is copyrighted\nand comes with permission to distribute copies on certain conditions:\n\n  Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,\n  Inc.\n\n  This file is part of GNU Emacs.\n\n  GNU Emacs is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  GNU Emacs is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.\n\nPlease read the file COPYING and then do give copies of GNU Emacs to\nyour friends.  Help stamp out software obstructionism (\"ownership\") by\nusing, writing, and sharing free software!\n\n【下面为版权声明的译文，仅供参考。实际法律效力以英文原文为准。】\n\n本快速指南沿袭自历史悠久的 Emacs 快速指南，可上溯至 Stuart Cracraft 为最\n初的 Emacs 所作的版本。\n\n本篇指南是 GNU Emacs 的一部分，并允许在下列条件的约束下发行其拷贝：\n\n   Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,\n   Inc.\n\n   本文件为 GNU Emacs 的一部分。\n\n   GNU Emacs 为自由软件；您可依据自由软件基金会所发表的GNU通用公共授权\n   条款，对本程序再次发布和/或修改；无论您依据的是本授权的第三版，或\n   （您可选的）任一日后发行的版本。\n\n   GNU Emacs 是基于使用目的而加以发布，然而不负任何担保责任；亦无对适\n   售性或特定目的适用性所为的默示性担保。详情请参照GNU通用公共授权。\n\n   您应已收到附随于 GNU Emacs 的GNU通用公共授权的副本；如果没有，请参照\n   <https://www.gnu.org/licenses/>.\n\n敬请阅读文件“COPYING”，然后向你的朋友们分发 GNU Emacs 拷贝。让我们以使\n用、编写和分享自由软件的实际行动来共同祛除软件障碍主义（所谓的“所有\n权”）！\n\n;;; Local Variables:\n;;; coding: utf-8\n;;; End:\n","slug":"Emacs快速指南","published":1,"updated":"2018-09-08T17:13:18.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uskr000000uup81azyij","content":"<p>Emacs 快速指南.（查看版权声明请至本文末尾）</p>\n<p>【注意：位于【】之间的内容是译注，比如本行，下同。】</p>\n<p>Emacs 键盘命令通常包含 CONTROL 键（有时候以 CTRL 或 CTL 来标示）和<br>META 键（有时候用 EDIT 或 ALT 来标示）。为了避免每次都要写出全名，我们<br>约定使用下述缩写：</p>\n<p> C-<chr>  表示当输入字符 <chr> 时按住 CONTROL 键。<br>          因此 C-f 就表示：按住 CONTROL 键再输入 f。</chr></chr></p>\n<p> M-<chr>  表示当输入字符 <chr> 时按住 META（或 EDIT 或 ALT）键。<br>          如果你的键盘上没有 META 、EDIT 或 ALT 键，用下述方法也等效：<br>          先按一下 ESC 键然后放开，再输入 <chr>。我们用 <esc> 来表示<br>          ESC 键。</esc></chr></chr></chr></p>\n<p>重要提示：要退出 Emacs，请用 C-x C-c（两个连续的组合键）。<br>要退出一个正在运行中的命令，请用 C-g。<br>下文中左边顶行的“&gt;&gt;”字样用来提示你尝试键盘命令。比如：</p>\n<p>[本页当中特意留出一些空白是出于教学目的，请继续往后阅读]</p>\n<blockquote>\n<blockquote>\n<p>现在输入 C-v （查看下一屏文字）移动到下一屏。<br>   （别紧张，在输入字符 v 的同时注意要按住 CONTROL 键）<br>   从现在开始，每读完当前一屏你都需要这样做一次。</p>\n</blockquote>\n</blockquote>\n<p>值得注意的是，当你从上一屏滚到下一屏时，中间会有两行的重复；这样做是为<br>了维持滚屏的连续性，方便你顺畅、连续地阅读。</p>\n<p>用编辑器，开门第一件事就是学会在文字中移动。你已经知道了 C-v 可以向下移<br>动一屏，要往上移，请用 M-v （也就是按住 META 键，然后输入v，如果你没有<br>META、EDIT 或 ALT 键那么就先按 <esc> 再按 v）。</esc></p>\n<blockquote>\n<blockquote>\n<p> 试试 M-v，然后再试试 C-v，来回遛几次。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"小结（SUMMARY）\"><a href=\"#小结（SUMMARY）\" class=\"headerlink\" title=\"* 小结（SUMMARY）\"></a>* 小结（SUMMARY）</h2><p>以下命令在翻页浏览时相当有用：</p>\n<pre><code>C-v     向前移动一屏\nM-v     向后移动一屏\nC-l     重绘屏幕，并将光标所在行置于屏幕的中央\n        （注意是 CONTROL-L，不是 CONTROL-1）\n</code></pre><blockquote>\n<blockquote>\n<p>找到光标，留意其附近的文字，然后输入 C-l。<br>   找找光标在哪里，你会发现其附近的文字与之前相同，位置却变为屏幕的中心。<br>   如果你再次输入 C-l ，附近的文字将移动到屏幕的顶端。再次输入 C-l ，<br>   文字将移动到底端。</p>\n</blockquote>\n</blockquote>\n<p>如果你的键盘上有 PageUp 和 PageDn，也可以用这两个键来滚屏。不过使用<br>C-v 和 M-v 的效率要更高一些。</p>\n<h2 id=\"基本的光标控制（BASIC-CURSOR-CONTROL）\"><a href=\"#基本的光标控制（BASIC-CURSOR-CONTROL）\" class=\"headerlink\" title=\"* 基本的光标控制（BASIC CURSOR CONTROL）\"></a>* 基本的光标控制（BASIC CURSOR CONTROL）</h2><p>整屏的移动很有用，但是如何在文字中精确定位呢？</p>\n<p>有几种方式可以选择。用方向键当然可以，不过更有效率的方法是保持双手位于<br>主键盘区，然后使用 C-p 、 C-b 、 C-f 和 C-n 这四个命令。它们的功能和方<br>向键是一样的，如下图所示：</p>\n<pre><code>                 上一行 C-p\n                      :\n                      :\n向左移 C-b .... 目前光标位置 .... 向右移 C-f\n                      :\n                      :\n                 下一行 C-n\n</code></pre><blockquote>\n<blockquote>\n<p>用 C-n 或 C-p 将光标移到上图的中央。<br>   按 C-l，整幅图会被显示在屏幕的中央。</p>\n</blockquote>\n</blockquote>\n<p>“P N B F”四个字母分别代表了四个词，用这四个词记忆这些组合键会更容易：<br>P 代表 previous（上一行），N 代表 next（下一行），B 代表 backward（回<br>退），而 F 则代表 forward（前进）。这些组合键今后将与你形影不离。</p>\n<blockquote>\n<blockquote>\n<p>按几次 C-n 把光标往下挪到这里。</p>\n<p>用 C-f 把光标移动到这一行，然后再用 C-p 往上挪。<br>   注意观察当光标在一行的中央时 C-p 命令的行为。</p>\n</blockquote>\n</blockquote>\n<p>每行文字都以一个“换行符”结束，“换行符”把行与行区分开来。（通常情况下，<br>一个文件的最后一行会有一个换行符，但是 Emacs 不强制要求这一点。）</p>\n<blockquote>\n<blockquote>\n<p>在一行的行头输入 C-b。<br>   光标应该会移动到前一行的行尾，因为光标在回退过程中越过了换行符。</p>\n</blockquote>\n</blockquote>\n<p>同样 C-f 也可以像 C-b 一样越过换行符。</p>\n<blockquote>\n<blockquote>\n<p>连按几次 C-b，感受一下光标的移动。<br>   然后按几次 C-f 回到本行的行尾。<br>   再按一次 C-f，光标会移动到下一行。</p>\n</blockquote>\n</blockquote>\n<p>当你移动光标穿越屏幕的上下边界时，在边界外的文字会移动到屏幕内，这称为<br>“滚动”（scrolling）。滚动使得光标可以被移动到文字中的任何位置，并且还<br>不会让光标跑到屏幕外边去。</p>\n<blockquote>\n<blockquote>\n<p>用 C-n 将光标下移，一直越过屏幕边界，同时观察发生了什么变化。</p>\n</blockquote>\n</blockquote>\n<p>如果你嫌一个字符一个字符地挪光标太慢，你还可以一个词一个词地跳。M-f<br>(META-f) 可以将光标往前移动一个词，而 M-b 则是往后移。【这里的“词”指<br>英文单词，对中文来说，则是指移动到下一个标点符号。】</p>\n<blockquote>\n<blockquote>\n<p>试试 M-f 和 M-b。</p>\n</blockquote>\n</blockquote>\n<p>如果光标停在一个词的中间，M-f 会移动到这个词的末尾。如果光标处于词与词<br>之间的空白处，M-f 会移动到下一个词的末尾。M-b 的功能类似，只是方向相反。</p>\n<blockquote>\n<blockquote>\n<p>按几次 M-f 和 M-b，中间夹杂一些 C-f 和 C-b。<br>   你可以观察到 M-f 和 M-b 在不同位置上所表现出来的不同行为。</p>\n</blockquote>\n</blockquote>\n<p>请注意 C-f 、C-b 和 M-f 、M-b 两对之间的类比关系。通常的惯例是：META 系<br>列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 CONTROL<br>系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。</p>\n<p>类似的惯例在“行”与“句子”之间也同样适用：C-a 和 C-e 可以将光标移动到<br>“一行”的头部和尾部；而 M-a 和 M-e 则将光标移动到“一句”的头部和尾部。</p>\n<blockquote>\n<blockquote>\n<p>按两次 C-a，再按两次 C-e。<br>   按两次 M-a，再按两次 M-e。</p>\n</blockquote>\n</blockquote>\n<p>想一想为什么重复的 C-a 命令会没有作用，而重复的 M-a 命令则会让光标不断<br>地回退到上一个句子。虽然这个类比规律并不严格，但是很自然。</p>\n<p>光标停留的位置也可以称作“点位”（point）。或者干脆说，光标指示出了屏幕<br>上“点位”在文本中的位置。</p>\n<p>这里对简单的光标移动命令做一个总结，其中也包括了整词和整句的移动：</p>\n<pre><code>C-f     向右移动一个字符\nC-b     向左移动一个字符\n\nM-f     向右移动一个词【对中文是移动到下一个标点符号】\nM-b     向左移动一个词【对中文是移动到上一个标点符号】\n\nC-n     移动到下一行\nC-p     移动到上一行\n\nC-a     移动到行首\nC-e     移动到行尾\n\nM-a     移动到句首\nM-e     移动到句尾\n</code></pre><blockquote>\n<blockquote>\n<p>把上面所有的命令都练习几次，这些可都是最常用的命令。</p>\n</blockquote>\n</blockquote>\n<p>这里还要介绍两个重要的光标移动命令：M-&lt; （META 小于号）可以将光标移动到<br>所有文字的最开头；M-&gt; （META 大于号）可以将光标移动到所有文字的最末尾。</p>\n<p>注意，在大部分键盘上，小于号（&lt;）需要用上档键（Shift）来输入，所以在这<br>些键盘上你应该用 Shift 键来输入 M-&lt;，如果不按 Shift 键，你输入的会是<br>M-comma（META 逗号）。</p>\n<blockquote>\n<blockquote>\n<p>试一试 M-&lt; ，移到本快速指南的最开始。<br>   然后再按几次 C-v 回到这里。</p>\n<p>试一试 M-&gt; ，移到本快速指南的最末尾。<br>   然后再按几次 M-v 回到这里。</p>\n</blockquote>\n</blockquote>\n<p>如果你的键盘上有方向键的话，也可以用它们来移动光标。不过我们有三个理由<br>推荐你学习 C-b 、C-f 、C-n 、和 C-p：（1）它们在任何键盘上都能用。（2）<br>当你熟练使用 Emacs 之后，你会发现用这些组合键比用方向键要快得多，因为你<br>的手不需要离开打字区。（3）一旦你习惯了使用这些组合键，你也可以很容易地<br>适应其它更高级的光标移动命令。</p>\n<p>大部分的 Emacs 命令接受数字参数，并且对于多数命令而言，这些数字参数的作<br>用是指定命令的重复次数。为一个命令指定数字参数（也就是重复次数）的方法<br>是：先输入 C-u，然后输入数字作为参数，最后再输入命令。如果你有META （或<br>EDIT 或 ALT）键，那么还有另一种办法：按住 META 键不放，然后输入数字。不<br>过我们还是建议你用 C-u，因为它在任何终端机上都能用。这种数字参数也称为<br>“前缀参数”，意思是说这个参数是先于使用它的命令而输入的。</p>\n<p>举例来说， C-u 8 C-f 会向前移动 8 个字符。</p>\n<blockquote>\n<blockquote>\n<p>为 C-n 或者 C-p 指定一个数字参数，这样你可以只用一个命令就把光标移动<br>   到本行的附近。</p>\n</blockquote>\n</blockquote>\n<p>虽然大部分命令把数字参数解释为其重复次数，但是也有些命令例外，它们将数<br>字参数另做它用。比如有些命令（我们目前还没学到）仅仅将前缀参数作为一个<br>标志――只要给出有一个前缀参数，不管其值为何，它都会改变命令的功能。</p>\n<p>而 C-v 和 M-v 则属于另一种类型的例外。当给定一个参数时，它们将滚动你指<br>定的“行数”，而不是“屏数”。举例来说，C-u 8 C-v 将文本向下滚动 8 行。</p>\n<blockquote>\n<blockquote>\n<p>现在试试看，输入 C-u 8 C-v。</p>\n</blockquote>\n</blockquote>\n<p>这个命令应该已经将文字向上滚动了 8 行。如果你想将它再次地向下滚动，你可<br>以给定一个参数然后执行 M-v。</p>\n<p>如果你正在使用图形界面，比如 X 或者微软的 Windows，那么在 Emacs窗<br>口的一边应该有一个长方形的区域叫“滚动条”。你可以用鼠标操纵滚动条来滚动<br>文字。</p>\n<p>如果你的鼠标有滚轮的话，你也可以使用滚轮来滚动。</p>\n<h2 id=\"如果-EMACS-失去响应（IF-EMACS-STOPS-RESPONDING）\"><a href=\"#如果-EMACS-失去响应（IF-EMACS-STOPS-RESPONDING）\" class=\"headerlink\" title=\"* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）\"></a>* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）</h2><p>如果 Emacs 对你的命令失去响应，你可以用 C-g 来安全地终止这条命令。C-g<br>也可以终止一条执行过久的命令。</p>\n<p>C-g 还可以取消数字参数和只输入到一半的命令。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-u 100 设定一个值为 100 的数字参数，然后按 C-g。<br>   现在再按 C-f，光标应该只会移动一个字符，因为你已经用 C-g 取消了参数。</p>\n</blockquote>\n</blockquote>\n<p>如果你不小心按了一下 <esc>，你也可以用 C-g 来取消它。<br>【这个说法似乎有问题，因为按照这个按键顺序输入的应该是 C-M-g。<br>  取消 <esc> 的正确做法是再连按两次 <esc>。】</esc></esc></esc></p>\n<h2 id=\"被禁用的命令（DISABLED-COMMANDS）\"><a href=\"#被禁用的命令（DISABLED-COMMANDS）\" class=\"headerlink\" title=\"* 被禁用的命令（DISABLED COMMANDS）\"></a>* 被禁用的命令（DISABLED COMMANDS）</h2><p>有一些 Emacs 命令被“禁用”了，以避免初学者在不了解其确切功能的情况下误<br>用而造成麻烦。</p>\n<p>如果你用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令<br>到底是干什么的，询问你是否要继续，并在得到你的肯定之后再执行这命令。</p>\n<p>如果你真的想用这条命令，在 Emacs 询问你的时候应该按空格。一般来说，如果<br>你不想用，就按“n”。</p>\n<blockquote>\n<blockquote>\n<p>试试 C-x C-l （这是一个被禁用的命令）<br>   然后用 n 来回答询问。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"窗格（WINDOWS）\"><a href=\"#窗格（WINDOWS）\" class=\"headerlink\" title=\"* 窗格（WINDOWS）\"></a>* 窗格（WINDOWS）</h2><p>Emacs 可以有多个“窗格”，每个窗格显示不同的文字。后面会介绍怎么对付多个窗<br>格，现在我们先学会如何关掉多余的窗格。其实也很简单：</p>\n<pre><code>C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。\n</code></pre><p>也就是先按 CONTROL-x 然后再按 1。C-x 1 会保留光标所在的窗格，并将其扩大<br>到整个屏幕，同时关掉所有其它的窗格。</p>\n<blockquote>\n<blockquote>\n<p>把光标移到本行然后输入 C-u 0 C-l。</p>\n<p>输入 C-h k C-f。观察当一个新窗格出现时当前窗格（用来显示<br>   C-f 命令的文档）是如何缩小的。</p>\n<p>输入 C-x 1 关掉文档窗格。</p>\n</blockquote>\n</blockquote>\n<p>有一系列命令是以 CONTROL-x 开始的，这些命令许多都跟“窗格、文件、缓冲区<br>【缓冲区（buffer）会在后文详细介绍】”等等诸如此类的东西有关，其中有些<br>命令可能包含了 2 个、3 个或者 4 个字符。</p>\n<h2 id=\"插入与删除（INSERTING-AND-DELETING）\"><a href=\"#插入与删除（INSERTING-AND-DELETING）\" class=\"headerlink\" title=\"* 插入与删除（INSERTING AND DELETING）\"></a>* 插入与删除（INSERTING AND DELETING）</h2><p>插入文字很简单，直接敲键盘就可以了。普通的字符，比如 A、7、* 等等，会<br>随着你的输入而插入。要插入一个换行符，输入 <return>（这个键在键盘上有<br>时会被标注成“Enter”）。</return></p>\n<p>你可以用 <del> 来删除光标左边的字符，这个键通常被标注为“Backspace”――跟<br>你在 Emacs 之外的用法应该一样，删除最后一个输入的字符。</del></p>\n<p>你的键盘上可能有另外一个键，标注着 <delete>，但那个不是我们所说的 <del>。</del></delete></p>\n<blockquote>\n<blockquote>\n<p>现在就来试试――敲点字，然后按几下 <del> 删除它们。<br>   不用担心文件被修改，你做什么都没关系，这里就是专给你练习用的。</del></p>\n</blockquote>\n</blockquote>\n<p>如果一行文字很长、超出了窗格的宽度，显示不下的部分会在紧邻的下一行继续<br>显示。如果你使用的是图形界面，文本区域两边的狭窄区域（左右“边缘”）会出<br>现小小的转弯箭头，表明这是某一行的接续显示。如果你使用的是文本终端，接<br>续显示由屏幕最右边一列的一个反斜线（“\\”）来表示。</p>\n<blockquote>\n<blockquote>\n<p>输入文字，一直到屏幕的右边界，然后继续。<br>你会看到一个接续行出现。</p>\n<p>用 <del> 删掉一些文字，直到此行长度小于窗格宽度，接续行就消失了。</del></p>\n</blockquote>\n</blockquote>\n<p>换行符跟其它字符一样可以被删除。两行中间的换行符被删除后，这两行将会合<br>并成一行。如果合并后的这一行太长，超出了窗格宽度，它就会以一个接续行来<br>显示。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到某行的开头并输入 <del>。<br>   这时该行将与其前一行一起被合并为一行。</del></p>\n<p>输入 <return> 重新插入你刚才删除的换行符。</return></p>\n</blockquote>\n</blockquote>\n<p><return> 是一个特殊的键，因为按下这个键后，得到的可能不仅仅是一个换行<br>符。根据周围文本的不同，Emacs 可能会在换行符之后插入一些空白字符，这样，<br>当你在新的一行开始打字时，文本会自动与前一行对齐。</return></p>\n<blockquote>\n<blockquote>\n<p>这是一个自动缩进的例子。<br>   在这一行的末尾输入 <return>。</return></p>\n</blockquote>\n</blockquote>\n<p>可以看到，在插入换行符之后，Emacs 插入了空格，因此光标移动到了“在”这个<br>字的下面。</p>\n<p>前面讲过，大部分的 Emacs 命令都可以指定重复次数，这其中也包括输入字符的<br>命令。重复执行输入字符的命令实际上就是输入多个相同的字符。</p>\n<blockquote>\n<blockquote>\n<p> 试试 C-u 8 <em>，这将会插入 <strong><em>*</em></strong></em>。</p>\n</blockquote>\n</blockquote>\n<p>好，现在你应该已经掌握了最基本的的文本插入和修改功能，其实删除还可以<br>“以词为单位”进行，下面是一个关于“删除”操作的小结：</p>\n<pre><code>&lt;DEL&gt;        删除光标前的一个字符\nC-d          删除光标后的一个字符\n\nM-&lt;DEL&gt;      移除光标前的一个词\nM-d          移除光标后的一个词\n\nC-k          移除从光标到“行尾”间的字符\nM-k          移除从光标到“句尾”间的字符\n</code></pre><p>【可能你已经注意到了“删除（delete）”和“移除（kill）”的用词区别，后<br>文会有详细说明。】</p>\n<p>注意“<del> 和 C-d”还有“M-<del> 和 M-d”是根据前述惯例从 C-f和 M-f 衍生<br>出来的（其实<del>不是控制字符，我们先忽略这一点）。C-k和 M-k 的关系在<br>某种程度上与 C-e 和 M-e 一样――如果把“一行”和“一句”作一个类比的话。</del></del></del></p>\n<p>你也可以用一种通用的办法来移除缓冲区里的任何一部分：首先把光标移动到你<br>想要移除的区域的一端，然后按 C-<spc>（<spc>指空格）【注意，C-<spc> 往<br>往被中文用户设定成输入法热键，如果这样，C-<spc> 就被系统拦截而无法传递<br>给 Emacs 了，在这种情况下可以使用C-@。】，然后将光标移动到你准备移除的<br>文字的另一端。这个时候， Emacs 会高亮光标和你按下 C-<spc> 之间的文本。<br>最后，按下 C-w 。这样就可以把位于这两点之间的所有文字移除了。</spc></spc></spc></spc></spc></p>\n<blockquote>\n<blockquote>\n<p>移动光标到上一段开头的“你”字。<br>输入 C-<spc> 。Emacs 应该会在屏幕的下方显示一个“Mark set”的消息。<br>移动光标到第二行中的“端”字。<br>输入 C-w，从“你”开始到“端”之前的文字被全部移除。</spc></p>\n</blockquote>\n</blockquote>\n<p>注意,“移除（kill）”和“删除（delete）”的不同在于被移除的东西可以被重新<br>插入（在任何位置），而被删除的就不能使用相同的方法重新插入了（不过可以<br>通过撤销一个删除命令来做到，后文会提到）。【实际上，移除掉的东西虽然看<br>起来“消失”了，但实际上被 Emacs 记录了下来，因此还可以找回来；而删除掉<br>的东西虽然也可能还在内存里，但是已经被 Emacs“抛弃”了，所以就找不回来<br>了。】重新插入被移除的文字称为“召回（yank）”。一般而言，那些可能消除很<br>多文字的命令会把消除掉的文字记录下来（它们被设定成了“可召回”），而那些<br>只消除一个字符或者只消除空白的命令就不会记录被消除的内容（自然你也就无<br>法召回了）。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到一非空白行的行头，然后输入 C-k 移除那一行上的文字。</p>\n<p>再次 C-k，你可以看到它移除了跟在那一行后面的换行符。</p>\n</blockquote>\n</blockquote>\n<p>注意，单独的 C-k 会把一行的内容移除，而第二个 C-k 则会移除换行符，并使<br>其后所有的行都向上移动。C-k 处理数字参数的方式很特别，它会把参数指定的<br>那么多行连同其后的换行符一起移除，而不仅仅是重复 C-k 而已。比如 C-u 2<br>C-k 会把两行以及它们的换行符移除；而如果只是输入 C-k 两次显然不是这个结<br>果。</p>\n<p>重新插入被移除的文字恢复的动作称为“召回（yanking）”。（就好像把别人从你身边<br>移走的东西又猛力地拉回来。）你可以在你删除文字的地方召回，也可以在别的<br>地方召回，还可以多次召回同样的文字以得到它的多个拷贝。很多其它的编辑器<br>把移除和召回叫做“剪切”和“粘贴” （详情可见 Emacs 使用手册里的术语表）。</p>\n<p>召回的命令是 C-y。它会在光标所在处插入你最后移除的文字。</p>\n<blockquote>\n<blockquote>\n<p>试试看，输入 C-y 将文字召回。</p>\n</blockquote>\n</blockquote>\n<p>如果你一次连按了好几下 C-k，那么所有被移除的行会被存储在一起，只要一个<br>C-y 就可以把它们都召回。</p>\n<blockquote>\n<blockquote>\n<p>在这里试试，连续按几次 C-k。</p>\n</blockquote>\n</blockquote>\n<p>现在再来恢复刚刚被我们移除的文字：</p>\n<blockquote>\n<blockquote>\n<p>按 C-y。然后把光标往下移动几行，再按一次 C-y。<br>   现在你应该知道怎么复制文字了。</p>\n</blockquote>\n</blockquote>\n<p>C-y 可以召回最近一次移除的内容，那如何召回前几次移除的内容呢？它们当然<br>没有丢，你可以用 M-y 来召回它们。在用 C-y 召回最近移除的文字之后，紧接<br>着再按 M-y 就可以召回再前一次被移除的内容，再按一次 M-y 又可以召回再上<br>一次的……连续使用 M-y 直到找到你想要召回的东西，然后什么也不用做，继续<br>编辑就行了。</p>\n<p>如果连续按 M-y 很多次，你可能会回到起始点，也就是最近移除的文字。<br>【看得出这实际上是一个环。】</p>\n<blockquote>\n<blockquote>\n<p>移除一行，移动一下光标，然后再移除另外一行。<br>   按 C-y 将第二次移除的那行召回来。<br>   紧接着再按 M-y，它将会被第一次移除的那行取代。<br>   试着再按几下 M-y 看看会发生什么。<br>   再继续，直到第二行被召回来，然后再做个几次。<br>   如果感兴趣，你可以试着给 M-y 指定一个正的或负的参数。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"撤销（UNDO）\"><a href=\"#撤销（UNDO）\" class=\"headerlink\" title=\"* 撤销（UNDO）\"></a>* 撤销（UNDO）</h2><p>如果你修改了一段文字，又觉得改得不好，可以用 undo 命令进行撤销：C-/。</p>\n<p>通常 C-/ 会消除一个命令所造成的所有改变；如果你在一行中连续多次地使用<br>C-/，你会把以前的命令也依次撤销。</p>\n<p>但是有两个例外：<br>1） 没有改变文字的命令不算（包括光标移动命令和滚动命令）<br>2） 从键盘输入的字符以组为单位――每组最多 20 个字符――来进行处理。<br>    （这是为了减少你在撤销“插入文字”动作时需要输入 C-/ 的次数）</p>\n<blockquote>\n<blockquote>\n<p>用 C-k 将这一行移除，然后输入 C-/ ，它会再次出现。</p>\n</blockquote>\n</blockquote>\n<p>C-<em> 也是撤销命令；它的作用跟 C-/ 一样，但是它比较容易多次输入。在<br>某些终端上，输入 C-/ 实际上向 Emacs 发送的是 C-</em> 。<br>另外， C-x u 和 C-/ 完全一样，但是按起来有些麻烦。</p>\n<p>数字参数对于 C-/ 、 C-_ 和 C-x u 的意义是执行撤销的重复次数。</p>\n<h2 id=\"文件（FILE）\"><a href=\"#文件（FILE）\" class=\"headerlink\" title=\"* 文件（FILE）\"></a>* 文件（FILE）</h2><p>想保存工作成果就要记得存盘，否则一旦退出 Emacs 你编辑的文字就会丢失。要<br>存盘，就要在编辑前“寻找”到一个存盘文件。（这个过程通常也被称为“访问”<br>文件。）</p>\n<p>寻找到一个文件意味着你可以在 Emacs 里查看这个文件的内容。从许多角度看，<br>这就等于你在直接编辑这个文件，只是你所做的修改只有在“存盘”的时候才会<br>被写入文件。也正因为如此，你可以丢弃一个写到一半的文件而不必把这个残缺<br>文件也保存到计算机上。在存盘的时候，Emacs 会把存盘前的文件重命名保存，<br>以防你改完之后又想反悔。</p>\n<p>在屏幕的下方，你应该能够看到头部有短线“-”的一行，行首通常是一些诸如“<br>-:— TUTORIAL.cn”的文字，这些文字代表了你当前正在访问的文件。比如你现<br>在正在访问的文件是对 Emacs 快速指南的一份临时拷贝，叫做“TUTORIAL.cn”。<br>每当Emacs 寻找到一个文件，文件名就会出现在这个位置。</p>\n<p>寻找文件的命令有一个特点，那就是你必须给出文件名。我们称这个命令“读入<br>了一个参数”（在这里，这个参数显然就是文件名）。在你输入这条命令之后：</p>\n<pre><code>C-x C-f   寻找一个文件\n</code></pre><p>Emacs 会提示你输入文件名。你输入的文件名会出现在屏幕最底端的一行，这一<br>行被称为小缓冲（minibuffer），在小缓冲里你可以使用通常的 Emacs 编辑命令<br>来编辑文件名。</p>\n<p>在小缓冲里输入文件名（其实输入其它东西也一样）时可以用 C-g 取消。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x C-f，然后输入 C-g<br>   这会关掉小缓冲，同时也会取消使用小缓冲的 C-x C-f 命令。<br>   当然了，你也没有找任何文件。</p>\n</blockquote>\n</blockquote>\n<p>用 <return> 结束文件名的输入。之后，小缓冲会消失，C-x C-f 将会去寻找你<br>指定的文件。小缓冲在 C-x C-f 命令结束之后也会消失。</return></p>\n<p>文件被显示在了屏幕上，你可以开始编辑了。存盘用这条命令：</p>\n<pre><code>C-x C-s   储存这个文件\n</code></pre><p>这条命令把 Emacs 中的文字存储到文件中。第一次存盘的时候 Emacs 会将原文<br>件重命名以备份。重命名的规则通常是在原文件名之后添加一个“~”字符。<br>【对许多人来说，这是一个烦人的特性，关掉文件备份可以用如下命令：<br>  M-x customize-variable <return> make-backup-files <return>】</return></return></p>\n<p>存盘结束后，Emacs 会显示写入文件的文件名。你最好养成经常存盘的习惯，这<br>可以减少系统崩溃和死机给你带来的损失（也可参见下面的“自动保存”一节）。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x C-s TUTORIAL.cn <return> 。<br>   这将会把该指南保存为一个名为 TUTORIAL.cn 的文件，并且在屏幕的下方显<br>   示一条消息：“Wrote …TUTORIAL.cn”。</return></p>\n</blockquote>\n</blockquote>\n<p>你不但可以寻找一个已有的文件来查看或编辑，还可以寻找一个不存在的文件。<br>实际上这正是 Emacs 创建新文件的方法：找到不存在的新文件。事实上，只有<br>在存盘的时候，Emacs 才会真正创建这个文件。而在这之后的一切就跟编辑一个<br>已有文件没有区别了。</p>\n<h2 id=\"缓冲区（BUFFER）\"><a href=\"#缓冲区（BUFFER）\" class=\"headerlink\" title=\"* 缓冲区（BUFFER）\"></a>* 缓冲区（BUFFER）</h2><p>你可以用 C-x C-f 找到并打开第二个文件，但第一个文件仍然在 Emacs 中。要<br>切回第一个文件，一种办法是再用一次 C-x C-f。这样，你就可以在 Emacs 中同<br>时打开多个文件。</p>\n<p>Emacs 把每个编辑中的文件都放在一个称为“缓冲区（buffer）”的地方。每寻<br>找到一个文件，Emacs 就在其内部开辟一个缓冲区。用下面的命令可以列出当前<br>所有的缓冲区：</p>\n<pre><code>C-x C-b   列出缓冲区\n</code></pre><blockquote>\n<blockquote>\n<p>现在就试一下 C-x C-b</p>\n</blockquote>\n</blockquote>\n<p>观察一下缓冲区是如何被命名的，它很可能跟与其对应的文件同名。实际上，一<br>个 Emacs 窗格里的任何文字都是某个缓冲区的一部分。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x 1 离开缓冲区列表</p>\n</blockquote>\n</blockquote>\n<p>不管存在多少缓冲区，任何时候都只能有一个“当前”缓冲区，也就是你正在编<br>辑的这个。如果你想编辑其它的缓冲区，就必须“切换”过去。上面讲过，用<br>C-x C-f 是一种办法。不过还有一个更简单的办法，那就是用 C-x b。用这条命<br>令，你必须输入缓冲区的名称。</p>\n<blockquote>\n<blockquote>\n<p>通过输入 C-x C-f foo <return> 创建一个名为“foo”的文件。<br>   然后输入 C-x b TUTORIAL.cn <return> 回到这里。</return></return></p>\n</blockquote>\n</blockquote>\n<p>大多数情况下，缓冲区与跟其对应的文件是同名的（不包括目录名），不过这也<br>不是绝对的。用 C-x C-b 得到的缓冲区列表总是显示缓冲区名。</p>\n<p>缓冲区未必有对应文件。显示缓冲区列表的缓冲区（叫做“<em>Buffer List</em>”）就<br>是这样。这个 TUTORIAL.cn 缓冲区起初没有对应的文件，但是现在有了，因为<br>在前一节你输入了 C-x C-s ， 将它保存成了一个文件。</p>\n<p>“<em>Messages</em>”缓冲区也没有对应文件，这个缓冲区里存放的都是在 Emacs 底部<br>出现的消息。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x b <em>Messages</em> <return> 瞅瞅消息缓冲区里都有什么东西。<br>   然后再输入 C-x b TUTORIAL.cn <return> 回到这里。</return></return></p>\n</blockquote>\n</blockquote>\n<p>如果你对某个文件做了些修改，然后切换到另一个文件，这个动作并不会帮你把<br>前一个文件存盘。对第一个文件的修改仍然仅存在于 Emacs 中，也就是在它对<br>应的缓冲区里。并且，对第二个文件的修改也不会影响到第一个文件。这很有用，<br>但也意味着你需要一个简便的办法来保存第一个文件的缓冲区。先切换回那个缓<br>冲区，再用 C-x C-s 存盘，太麻烦了。你需要一个更简便的方法，而 Emacs 已<br>经为你准备好了：</p>\n<pre><code>C-x s   保存多个缓冲区\n</code></pre><p>C-x s 会找出所有已被修改但尚未存盘的缓冲区，然后向你逐个询问：是否需要<br>存盘？</p>\n<blockquote>\n<blockquote>\n<p>插入一行文字，然后输入 C-x s。<br>   它应该会问你，是否要储存名为 TUTORIAL.cn 的缓冲区？<br>   按“y”告诉它你想存盘。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"命令集扩展（EXTENDING-THE-COMMAND-SET）\"><a href=\"#命令集扩展（EXTENDING-THE-COMMAND-SET）\" class=\"headerlink\" title=\"* 命令集扩展（EXTENDING THE COMMAND SET）\"></a>* 命令集扩展（EXTENDING THE COMMAND SET）</h2><p>Emacs 的命令就像天上的星星，数也数不清。把它们都对应到 CONTROL 和 META<br>组合键上显然是不可能的。Emacs 用扩展（eXtend）命令来解决这个问题，扩展<br>命令有两种风格：</p>\n<pre><code>C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。\nM-x     命令名扩展。M-x 之后输入一个命令名。\n</code></pre><p>很多扩展命令都相当有用，虽然与你已经学过的命令比起来，他们可能不那么常<br>用。我们早已经见过一些扩展命令了，比如用 C-x C-f 寻找文件和用 C-x C-s<br>保存文件；退出 Emacs 用的 C-x C-c 也是扩展命令。（不用担心退出 Emacs 会<br>给你带来什么损失，Emacs 会在退出之前提醒你存盘的。）</p>\n<p>如果你使用图形界面，你不需要任何特殊的命令来切换 Emacs 和其他应用程序。<br>你可以使用鼠标或者窗口管理器的命令。然而，如果你使用只能同时显示一个应<br>用程序的文本终端，你需要“挂起” Emacs ，以切换到其他的应用程序。</p>\n<p>C-z 可以暂时离开 Emacs――当然，你还可以再回来。在允许 C-z 的系统中，C-z<br>会把 Emacs“挂起”，也就是说，它会回到 shell但不杀死 Emacs 的进程。在常<br>用的 shell 中，通常可以用“fg”或者“%emacs”命令再次回到 Emacs 中。</p>\n<p>你最好在打算退出登陆的时候再用 C-x C-c。在把 Emacs 当做一个临时的编辑<br>器的时候（比如被一个邮件处理程序调用），也可以用 C-x C-c 退出。</p>\n<p>C-x 的扩展命令有很多，下面列出的是你已经学过的：</p>\n<pre><code>C-x C-f         寻找文件。\nC-x C-s         保存文件。\nC-x C-b         列出缓冲区。\nC-x C-c         离开 Emacs。\nC-x 1           关掉其它所有窗格，只保留一个。\nC-x u           撤销。\n</code></pre><p>用命令名扩展的命令通常并不常用，或只用在部分模式下。比如<br>replace-string（字符串替换）这个命令，它会把一个字符串替换成另一个。在<br>输入 M-x 之后，Emacs 会在屏幕底端向你询问并等待你输入命令名。如果你想<br>输入“replace-string”，其实只需要敲“repl s<tab>”就行了，Emacs 会帮你自<br>动补齐。输入完之后按 <return> 提交。</return></tab></p>\n<p>字符串替换命令需要两个参数――被替换的字符串和用来替换它的字符串。每个<br>参数的输入都以换行符来结束。</p>\n<blockquote>\n<blockquote>\n<p>将光标移到本行下面第二行的空白处，然后输入<br>   M-x repl s<return>changed<return>altered<return>。</return></return></return></p>\n</blockquote>\n</blockquote>\n<p>   【以下保留一行原文，以应练习之需：】<br>   Notice how this line has changed: you’ve replaced…</p>\n<p>请注意这一行的变化：在光标之后的范围内，你已经将“changed”这个词――不<br>论它在哪里出现――全部用“altered”替换掉了。</p>\n<h2 id=\"自动保存（AUTO-SAVE）\"><a href=\"#自动保存（AUTO-SAVE）\" class=\"headerlink\" title=\"* 自动保存（AUTO SAVE）\"></a>* 自动保存（AUTO SAVE）</h2><p>如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你<br>所做的修改就很可能会丢失。为了避免这样的不幸发生，Emacs 会定期将正在编<br>辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个<br>“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫<br>“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。</p>\n<p>所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保<br>存文件）然后输入 M-x recover file <return> 来恢复你的自动保存文件。在<br>提示确认的时候，输入 yes<return>。</return></return></p>\n<h2 id=\"回显区（ECHO-AREA）\"><a href=\"#回显区（ECHO-AREA）\" class=\"headerlink\" title=\"* 回显区（ECHO AREA）\"></a>* 回显区（ECHO AREA）</h2><p>如果 Emacs 发现你输入多字符命令的节奏很慢，它会在窗格的下方称为“回显区”<br>的地方给你提示。回显区位于屏幕的最下面一行。</p>\n<h2 id=\"状态栏（MODE-LINE）\"><a href=\"#状态栏（MODE-LINE）\" class=\"headerlink\" title=\"* 状态栏（MODE LINE）\"></a>* 状态栏（MODE LINE）</h2><p>位于回显区正上方的一行被称为“状态栏”。状态栏上会显示一些信息，比如：</p>\n<p> -:**- TUTORIAL.cn 63% L749 (Fundamental)</p>\n<p>状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息。</p>\n<p>你应该知道文件名的意思吧？就是你找到的那个文件嘛。-NN%– 显示的是光标在<br>全文中的位置。如果位于文件的开头，那么就显示 –Top– 而不是 –00%–；如<br>果位于文件的末尾，就显示 –Bot–。如果文件很小，一屏就足以显示全部内容，<br>那么状态栏会显示 –All–。</p>\n<p>“L” 和其后的数字给出了光标所在行的行号。</p>\n<p>最开头的星号（*）表示你已经对文字做过改动。刚刚打开的文件肯定没有被改动<br>过，所以状态栏上显示的不是星号而是短线（-）。</p>\n<p>状态栏上小括号里的内容告诉你当前正在使用的编辑模式。缺省的模式是<br>Fundamental，就是你现在正在使用的这个。它是一种“主模式”。</p>\n<p>Emacs 的主模式林林总总。有用来编辑程序代码的――比如 Lisp 模式；也有用<br>来编辑各种自然语言文本的――比如 Text 模式。任何情况下只能应用一个主模<br>式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方。</p>\n<p>主模式通常会改变一些命令的行为。比方说，不管编辑什么语言的程序代码，你<br>都可以用一个相同的命令来添加注释。但是在不同的语言中注释的语法往往是不<br>同的，这时不同的主模式就会用各自不同的语法规则来添加注释。主模式都是可<br>以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental<br>模式。</p>\n<p>编辑自然语言文本――比如现在――应该用 Text 模式。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x text-mode <return>。</return></p>\n</blockquote>\n</blockquote>\n<p>别担心，什么都没变。不过细心一些可以发现，M-f 和 M-b 现在把单引号（’）<br>视为词的一部分了。而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号<br>视为分隔单词的符号。</p>\n<p>主模式通常都会搞一些类似的小动作，因为很多命令其实完成的是“相同的工<br>作”，只是在不同环境下会有不同的工作方式而已。【所谓“求同存异”，在<br>Emacs 里得到了很好的体现】</p>\n<p>用 C-h m 可以查看当前主模式的文档。</p>\n<blockquote>\n<blockquote>\n<p>把光标移动到下一行。<br>用 C-l C-l 将本行带到屏幕的最上方。<br>输入 C-h m，看看 Text 模式与 Fundamental 模式有哪些不同。<br>输入 C-x 1 关掉文档窗格。</p>\n</blockquote>\n</blockquote>\n<p>主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minor<br>mode）存在。辅模式并不能替代主模式，而是提供一些辅助的功能。每个辅模式<br>都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关。所以你可以不<br>使用辅模式，也可以只使用一个或同时使用多个辅模式。</p>\n<p>有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文本<br>的时候。启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行。</p>\n<p>用 M-x auto-fill-mode <return> 启动自动折行模式。再用一次这条命令，自<br>动折行模式会被关闭。也就是说，如果自动折行模式没有被开启，这个命令会开<br>启它；如果已经开启了，这个命令会关闭它。所以我们说，这个命令可以用来<br>“开关（toggle）”模式。</return></p>\n<blockquote>\n<blockquote>\n<p>现在输入 M-x auto-fill-mode <return>。然后随便敲点什么，直到你看到它<br>   分成两行。你必须敲一些空格，因为 Auto Fill 只在空白处进行断行。<br>   【输入空格对英文来说是必须的，而对中文则不必。】</return></p>\n</blockquote>\n</blockquote>\n<p>行边界通常被设定为 70 个字符【这里指英文字符】，你可以用 C-x f 命令配合<br>数字参数来重新设定它。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x f 并传递参数 20： C-u 2 0 C-x f。<br>   然后输入一些文字，观察 Emacs 的自动折行动作<br>   最后再用 C-x f 将边界设回 70。</p>\n</blockquote>\n</blockquote>\n<p>如果你在段落的中间做了一些修改，那么自动折行模式不会替你把整个段落重新<br>折行，你需要用 M-q 手动折行。注意，光标必须位于你需要折行的那一段里。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到前一段中，然后输入 M-q。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"搜索（SEARCHING）\"><a href=\"#搜索（SEARCHING）\" class=\"headerlink\" title=\"* 搜索（SEARCHING）\"></a>* 搜索（SEARCHING）</h2><p>Emacs 可以向前或向后搜索字符串（“字符串”指的是一组连续的字符）。搜索命<br>令是一个移动光标的命令：搜索成功后，光标会停留在搜索目标出现的地方。</p>\n<p>Emacs 的搜索命令是“渐进的（incremental）”。意思是搜索与输入同时进行：<br>你在键盘上一字一句地输入搜索词的过程中，Emacs 就已经开始替你搜索了。</p>\n<p>C-s 是向前搜索，C-r 是向后搜索。不过手别这么快！别着急试。</p>\n<p>在按下 C-s 之后，回显区里会有“I-search”字样出现，表明目前 Emacs 正处<br>于“渐进搜索”状态，并等待你输入搜索字串。按 <return> 可以结束搜索。</return></p>\n<blockquote>\n<blockquote>\n<p>输入 C-s 开始一个搜索。注意敲慢一点，一次输入一个字符。<br>   慢慢输入“cursor”这个词，每敲一个字都停顿一下并观察光标。<br>   现在你应该已曾经找到“cursor”这个词了。<br>再按一次 C-s，搜索下一个“cursor”出现的位置。<br>现在按四次 <del> ，看看光标是如何移动的。<br>敲 <return> 结束搜索。</return></del></p>\n</blockquote>\n</blockquote>\n<p>看仔细了么？在一次渐进式搜索中，Emacs 会尝试跳到搜索目标出现的位置。要<br>跳到下一个命中位置，就再按一次 C-s。如果找不到目标，Emacs 会发出“哔”<br>的一声，告诉你搜索失败。在整个过程中，都可以用 C-g 来终止搜索。【你会发<br>现 C-g 会让光标回到搜索开始的位置，而 <return> 则让光标留在搜索结果上，<br>这是很有用的功能。】</return></p>\n<p>在渐进式搜索中，按 <del> 会“撤回”到最近一次搜索的命中位置。如果之前没<br>有一个命中， <del> 会抹去搜索字符串中的最后一个字符。比如你已经输入了<br>“c”，光标就停在“c”第一次出现的位置，再输入“u”，光标停在“cu”第一次出现<br>的位置，这时再按 <del> ，“u”就从搜索字串中消失了，然后光标会回到“c”第<br>一次出现的位置。</del></del></del></p>\n<p>另外，如果你在搜索的时候输入了 control 或者 meta 组合键的话，搜索可能会<br>结束。（也有例外，比如 C-s 和 C-r 这些用于搜索的命令。）</p>\n<p>前面说的都是“向下”搜索，如果想“向上”搜索，可以用 C-r。C-r 与 C-s<br>相比除了搜索方向相反之外，其余的操作都一样。</p>\n<h2 id=\"多窗格（MULTIPLE-WINDOWS）\"><a href=\"#多窗格（MULTIPLE-WINDOWS）\" class=\"headerlink\" title=\"* 多窗格（MULTIPLE WINDOWS）\"></a>* 多窗格（MULTIPLE WINDOWS）</h2><p>Emacs 的迷人之处很多，能够在屏幕上同时显示多个窗格就是其中之一。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到这一行，然后输入 C-l C-l。</p>\n<p>现在输入 C-x 2，它会将屏幕划分成两个窗格。<br>   这两个窗格里显示的都是本篇快速指南，而光标则停留在上方的窗格里。</p>\n<p>试试用 C-M-v 滚动下方的窗格。<br>   （如果你并没有 META 键，用 ESC C-v 也可以。）<br>   【向上滚动是 C-M-S-v，也就是同时按住 CONTROL、META 和 SHIFT 再按 v】</p>\n<p>输入 C-x o（“o”指的是“其它（other）”），<br>   将光标转移到下方的窗格。</p>\n<p>在下方的窗格中，用 C-v 和 M-v 来滚动。<br>   同时继续在上方的窗格里阅读这些指导。</p>\n<p>再输入 C-x o 将光标移回到上方的窗格里。<br>   光标会回到它在上方窗格中原本所在的位置。</p>\n</blockquote>\n</blockquote>\n<p>连续使用 C-x o 可以遍历所有窗格。“被选中的窗格”，也就是绝大多数的编辑<br>操作所发生的地方，是在你不打字时闪烁光标的那个窗格。其他的窗格有它们自<br>己的光标位置； 如果你在图形界面下运行 Emacs ，这些光标是镂空的长方形。</p>\n<p>当你在一个窗格中编辑，但用另一个窗格作为参考的时候，C-M-v 是很有用的命<br>令。无需离开被选中的窗格，你就可以用 C-M-v 命令滚动另外一个窗格中的文<br>字。【比如翻译和校对就很适合用这种方式进行。】</p>\n<p>C-M-v 是一个 CONTROL-META 组合键。如果你有 META （或 Alt）键的话，可以<br>同时按住CONTROL 和 META 键并输入 v。CONTROL 和 META 键先按哪个都可以，<br>因为它们只是用来“修饰（modify）”你输入的字符的。</p>\n<p>如果你并没有 META 键，你也可以用 ESC 来代替，不过这样的话就要注意按键顺<br>序了：你必须先输入 ESC ，然后再输入 CONTROL-v。CONTROL-ESC v 是没用的，<br>因为 ESC 本身是一个字符键，而不是一个修饰键（modifier key）。</p>\n<blockquote>\n<blockquote>\n<p>（在上方窗格里）输入 C-x 1 关掉下方窗格。</p>\n</blockquote>\n</blockquote>\n<p>（如果你在下方的窗格里输入 C-x 1，那么就会关掉上方的窗格。你可以把这个<br>命令看成是“只保留一个窗格”――就是我们正在编辑的这个。）</p>\n<p>不同的窗格可以显示不同的缓冲区。如果你在一个窗格里用 C-x C-f 打开了一个<br>文件，另一个窗格并不会发生什么变化。任何一个窗格里都可以用来打开文件。</p>\n<p>用下面的方法可以在一个新开窗格里打开文件：</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x 4 C-f，紧跟着输入一个文件名，再用 <return> 结束。<br>   可以看到你指定的文件出现在下方的窗格中，同时光标也跳到了那里。</return></p>\n<p>输入 C-x o 回到上方的窗格，然后再用 C-x 1 关掉下方窗格。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"多窗口（MULTIPLE-FRAMES）\"><a href=\"#多窗口（MULTIPLE-FRAMES）\" class=\"headerlink\" title=\"* 多窗口（MULTIPLE FRAMES）\"></a>* 多窗口（MULTIPLE FRAMES）</h2><p>Emacs 可以创建多个窗口。窗口由许多窗格以及菜单、滚动条、回显区等组成。<br>在图形界面下，多个窗口可以同时显示出来。在文本终端中，只能同时显示一个<br>窗口。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x make-frame <return>。<br> 可以看到一个新的窗口出现在了你的屏幕上。</return></p>\n</blockquote>\n</blockquote>\n<p>你可以在新的窗口里做最初的窗口里可以做的任何事情。第一个窗口没有什么特<br>别的。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x delete-frame <return>.<br> 这个命令将会关闭选中的窗口。</return></p>\n</blockquote>\n</blockquote>\n<p>你也可以通过图形系统来关闭某个窗口（通常是在窗口上面的某个角落里的一个<br>“X”按钮）。如果你关闭的是 Emacs 进程的最后一个窗口， Emacs 将会退出。</p>\n<h2 id=\"递归编辑（RECURSIVE-EDITING-LEVELS）\"><a href=\"#递归编辑（RECURSIVE-EDITING-LEVELS）\" class=\"headerlink\" title=\"* 递归编辑（RECURSIVE EDITING LEVELS）\"></a>* 递归编辑（RECURSIVE EDITING LEVELS）</h2><p>有时候你会进入所谓的“递归编辑”。递归编辑状态由位于状态栏的方括号所指<br>示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到<br>[(Fundamental)]，而不是 (Fundamental)。【比如在用 M-% 进行交互式替换的<br>时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模式，<br>这就是所谓的递归编辑。】</p>\n<p>离开递归编辑可以用 ESC ESC ESC。这是一个最通用的“离开”命令，你甚至可<br>以使用它来关掉多余的窗格，或者离开小缓冲。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x 进入小缓冲；然后输入 ESC ESC ESC 离开。</p>\n</blockquote>\n</blockquote>\n<p>你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的<br>命令和其参数（arguments）。</p>\n<h2 id=\"获得更多帮助（GETTING-MORE-HELP）\"><a href=\"#获得更多帮助（GETTING-MORE-HELP）\" class=\"headerlink\" title=\"* 获得更多帮助（GETTING MORE HELP）\"></a>* 获得更多帮助（GETTING MORE HELP）</h2><p>本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水，不至于束手无策望洋兴<br>叹。有关 Emacs 的话题可谓汗牛充栋，这里自然是难尽万一。不过 Emacs 很理<br>解你求知若渴的心情，因为它提供的强大功能实在是太多了。为此，Emacs 提供<br>了一些命令来查看 Emacs 的命令文档，这些命令都以 CONTROL-h 开头，这个字<br>符也因此被称为“帮助（Help）字符”。</p>\n<p>要使用帮助（Help）功能，请先输入 C-h，然后再输入一个字符以说明你需要什<br>么帮助。如果你连自己到底需要什么帮助都不知道，那么就输入 C-h ?，Emacs<br>会告诉你它能提供了哪些帮助。如果你按了 C-h 又想反悔，可以用 C-g 取消。</p>\n<p>（如果你按 C-h 之后没有任何帮助信息显示出来，那么试试 F1 键或者 M-x help <return> 。）</return></p>\n<p>最基本的帮助功能是 C-h c。输入 C-h c 之后再输入一个组合键，Emacs 会给出<br>这个命令的简要说明。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-h c C-p。</p>\n</blockquote>\n</blockquote>\n<p>显示的消息应该会是这样：</p>\n<pre><code>C-p runs the command previous-line\n</code></pre><p>这条消息显示了 C-p 命令对应的函数名。命令的功能由函数完成，所以函数名<br>本身也可以被看成是最简单的文档――至少对于你已经学过的命令来说，它们的函<br>数名足以解释它们的功能了。</p>\n<p>多字符命令一样可以用 C-h c 来查看。</p>\n<p>想得到更多的信息，请把 C-h c 换成 C-h k 试试看。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-h k C-p。</p>\n</blockquote>\n</blockquote>\n<p>上面的命令会新打开一个 Emacs 窗格以显示函数的名称及其文档。你读完之后可<br>以用 C-x 1 关掉这个帮助窗格。当然你并不需要立即这样做，你完全可以先在编<br>辑窗格里做点别的事情，然后再关掉帮助窗格。</p>\n<p>还有一些其它有用的 C-h 命令：</p>\n<p>   C-h f        解释一个函数。需要输入函数名。</p>\n<blockquote>\n<blockquote>\n<p>试试看，输入 C-h f previous-line <return>。<br>   Emacs 会给出它所知道的所有有关“实现 C-p 命令功能的函数”的信息。</return></p>\n</blockquote>\n</blockquote>\n<p>C-h v 用来显示 Emacs 变量的文档。Emacs 变量可以被用来“定制 Emacs 的行<br>为”。同样，你需要输入变量的名称。</p>\n<p>   C-h a        相关命令搜索（Command Apropos）。<br>                输入一个关键词然后 Emacs 会列出所有命令名中包含此关键词<br>                的命令。这些命令全都可以用 M-x 来启动。对于某些命令来说，<br>                相关命令搜索还会列出一两个组合键。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-h a file <return>。</return></p>\n</blockquote>\n</blockquote>\n<p>Emacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中含<br>有“file”的命令。你可以看到像“C-x C-f”这样的组合键显示在“find-file”<br>这样的命令名的旁边。</p>\n<blockquote>\n<blockquote>\n<p>用 C-M-v 来回滚动 help 窗格，多试几次。</p>\n<p>输入 C-x 1 来删除 help 窗格。</p>\n</blockquote>\n</blockquote>\n<p>   C-h i        阅读手册（也就是通常讲的 Info）。<br>                这个命令会打开一个称为“<em>info</em>”的特殊缓冲区，在那里，<br>                你可以阅读安装在系统里的软件包使用手册。要读 Emacs 的使<br>                用手册，按 m emacs <return> 就可以了。如果你之前从没用<br>                过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使<br>                用指南。在看完本快速指南之后，Emacs Info 会成为你的主要<br>                参考文档。</return></p>\n<h2 id=\"更多精彩（MORE-FEATURES）\"><a href=\"#更多精彩（MORE-FEATURES）\" class=\"headerlink\" title=\"* 更多精彩（MORE FEATURES）\"></a>* 更多精彩（MORE FEATURES）</h2><p>想学习更多的使用技巧，Emacs 使用手册（manual）值得一读。你可以读纸版的<br>书，也可以在 Emacs 中读（可以从 Help 菜单进入或者按 C-h r）。提两个你<br>可能会很感兴趣的功能吧，一个是可以帮你少敲键盘的 completion（自动补全），<br>另一个是方便文件处理的 dired（目录编辑）。</p>\n<p>Completion 可以替你节省不必要的键盘输入。比如说你想切换到 <em>Message</em> 缓<br>冲区，你就可以用 C-x b *M<tab> 来完成。只要 Emacs 能够根据你已经输入的<br>文字确定你想要输入的内容，它就会自动帮你补齐。Completion 也可用于命令<br>名和文件名。有关 Completion 的详细说明可以在 Emacs Info 中的<br>“Completion”一节里找到。</tab></p>\n<p>Dired 能够在一个缓冲区里列出一个目录下的所有文件（可以选择是否也列出子<br>目录），然后你可以在这个文件列表上完成对文件的移动、访问、重命名或删除<br>等等操作。Dired 也在 Emacs 使用手册中有详细介绍，参见“Dired”一节。</p>\n<p>Emacs 使用手册里还有许许多多的精彩功能等着你来了解。</p>\n<h2 id=\"总结（CONCLUSION）\"><a href=\"#总结（CONCLUSION）\" class=\"headerlink\" title=\"* 总结（CONCLUSION）\"></a>* 总结（CONCLUSION）</h2><p>要退出 Emacs 请用 C-x C-c。</p>\n<p>本文完全是为零起点新手所写的起步教程。如果你觉得哪里还看不明白，千万不<br>要怀疑自己，那一定是我们没有写好。我们永远欢迎你的不满和抱怨。</p>\n<h2 id=\"翻译（TRANSLATION）\"><a href=\"#翻译（TRANSLATION）\" class=\"headerlink\" title=\"* 翻译（TRANSLATION）\"></a>* 翻译（TRANSLATION）</h2><p>翻译：孙一江 <a href=\"&#x6d;&#97;&#x69;&#108;&#116;&#111;&#58;&#x73;&#x75;&#x6e;&#121;&#x69;&#106;&#105;&#97;&#x6e;&#103;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;\">&#x73;&#x75;&#x6e;&#121;&#x69;&#106;&#105;&#97;&#x6e;&#103;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a><br>维护：薛富侨 <a href=\"&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#120;&#x66;&#x71;&#x2e;&#102;&#x72;&#x65;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;\">&#120;&#x66;&#x71;&#x2e;&#102;&#x72;&#x65;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a><br>校对：水木社区（www.newsmth.net）Emacs 板众多网友及众多 Emacs 中文用户</p>\n<p>Emacs 快速指南（Tutorial）早有两个刘昭宏的中文译本，繁简各一。其简体版本<br>（TUTORIAL.cn）基本由繁体版本（TUTORIAL.zh）经词语替换而得。然而繁简中文<br>不仅在用词习惯上有所不同，更有诸多表达方式与句法方面的差异，因此一直以来<br>用户使用 TUTORIAL.cn 都会略觉生硬和晦涩。这次重新翻译 TUTORIAL.cn 的动机<br>正是源于这种体验，希望我们的工作能够让本文更好地发挥其作用。TUTORIAL.zh<br>的译文质量很高，在翻译过程中给予过我们许多借鉴和参考，在此对刘昭宏的工作<br>表示感谢。</p>\n<p>翻译过程中最大的挑战莫过于术语译词的选择了。经过水木社区 Emacs 板热心<br>网友小范围内的讨论，我们选择了现在的译法。用户的广泛参与是自由软件生命<br>力的源泉，所以如果你有任何建议、勘误或想法，请用你喜欢的方式向我们提出。<br>你可以通过电子邮件直接联系维护者，也可以放到 GNU Emacs 的开发邮件列表<br>或者水木社区的 Emacs 板上进行讨论。</p>\n<p>下面列出主要术语的译词对照，并给出注释说明：</p>\n<pre><code>command               命令\ncursor                光标\nscrolling             滚动\nnumeric argument      数字参数\nwindow                窗格 [1]\ninsert                插入\ndelete                删除 [2]\nkill                  移除 [2]\nyank                  召回 [2]\nundo                  撤销\nfile                  文件\nbuffer                缓冲区\nminibuffer            小缓冲\necho area             回显区\nmode line             状态栏\nsearch                搜索\nincremental search    渐进式搜索 [3]\n</code></pre><p>对于其他没有提到的术语，读者可以参考 Emacs 使用手册里的术语表。</p>\n<p>[1] “window”一词在计算机相关的领域一般都被译为“窗口”。但是在 Emacs<br>    中，还有一个“frame”的概念。在被广泛使用的 X 窗口系统和微软的视窗<br>    （Windows）系列操作系统中，Emacs 的一个“frame”就是一个“窗口”，因<br>    此把 Emacs 中的“frame”译成“窗口”更加符合通常的习惯。这样，Emacs<br>    中的“window”就只能译成“窗格”了。我们认为 Emacs 中 window 和<br>    frame 的关系用窗格和窗口来类比是十分形象的。</p>\n<pre><code>《学习GNU Emacs》（第二版）一书对“window”和“frame”的翻译与本教程\n刚好相反（分别译作“窗口”和“窗格”）。在此特别注明，以消除可能产生\n的疑惑。（感谢李旭章 &lt;lixuzhang@gmail.com&gt; 指出）\n</code></pre><p>[2] 对于“delete”和“kill”的区别，正文已经给出了详细的说明。“删除”和<br>    “移除”相比较起来，前者更多地隐含着“破坏”和“不可恢复”的意思，而<br>    后者更多地隐含着“被转移”和“可恢复”的意思。因此分别选择它们作为上<br>    述两词的译词，希望能够体现出区别。“yank”在中文文档中鲜有对应译词出<br>    现，翻译的困难较大。究其本意是：“a strong sudden pull”（参见韦氏词<br>    典），即“猛然拉回”。在原文档中 yank 被引申为“将先前移除的东西再移<br>    回来”这个意思，所以我们选择了“召回”一词与其对应。</p>\n<p>[3] “incremental”一词在计算机著作中广泛出现，被广泛接受的中文译词有两<br>    个：“增量的”和“渐进的”。“incremental search”翻译成“增量式搜索<br>    ”或者“渐进式搜索”都讲得通，且都有各自的形象之处。还是参考原文对其<br>    的解释：“… means that the search happens while you type in the<br>    string to search for”。意思是之所以称其为“incremental search”，是<br>    因为“在你输入搜索字符串的过程中，搜索就已经在进行了”。我们认为“增<br>    量的”更加强调在现有基础上的变化（比如“增量备份”，“增量编译”）；<br>    而“渐进的”更加强调过程的逐渐发展，也更加符合原文的意思。因此我们选<br>    择将“incremental search”译作“渐进式搜索”。</p>\n<h2 id=\"版权声明（COPYING）\"><a href=\"#版权声明（COPYING）\" class=\"headerlink\" title=\"* 版权声明（COPYING）\"></a>* 版权声明（COPYING）</h2><p>This tutorial descends from a long line of Emacs tutorials<br>starting with the one written by Stuart Cracraft for the original Emacs.</p>\n<p>This version of the tutorial is a part of GNU Emacs.  It is copyrighted<br>and comes with permission to distribute copies on certain conditions:</p>\n<p>  Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,<br>  Inc.</p>\n<p>  This file is part of GNU Emacs.</p>\n<p>  GNU Emacs is free software: you can redistribute it and/or modify<br>  it under the terms of the GNU General Public License as published by<br>  the Free Software Foundation, either version 3 of the License, or<br>  (at your option) any later version.</p>\n<p>  GNU Emacs is distributed in the hope that it will be useful,<br>  but WITHOUT ANY WARRANTY; without even the implied warranty of<br>  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>  GNU General Public License for more details.</p>\n<p>  You should have received a copy of the GNU General Public License<br>  along with GNU Emacs.  If not, see <a href=\"https://www.gnu.org/licenses/\" target=\"_blank\" rel=\"external\">https://www.gnu.org/licenses/</a>.</p>\n<p>Please read the file COPYING and then do give copies of GNU Emacs to<br>your friends.  Help stamp out software obstructionism (“ownership”) by<br>using, writing, and sharing free software!</p>\n<p>【下面为版权声明的译文，仅供参考。实际法律效力以英文原文为准。】</p>\n<p>本快速指南沿袭自历史悠久的 Emacs 快速指南，可上溯至 Stuart Cracraft 为最<br>初的 Emacs 所作的版本。</p>\n<p>本篇指南是 GNU Emacs 的一部分，并允许在下列条件的约束下发行其拷贝：</p>\n<p>   Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,<br>   Inc.</p>\n<p>   本文件为 GNU Emacs 的一部分。</p>\n<p>   GNU Emacs 为自由软件；您可依据自由软件基金会所发表的GNU通用公共授权<br>   条款，对本程序再次发布和/或修改；无论您依据的是本授权的第三版，或<br>   （您可选的）任一日后发行的版本。</p>\n<p>   GNU Emacs 是基于使用目的而加以发布，然而不负任何担保责任；亦无对适<br>   售性或特定目的适用性所为的默示性担保。详情请参照GNU通用公共授权。</p>\n<p>   您应已收到附随于 GNU Emacs 的GNU通用公共授权的副本；如果没有，请参照<br>   <a href=\"https://www.gnu.org/licenses/\" target=\"_blank\" rel=\"external\">https://www.gnu.org/licenses/</a>.</p>\n<p>敬请阅读文件“COPYING”，然后向你的朋友们分发 GNU Emacs 拷贝。让我们以使<br>用、编写和分享自由软件的实际行动来共同祛除软件障碍主义（所谓的“所有<br>权”）！</p>\n<p>;;; Local Variables:<br>;;; coding: utf-8<br>;;; End:</p>\n","excerpt":"","more":"<p>Emacs 快速指南.（查看版权声明请至本文末尾）</p>\n<p>【注意：位于【】之间的内容是译注，比如本行，下同。】</p>\n<p>Emacs 键盘命令通常包含 CONTROL 键（有时候以 CTRL 或 CTL 来标示）和<br>META 键（有时候用 EDIT 或 ALT 来标示）。为了避免每次都要写出全名，我们<br>约定使用下述缩写：</p>\n<p> C-<chr>  表示当输入字符 <chr> 时按住 CONTROL 键。<br>          因此 C-f 就表示：按住 CONTROL 键再输入 f。</p>\n<p> M-<chr>  表示当输入字符 <chr> 时按住 META（或 EDIT 或 ALT）键。<br>          如果你的键盘上没有 META 、EDIT 或 ALT 键，用下述方法也等效：<br>          先按一下 ESC 键然后放开，再输入 <chr>。我们用 <ESC> 来表示<br>          ESC 键。</p>\n<p>重要提示：要退出 Emacs，请用 C-x C-c（两个连续的组合键）。<br>要退出一个正在运行中的命令，请用 C-g。<br>下文中左边顶行的“&gt;&gt;”字样用来提示你尝试键盘命令。比如：</p>\n<p>[本页当中特意留出一些空白是出于教学目的，请继续往后阅读]</p>\n<blockquote>\n<blockquote>\n<p>现在输入 C-v （查看下一屏文字）移动到下一屏。<br>   （别紧张，在输入字符 v 的同时注意要按住 CONTROL 键）<br>   从现在开始，每读完当前一屏你都需要这样做一次。</p>\n</blockquote>\n</blockquote>\n<p>值得注意的是，当你从上一屏滚到下一屏时，中间会有两行的重复；这样做是为<br>了维持滚屏的连续性，方便你顺畅、连续地阅读。</p>\n<p>用编辑器，开门第一件事就是学会在文字中移动。你已经知道了 C-v 可以向下移<br>动一屏，要往上移，请用 M-v （也就是按住 META 键，然后输入v，如果你没有<br>META、EDIT 或 ALT 键那么就先按 <ESC> 再按 v）。</p>\n<blockquote>\n<blockquote>\n<p> 试试 M-v，然后再试试 C-v，来回遛几次。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"小结（SUMMARY）\"><a href=\"#小结（SUMMARY）\" class=\"headerlink\" title=\"* 小结（SUMMARY）\"></a>* 小结（SUMMARY）</h2><p>以下命令在翻页浏览时相当有用：</p>\n<pre><code>C-v     向前移动一屏\nM-v     向后移动一屏\nC-l     重绘屏幕，并将光标所在行置于屏幕的中央\n        （注意是 CONTROL-L，不是 CONTROL-1）\n</code></pre><blockquote>\n<blockquote>\n<p>找到光标，留意其附近的文字，然后输入 C-l。<br>   找找光标在哪里，你会发现其附近的文字与之前相同，位置却变为屏幕的中心。<br>   如果你再次输入 C-l ，附近的文字将移动到屏幕的顶端。再次输入 C-l ，<br>   文字将移动到底端。</p>\n</blockquote>\n</blockquote>\n<p>如果你的键盘上有 PageUp 和 PageDn，也可以用这两个键来滚屏。不过使用<br>C-v 和 M-v 的效率要更高一些。</p>\n<h2 id=\"基本的光标控制（BASIC-CURSOR-CONTROL）\"><a href=\"#基本的光标控制（BASIC-CURSOR-CONTROL）\" class=\"headerlink\" title=\"* 基本的光标控制（BASIC CURSOR CONTROL）\"></a>* 基本的光标控制（BASIC CURSOR CONTROL）</h2><p>整屏的移动很有用，但是如何在文字中精确定位呢？</p>\n<p>有几种方式可以选择。用方向键当然可以，不过更有效率的方法是保持双手位于<br>主键盘区，然后使用 C-p 、 C-b 、 C-f 和 C-n 这四个命令。它们的功能和方<br>向键是一样的，如下图所示：</p>\n<pre><code>                 上一行 C-p\n                      :\n                      :\n向左移 C-b .... 目前光标位置 .... 向右移 C-f\n                      :\n                      :\n                 下一行 C-n\n</code></pre><blockquote>\n<blockquote>\n<p>用 C-n 或 C-p 将光标移到上图的中央。<br>   按 C-l，整幅图会被显示在屏幕的中央。</p>\n</blockquote>\n</blockquote>\n<p>“P N B F”四个字母分别代表了四个词，用这四个词记忆这些组合键会更容易：<br>P 代表 previous（上一行），N 代表 next（下一行），B 代表 backward（回<br>退），而 F 则代表 forward（前进）。这些组合键今后将与你形影不离。</p>\n<blockquote>\n<blockquote>\n<p>按几次 C-n 把光标往下挪到这里。</p>\n<p>用 C-f 把光标移动到这一行，然后再用 C-p 往上挪。<br>   注意观察当光标在一行的中央时 C-p 命令的行为。</p>\n</blockquote>\n</blockquote>\n<p>每行文字都以一个“换行符”结束，“换行符”把行与行区分开来。（通常情况下，<br>一个文件的最后一行会有一个换行符，但是 Emacs 不强制要求这一点。）</p>\n<blockquote>\n<blockquote>\n<p>在一行的行头输入 C-b。<br>   光标应该会移动到前一行的行尾，因为光标在回退过程中越过了换行符。</p>\n</blockquote>\n</blockquote>\n<p>同样 C-f 也可以像 C-b 一样越过换行符。</p>\n<blockquote>\n<blockquote>\n<p>连按几次 C-b，感受一下光标的移动。<br>   然后按几次 C-f 回到本行的行尾。<br>   再按一次 C-f，光标会移动到下一行。</p>\n</blockquote>\n</blockquote>\n<p>当你移动光标穿越屏幕的上下边界时，在边界外的文字会移动到屏幕内，这称为<br>“滚动”（scrolling）。滚动使得光标可以被移动到文字中的任何位置，并且还<br>不会让光标跑到屏幕外边去。</p>\n<blockquote>\n<blockquote>\n<p>用 C-n 将光标下移，一直越过屏幕边界，同时观察发生了什么变化。</p>\n</blockquote>\n</blockquote>\n<p>如果你嫌一个字符一个字符地挪光标太慢，你还可以一个词一个词地跳。M-f<br>(META-f) 可以将光标往前移动一个词，而 M-b 则是往后移。【这里的“词”指<br>英文单词，对中文来说，则是指移动到下一个标点符号。】</p>\n<blockquote>\n<blockquote>\n<p>试试 M-f 和 M-b。</p>\n</blockquote>\n</blockquote>\n<p>如果光标停在一个词的中间，M-f 会移动到这个词的末尾。如果光标处于词与词<br>之间的空白处，M-f 会移动到下一个词的末尾。M-b 的功能类似，只是方向相反。</p>\n<blockquote>\n<blockquote>\n<p>按几次 M-f 和 M-b，中间夹杂一些 C-f 和 C-b。<br>   你可以观察到 M-f 和 M-b 在不同位置上所表现出来的不同行为。</p>\n</blockquote>\n</blockquote>\n<p>请注意 C-f 、C-b 和 M-f 、M-b 两对之间的类比关系。通常的惯例是：META 系<br>列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 CONTROL<br>系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。</p>\n<p>类似的惯例在“行”与“句子”之间也同样适用：C-a 和 C-e 可以将光标移动到<br>“一行”的头部和尾部；而 M-a 和 M-e 则将光标移动到“一句”的头部和尾部。</p>\n<blockquote>\n<blockquote>\n<p>按两次 C-a，再按两次 C-e。<br>   按两次 M-a，再按两次 M-e。</p>\n</blockquote>\n</blockquote>\n<p>想一想为什么重复的 C-a 命令会没有作用，而重复的 M-a 命令则会让光标不断<br>地回退到上一个句子。虽然这个类比规律并不严格，但是很自然。</p>\n<p>光标停留的位置也可以称作“点位”（point）。或者干脆说，光标指示出了屏幕<br>上“点位”在文本中的位置。</p>\n<p>这里对简单的光标移动命令做一个总结，其中也包括了整词和整句的移动：</p>\n<pre><code>C-f     向右移动一个字符\nC-b     向左移动一个字符\n\nM-f     向右移动一个词【对中文是移动到下一个标点符号】\nM-b     向左移动一个词【对中文是移动到上一个标点符号】\n\nC-n     移动到下一行\nC-p     移动到上一行\n\nC-a     移动到行首\nC-e     移动到行尾\n\nM-a     移动到句首\nM-e     移动到句尾\n</code></pre><blockquote>\n<blockquote>\n<p>把上面所有的命令都练习几次，这些可都是最常用的命令。</p>\n</blockquote>\n</blockquote>\n<p>这里还要介绍两个重要的光标移动命令：M-&lt; （META 小于号）可以将光标移动到<br>所有文字的最开头；M-&gt; （META 大于号）可以将光标移动到所有文字的最末尾。</p>\n<p>注意，在大部分键盘上，小于号（&lt;）需要用上档键（Shift）来输入，所以在这<br>些键盘上你应该用 Shift 键来输入 M-&lt;，如果不按 Shift 键，你输入的会是<br>M-comma（META 逗号）。</p>\n<blockquote>\n<blockquote>\n<p>试一试 M-&lt; ，移到本快速指南的最开始。<br>   然后再按几次 C-v 回到这里。</p>\n<p>试一试 M-&gt; ，移到本快速指南的最末尾。<br>   然后再按几次 M-v 回到这里。</p>\n</blockquote>\n</blockquote>\n<p>如果你的键盘上有方向键的话，也可以用它们来移动光标。不过我们有三个理由<br>推荐你学习 C-b 、C-f 、C-n 、和 C-p：（1）它们在任何键盘上都能用。（2）<br>当你熟练使用 Emacs 之后，你会发现用这些组合键比用方向键要快得多，因为你<br>的手不需要离开打字区。（3）一旦你习惯了使用这些组合键，你也可以很容易地<br>适应其它更高级的光标移动命令。</p>\n<p>大部分的 Emacs 命令接受数字参数，并且对于多数命令而言，这些数字参数的作<br>用是指定命令的重复次数。为一个命令指定数字参数（也就是重复次数）的方法<br>是：先输入 C-u，然后输入数字作为参数，最后再输入命令。如果你有META （或<br>EDIT 或 ALT）键，那么还有另一种办法：按住 META 键不放，然后输入数字。不<br>过我们还是建议你用 C-u，因为它在任何终端机上都能用。这种数字参数也称为<br>“前缀参数”，意思是说这个参数是先于使用它的命令而输入的。</p>\n<p>举例来说， C-u 8 C-f 会向前移动 8 个字符。</p>\n<blockquote>\n<blockquote>\n<p>为 C-n 或者 C-p 指定一个数字参数，这样你可以只用一个命令就把光标移动<br>   到本行的附近。</p>\n</blockquote>\n</blockquote>\n<p>虽然大部分命令把数字参数解释为其重复次数，但是也有些命令例外，它们将数<br>字参数另做它用。比如有些命令（我们目前还没学到）仅仅将前缀参数作为一个<br>标志――只要给出有一个前缀参数，不管其值为何，它都会改变命令的功能。</p>\n<p>而 C-v 和 M-v 则属于另一种类型的例外。当给定一个参数时，它们将滚动你指<br>定的“行数”，而不是“屏数”。举例来说，C-u 8 C-v 将文本向下滚动 8 行。</p>\n<blockquote>\n<blockquote>\n<p>现在试试看，输入 C-u 8 C-v。</p>\n</blockquote>\n</blockquote>\n<p>这个命令应该已经将文字向上滚动了 8 行。如果你想将它再次地向下滚动，你可<br>以给定一个参数然后执行 M-v。</p>\n<p>如果你正在使用图形界面，比如 X 或者微软的 Windows，那么在 Emacs窗<br>口的一边应该有一个长方形的区域叫“滚动条”。你可以用鼠标操纵滚动条来滚动<br>文字。</p>\n<p>如果你的鼠标有滚轮的话，你也可以使用滚轮来滚动。</p>\n<h2 id=\"如果-EMACS-失去响应（IF-EMACS-STOPS-RESPONDING）\"><a href=\"#如果-EMACS-失去响应（IF-EMACS-STOPS-RESPONDING）\" class=\"headerlink\" title=\"* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）\"></a>* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）</h2><p>如果 Emacs 对你的命令失去响应，你可以用 C-g 来安全地终止这条命令。C-g<br>也可以终止一条执行过久的命令。</p>\n<p>C-g 还可以取消数字参数和只输入到一半的命令。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-u 100 设定一个值为 100 的数字参数，然后按 C-g。<br>   现在再按 C-f，光标应该只会移动一个字符，因为你已经用 C-g 取消了参数。</p>\n</blockquote>\n</blockquote>\n<p>如果你不小心按了一下 <ESC>，你也可以用 C-g 来取消它。<br>【这个说法似乎有问题，因为按照这个按键顺序输入的应该是 C-M-g。<br>  取消 <ESC> 的正确做法是再连按两次 <ESC>。】</p>\n<h2 id=\"被禁用的命令（DISABLED-COMMANDS）\"><a href=\"#被禁用的命令（DISABLED-COMMANDS）\" class=\"headerlink\" title=\"* 被禁用的命令（DISABLED COMMANDS）\"></a>* 被禁用的命令（DISABLED COMMANDS）</h2><p>有一些 Emacs 命令被“禁用”了，以避免初学者在不了解其确切功能的情况下误<br>用而造成麻烦。</p>\n<p>如果你用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令<br>到底是干什么的，询问你是否要继续，并在得到你的肯定之后再执行这命令。</p>\n<p>如果你真的想用这条命令，在 Emacs 询问你的时候应该按空格。一般来说，如果<br>你不想用，就按“n”。</p>\n<blockquote>\n<blockquote>\n<p>试试 C-x C-l （这是一个被禁用的命令）<br>   然后用 n 来回答询问。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"窗格（WINDOWS）\"><a href=\"#窗格（WINDOWS）\" class=\"headerlink\" title=\"* 窗格（WINDOWS）\"></a>* 窗格（WINDOWS）</h2><p>Emacs 可以有多个“窗格”，每个窗格显示不同的文字。后面会介绍怎么对付多个窗<br>格，现在我们先学会如何关掉多余的窗格。其实也很简单：</p>\n<pre><code>C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。\n</code></pre><p>也就是先按 CONTROL-x 然后再按 1。C-x 1 会保留光标所在的窗格，并将其扩大<br>到整个屏幕，同时关掉所有其它的窗格。</p>\n<blockquote>\n<blockquote>\n<p>把光标移到本行然后输入 C-u 0 C-l。</p>\n<p>输入 C-h k C-f。观察当一个新窗格出现时当前窗格（用来显示<br>   C-f 命令的文档）是如何缩小的。</p>\n<p>输入 C-x 1 关掉文档窗格。</p>\n</blockquote>\n</blockquote>\n<p>有一系列命令是以 CONTROL-x 开始的，这些命令许多都跟“窗格、文件、缓冲区<br>【缓冲区（buffer）会在后文详细介绍】”等等诸如此类的东西有关，其中有些<br>命令可能包含了 2 个、3 个或者 4 个字符。</p>\n<h2 id=\"插入与删除（INSERTING-AND-DELETING）\"><a href=\"#插入与删除（INSERTING-AND-DELETING）\" class=\"headerlink\" title=\"* 插入与删除（INSERTING AND DELETING）\"></a>* 插入与删除（INSERTING AND DELETING）</h2><p>插入文字很简单，直接敲键盘就可以了。普通的字符，比如 A、7、* 等等，会<br>随着你的输入而插入。要插入一个换行符，输入 <Return>（这个键在键盘上有<br>时会被标注成“Enter”）。</p>\n<p>你可以用 <DEL> 来删除光标左边的字符，这个键通常被标注为“Backspace”――跟<br>你在 Emacs 之外的用法应该一样，删除最后一个输入的字符。</p>\n<p>你的键盘上可能有另外一个键，标注着 <Delete>，但那个不是我们所说的 <DEL>。</p>\n<blockquote>\n<blockquote>\n<p>现在就来试试――敲点字，然后按几下 <DEL> 删除它们。<br>   不用担心文件被修改，你做什么都没关系，这里就是专给你练习用的。</p>\n</blockquote>\n</blockquote>\n<p>如果一行文字很长、超出了窗格的宽度，显示不下的部分会在紧邻的下一行继续<br>显示。如果你使用的是图形界面，文本区域两边的狭窄区域（左右“边缘”）会出<br>现小小的转弯箭头，表明这是某一行的接续显示。如果你使用的是文本终端，接<br>续显示由屏幕最右边一列的一个反斜线（“\\”）来表示。</p>\n<blockquote>\n<blockquote>\n<p>输入文字，一直到屏幕的右边界，然后继续。<br>你会看到一个接续行出现。</p>\n<p>用 <DEL> 删掉一些文字，直到此行长度小于窗格宽度，接续行就消失了。</p>\n</blockquote>\n</blockquote>\n<p>换行符跟其它字符一样可以被删除。两行中间的换行符被删除后，这两行将会合<br>并成一行。如果合并后的这一行太长，超出了窗格宽度，它就会以一个接续行来<br>显示。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到某行的开头并输入 <DEL>。<br>   这时该行将与其前一行一起被合并为一行。</p>\n<p>输入 <Return> 重新插入你刚才删除的换行符。</p>\n</blockquote>\n</blockquote>\n<p><Return> 是一个特殊的键，因为按下这个键后，得到的可能不仅仅是一个换行<br>符。根据周围文本的不同，Emacs 可能会在换行符之后插入一些空白字符，这样，<br>当你在新的一行开始打字时，文本会自动与前一行对齐。</p>\n<blockquote>\n<blockquote>\n<p>这是一个自动缩进的例子。<br>   在这一行的末尾输入 <Return>。</p>\n</blockquote>\n</blockquote>\n<p>可以看到，在插入换行符之后，Emacs 插入了空格，因此光标移动到了“在”这个<br>字的下面。</p>\n<p>前面讲过，大部分的 Emacs 命令都可以指定重复次数，这其中也包括输入字符的<br>命令。重复执行输入字符的命令实际上就是输入多个相同的字符。</p>\n<blockquote>\n<blockquote>\n<p> 试试 C-u 8 <em>，这将会插入 <strong><em>*</em></strong></em>。</p>\n</blockquote>\n</blockquote>\n<p>好，现在你应该已经掌握了最基本的的文本插入和修改功能，其实删除还可以<br>“以词为单位”进行，下面是一个关于“删除”操作的小结：</p>\n<pre><code>&lt;DEL&gt;        删除光标前的一个字符\nC-d          删除光标后的一个字符\n\nM-&lt;DEL&gt;      移除光标前的一个词\nM-d          移除光标后的一个词\n\nC-k          移除从光标到“行尾”间的字符\nM-k          移除从光标到“句尾”间的字符\n</code></pre><p>【可能你已经注意到了“删除（delete）”和“移除（kill）”的用词区别，后<br>文会有详细说明。】</p>\n<p>注意“<DEL> 和 C-d”还有“M-<DEL> 和 M-d”是根据前述惯例从 C-f和 M-f 衍生<br>出来的（其实<DEL>不是控制字符，我们先忽略这一点）。C-k和 M-k 的关系在<br>某种程度上与 C-e 和 M-e 一样――如果把“一行”和“一句”作一个类比的话。</p>\n<p>你也可以用一种通用的办法来移除缓冲区里的任何一部分：首先把光标移动到你<br>想要移除的区域的一端，然后按 C-<SPC>（<SPC>指空格）【注意，C-<SPC> 往<br>往被中文用户设定成输入法热键，如果这样，C-<SPC> 就被系统拦截而无法传递<br>给 Emacs 了，在这种情况下可以使用C-@。】，然后将光标移动到你准备移除的<br>文字的另一端。这个时候， Emacs 会高亮光标和你按下 C-<SPC> 之间的文本。<br>最后，按下 C-w 。这样就可以把位于这两点之间的所有文字移除了。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到上一段开头的“你”字。<br>输入 C-<SPC> 。Emacs 应该会在屏幕的下方显示一个“Mark set”的消息。<br>移动光标到第二行中的“端”字。<br>输入 C-w，从“你”开始到“端”之前的文字被全部移除。</p>\n</blockquote>\n</blockquote>\n<p>注意,“移除（kill）”和“删除（delete）”的不同在于被移除的东西可以被重新<br>插入（在任何位置），而被删除的就不能使用相同的方法重新插入了（不过可以<br>通过撤销一个删除命令来做到，后文会提到）。【实际上，移除掉的东西虽然看<br>起来“消失”了，但实际上被 Emacs 记录了下来，因此还可以找回来；而删除掉<br>的东西虽然也可能还在内存里，但是已经被 Emacs“抛弃”了，所以就找不回来<br>了。】重新插入被移除的文字称为“召回（yank）”。一般而言，那些可能消除很<br>多文字的命令会把消除掉的文字记录下来（它们被设定成了“可召回”），而那些<br>只消除一个字符或者只消除空白的命令就不会记录被消除的内容（自然你也就无<br>法召回了）。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到一非空白行的行头，然后输入 C-k 移除那一行上的文字。</p>\n<p>再次 C-k，你可以看到它移除了跟在那一行后面的换行符。</p>\n</blockquote>\n</blockquote>\n<p>注意，单独的 C-k 会把一行的内容移除，而第二个 C-k 则会移除换行符，并使<br>其后所有的行都向上移动。C-k 处理数字参数的方式很特别，它会把参数指定的<br>那么多行连同其后的换行符一起移除，而不仅仅是重复 C-k 而已。比如 C-u 2<br>C-k 会把两行以及它们的换行符移除；而如果只是输入 C-k 两次显然不是这个结<br>果。</p>\n<p>重新插入被移除的文字恢复的动作称为“召回（yanking）”。（就好像把别人从你身边<br>移走的东西又猛力地拉回来。）你可以在你删除文字的地方召回，也可以在别的<br>地方召回，还可以多次召回同样的文字以得到它的多个拷贝。很多其它的编辑器<br>把移除和召回叫做“剪切”和“粘贴” （详情可见 Emacs 使用手册里的术语表）。</p>\n<p>召回的命令是 C-y。它会在光标所在处插入你最后移除的文字。</p>\n<blockquote>\n<blockquote>\n<p>试试看，输入 C-y 将文字召回。</p>\n</blockquote>\n</blockquote>\n<p>如果你一次连按了好几下 C-k，那么所有被移除的行会被存储在一起，只要一个<br>C-y 就可以把它们都召回。</p>\n<blockquote>\n<blockquote>\n<p>在这里试试，连续按几次 C-k。</p>\n</blockquote>\n</blockquote>\n<p>现在再来恢复刚刚被我们移除的文字：</p>\n<blockquote>\n<blockquote>\n<p>按 C-y。然后把光标往下移动几行，再按一次 C-y。<br>   现在你应该知道怎么复制文字了。</p>\n</blockquote>\n</blockquote>\n<p>C-y 可以召回最近一次移除的内容，那如何召回前几次移除的内容呢？它们当然<br>没有丢，你可以用 M-y 来召回它们。在用 C-y 召回最近移除的文字之后，紧接<br>着再按 M-y 就可以召回再前一次被移除的内容，再按一次 M-y 又可以召回再上<br>一次的……连续使用 M-y 直到找到你想要召回的东西，然后什么也不用做，继续<br>编辑就行了。</p>\n<p>如果连续按 M-y 很多次，你可能会回到起始点，也就是最近移除的文字。<br>【看得出这实际上是一个环。】</p>\n<blockquote>\n<blockquote>\n<p>移除一行，移动一下光标，然后再移除另外一行。<br>   按 C-y 将第二次移除的那行召回来。<br>   紧接着再按 M-y，它将会被第一次移除的那行取代。<br>   试着再按几下 M-y 看看会发生什么。<br>   再继续，直到第二行被召回来，然后再做个几次。<br>   如果感兴趣，你可以试着给 M-y 指定一个正的或负的参数。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"撤销（UNDO）\"><a href=\"#撤销（UNDO）\" class=\"headerlink\" title=\"* 撤销（UNDO）\"></a>* 撤销（UNDO）</h2><p>如果你修改了一段文字，又觉得改得不好，可以用 undo 命令进行撤销：C-/。</p>\n<p>通常 C-/ 会消除一个命令所造成的所有改变；如果你在一行中连续多次地使用<br>C-/，你会把以前的命令也依次撤销。</p>\n<p>但是有两个例外：<br>1） 没有改变文字的命令不算（包括光标移动命令和滚动命令）<br>2） 从键盘输入的字符以组为单位――每组最多 20 个字符――来进行处理。<br>    （这是为了减少你在撤销“插入文字”动作时需要输入 C-/ 的次数）</p>\n<blockquote>\n<blockquote>\n<p>用 C-k 将这一行移除，然后输入 C-/ ，它会再次出现。</p>\n</blockquote>\n</blockquote>\n<p>C-<em> 也是撤销命令；它的作用跟 C-/ 一样，但是它比较容易多次输入。在<br>某些终端上，输入 C-/ 实际上向 Emacs 发送的是 C-</em> 。<br>另外， C-x u 和 C-/ 完全一样，但是按起来有些麻烦。</p>\n<p>数字参数对于 C-/ 、 C-_ 和 C-x u 的意义是执行撤销的重复次数。</p>\n<h2 id=\"文件（FILE）\"><a href=\"#文件（FILE）\" class=\"headerlink\" title=\"* 文件（FILE）\"></a>* 文件（FILE）</h2><p>想保存工作成果就要记得存盘，否则一旦退出 Emacs 你编辑的文字就会丢失。要<br>存盘，就要在编辑前“寻找”到一个存盘文件。（这个过程通常也被称为“访问”<br>文件。）</p>\n<p>寻找到一个文件意味着你可以在 Emacs 里查看这个文件的内容。从许多角度看，<br>这就等于你在直接编辑这个文件，只是你所做的修改只有在“存盘”的时候才会<br>被写入文件。也正因为如此，你可以丢弃一个写到一半的文件而不必把这个残缺<br>文件也保存到计算机上。在存盘的时候，Emacs 会把存盘前的文件重命名保存，<br>以防你改完之后又想反悔。</p>\n<p>在屏幕的下方，你应该能够看到头部有短线“-”的一行，行首通常是一些诸如“<br>-:— TUTORIAL.cn”的文字，这些文字代表了你当前正在访问的文件。比如你现<br>在正在访问的文件是对 Emacs 快速指南的一份临时拷贝，叫做“TUTORIAL.cn”。<br>每当Emacs 寻找到一个文件，文件名就会出现在这个位置。</p>\n<p>寻找文件的命令有一个特点，那就是你必须给出文件名。我们称这个命令“读入<br>了一个参数”（在这里，这个参数显然就是文件名）。在你输入这条命令之后：</p>\n<pre><code>C-x C-f   寻找一个文件\n</code></pre><p>Emacs 会提示你输入文件名。你输入的文件名会出现在屏幕最底端的一行，这一<br>行被称为小缓冲（minibuffer），在小缓冲里你可以使用通常的 Emacs 编辑命令<br>来编辑文件名。</p>\n<p>在小缓冲里输入文件名（其实输入其它东西也一样）时可以用 C-g 取消。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x C-f，然后输入 C-g<br>   这会关掉小缓冲，同时也会取消使用小缓冲的 C-x C-f 命令。<br>   当然了，你也没有找任何文件。</p>\n</blockquote>\n</blockquote>\n<p>用 <Return> 结束文件名的输入。之后，小缓冲会消失，C-x C-f 将会去寻找你<br>指定的文件。小缓冲在 C-x C-f 命令结束之后也会消失。</p>\n<p>文件被显示在了屏幕上，你可以开始编辑了。存盘用这条命令：</p>\n<pre><code>C-x C-s   储存这个文件\n</code></pre><p>这条命令把 Emacs 中的文字存储到文件中。第一次存盘的时候 Emacs 会将原文<br>件重命名以备份。重命名的规则通常是在原文件名之后添加一个“~”字符。<br>【对许多人来说，这是一个烦人的特性，关掉文件备份可以用如下命令：<br>  M-x customize-variable <Return> make-backup-files <Return>】</p>\n<p>存盘结束后，Emacs 会显示写入文件的文件名。你最好养成经常存盘的习惯，这<br>可以减少系统崩溃和死机给你带来的损失（也可参见下面的“自动保存”一节）。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x C-s TUTORIAL.cn <Return> 。<br>   这将会把该指南保存为一个名为 TUTORIAL.cn 的文件，并且在屏幕的下方显<br>   示一条消息：“Wrote …TUTORIAL.cn”。</p>\n</blockquote>\n</blockquote>\n<p>你不但可以寻找一个已有的文件来查看或编辑，还可以寻找一个不存在的文件。<br>实际上这正是 Emacs 创建新文件的方法：找到不存在的新文件。事实上，只有<br>在存盘的时候，Emacs 才会真正创建这个文件。而在这之后的一切就跟编辑一个<br>已有文件没有区别了。</p>\n<h2 id=\"缓冲区（BUFFER）\"><a href=\"#缓冲区（BUFFER）\" class=\"headerlink\" title=\"* 缓冲区（BUFFER）\"></a>* 缓冲区（BUFFER）</h2><p>你可以用 C-x C-f 找到并打开第二个文件，但第一个文件仍然在 Emacs 中。要<br>切回第一个文件，一种办法是再用一次 C-x C-f。这样，你就可以在 Emacs 中同<br>时打开多个文件。</p>\n<p>Emacs 把每个编辑中的文件都放在一个称为“缓冲区（buffer）”的地方。每寻<br>找到一个文件，Emacs 就在其内部开辟一个缓冲区。用下面的命令可以列出当前<br>所有的缓冲区：</p>\n<pre><code>C-x C-b   列出缓冲区\n</code></pre><blockquote>\n<blockquote>\n<p>现在就试一下 C-x C-b</p>\n</blockquote>\n</blockquote>\n<p>观察一下缓冲区是如何被命名的，它很可能跟与其对应的文件同名。实际上，一<br>个 Emacs 窗格里的任何文字都是某个缓冲区的一部分。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x 1 离开缓冲区列表</p>\n</blockquote>\n</blockquote>\n<p>不管存在多少缓冲区，任何时候都只能有一个“当前”缓冲区，也就是你正在编<br>辑的这个。如果你想编辑其它的缓冲区，就必须“切换”过去。上面讲过，用<br>C-x C-f 是一种办法。不过还有一个更简单的办法，那就是用 C-x b。用这条命<br>令，你必须输入缓冲区的名称。</p>\n<blockquote>\n<blockquote>\n<p>通过输入 C-x C-f foo <Return> 创建一个名为“foo”的文件。<br>   然后输入 C-x b TUTORIAL.cn <Return> 回到这里。</p>\n</blockquote>\n</blockquote>\n<p>大多数情况下，缓冲区与跟其对应的文件是同名的（不包括目录名），不过这也<br>不是绝对的。用 C-x C-b 得到的缓冲区列表总是显示缓冲区名。</p>\n<p>缓冲区未必有对应文件。显示缓冲区列表的缓冲区（叫做“<em>Buffer List</em>”）就<br>是这样。这个 TUTORIAL.cn 缓冲区起初没有对应的文件，但是现在有了，因为<br>在前一节你输入了 C-x C-s ， 将它保存成了一个文件。</p>\n<p>“<em>Messages</em>”缓冲区也没有对应文件，这个缓冲区里存放的都是在 Emacs 底部<br>出现的消息。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x b <em>Messages</em> <Return> 瞅瞅消息缓冲区里都有什么东西。<br>   然后再输入 C-x b TUTORIAL.cn <Return> 回到这里。</p>\n</blockquote>\n</blockquote>\n<p>如果你对某个文件做了些修改，然后切换到另一个文件，这个动作并不会帮你把<br>前一个文件存盘。对第一个文件的修改仍然仅存在于 Emacs 中，也就是在它对<br>应的缓冲区里。并且，对第二个文件的修改也不会影响到第一个文件。这很有用，<br>但也意味着你需要一个简便的办法来保存第一个文件的缓冲区。先切换回那个缓<br>冲区，再用 C-x C-s 存盘，太麻烦了。你需要一个更简便的方法，而 Emacs 已<br>经为你准备好了：</p>\n<pre><code>C-x s   保存多个缓冲区\n</code></pre><p>C-x s 会找出所有已被修改但尚未存盘的缓冲区，然后向你逐个询问：是否需要<br>存盘？</p>\n<blockquote>\n<blockquote>\n<p>插入一行文字，然后输入 C-x s。<br>   它应该会问你，是否要储存名为 TUTORIAL.cn 的缓冲区？<br>   按“y”告诉它你想存盘。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"命令集扩展（EXTENDING-THE-COMMAND-SET）\"><a href=\"#命令集扩展（EXTENDING-THE-COMMAND-SET）\" class=\"headerlink\" title=\"* 命令集扩展（EXTENDING THE COMMAND SET）\"></a>* 命令集扩展（EXTENDING THE COMMAND SET）</h2><p>Emacs 的命令就像天上的星星，数也数不清。把它们都对应到 CONTROL 和 META<br>组合键上显然是不可能的。Emacs 用扩展（eXtend）命令来解决这个问题，扩展<br>命令有两种风格：</p>\n<pre><code>C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。\nM-x     命令名扩展。M-x 之后输入一个命令名。\n</code></pre><p>很多扩展命令都相当有用，虽然与你已经学过的命令比起来，他们可能不那么常<br>用。我们早已经见过一些扩展命令了，比如用 C-x C-f 寻找文件和用 C-x C-s<br>保存文件；退出 Emacs 用的 C-x C-c 也是扩展命令。（不用担心退出 Emacs 会<br>给你带来什么损失，Emacs 会在退出之前提醒你存盘的。）</p>\n<p>如果你使用图形界面，你不需要任何特殊的命令来切换 Emacs 和其他应用程序。<br>你可以使用鼠标或者窗口管理器的命令。然而，如果你使用只能同时显示一个应<br>用程序的文本终端，你需要“挂起” Emacs ，以切换到其他的应用程序。</p>\n<p>C-z 可以暂时离开 Emacs――当然，你还可以再回来。在允许 C-z 的系统中，C-z<br>会把 Emacs“挂起”，也就是说，它会回到 shell但不杀死 Emacs 的进程。在常<br>用的 shell 中，通常可以用“fg”或者“%emacs”命令再次回到 Emacs 中。</p>\n<p>你最好在打算退出登陆的时候再用 C-x C-c。在把 Emacs 当做一个临时的编辑<br>器的时候（比如被一个邮件处理程序调用），也可以用 C-x C-c 退出。</p>\n<p>C-x 的扩展命令有很多，下面列出的是你已经学过的：</p>\n<pre><code>C-x C-f         寻找文件。\nC-x C-s         保存文件。\nC-x C-b         列出缓冲区。\nC-x C-c         离开 Emacs。\nC-x 1           关掉其它所有窗格，只保留一个。\nC-x u           撤销。\n</code></pre><p>用命令名扩展的命令通常并不常用，或只用在部分模式下。比如<br>replace-string（字符串替换）这个命令，它会把一个字符串替换成另一个。在<br>输入 M-x 之后，Emacs 会在屏幕底端向你询问并等待你输入命令名。如果你想<br>输入“replace-string”，其实只需要敲“repl s<TAB>”就行了，Emacs 会帮你自<br>动补齐。输入完之后按 <Return> 提交。</p>\n<p>字符串替换命令需要两个参数――被替换的字符串和用来替换它的字符串。每个<br>参数的输入都以换行符来结束。</p>\n<blockquote>\n<blockquote>\n<p>将光标移到本行下面第二行的空白处，然后输入<br>   M-x repl s<Return>changed<Return>altered<Return>。</p>\n</blockquote>\n</blockquote>\n<p>   【以下保留一行原文，以应练习之需：】<br>   Notice how this line has changed: you’ve replaced…</p>\n<p>请注意这一行的变化：在光标之后的范围内，你已经将“changed”这个词――不<br>论它在哪里出现――全部用“altered”替换掉了。</p>\n<h2 id=\"自动保存（AUTO-SAVE）\"><a href=\"#自动保存（AUTO-SAVE）\" class=\"headerlink\" title=\"* 自动保存（AUTO SAVE）\"></a>* 自动保存（AUTO SAVE）</h2><p>如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你<br>所做的修改就很可能会丢失。为了避免这样的不幸发生，Emacs 会定期将正在编<br>辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个<br>“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫<br>“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。</p>\n<p>所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保<br>存文件）然后输入 M-x recover file <Return> 来恢复你的自动保存文件。在<br>提示确认的时候，输入 yes<Return>。</p>\n<h2 id=\"回显区（ECHO-AREA）\"><a href=\"#回显区（ECHO-AREA）\" class=\"headerlink\" title=\"* 回显区（ECHO AREA）\"></a>* 回显区（ECHO AREA）</h2><p>如果 Emacs 发现你输入多字符命令的节奏很慢，它会在窗格的下方称为“回显区”<br>的地方给你提示。回显区位于屏幕的最下面一行。</p>\n<h2 id=\"状态栏（MODE-LINE）\"><a href=\"#状态栏（MODE-LINE）\" class=\"headerlink\" title=\"* 状态栏（MODE LINE）\"></a>* 状态栏（MODE LINE）</h2><p>位于回显区正上方的一行被称为“状态栏”。状态栏上会显示一些信息，比如：</p>\n<p> -:**- TUTORIAL.cn 63% L749 (Fundamental)</p>\n<p>状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息。</p>\n<p>你应该知道文件名的意思吧？就是你找到的那个文件嘛。-NN%– 显示的是光标在<br>全文中的位置。如果位于文件的开头，那么就显示 –Top– 而不是 –00%–；如<br>果位于文件的末尾，就显示 –Bot–。如果文件很小，一屏就足以显示全部内容，<br>那么状态栏会显示 –All–。</p>\n<p>“L” 和其后的数字给出了光标所在行的行号。</p>\n<p>最开头的星号（*）表示你已经对文字做过改动。刚刚打开的文件肯定没有被改动<br>过，所以状态栏上显示的不是星号而是短线（-）。</p>\n<p>状态栏上小括号里的内容告诉你当前正在使用的编辑模式。缺省的模式是<br>Fundamental，就是你现在正在使用的这个。它是一种“主模式”。</p>\n<p>Emacs 的主模式林林总总。有用来编辑程序代码的――比如 Lisp 模式；也有用<br>来编辑各种自然语言文本的――比如 Text 模式。任何情况下只能应用一个主模<br>式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方。</p>\n<p>主模式通常会改变一些命令的行为。比方说，不管编辑什么语言的程序代码，你<br>都可以用一个相同的命令来添加注释。但是在不同的语言中注释的语法往往是不<br>同的，这时不同的主模式就会用各自不同的语法规则来添加注释。主模式都是可<br>以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental<br>模式。</p>\n<p>编辑自然语言文本――比如现在――应该用 Text 模式。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x text-mode <Return>。</p>\n</blockquote>\n</blockquote>\n<p>别担心，什么都没变。不过细心一些可以发现，M-f 和 M-b 现在把单引号（’）<br>视为词的一部分了。而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号<br>视为分隔单词的符号。</p>\n<p>主模式通常都会搞一些类似的小动作，因为很多命令其实完成的是“相同的工<br>作”，只是在不同环境下会有不同的工作方式而已。【所谓“求同存异”，在<br>Emacs 里得到了很好的体现】</p>\n<p>用 C-h m 可以查看当前主模式的文档。</p>\n<blockquote>\n<blockquote>\n<p>把光标移动到下一行。<br>用 C-l C-l 将本行带到屏幕的最上方。<br>输入 C-h m，看看 Text 模式与 Fundamental 模式有哪些不同。<br>输入 C-x 1 关掉文档窗格。</p>\n</blockquote>\n</blockquote>\n<p>主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minor<br>mode）存在。辅模式并不能替代主模式，而是提供一些辅助的功能。每个辅模式<br>都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关。所以你可以不<br>使用辅模式，也可以只使用一个或同时使用多个辅模式。</p>\n<p>有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文本<br>的时候。启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行。</p>\n<p>用 M-x auto-fill-mode <Return> 启动自动折行模式。再用一次这条命令，自<br>动折行模式会被关闭。也就是说，如果自动折行模式没有被开启，这个命令会开<br>启它；如果已经开启了，这个命令会关闭它。所以我们说，这个命令可以用来<br>“开关（toggle）”模式。</p>\n<blockquote>\n<blockquote>\n<p>现在输入 M-x auto-fill-mode <Return>。然后随便敲点什么，直到你看到它<br>   分成两行。你必须敲一些空格，因为 Auto Fill 只在空白处进行断行。<br>   【输入空格对英文来说是必须的，而对中文则不必。】</p>\n</blockquote>\n</blockquote>\n<p>行边界通常被设定为 70 个字符【这里指英文字符】，你可以用 C-x f 命令配合<br>数字参数来重新设定它。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x f 并传递参数 20： C-u 2 0 C-x f。<br>   然后输入一些文字，观察 Emacs 的自动折行动作<br>   最后再用 C-x f 将边界设回 70。</p>\n</blockquote>\n</blockquote>\n<p>如果你在段落的中间做了一些修改，那么自动折行模式不会替你把整个段落重新<br>折行，你需要用 M-q 手动折行。注意，光标必须位于你需要折行的那一段里。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到前一段中，然后输入 M-q。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"搜索（SEARCHING）\"><a href=\"#搜索（SEARCHING）\" class=\"headerlink\" title=\"* 搜索（SEARCHING）\"></a>* 搜索（SEARCHING）</h2><p>Emacs 可以向前或向后搜索字符串（“字符串”指的是一组连续的字符）。搜索命<br>令是一个移动光标的命令：搜索成功后，光标会停留在搜索目标出现的地方。</p>\n<p>Emacs 的搜索命令是“渐进的（incremental）”。意思是搜索与输入同时进行：<br>你在键盘上一字一句地输入搜索词的过程中，Emacs 就已经开始替你搜索了。</p>\n<p>C-s 是向前搜索，C-r 是向后搜索。不过手别这么快！别着急试。</p>\n<p>在按下 C-s 之后，回显区里会有“I-search”字样出现，表明目前 Emacs 正处<br>于“渐进搜索”状态，并等待你输入搜索字串。按 <Return> 可以结束搜索。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-s 开始一个搜索。注意敲慢一点，一次输入一个字符。<br>   慢慢输入“cursor”这个词，每敲一个字都停顿一下并观察光标。<br>   现在你应该已曾经找到“cursor”这个词了。<br>再按一次 C-s，搜索下一个“cursor”出现的位置。<br>现在按四次 <DEL> ，看看光标是如何移动的。<br>敲 <Return> 结束搜索。</p>\n</blockquote>\n</blockquote>\n<p>看仔细了么？在一次渐进式搜索中，Emacs 会尝试跳到搜索目标出现的位置。要<br>跳到下一个命中位置，就再按一次 C-s。如果找不到目标，Emacs 会发出“哔”<br>的一声，告诉你搜索失败。在整个过程中，都可以用 C-g 来终止搜索。【你会发<br>现 C-g 会让光标回到搜索开始的位置，而 <Return> 则让光标留在搜索结果上，<br>这是很有用的功能。】</p>\n<p>在渐进式搜索中，按 <DEL> 会“撤回”到最近一次搜索的命中位置。如果之前没<br>有一个命中， <DEL> 会抹去搜索字符串中的最后一个字符。比如你已经输入了<br>“c”，光标就停在“c”第一次出现的位置，再输入“u”，光标停在“cu”第一次出现<br>的位置，这时再按 <DEL> ，“u”就从搜索字串中消失了，然后光标会回到“c”第<br>一次出现的位置。</p>\n<p>另外，如果你在搜索的时候输入了 control 或者 meta 组合键的话，搜索可能会<br>结束。（也有例外，比如 C-s 和 C-r 这些用于搜索的命令。）</p>\n<p>前面说的都是“向下”搜索，如果想“向上”搜索，可以用 C-r。C-r 与 C-s<br>相比除了搜索方向相反之外，其余的操作都一样。</p>\n<h2 id=\"多窗格（MULTIPLE-WINDOWS）\"><a href=\"#多窗格（MULTIPLE-WINDOWS）\" class=\"headerlink\" title=\"* 多窗格（MULTIPLE WINDOWS）\"></a>* 多窗格（MULTIPLE WINDOWS）</h2><p>Emacs 的迷人之处很多，能够在屏幕上同时显示多个窗格就是其中之一。</p>\n<blockquote>\n<blockquote>\n<p>移动光标到这一行，然后输入 C-l C-l。</p>\n<p>现在输入 C-x 2，它会将屏幕划分成两个窗格。<br>   这两个窗格里显示的都是本篇快速指南，而光标则停留在上方的窗格里。</p>\n<p>试试用 C-M-v 滚动下方的窗格。<br>   （如果你并没有 META 键，用 ESC C-v 也可以。）<br>   【向上滚动是 C-M-S-v，也就是同时按住 CONTROL、META 和 SHIFT 再按 v】</p>\n<p>输入 C-x o（“o”指的是“其它（other）”），<br>   将光标转移到下方的窗格。</p>\n<p>在下方的窗格中，用 C-v 和 M-v 来滚动。<br>   同时继续在上方的窗格里阅读这些指导。</p>\n<p>再输入 C-x o 将光标移回到上方的窗格里。<br>   光标会回到它在上方窗格中原本所在的位置。</p>\n</blockquote>\n</blockquote>\n<p>连续使用 C-x o 可以遍历所有窗格。“被选中的窗格”，也就是绝大多数的编辑<br>操作所发生的地方，是在你不打字时闪烁光标的那个窗格。其他的窗格有它们自<br>己的光标位置； 如果你在图形界面下运行 Emacs ，这些光标是镂空的长方形。</p>\n<p>当你在一个窗格中编辑，但用另一个窗格作为参考的时候，C-M-v 是很有用的命<br>令。无需离开被选中的窗格，你就可以用 C-M-v 命令滚动另外一个窗格中的文<br>字。【比如翻译和校对就很适合用这种方式进行。】</p>\n<p>C-M-v 是一个 CONTROL-META 组合键。如果你有 META （或 Alt）键的话，可以<br>同时按住CONTROL 和 META 键并输入 v。CONTROL 和 META 键先按哪个都可以，<br>因为它们只是用来“修饰（modify）”你输入的字符的。</p>\n<p>如果你并没有 META 键，你也可以用 ESC 来代替，不过这样的话就要注意按键顺<br>序了：你必须先输入 ESC ，然后再输入 CONTROL-v。CONTROL-ESC v 是没用的，<br>因为 ESC 本身是一个字符键，而不是一个修饰键（modifier key）。</p>\n<blockquote>\n<blockquote>\n<p>（在上方窗格里）输入 C-x 1 关掉下方窗格。</p>\n</blockquote>\n</blockquote>\n<p>（如果你在下方的窗格里输入 C-x 1，那么就会关掉上方的窗格。你可以把这个<br>命令看成是“只保留一个窗格”――就是我们正在编辑的这个。）</p>\n<p>不同的窗格可以显示不同的缓冲区。如果你在一个窗格里用 C-x C-f 打开了一个<br>文件，另一个窗格并不会发生什么变化。任何一个窗格里都可以用来打开文件。</p>\n<p>用下面的方法可以在一个新开窗格里打开文件：</p>\n<blockquote>\n<blockquote>\n<p>输入 C-x 4 C-f，紧跟着输入一个文件名，再用 <Return> 结束。<br>   可以看到你指定的文件出现在下方的窗格中，同时光标也跳到了那里。</p>\n<p>输入 C-x o 回到上方的窗格，然后再用 C-x 1 关掉下方窗格。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"多窗口（MULTIPLE-FRAMES）\"><a href=\"#多窗口（MULTIPLE-FRAMES）\" class=\"headerlink\" title=\"* 多窗口（MULTIPLE FRAMES）\"></a>* 多窗口（MULTIPLE FRAMES）</h2><p>Emacs 可以创建多个窗口。窗口由许多窗格以及菜单、滚动条、回显区等组成。<br>在图形界面下，多个窗口可以同时显示出来。在文本终端中，只能同时显示一个<br>窗口。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x make-frame <Return>。<br> 可以看到一个新的窗口出现在了你的屏幕上。</p>\n</blockquote>\n</blockquote>\n<p>你可以在新的窗口里做最初的窗口里可以做的任何事情。第一个窗口没有什么特<br>别的。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x delete-frame <Return>.<br> 这个命令将会关闭选中的窗口。</p>\n</blockquote>\n</blockquote>\n<p>你也可以通过图形系统来关闭某个窗口（通常是在窗口上面的某个角落里的一个<br>“X”按钮）。如果你关闭的是 Emacs 进程的最后一个窗口， Emacs 将会退出。</p>\n<h2 id=\"递归编辑（RECURSIVE-EDITING-LEVELS）\"><a href=\"#递归编辑（RECURSIVE-EDITING-LEVELS）\" class=\"headerlink\" title=\"* 递归编辑（RECURSIVE EDITING LEVELS）\"></a>* 递归编辑（RECURSIVE EDITING LEVELS）</h2><p>有时候你会进入所谓的“递归编辑”。递归编辑状态由位于状态栏的方括号所指<br>示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到<br>[(Fundamental)]，而不是 (Fundamental)。【比如在用 M-% 进行交互式替换的<br>时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模式，<br>这就是所谓的递归编辑。】</p>\n<p>离开递归编辑可以用 ESC ESC ESC。这是一个最通用的“离开”命令，你甚至可<br>以使用它来关掉多余的窗格，或者离开小缓冲。</p>\n<blockquote>\n<blockquote>\n<p>输入 M-x 进入小缓冲；然后输入 ESC ESC ESC 离开。</p>\n</blockquote>\n</blockquote>\n<p>你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的<br>命令和其参数（arguments）。</p>\n<h2 id=\"获得更多帮助（GETTING-MORE-HELP）\"><a href=\"#获得更多帮助（GETTING-MORE-HELP）\" class=\"headerlink\" title=\"* 获得更多帮助（GETTING MORE HELP）\"></a>* 获得更多帮助（GETTING MORE HELP）</h2><p>本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水，不至于束手无策望洋兴<br>叹。有关 Emacs 的话题可谓汗牛充栋，这里自然是难尽万一。不过 Emacs 很理<br>解你求知若渴的心情，因为它提供的强大功能实在是太多了。为此，Emacs 提供<br>了一些命令来查看 Emacs 的命令文档，这些命令都以 CONTROL-h 开头，这个字<br>符也因此被称为“帮助（Help）字符”。</p>\n<p>要使用帮助（Help）功能，请先输入 C-h，然后再输入一个字符以说明你需要什<br>么帮助。如果你连自己到底需要什么帮助都不知道，那么就输入 C-h ?，Emacs<br>会告诉你它能提供了哪些帮助。如果你按了 C-h 又想反悔，可以用 C-g 取消。</p>\n<p>（如果你按 C-h 之后没有任何帮助信息显示出来，那么试试 F1 键或者 M-x help <Return> 。）</p>\n<p>最基本的帮助功能是 C-h c。输入 C-h c 之后再输入一个组合键，Emacs 会给出<br>这个命令的简要说明。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-h c C-p。</p>\n</blockquote>\n</blockquote>\n<p>显示的消息应该会是这样：</p>\n<pre><code>C-p runs the command previous-line\n</code></pre><p>这条消息显示了 C-p 命令对应的函数名。命令的功能由函数完成，所以函数名<br>本身也可以被看成是最简单的文档――至少对于你已经学过的命令来说，它们的函<br>数名足以解释它们的功能了。</p>\n<p>多字符命令一样可以用 C-h c 来查看。</p>\n<p>想得到更多的信息，请把 C-h c 换成 C-h k 试试看。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-h k C-p。</p>\n</blockquote>\n</blockquote>\n<p>上面的命令会新打开一个 Emacs 窗格以显示函数的名称及其文档。你读完之后可<br>以用 C-x 1 关掉这个帮助窗格。当然你并不需要立即这样做，你完全可以先在编<br>辑窗格里做点别的事情，然后再关掉帮助窗格。</p>\n<p>还有一些其它有用的 C-h 命令：</p>\n<p>   C-h f        解释一个函数。需要输入函数名。</p>\n<blockquote>\n<blockquote>\n<p>试试看，输入 C-h f previous-line <Return>。<br>   Emacs 会给出它所知道的所有有关“实现 C-p 命令功能的函数”的信息。</p>\n</blockquote>\n</blockquote>\n<p>C-h v 用来显示 Emacs 变量的文档。Emacs 变量可以被用来“定制 Emacs 的行<br>为”。同样，你需要输入变量的名称。</p>\n<p>   C-h a        相关命令搜索（Command Apropos）。<br>                输入一个关键词然后 Emacs 会列出所有命令名中包含此关键词<br>                的命令。这些命令全都可以用 M-x 来启动。对于某些命令来说，<br>                相关命令搜索还会列出一两个组合键。</p>\n<blockquote>\n<blockquote>\n<p>输入 C-h a file <Return>。</p>\n</blockquote>\n</blockquote>\n<p>Emacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中含<br>有“file”的命令。你可以看到像“C-x C-f”这样的组合键显示在“find-file”<br>这样的命令名的旁边。</p>\n<blockquote>\n<blockquote>\n<p>用 C-M-v 来回滚动 help 窗格，多试几次。</p>\n<p>输入 C-x 1 来删除 help 窗格。</p>\n</blockquote>\n</blockquote>\n<p>   C-h i        阅读手册（也就是通常讲的 Info）。<br>                这个命令会打开一个称为“<em>info</em>”的特殊缓冲区，在那里，<br>                你可以阅读安装在系统里的软件包使用手册。要读 Emacs 的使<br>                用手册，按 m emacs <Return> 就可以了。如果你之前从没用<br>                过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使<br>                用指南。在看完本快速指南之后，Emacs Info 会成为你的主要<br>                参考文档。</p>\n<h2 id=\"更多精彩（MORE-FEATURES）\"><a href=\"#更多精彩（MORE-FEATURES）\" class=\"headerlink\" title=\"* 更多精彩（MORE FEATURES）\"></a>* 更多精彩（MORE FEATURES）</h2><p>想学习更多的使用技巧，Emacs 使用手册（manual）值得一读。你可以读纸版的<br>书，也可以在 Emacs 中读（可以从 Help 菜单进入或者按 C-h r）。提两个你<br>可能会很感兴趣的功能吧，一个是可以帮你少敲键盘的 completion（自动补全），<br>另一个是方便文件处理的 dired（目录编辑）。</p>\n<p>Completion 可以替你节省不必要的键盘输入。比如说你想切换到 <em>Message</em> 缓<br>冲区，你就可以用 C-x b *M<Tab> 来完成。只要 Emacs 能够根据你已经输入的<br>文字确定你想要输入的内容，它就会自动帮你补齐。Completion 也可用于命令<br>名和文件名。有关 Completion 的详细说明可以在 Emacs Info 中的<br>“Completion”一节里找到。</p>\n<p>Dired 能够在一个缓冲区里列出一个目录下的所有文件（可以选择是否也列出子<br>目录），然后你可以在这个文件列表上完成对文件的移动、访问、重命名或删除<br>等等操作。Dired 也在 Emacs 使用手册中有详细介绍，参见“Dired”一节。</p>\n<p>Emacs 使用手册里还有许许多多的精彩功能等着你来了解。</p>\n<h2 id=\"总结（CONCLUSION）\"><a href=\"#总结（CONCLUSION）\" class=\"headerlink\" title=\"* 总结（CONCLUSION）\"></a>* 总结（CONCLUSION）</h2><p>要退出 Emacs 请用 C-x C-c。</p>\n<p>本文完全是为零起点新手所写的起步教程。如果你觉得哪里还看不明白，千万不<br>要怀疑自己，那一定是我们没有写好。我们永远欢迎你的不满和抱怨。</p>\n<h2 id=\"翻译（TRANSLATION）\"><a href=\"#翻译（TRANSLATION）\" class=\"headerlink\" title=\"* 翻译（TRANSLATION）\"></a>* 翻译（TRANSLATION）</h2><p>翻译：孙一江 <a href=\"&#x6d;&#97;&#x69;&#108;&#116;&#111;&#58;&#x73;&#x75;&#x6e;&#121;&#x69;&#106;&#105;&#97;&#x6e;&#103;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;\">&#x73;&#x75;&#x6e;&#121;&#x69;&#106;&#105;&#97;&#x6e;&#103;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a><br>维护：薛富侨 <a href=\"&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#120;&#x66;&#x71;&#x2e;&#102;&#x72;&#x65;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;\">&#120;&#x66;&#x71;&#x2e;&#102;&#x72;&#x65;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a><br>校对：水木社区（www.newsmth.net）Emacs 板众多网友及众多 Emacs 中文用户</p>\n<p>Emacs 快速指南（Tutorial）早有两个刘昭宏的中文译本，繁简各一。其简体版本<br>（TUTORIAL.cn）基本由繁体版本（TUTORIAL.zh）经词语替换而得。然而繁简中文<br>不仅在用词习惯上有所不同，更有诸多表达方式与句法方面的差异，因此一直以来<br>用户使用 TUTORIAL.cn 都会略觉生硬和晦涩。这次重新翻译 TUTORIAL.cn 的动机<br>正是源于这种体验，希望我们的工作能够让本文更好地发挥其作用。TUTORIAL.zh<br>的译文质量很高，在翻译过程中给予过我们许多借鉴和参考，在此对刘昭宏的工作<br>表示感谢。</p>\n<p>翻译过程中最大的挑战莫过于术语译词的选择了。经过水木社区 Emacs 板热心<br>网友小范围内的讨论，我们选择了现在的译法。用户的广泛参与是自由软件生命<br>力的源泉，所以如果你有任何建议、勘误或想法，请用你喜欢的方式向我们提出。<br>你可以通过电子邮件直接联系维护者，也可以放到 GNU Emacs 的开发邮件列表<br>或者水木社区的 Emacs 板上进行讨论。</p>\n<p>下面列出主要术语的译词对照，并给出注释说明：</p>\n<pre><code>command               命令\ncursor                光标\nscrolling             滚动\nnumeric argument      数字参数\nwindow                窗格 [1]\ninsert                插入\ndelete                删除 [2]\nkill                  移除 [2]\nyank                  召回 [2]\nundo                  撤销\nfile                  文件\nbuffer                缓冲区\nminibuffer            小缓冲\necho area             回显区\nmode line             状态栏\nsearch                搜索\nincremental search    渐进式搜索 [3]\n</code></pre><p>对于其他没有提到的术语，读者可以参考 Emacs 使用手册里的术语表。</p>\n<p>[1] “window”一词在计算机相关的领域一般都被译为“窗口”。但是在 Emacs<br>    中，还有一个“frame”的概念。在被广泛使用的 X 窗口系统和微软的视窗<br>    （Windows）系列操作系统中，Emacs 的一个“frame”就是一个“窗口”，因<br>    此把 Emacs 中的“frame”译成“窗口”更加符合通常的习惯。这样，Emacs<br>    中的“window”就只能译成“窗格”了。我们认为 Emacs 中 window 和<br>    frame 的关系用窗格和窗口来类比是十分形象的。</p>\n<pre><code>《学习GNU Emacs》（第二版）一书对“window”和“frame”的翻译与本教程\n刚好相反（分别译作“窗口”和“窗格”）。在此特别注明，以消除可能产生\n的疑惑。（感谢李旭章 &lt;lixuzhang@gmail.com&gt; 指出）\n</code></pre><p>[2] 对于“delete”和“kill”的区别，正文已经给出了详细的说明。“删除”和<br>    “移除”相比较起来，前者更多地隐含着“破坏”和“不可恢复”的意思，而<br>    后者更多地隐含着“被转移”和“可恢复”的意思。因此分别选择它们作为上<br>    述两词的译词，希望能够体现出区别。“yank”在中文文档中鲜有对应译词出<br>    现，翻译的困难较大。究其本意是：“a strong sudden pull”（参见韦氏词<br>    典），即“猛然拉回”。在原文档中 yank 被引申为“将先前移除的东西再移<br>    回来”这个意思，所以我们选择了“召回”一词与其对应。</p>\n<p>[3] “incremental”一词在计算机著作中广泛出现，被广泛接受的中文译词有两<br>    个：“增量的”和“渐进的”。“incremental search”翻译成“增量式搜索<br>    ”或者“渐进式搜索”都讲得通，且都有各自的形象之处。还是参考原文对其<br>    的解释：“… means that the search happens while you type in the<br>    string to search for”。意思是之所以称其为“incremental search”，是<br>    因为“在你输入搜索字符串的过程中，搜索就已经在进行了”。我们认为“增<br>    量的”更加强调在现有基础上的变化（比如“增量备份”，“增量编译”）；<br>    而“渐进的”更加强调过程的逐渐发展，也更加符合原文的意思。因此我们选<br>    择将“incremental search”译作“渐进式搜索”。</p>\n<h2 id=\"版权声明（COPYING）\"><a href=\"#版权声明（COPYING）\" class=\"headerlink\" title=\"* 版权声明（COPYING）\"></a>* 版权声明（COPYING）</h2><p>This tutorial descends from a long line of Emacs tutorials<br>starting with the one written by Stuart Cracraft for the original Emacs.</p>\n<p>This version of the tutorial is a part of GNU Emacs.  It is copyrighted<br>and comes with permission to distribute copies on certain conditions:</p>\n<p>  Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,<br>  Inc.</p>\n<p>  This file is part of GNU Emacs.</p>\n<p>  GNU Emacs is free software: you can redistribute it and/or modify<br>  it under the terms of the GNU General Public License as published by<br>  the Free Software Foundation, either version 3 of the License, or<br>  (at your option) any later version.</p>\n<p>  GNU Emacs is distributed in the hope that it will be useful,<br>  but WITHOUT ANY WARRANTY; without even the implied warranty of<br>  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>  GNU General Public License for more details.</p>\n<p>  You should have received a copy of the GNU General Public License<br>  along with GNU Emacs.  If not, see <a href=\"https://www.gnu.org/licenses/\">https://www.gnu.org/licenses/</a>.</p>\n<p>Please read the file COPYING and then do give copies of GNU Emacs to<br>your friends.  Help stamp out software obstructionism (“ownership”) by<br>using, writing, and sharing free software!</p>\n<p>【下面为版权声明的译文，仅供参考。实际法律效力以英文原文为准。】</p>\n<p>本快速指南沿袭自历史悠久的 Emacs 快速指南，可上溯至 Stuart Cracraft 为最<br>初的 Emacs 所作的版本。</p>\n<p>本篇指南是 GNU Emacs 的一部分，并允许在下列条件的约束下发行其拷贝：</p>\n<p>   Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,<br>   Inc.</p>\n<p>   本文件为 GNU Emacs 的一部分。</p>\n<p>   GNU Emacs 为自由软件；您可依据自由软件基金会所发表的GNU通用公共授权<br>   条款，对本程序再次发布和/或修改；无论您依据的是本授权的第三版，或<br>   （您可选的）任一日后发行的版本。</p>\n<p>   GNU Emacs 是基于使用目的而加以发布，然而不负任何担保责任；亦无对适<br>   售性或特定目的适用性所为的默示性担保。详情请参照GNU通用公共授权。</p>\n<p>   您应已收到附随于 GNU Emacs 的GNU通用公共授权的副本；如果没有，请参照<br>   <a href=\"https://www.gnu.org/licenses/\">https://www.gnu.org/licenses/</a>.</p>\n<p>敬请阅读文件“COPYING”，然后向你的朋友们分发 GNU Emacs 拷贝。让我们以使<br>用、编写和分享自由软件的实际行动来共同祛除软件障碍主义（所谓的“所有<br>权”）！</p>\n<p>;;; Local Variables:<br>;;; coding: utf-8<br>;;; End:</p>\n","sticky":0},{"title":"How to synchronize ArrayList in java with example","date":"2016-07-28T05:21:15.000Z","_content":"\n\n## There are two ways to synchronize explicitly:\n\n- Using Collections.synchronizedList() method\n- Using thread-safe variant of ArrayList: CopyOnWriteArrayList\n\n## Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\n\nIn this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.\n\n```\npackage beginnersbook.com;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Collections;\n\npublic class Details {\n\n   public static void main(String a[]){\n       List<String> syncal = \n         Collections.synchronizedList(new ArrayList<String>());\n\n       //Adding elements to synchronized ArrayList\n       syncal.add(\"Pen\");\n       syncal.add(\"NoteBook\");\n       syncal.add(\"Ink\");\n\n       System.out.println(\"Iterating synchronized ArrayList:\");\n       synchronized(syncal) {\n       Iterator<String> iterator = syncal.iterator(); \n       while (iterator.hasNext())\n          System.out.println(iterator.next());\n       }\n   }\n}\n```\n- Output:\n```\nIterating synchronized ArrayList:\nPen\nNoteBook\nInk\n```\n\n\n## Method 2: Using CopyOnWriteArrayList\n\nCopyOnWriteArrayList is a thread-safe variant of ArrayList.\n\n```\npackage beginnersbook.com;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.Iterator;\n\npublic class Details {\n\n public static void main(String a[]){\n    CopyOnWriteArrayList<String> al = new CopyOnWriteArrayList<String>();\n\n    //Adding elements to synchronized ArrayList\n    al.add(\"Pen\");\n    al.add(\"NoteBook\");\n    al.add(\"Ink\");\n\n    System.out.println(\"Displaying synchronized ArrayList Elements:\");\n    //Synchronized block is not required in this method\n    Iterator<String> iterator = al.iterator(); \n    while (iterator.hasNext())\n       System.out.println(iterator.next());\n  }\n}\n```\n- Output:\n```\nDisplaying synchronized ArrayList Elements:\nPen\nNoteBook\nInk\n```","source":"_posts/How-to-synchronize-ArrayList-in-java-with-example.md","raw":"---\ntitle: How to synchronize ArrayList in java with example\ndate: 2016-07-28 13:21:15\ntags: [java, synchronize, ArrayList]\n---\n\n\n## There are two ways to synchronize explicitly:\n\n- Using Collections.synchronizedList() method\n- Using thread-safe variant of ArrayList: CopyOnWriteArrayList\n\n## Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\n\nIn this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.\n\n```\npackage beginnersbook.com;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Collections;\n\npublic class Details {\n\n   public static void main(String a[]){\n       List<String> syncal = \n         Collections.synchronizedList(new ArrayList<String>());\n\n       //Adding elements to synchronized ArrayList\n       syncal.add(\"Pen\");\n       syncal.add(\"NoteBook\");\n       syncal.add(\"Ink\");\n\n       System.out.println(\"Iterating synchronized ArrayList:\");\n       synchronized(syncal) {\n       Iterator<String> iterator = syncal.iterator(); \n       while (iterator.hasNext())\n          System.out.println(iterator.next());\n       }\n   }\n}\n```\n- Output:\n```\nIterating synchronized ArrayList:\nPen\nNoteBook\nInk\n```\n\n\n## Method 2: Using CopyOnWriteArrayList\n\nCopyOnWriteArrayList is a thread-safe variant of ArrayList.\n\n```\npackage beginnersbook.com;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.Iterator;\n\npublic class Details {\n\n public static void main(String a[]){\n    CopyOnWriteArrayList<String> al = new CopyOnWriteArrayList<String>();\n\n    //Adding elements to synchronized ArrayList\n    al.add(\"Pen\");\n    al.add(\"NoteBook\");\n    al.add(\"Ink\");\n\n    System.out.println(\"Displaying synchronized ArrayList Elements:\");\n    //Synchronized block is not required in this method\n    Iterator<String> iterator = al.iterator(); \n    while (iterator.hasNext())\n       System.out.println(iterator.next());\n  }\n}\n```\n- Output:\n```\nDisplaying synchronized ArrayList Elements:\nPen\nNoteBook\nInk\n```","slug":"How-to-synchronize-ArrayList-in-java-with-example","published":1,"updated":"2016-07-28T14:57:55.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uslw000200uu4sabtmt2","content":"<h2 id=\"There-are-two-ways-to-synchronize-explicitly\"><a href=\"#There-are-two-ways-to-synchronize-explicitly\" class=\"headerlink\" title=\"There are two ways to synchronize explicitly:\"></a>There are two ways to synchronize explicitly:</h2><ul>\n<li>Using Collections.synchronizedList() method</li>\n<li>Using thread-safe variant of ArrayList: CopyOnWriteArrayList</li>\n</ul>\n<h2 id=\"Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\"><a href=\"#Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\" class=\"headerlink\" title=\"Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\"></a>Example 1: Collections.synchronizedList() method for Synchronizing ArrayList</h2><p>In this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String a[])&#123;</span><br><span class=\"line\">       List&lt;String&gt; syncal = </span><br><span class=\"line\">         Collections.synchronizedList(new ArrayList&lt;String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">       //Adding elements to synchronized ArrayList</span><br><span class=\"line\">       syncal.add(&quot;Pen&quot;);</span><br><span class=\"line\">       syncal.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">       syncal.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(&quot;Iterating synchronized ArrayList:&quot;);</span><br><span class=\"line\">       synchronized(syncal) &#123;</span><br><span class=\"line\">       Iterator&lt;String&gt; iterator = syncal.iterator(); </span><br><span class=\"line\">       while (iterator.hasNext())</span><br><span class=\"line\">          System.out.println(iterator.next());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterating synchronized ArrayList:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Method-2-Using-CopyOnWriteArrayList\"><a href=\"#Method-2-Using-CopyOnWriteArrayList\" class=\"headerlink\" title=\"Method 2: Using CopyOnWriteArrayList\"></a>Method 2: Using CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList is a thread-safe variant of ArrayList.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static void main(String a[])&#123;</span><br><span class=\"line\">    CopyOnWriteArrayList&lt;String&gt; al = new CopyOnWriteArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    //Adding elements to synchronized ArrayList</span><br><span class=\"line\">    al.add(&quot;Pen&quot;);</span><br><span class=\"line\">    al.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">    al.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;Displaying synchronized ArrayList Elements:&quot;);</span><br><span class=\"line\">    //Synchronized block is not required in this method</span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = al.iterator(); </span><br><span class=\"line\">    while (iterator.hasNext())</span><br><span class=\"line\">       System.out.println(iterator.next());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Displaying synchronized ArrayList Elements:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"There-are-two-ways-to-synchronize-explicitly\"><a href=\"#There-are-two-ways-to-synchronize-explicitly\" class=\"headerlink\" title=\"There are two ways to synchronize explicitly:\"></a>There are two ways to synchronize explicitly:</h2><ul>\n<li>Using Collections.synchronizedList() method</li>\n<li>Using thread-safe variant of ArrayList: CopyOnWriteArrayList</li>\n</ul>\n<h2 id=\"Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\"><a href=\"#Example-1-Collections-synchronizedList-method-for-Synchronizing-ArrayList\" class=\"headerlink\" title=\"Example 1: Collections.synchronizedList() method for Synchronizing ArrayList\"></a>Example 1: Collections.synchronizedList() method for Synchronizing ArrayList</h2><p>In this example we are using Collections.synchronizedList() method. The important point to note here is that iterator should be in synchronized block in this type of synchronization as shown in the below example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String a[])&#123;</span><br><span class=\"line\">       List&lt;String&gt; syncal = </span><br><span class=\"line\">         Collections.synchronizedList(new ArrayList&lt;String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">       //Adding elements to synchronized ArrayList</span><br><span class=\"line\">       syncal.add(&quot;Pen&quot;);</span><br><span class=\"line\">       syncal.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">       syncal.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(&quot;Iterating synchronized ArrayList:&quot;);</span><br><span class=\"line\">       synchronized(syncal) &#123;</span><br><span class=\"line\">       Iterator&lt;String&gt; iterator = syncal.iterator(); </span><br><span class=\"line\">       while (iterator.hasNext())</span><br><span class=\"line\">          System.out.println(iterator.next());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterating synchronized ArrayList:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Method-2-Using-CopyOnWriteArrayList\"><a href=\"#Method-2-Using-CopyOnWriteArrayList\" class=\"headerlink\" title=\"Method 2: Using CopyOnWriteArrayList\"></a>Method 2: Using CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList is a thread-safe variant of ArrayList.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package beginnersbook.com;</span><br><span class=\"line\">import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Details &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static void main(String a[])&#123;</span><br><span class=\"line\">    CopyOnWriteArrayList&lt;String&gt; al = new CopyOnWriteArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    //Adding elements to synchronized ArrayList</span><br><span class=\"line\">    al.add(&quot;Pen&quot;);</span><br><span class=\"line\">    al.add(&quot;NoteBook&quot;);</span><br><span class=\"line\">    al.add(&quot;Ink&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;Displaying synchronized ArrayList Elements:&quot;);</span><br><span class=\"line\">    //Synchronized block is not required in this method</span><br><span class=\"line\">    Iterator&lt;String&gt; iterator = al.iterator(); </span><br><span class=\"line\">    while (iterator.hasNext())</span><br><span class=\"line\">       System.out.println(iterator.next());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Output:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Displaying synchronized ArrayList Elements:</span><br><span class=\"line\">Pen</span><br><span class=\"line\">NoteBook</span><br><span class=\"line\">Ink</span><br></pre></td></tr></table></figure></li>\n</ul>\n","sticky":0},{"title":"Java 中int和Integer的区别","date":"2016-08-04T03:41:57.000Z","_content":"\n# Java中int和Integer的区别\n\n## Java各种数据类型详细介绍及其区别\n\n- 基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。\n\nJava中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：\n\n实数：double、float\n\n整数：byte、short、int、long\n\n字符：char\n\n布尔值：boolean\n\n复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。\n\n- Java的简单数据讲解列表如下：\n\nint：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。\n\nshort：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。\n\nlong：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。\n\nbyte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。\n\nfloat：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。\n\ndouble：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。\n\nchar：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为'u0000'。\n\nboolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。\n\nInteger是int的封装类，里面有很多进行处理的静态方法\n\nInteger是对象而int不是，内存的分配位置也不一样\n\nInteger的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！\n\njdk1.5以后可以从int自动装箱Integer类。\n\nint是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。\n\nInteger是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。\n\njdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。\n\nint是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。\n\n实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；\n\n另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。\n\nint 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。\n\n- 原始类型 封装类\n\nboolean Boolean\n\nchar Character\n\nbyte Byte\n\nshort Short\n\nint Integer\n\nlong Long\n\nfloat Float\n\ndouble Double\n\n引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。\n\n## 1 、Boolean VS boolean\n\npublic final class Boolean extends Object  implementsSerializable,Comparable\n\nBoolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。\n\n## 2、 Byte VS byte\n\npublic final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。\n\n## 3、 Character VS char\n\npublic final class Character extends Object  implements Serializable, Comparable\n\nCharacter类在对象中包装一个基本类型char的值。\n\nCharacter类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。\n\n## 4 、Double VS double\n\npublic final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。\n\n## 5、 Float VS float\n\npublic final class Float extends Number implements Comparable\n\nFloat类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。\n\n## 6、 Integer VS int\n\npublic final class Integer extends Number implements Comparable\n\nInteger类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。\n\n此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。\n\n## 7 Long VS long\n\npublic final class Long extends Number implements Comparable\n\nLong类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。\n\n此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。\n\n## 8、 Short VS short\n\npublic final class Short extends Number implements Comparable\n\nShort类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。\n\n## 9、public final class Voidextends Object\n\nVoid 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。\n\n类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。\n\n","source":"_posts/Java-中int和Integer的区别.md","raw":"---\ntitle: Java 中int和Integer的区别\ndate: 2016-08-04 11:41:57\ntags: [java, int, Integer, j2se]\n---\n\n# Java中int和Integer的区别\n\n## Java各种数据类型详细介绍及其区别\n\n- 基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。\n\nJava中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：\n\n实数：double、float\n\n整数：byte、short、int、long\n\n字符：char\n\n布尔值：boolean\n\n复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。\n\n- Java的简单数据讲解列表如下：\n\nint：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。\n\nshort：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。\n\nlong：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。\n\nbyte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。\n\nfloat：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。\n\ndouble：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。\n\nchar：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为'u0000'。\n\nboolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。\n\nInteger是int的封装类，里面有很多进行处理的静态方法\n\nInteger是对象而int不是，内存的分配位置也不一样\n\nInteger的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！\n\njdk1.5以后可以从int自动装箱Integer类。\n\nint是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。\n\nInteger是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。\n\njdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。\n\nint是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。\n\n实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；\n\n另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。\n\nint 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。\n\n- 原始类型 封装类\n\nboolean Boolean\n\nchar Character\n\nbyte Byte\n\nshort Short\n\nint Integer\n\nlong Long\n\nfloat Float\n\ndouble Double\n\n引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。\n\n## 1 、Boolean VS boolean\n\npublic final class Boolean extends Object  implementsSerializable,Comparable\n\nBoolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。\n\n## 2、 Byte VS byte\n\npublic final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。\n\n## 3、 Character VS char\n\npublic final class Character extends Object  implements Serializable, Comparable\n\nCharacter类在对象中包装一个基本类型char的值。\n\nCharacter类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。\n\n## 4 、Double VS double\n\npublic final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。\n\n## 5、 Float VS float\n\npublic final class Float extends Number implements Comparable\n\nFloat类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。\n\n## 6、 Integer VS int\n\npublic final class Integer extends Number implements Comparable\n\nInteger类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。\n\n此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。\n\n## 7 Long VS long\n\npublic final class Long extends Number implements Comparable\n\nLong类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。\n\n此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。\n\n## 8、 Short VS short\n\npublic final class Short extends Number implements Comparable\n\nShort类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。\n\n## 9、public final class Voidextends Object\n\nVoid 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。\n\n类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。\n\n","slug":"Java-中int和Integer的区别","published":1,"updated":"2016-08-08T11:33:26.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usmf000400uun8b7rwhg","content":"<h1 id=\"Java中int和Integer的区别\"><a href=\"#Java中int和Integer的区别\" class=\"headerlink\" title=\"Java中int和Integer的区别\"></a>Java中int和Integer的区别</h1><h2 id=\"Java各种数据类型详细介绍及其区别\"><a href=\"#Java各种数据类型详细介绍及其区别\" class=\"headerlink\" title=\"Java各种数据类型详细介绍及其区别\"></a>Java各种数据类型详细介绍及其区别</h2><ul>\n<li>基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。</li>\n</ul>\n<p>Java中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：</p>\n<p>实数：double、float</p>\n<p>整数：byte、short、int、long</p>\n<p>字符：char</p>\n<p>布尔值：boolean</p>\n<p>复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。</p>\n<ul>\n<li>Java的简单数据讲解列表如下：</li>\n</ul>\n<p>int：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。</p>\n<p>short：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。</p>\n<p>long：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。</p>\n<p>byte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。</p>\n<p>float：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。</p>\n<p>double：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。</p>\n<p>char：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为’u0000’。</p>\n<p>boolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。</p>\n<p>Integer是int的封装类，里面有很多进行处理的静态方法</p>\n<p>Integer是对象而int不是，内存的分配位置也不一样</p>\n<p>Integer的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！</p>\n<p>jdk1.5以后可以从int自动装箱Integer类。</p>\n<p>int是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。</p>\n<p>Integer是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。</p>\n<p>jdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。</p>\n<p>int是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。</p>\n<p>实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；</p>\n<p>另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。</p>\n<p>int 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。</p>\n<ul>\n<li>原始类型 封装类</li>\n</ul>\n<p>boolean Boolean</p>\n<p>char Character</p>\n<p>byte Byte</p>\n<p>short Short</p>\n<p>int Integer</p>\n<p>long Long</p>\n<p>float Float</p>\n<p>double Double</p>\n<p>引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。</p>\n<h2 id=\"1-、Boolean-VS-boolean\"><a href=\"#1-、Boolean-VS-boolean\" class=\"headerlink\" title=\"1 、Boolean VS boolean\"></a>1 、Boolean VS boolean</h2><p>public final class Boolean extends Object  implementsSerializable,Comparable</p>\n<p>Boolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。</p>\n<h2 id=\"2、-Byte-VS-byte\"><a href=\"#2、-Byte-VS-byte\" class=\"headerlink\" title=\"2、 Byte VS byte\"></a>2、 Byte VS byte</h2><p>public final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。</p>\n<h2 id=\"3、-Character-VS-char\"><a href=\"#3、-Character-VS-char\" class=\"headerlink\" title=\"3、 Character VS char\"></a>3、 Character VS char</h2><p>public final class Character extends Object  implements Serializable, Comparable</p>\n<p>Character类在对象中包装一个基本类型char的值。</p>\n<p>Character类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。</p>\n<h2 id=\"4-、Double-VS-double\"><a href=\"#4-、Double-VS-double\" class=\"headerlink\" title=\"4 、Double VS double\"></a>4 、Double VS double</h2><p>public final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。</p>\n<h2 id=\"5、-Float-VS-float\"><a href=\"#5、-Float-VS-float\" class=\"headerlink\" title=\"5、 Float VS float\"></a>5、 Float VS float</h2><p>public final class Float extends Number implements Comparable</p>\n<p>Float类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"6、-Integer-VS-int\"><a href=\"#6、-Integer-VS-int\" class=\"headerlink\" title=\"6、 Integer VS int\"></a>6、 Integer VS int</h2><p>public final class Integer extends Number implements Comparable</p>\n<p>Integer类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。</p>\n<p>此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"7-Long-VS-long\"><a href=\"#7-Long-VS-long\" class=\"headerlink\" title=\"7 Long VS long\"></a>7 Long VS long</h2><p>public final class Long extends Number implements Comparable</p>\n<p>Long类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。</p>\n<p>此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。</p>\n<h2 id=\"8、-Short-VS-short\"><a href=\"#8、-Short-VS-short\" class=\"headerlink\" title=\"8、 Short VS short\"></a>8、 Short VS short</h2><p>public final class Short extends Number implements Comparable</p>\n<p>Short类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。</p>\n<h2 id=\"9、public-final-class-Voidextends-Object\"><a href=\"#9、public-final-class-Voidextends-Object\" class=\"headerlink\" title=\"9、public final class Voidextends Object\"></a>9、public final class Voidextends Object</h2><p>Void 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。</p>\n<p>类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。</p>\n","excerpt":"","more":"<h1 id=\"Java中int和Integer的区别\"><a href=\"#Java中int和Integer的区别\" class=\"headerlink\" title=\"Java中int和Integer的区别\"></a>Java中int和Integer的区别</h1><h2 id=\"Java各种数据类型详细介绍及其区别\"><a href=\"#Java各种数据类型详细介绍及其区别\" class=\"headerlink\" title=\"Java各种数据类型详细介绍及其区别\"></a>Java各种数据类型详细介绍及其区别</h2><ul>\n<li>基本类型，或者叫做内置类型，是JAVA中不同于类的特殊类型。</li>\n</ul>\n<p>Java中的简单类型从概念上分为四种：实数、整数、字符、布尔值。但是有一点需要说明的是，Java里面只有八种原始类型，其列表如下：</p>\n<p>实数：double、float</p>\n<p>整数：byte、short、int、long</p>\n<p>字符：char</p>\n<p>布尔值：boolean</p>\n<p>复杂类型和基本类型的内存模型本质上是不一样的，简单数据类型的存储原理是这样的：所有的简单数据类型不存在“引用”的概念，简单数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面只有这八种数据类型是这种存储模型；而其他的只要是继承于Object类的复杂数据类型都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的。</p>\n<ul>\n<li>Java的简单数据讲解列表如下：</li>\n</ul>\n<p>int：int为整数类型，在存储的时候，用4个字节存储，范围为-2,147,483,648到2,147,483,647，在变量初始化的时候，int类型的默认值为0。</p>\n<p>short：short也属于整数类型，在存储的时候，用2个字节存储，范围为-32,768到32,767，在变量初始化的时候，short类型的默认值为0，一般情况下，因为Java本身转型的原因，可以直接写为0。</p>\n<p>long：long也属于整数类型，在存储的时候，用8个字节存储，范围为-9,223,372,036,854,775,808到9,223,372,036, 854,775,807，在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。</p>\n<p>byte：byte同样属于整数类型，在存储的时候，用1个字节来存储，范围为-128到127，在变量初始化的时候，byte类型的默认值也为0。</p>\n<p>float：float属于实数类型，在存储的时候，用4个字节来存储，范围为32位IEEEE 754单精度范围，在变量初始化的时候，float的默认值为0.0f或0.0F，在初始化的时候可以写0.0。</p>\n<p>double：double同样属于实数类型，在存储的时候，用8个字节来存储，范围为64位IEEE 754双精度范围，在变量初始化的时候，double的默认值为0.0。</p>\n<p>char：char属于字符类型，在存储的时候用2个字节来存储，因为Java本身的字符集不是用ASCII码来进行存储，是使用的16位Unicode字符集，它的字符范围即是Unicode的字符范围，在变量初始化的时候，char类型的默认值为’u0000’。</p>\n<p>boolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用1位来存储，范围仅仅为0和1，其字面量为true和false，而boolean变量在初始化的时候变量的默认值为false。</p>\n<p>Integer是int的封装类，里面有很多进行处理的静态方法</p>\n<p>Integer是对象而int不是，内存的分配位置也不一样</p>\n<p>Integer的属性和其他类一样的！在方法里都是引用传递，而原始类型是值传递！</p>\n<p>jdk1.5以后可以从int自动装箱Integer类。</p>\n<p>int是为了兼容以前的编程语言使用的基本类型，目的是让程序效率更高，以为它是直接分配到栈上的。所以它不是对象，不能有类似 int.operation()的操作。</p>\n<p>Integer是java中一切都是对象这个大前提下的int的包装类型，可以使用方法，是个对象，是用new分配到堆上的。</p>\n<p>jdk1.5后，引入了类似c#中的自动装、拆箱，使得Integer i = 1；这样的表达直接可行。</p>\n<p>int是一种基本数据类型，而Integer是相应于int的类类型，称为对象包装。</p>\n<p>实现这种对象包装的目的主要是因为类能够提供必要的方法，用于实现基本数据类型的数值与可打印字符串之间的转换，以及一些其他的实用程序方法；</p>\n<p>另外，有些数据结构库类只能操作对象，而不支持基本数据类型的变量，包装类提供一种便利的方式，能够把基本数据类型转换成等价的对象，从而可以利用数据结构库类进行处理。</p>\n<p>int 是基本类型，(int)(Math.Random()*100)就是一个数，可以进行加见乘除。 Integer是class ,那么 new Integer(temp)就是一个对象了，可以用到Integer这个class的方法，例如用intvalue()可以返回这个int的值。int a=1;这是基本数据类型是能参与运算的.而Integer b= new Integer(1);c=b.floatvalue;Float a= new Float(null);是可以的用Float初始化一个对象这个a有很多方法而float a;就没有因为原始没有引用类，java 提供两种不同的类型：引用类型（或者封装类型，Warpper）和原始类型（或内置类型，Primitive）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。</p>\n<ul>\n<li>原始类型 封装类</li>\n</ul>\n<p>boolean Boolean</p>\n<p>char Character</p>\n<p>byte Byte</p>\n<p>short Short</p>\n<p>int Integer</p>\n<p>long Long</p>\n<p>float Float</p>\n<p>double Double</p>\n<p>引用类型和原始类型的行为完全不同，并且它们具有不同的语义。引用类型和原始类型具有不同的特征和用法，它们包括：大小和速度问题，这种类型以哪种类型的数据结构存储，当引用类型和原始类型用作某个类的实例数据时所指定的缺省值。对象引用实例变量的缺省值为 null，而原始类型实例变量的缺省值与它们的类型有关。</p>\n<h2 id=\"1-、Boolean-VS-boolean\"><a href=\"#1-、Boolean-VS-boolean\" class=\"headerlink\" title=\"1 、Boolean VS boolean\"></a>1 、Boolean VS boolean</h2><p>public final class Boolean extends Object  implementsSerializable,Comparable</p>\n<p>Boolean 类将基本类型为boolean的值包装在一个对象中。一个Boolean类型的对象只包含一个类型为boolean的字段。此外，此类还为boolean和String的相互转换提供了许多方法，并提供了处理 boolean时非常有用的其他一些常量和方法。</p>\n<h2 id=\"2、-Byte-VS-byte\"><a href=\"#2、-Byte-VS-byte\" class=\"headerlink\" title=\"2、 Byte VS byte\"></a>2、 Byte VS byte</h2><p>public final class Byte extends Number implements Comparable Byte类将基本类型 byte的值包装在一个对象中。一个Byte类型的对象只包含一个类型为 byte的字段。此外，该类还为 byte和 String的相互转换提供了几种方法，并提供了处理 byte时非常有用的其他一些常量和方法。</p>\n<h2 id=\"3、-Character-VS-char\"><a href=\"#3、-Character-VS-char\" class=\"headerlink\" title=\"3、 Character VS char\"></a>3、 Character VS char</h2><p>public final class Character extends Object  implements Serializable, Comparable</p>\n<p>Character类在对象中包装一个基本类型char的值。</p>\n<p>Character类型的对象包含类型为char的单个字段。此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。</p>\n<h2 id=\"4-、Double-VS-double\"><a href=\"#4-、Double-VS-double\" class=\"headerlink\" title=\"4 、Double VS double\"></a>4 、Double VS double</h2><p>public final class Double extends Number implements Comparable Double类在对象中包装了一个基本类型double的值。每个Double类型的对象都包含一个double类型的字段。此外，该类还提供了多个方法，可以将double转换为String，将String转换为double，还提供了其他一些处理double时有用的常量和方法。</p>\n<h2 id=\"5、-Float-VS-float\"><a href=\"#5、-Float-VS-float\" class=\"headerlink\" title=\"5、 Float VS float\"></a>5、 Float VS float</h2><p>public final class Float extends Number implements Comparable</p>\n<p>Float类在对象中包装了一个float基本类型的值。Float类型的对象包含一个float类型的字段。此外，此类提供了几种方法，可在float类型和String类型之间互相转换，并且还提供了处理float类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"6、-Integer-VS-int\"><a href=\"#6、-Integer-VS-int\" class=\"headerlink\" title=\"6、 Integer VS int\"></a>6、 Integer VS int</h2><p>public final class Integer extends Number implements Comparable</p>\n<p>Integer类在对象中包装了一个基本类型int的值。Integer类型的对象包含一个int类型的字段。</p>\n<p>此外，该类提供了多个方法，能在int类型和String类型之间互相转换，还提供了处理int类型时非常有用的其他一些常量和方法。</p>\n<h2 id=\"7-Long-VS-long\"><a href=\"#7-Long-VS-long\" class=\"headerlink\" title=\"7 Long VS long\"></a>7 Long VS long</h2><p>public final class Long extends Number implements Comparable</p>\n<p>Long类在对象中封装了基本类型long的值。每个Long类型的对象都包含一个long类型的字段。</p>\n<p>此外，该类提供了多个方法，可以将long转换为String，将String转换为long，除此之外，还提供了其他一些处理long时有用的常量和方法。</p>\n<h2 id=\"8、-Short-VS-short\"><a href=\"#8、-Short-VS-short\" class=\"headerlink\" title=\"8、 Short VS short\"></a>8、 Short VS short</h2><p>public final class Short extends Number implements Comparable</p>\n<p>Short类在对象中包装基本类型short的值。一个Short类型的对象只包含一个short类型的字段。另外，该类提供了多个方法，可以将short转换为String，将String转换为short，同时还提供了其他一些处理short时有用的常量和方法。</p>\n<h2 id=\"9、public-final-class-Voidextends-Object\"><a href=\"#9、public-final-class-Voidextends-Object\" class=\"headerlink\" title=\"9、public final class Voidextends Object\"></a>9、public final class Voidextends Object</h2><p>Void 类是一个不可实例化的占位符类，它保持一个对代表 Java 关键字 void 的 Class 对象的引用。</p>\n<p>类的对象才能为null，不能把null赋值给一个变量不能，如int m=null;但可以String s=null;因为String是个类。</p>\n","sticky":0},{"title":"JavaError-The-temporary-upload-location-[/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT]-is-not-valid","date":"2018-02-25T06:13:44.000Z","_content":"\n# SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\n\n在项目中，一般会将文件临时保存到缓存目录\n\n当时使用\n```\nFile.createTempFile(\"tmp\", ext,\n                        (File) request.getServletContext().getAttribute(ServletContext.TEMPDIR))\n```\n\n创建临时文件时，项目一直运行正常，然而有一次报异常：\n\n```\norg.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: \n    The temporary upload location [/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT] is not valid\n```\n\n检查文件目录，文件确实不在，检查代码，也未发现问题。实在不知道原因，只有重启了服务器，问题也就不再出现。\n\n \n\n今天偶然查看官方文档，发现问题所在，也提供了解决方法\n```\n    If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is\nused to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch\nwhile your application is running leading to failures. To avoid this, you may want to customize \nyour tmpwatch configuration so that tomcat.* directories are not deleted, or configure\nserver.tomcat.basedir so that embedded Tomcat uses a different location \n```\n \n\n前往目录 /etc/cron.daily/ 中，修改 tmpwatch 文件：\n\n```\n#! /bin/sh\nflags=-umc\n/usr/sbin/tmpwatch \"$flags\" -x /tmp/.X11-unix -x /tmp/.XIM-unix \\\n        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\\n        -X '/tmp/hsperfdata_*' 10d /tmp \\\n        -X '/tmp/tomcat.*' 10d /tmp\n/usr/sbin/tmpwatch \"$flags\" 30d /var/tmp\nfor d in /var/{cache/man,catman}/{cat?,X11R6/cat?,local/cat?}; do\n    if [ -d \"$d\" ]; then\n        /usr/sbin/tmpwatch \"$flags\" -f 30d \"$d\"\n    fi\ndone\n```\n \n\n可以看到添加了一行\n```\n-X '/tmp/tomcat.*' 10d /tmp\n```","source":"_posts/JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid.md","raw":"---\ntitle: >-\n  JavaError-The-temporary-upload-location-[/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT]-is-not-valid\ndate: 2018-02-25 14:13:44\ntags: [java,error,tomcat,spring boot]\n---\n\n# SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\n\n在项目中，一般会将文件临时保存到缓存目录\n\n当时使用\n```\nFile.createTempFile(\"tmp\", ext,\n                        (File) request.getServletContext().getAttribute(ServletContext.TEMPDIR))\n```\n\n创建临时文件时，项目一直运行正常，然而有一次报异常：\n\n```\norg.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: \n    The temporary upload location [/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT] is not valid\n```\n\n检查文件目录，文件确实不在，检查代码，也未发现问题。实在不知道原因，只有重启了服务器，问题也就不再出现。\n\n \n\n今天偶然查看官方文档，发现问题所在，也提供了解决方法\n```\n    If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is\nused to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch\nwhile your application is running leading to failures. To avoid this, you may want to customize \nyour tmpwatch configuration so that tomcat.* directories are not deleted, or configure\nserver.tomcat.basedir so that embedded Tomcat uses a different location \n```\n \n\n前往目录 /etc/cron.daily/ 中，修改 tmpwatch 文件：\n\n```\n#! /bin/sh\nflags=-umc\n/usr/sbin/tmpwatch \"$flags\" -x /tmp/.X11-unix -x /tmp/.XIM-unix \\\n        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\\n        -X '/tmp/hsperfdata_*' 10d /tmp \\\n        -X '/tmp/tomcat.*' 10d /tmp\n/usr/sbin/tmpwatch \"$flags\" 30d /var/tmp\nfor d in /var/{cache/man,catman}/{cat?,X11R6/cat?,local/cat?}; do\n    if [ -d \"$d\" ]; then\n        /usr/sbin/tmpwatch \"$flags\" -f 30d \"$d\"\n    fi\ndone\n```\n \n\n可以看到添加了一行\n```\n-X '/tmp/tomcat.*' 10d /tmp\n```","slug":"JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid","published":1,"updated":"2018-09-08T17:00:02.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usms000500uuobxgb997","content":"<h1 id=\"SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\"><a href=\"#SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\" class=\"headerlink\" title=\"SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\"></a>SpringBoot内置Tomcat缓存文件目录被意外删除导致异常</h1><p>在项目中，一般会将文件临时保存到缓存目录</p>\n<p>当时使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.createTempFile(&quot;tmp&quot;, ext,</span><br><span class=\"line\">                        (File) request.getServletContext().getAttribute(ServletContext.TEMPDIR))</span><br></pre></td></tr></table></figure></p>\n<p>创建临时文件时，项目一直运行正常，然而有一次报异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: </span><br><span class=\"line\">    The temporary upload location [/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT] is not valid</span><br></pre></td></tr></table></figure>\n<p>检查文件目录，文件确实不在，检查代码，也未发现问题。实在不知道原因，只有重启了服务器，问题也就不再出现。</p>\n<p>今天偶然查看官方文档，发现问题所在，也提供了解决方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is</span><br><span class=\"line\">used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch</span><br><span class=\"line\">while your application is running leading to failures. To avoid this, you may want to customize </span><br><span class=\"line\">your tmpwatch configuration so that tomcat.* directories are not deleted, or configure</span><br><span class=\"line\">server.tomcat.basedir so that embedded Tomcat uses a different location</span><br></pre></td></tr></table></figure></p>\n<p>前往目录 /etc/cron.daily/ 中，修改 tmpwatch 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#! /bin/sh</span><br><span class=\"line\">flags=-umc</span><br><span class=\"line\">/usr/sbin/tmpwatch &quot;$flags&quot; -x /tmp/.X11-unix -x /tmp/.XIM-unix \\</span><br><span class=\"line\">        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\</span><br><span class=\"line\">        -X &apos;/tmp/hsperfdata_*&apos; 10d /tmp \\</span><br><span class=\"line\">        -X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br><span class=\"line\">/usr/sbin/tmpwatch &quot;$flags&quot; 30d /var/tmp</span><br><span class=\"line\">for d in /var/&#123;cache/man,catman&#125;/&#123;cat?,X11R6/cat?,local/cat?&#125;; do</span><br><span class=\"line\">    if [ -d &quot;$d&quot; ]; then</span><br><span class=\"line\">        /usr/sbin/tmpwatch &quot;$flags&quot; -f 30d &quot;$d&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>可以看到添加了一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\"><a href=\"#SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\" class=\"headerlink\" title=\"SpringBoot内置Tomcat缓存文件目录被意外删除导致异常\"></a>SpringBoot内置Tomcat缓存文件目录被意外删除导致异常</h1><p>在项目中，一般会将文件临时保存到缓存目录</p>\n<p>当时使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.createTempFile(&quot;tmp&quot;, ext,</span><br><span class=\"line\">                        (File) request.getServletContext().getAttribute(ServletContext.TEMPDIR))</span><br></pre></td></tr></table></figure></p>\n<p>创建临时文件时，项目一直运行正常，然而有一次报异常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: </span><br><span class=\"line\">    The temporary upload location [/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT] is not valid</span><br></pre></td></tr></table></figure>\n<p>检查文件目录，文件确实不在，检查代码，也未发现问题。实在不知道原因，只有重启了服务器，问题也就不再出现。</p>\n<p>今天偶然查看官方文档，发现问题所在，也提供了解决方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is</span><br><span class=\"line\">used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch</span><br><span class=\"line\">while your application is running leading to failures. To avoid this, you may want to customize </span><br><span class=\"line\">your tmpwatch configuration so that tomcat.* directories are not deleted, or configure</span><br><span class=\"line\">server.tomcat.basedir so that embedded Tomcat uses a different location</span><br></pre></td></tr></table></figure></p>\n<p>前往目录 /etc/cron.daily/ 中，修改 tmpwatch 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#! /bin/sh</span><br><span class=\"line\">flags=-umc</span><br><span class=\"line\">/usr/sbin/tmpwatch &quot;$flags&quot; -x /tmp/.X11-unix -x /tmp/.XIM-unix \\</span><br><span class=\"line\">        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \\</span><br><span class=\"line\">        -X &apos;/tmp/hsperfdata_*&apos; 10d /tmp \\</span><br><span class=\"line\">        -X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br><span class=\"line\">/usr/sbin/tmpwatch &quot;$flags&quot; 30d /var/tmp</span><br><span class=\"line\">for d in /var/&#123;cache/man,catman&#125;/&#123;cat?,X11R6/cat?,local/cat?&#125;; do</span><br><span class=\"line\">    if [ -d &quot;$d&quot; ]; then</span><br><span class=\"line\">        /usr/sbin/tmpwatch &quot;$flags&quot; -f 30d &quot;$d&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>可以看到添加了一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br></pre></td></tr></table></figure></p>\n","sticky":0},{"title":"ReactJS静态网站生成器-Gatsby","date":"2018-03-15T09:50:43.000Z","_content":"\n# ReactJS静态网站生成器-Gatsby\n\n\n\n![](/images/post-gatsby-01)\n\n## Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。\n\n特点：\n\n- 无需重载页面转换\n\n- 热重载编辑\n\n- 为构建静态网站创建 React.js 组件模型和生态系统 \n\n- 直观的基于目录的 URLs\n\n- 支持 \"Starters\"","source":"_posts/ReactJS静态网站生成器-Gatsby.md","raw":"---\ntitle: ReactJS静态网站生成器-Gatsby\ndate: 2018-03-15 17:50:43\ntags: [html, reactjs, node, npm, 静态网站]\n---\n\n# ReactJS静态网站生成器-Gatsby\n\n\n\n![](/images/post-gatsby-01)\n\n## Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。\n\n特点：\n\n- 无需重载页面转换\n\n- 热重载编辑\n\n- 为构建静态网站创建 React.js 组件模型和生态系统 \n\n- 直观的基于目录的 URLs\n\n- 支持 \"Starters\"","slug":"ReactJS静态网站生成器-Gatsby","published":1,"updated":"2018-09-08T17:00:02.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usn5000700uudbk192o0","content":"<h1 id=\"ReactJS静态网站生成器-Gatsby\"><a href=\"#ReactJS静态网站生成器-Gatsby\" class=\"headerlink\" title=\"ReactJS静态网站生成器-Gatsby\"></a>ReactJS静态网站生成器-Gatsby</h1><p><img src=\"/images/post-gatsby-01\" alt=\"\"></p>\n<h2 id=\"Gatsby-可以使用-React-js-把纯文本转换到动态博客或者网站上。\"><a href=\"#Gatsby-可以使用-React-js-把纯文本转换到动态博客或者网站上。\" class=\"headerlink\" title=\"Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。\"></a>Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。</h2><p>特点：</p>\n<ul>\n<li><p>无需重载页面转换</p>\n</li>\n<li><p>热重载编辑</p>\n</li>\n<li><p>为构建静态网站创建 React.js 组件模型和生态系统 </p>\n</li>\n<li><p>直观的基于目录的 URLs</p>\n</li>\n<li><p>支持 “Starters”</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"ReactJS静态网站生成器-Gatsby\"><a href=\"#ReactJS静态网站生成器-Gatsby\" class=\"headerlink\" title=\"ReactJS静态网站生成器-Gatsby\"></a>ReactJS静态网站生成器-Gatsby</h1><p><img src=\"/images/post-gatsby-01\" alt=\"\"></p>\n<h2 id=\"Gatsby-可以使用-React-js-把纯文本转换到动态博客或者网站上。\"><a href=\"#Gatsby-可以使用-React-js-把纯文本转换到动态博客或者网站上。\" class=\"headerlink\" title=\"Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。\"></a>Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。</h2><p>特点：</p>\n<ul>\n<li><p>无需重载页面转换</p>\n</li>\n<li><p>热重载编辑</p>\n</li>\n<li><p>为构建静态网站创建 React.js 组件模型和生态系统 </p>\n</li>\n<li><p>直观的基于目录的 URLs</p>\n</li>\n<li><p>支持 “Starters”</p>\n</li>\n</ul>\n","sticky":0},{"title":"ELK+Kafka企业日志收集平台搭建总结","date":"2016-09-08T17:31:02.000Z","_content":"\n# 3.ELK+Kafka 企业日志收集平台搭建总结\n\n\n\n### 平台架构：\n- 1台生产应用服务器：192.168.1.119\n- 3台zookeeper+kafka集群服务器：192.168.1.245, 192.168.1.246, 192.168.1.247\n- 2台es+kibana集群服务器：192.168.1.162, 192.168.1.163\n- 1台nginx服务器反向代理到kibana集群：192.168.1.244\n\n### 软件选用\n```\nelasticsearch-1.7.3.tar.gz \nLogstash-2.3.*\nkibana-4.1.2-linux-x64.tar.gz\n以上软件都可以从官网下载:https://www.elastic.co/downloads\njava-1.8.65\nnginx采用yum安装\n```\n\n### 平台安装配置\n\n####部署步骤：\n1.ES集群安装配置;\n2.Logstash客户端配置(直接写入数据到ES集群，写入系统messages日志);\n3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);\n4.Kibana部署;\n5.Nginx负载均衡Kibana请求;\n6.案例：nginx日志收集以及MySQL慢日志收集;\n7.Kibana报表基本使用;\n\n\n### 1.ES集群安装配置;\n- 需要先安装java1.8\n- 2.获取es软件包\n```\nwget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.3.tar.gz\ntar -xf elasticsearch-1.7.3.tar.gz -C /usr/local\nln -sv /usr/local/elasticsearch-1.7.3 /usr/local/elasticsearch\n```\n\n- 3.修改配置文件\n\n```\n[root@es1 ~]# vim /usr/local/elasticsearch/config/elasticsearch.yml \n32 cluster.name: es-cluster                         #组播的名称地址\n40 node.name: \"es-node1 \"                           #节点名称，不能和其他节点重复\n47 node.master: true                                #节点能否被选举为master\n51 node.data: true                                  #节点是否存储数据\n107 index.number_of_shards: 5                       #索引分片的个数\n111 index.number_of_replicas: 1                     #分片的副本个数\n145 path.conf: /usr/local/elasticsearch/config/     #配置文件的路径\n149 path.data: /data/es/data                        #数据目录路径\n159 path.work: /data/es/worker                      #工作目录路径\n163 path.logs:  /usr/local/elasticsearch/logs/      #日志文件路径\n167 path.plugins:  /data/es/plugins                 #插件路径\n184 bootstrap.mlockall: true                        #内存不向swap交换\n232 http.enabled: true                              #启用http\n```\n\n- 4.创建相关目录\n```\nmkdir /data/es/{data,worker,plugins} -p\n```\n\n- 5.获取es服务管理脚本\n```\n​[root@es1 ~]# git clone https://github.com/elastic/elasticsearch-servicewrapper.git\n[root@es1 ~]# mv elasticsearch-servicewrapper/service /usr/local/elasticsearch/bin/\n[root@es1 ~]# /usr/local/elasticsearch/bin/service/elasticsearch install \nDetected RHEL or Fedora:\nInstalling the Elasticsearch daemon..\n[root@es1 ~]# \n```\n这时就会在/etc/init.d/目录下安装上es的管理脚本啦\n\n- 修改其配置:\n```\n[root@es1 ~]# \nset.default.ES_HOME=/usr/local/elasticsearch   #安装路径\nset.default.ES_HEAP_SIZE=1024\n```\n\n- 6.启动es ，并检查其服务是否正常\nes启动方式是进入bin目录\n```\n/usr/local/elasticsearch/bin/\n```\n运行\n```\n./elasticsearch\n```\n启动\n\n```\n[root@es1 ~]# netstat -nlpt | grep -E \"9200|\"9300\ntcp        0      0 0.0.0.0:9200                0.0.0.0:*                   LISTEN      1684/java           \ntcp        0      0 0.0.0.0:9300                0.0.0.0:*                   LISTEN      1684/java\n```\n\n访问http://192.168.2.18:9200/ 返回es节点信息，说明安装配置完成.\n\n- 7.复制同样的步骤和配置到es2，只需要修改node.name即可，其他都与es1相同配置\n- 8.安装es的管理插件\nes官方提供一个用于管理es的插件，可清晰直观看到es集群的状态，以及对集群的操作管理，安装方法如下：\n```\n[root@es1 local]# /usr/local/elasticsearch/bin/plugin -i mobz/elasticsearch-head\n```\n\n安装好之后，访问方式为： http://192.168.2.18:9200/_plugin/head\n\n### 2.Logstash客户端安装配置\n- 安装前，需要先安装java\n- YUM方式安装Logstash\n\nDownload and install the public signing key:\n```\nrpm --import https://packages.elastic.co/GPG-KEY-elasticsearch\n```\n\nAdd the following in your /etc/yum.repos.d/ directory in a file with a .repo suffix, for example logstash.repo\n```\n[logstash-2.3]\nname=Logstash repository for 2.3.x packages\nbaseurl=https://packages.elastic.co/logstash/2.3/centos\ngpgcheck=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n\nAnd your repository is ready for use. You can install it with:\n```\nyum install logstash\n```\n\n此时logstash会安装在目录：/opt/logstash/\n进入/opt/logstash/bin/目录\nvim logstash.conf\n即可对这个logstash客户端进行设置，可以设置输入和输出\n输入定义信息来源于何处，输出定义消息发送到哪里\n\n\n- logstash一些操作：\n检查配置是否正确\n/opt/logstash/bin/logstash -f logstash.conf --configtest --verbose\n启动logstash\n/opt/logstash/bin/logstash -f logstash.conf\n\n- 3.Logstash 向es集群写数据\n编写一个logstash配置文件\n```\n[root@webserver1 etc]# vi logstash.conf \ninput {              #数据的输入从标准输入\n  stdin {}   \n}\n\noutput {             #数据的输出我们指向了es集群\n  elasticsearch {\n    hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]　　　＃es主机的ip及端口\n  }\n}\n```\n\n- 命令/opt/logstash/bin/logstash -f logstash.conf 启动后，如果有信息产生，就会向es集群写入数据，可以在es页面中看到\n\n- 例子：将web app的log日志写入es中，使用如下脚本\n```\ninput {\n  file {\n    path => \"/usr/local/log.log\"\n    start_position => \"beginning\"\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n    index => \"web-app-%{+YYYY-MM}\"\n  }\n}\n```\n\n\n### 3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);\n\nkafka的软件包中自带zookeeper，并且是解压即可使用。可以官网下载上传服务器，也可直接服务器下载\n\n- 1.获取软件包.官网：http://kafka.apache.org\n```\n[root@kafka1 ~]# wget http://mirror.rise.ph/apache/kafka/0.8.2.1/kafka_2.11-0.8.2.1.tgz\n[root@kafka1 ~]# tar -xf kafka_2.11-0.8.2.1.tgz -C /usr/local/\n[root@kafka1 ~]# cd /usr/local/\n[root@kafka1 local]# ln -sv kafka_2.11-0.8.2.1 kafka\n```\n\n- 2.配置zookeeper集群，修改配置文件\n```\n[root@kafka1 ~]# vim /usr/local/kafka/config/zookeeper.propertie\ndataDir=/data/zookeeper\nclienrtPort=2181\ntickTime=2000\ninitLimit=20\nsyncLimit=10\nserver.2=192.168.1.245:2888:3888\nserver.3=192.168.1.246:2888:3888\nserver.4=192.168.1.247:2888:3888\n```\n\n- 3.创建zookeeper所需要的目录\n```\n[root@kafka1 ~]# mkdir /data/zookeeper\n```\n\n- 4.在/data/zookeeper目录下创建myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper是没法启动的哦\n```\n[root@kafka1 ~]# echo 2 > /data/zookeeper/myid\n```\n以上就是zookeeper集群的配置，下面等我配置好kafka之后直接复制到其他两个节点即可\n\n- 5.kafka配置\n```\n[root@kafka1 ~]# vim /usr/local/kafka/config/server.properties \nbroker.id=2    　　　　    ＃　唯一，填数字，本文中分别为2/3/4\nprot=9092　　　　　　　     ＃　这个broker监听的端口　\nhost.name=192.168.2.22　  ＃　唯一，填服务器IP\nlog.dir=/data/kafka-logs  #  该目录可以不用提前创建，在启动时自己会创建\nzookeeper.connect=192.168.2.22:2181,192.168.2.23:2181,192.168.2.24:2181　　＃这个就是zookeeper的ip及端口\nnum.partitions=16         # 需要配置较大 分片影响读写速度\nlog.dirs=/data/kafka-logs # 数据目录也要单独配置磁盘较大的地方\nlog.retention.hours=168   # 时间按需求保留过期时间 避免磁盘满\n```\n\n\n- 6.将kafka(zookeeper)的程序目录全部拷贝至其他两个节点\n\n- 7.修改两个借点的配置，注意这里除了以下两点不同外，都是相同的配置\n```\n（1）zookeeper的配置\nmkdir /data/zookeeper\necho \"x\" > /data/zookeeper/myid\n（2）kafka的配置\nbroker.id=2\nhost.name=192.168.2.22\n```\n\n- 8.修改完毕配置之后我们就可以启动了，这里先要启动zookeeper集群，才能启动kafka\n```\n[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &   #zookeeper启动命令\n[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-stop.sh                                                   #zookeeper停止的命令\n```\n\n- 9.zookeeper服务检查\n```\n[root@kafka1~]#  netstat -nlpt | grep -E \"2181|2888|3888\"\n```\n\nok.  这时候zookeeper集群已经启动起来了，下面启动kafka，也是依次按照顺序启动\n```\n[root@kafka1 ~]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &   #kafka启动的命令\n[root@kafka1 ~]#  /usr/local/kafka/bin/kafka-server-stop.sh                                                         #kafka停止的命令\n```\n注意，跟zookeeper服务一样，如果kafka有问题 nohup的日志文件会非常大,把磁盘占满，这个kafka服务同样可以通过自己些服务脚本来管理服务的启动与关闭。\n\n- 10，下面我们将webs app上面的logstash的输出改到kafka上面，将数据写入到kafka中\n```\ninput {             #这里的输入还是定义的是从日志文件输入\n  file {\n    type => \"web-app\" \n    path => \"/usr/local/log.log\"\n    start_position => \"beginning\"\n  }\n}\n\noutput {\n    #stdout { codec => rubydebug }\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"web-app-message\"\n      compression_type => \"snappy\"\n    }\n}\n```\n\n- 然后再每台kafka上安装logstash，把kafka的消息发送到es\n使用logstash脚本：\n```\ninput {\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        topic_id => \"web-app-message\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n}\n\noutput {\n    elasticsearch {\n      hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n      index => \"test-web-app-message-%{+YYYY-MM}\"\n  }\n}\n```\n\n\n### 4.Kibana部署;\n\n我们在两台es上面搭建两套kibana\n\n- 1.获取kibana软件包\n```\n[root@es1 ~]# wget https://download.elastic.co/kibana/kibana/kibana-4.1.2-linux-x64.tar.gz\n[root@es1 ~]# tar -xf kibana-4.2.0-linux-x64.tar.gz -C /usr/local/\n```\n\n- 2.修改配置文件\n```\n[root@es1 ~]# cd /usr/local/\n[root@es1 local]# ln -sv kibana-4.1.2-linux-x64 kibana\n`kibana' -> `kibana-4.2.0-linux-x64'\n[root@es1 local]# cd kibana\n\n[root@es1 kibana]# vim config/kibana.yml\nserver.port: 5601      #默认端口可以修改的\nserver.host: \"0.0.0.0\" #kibana监听的ip\nelasticsearch.url: \"http://localhost:9200\" #由于es在本地主机上面，所以这个选项打开注释即可\n```\n\n- kibana安装后，直接进入kibana的安装目录\n/user/local/kibana/bin\n运行\n./kibana\n启动\n\n- 5.服务检查\n```\n[root@es1 config]# ss -tunl | grep \"5601\"\ntcp    LISTEN     0      511                    *:5601                  *:*\n```\n此时访问es1主机的5601端口，即可看见kibana的页面：\nhttp://192.168.1.163:5601\n\n- 6.es2上的kibana与es1一样\n\n\n\n\n### 5.Nginx负载均衡Kibana请求;\n\n- 1.在nginx-proxy上面yum安装nginx\n```\nyum install -y nignx\n```\n\n- 2.编写配置文件es.conf\n```\n[root@saltstack-node1 conf.d]# pwd \n/etc/nginx/conf.d\n[root@saltstack-node1 conf.d]# cat es.conf \nupstream es {\n    server 192.168.2.18:5601 max_fails=3 fail_timeout=30s;\n    server 192.168.2.19:5601 max_fails=3 fail_timeout=30s;\n}\n \nserver {\n    listen       80;\n    server_name  localhost;\n \n    location / {\n        proxy_pass http://es/;\n        index index.html index.htm;\n        #auth\n        auth_basic \"ELK Private\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n \n }\n```\n\n3.创建认证\n```\n[root@saltstack-node1 conf.d]# htpasswd -cm /etc/nginx/.htpasswd elk\nNew password: \nRe-type new password: \nAdding password for user elk-user\n[root@saltstack-node1 conf.d]# /etc/init.d/nginx restart\nStopping nginx:                                            [  OK  ]\nStarting nginx:                                            [  OK  ]\n[root@saltstack-node1 conf.d]# \n```\n\n- 4.直接输入认证用户及密码就可访问啦http://192.168.1.244/\n\n\n\n\n### 6.案例：nginx日志收集以及MySQL慢日志收集;\n\n- 先在web app服务器上安装nginx和mysql\n\n- 1.为了方便nginx日志的统计搜索，这里设置nginx访问日志格式为json\n\n(1)修改nginx主配置文件\n\n说明：如果想实现日志的报表展示，最好将业务日志直接以json格式输出，这样可以极大减轻cpu负载，也省得运维需要写负载的filter过滤正则。\n\n```\n[root@webserver1 nginx]# vim nginx.conf\nlog_format json '{\"@timestamp\":\"$time_iso8601\",'\n                '\"@version\":\"1\",'\n                '\"client\":\"$remote_addr\",'\n                '\"url\":\"$uri\",'\n                '\"status\":\"$status\",'\n                '\"domain\":\"$host\",'\n                '\"host\":\"$server_addr\",'\n                '\"size\":$body_bytes_sent,'\n                '\"responsetime\":$request_time,'\n                '\"referer\": \"$http_referer\",'\n                '\"ua\": \"$http_user_agent\"'\n                '}';\n  access_log  /var/log/access_json.log  json;\n```\n\n(2)收集nginx日志和MySQL日志到消息队列中；这个文件我们是定义在客户端，即生产服务器上面的Logstash文件\n```\ninput {\n  file {\n    type => \"web-app\"\n    path => \"/usr/local/log.log\"\n    start_position => \"beginning\"\n  }\n  file {\n    type => \"nginx-access\"\n    path => \"/var/log/nginx/access.log\"\n    start_position => \"beginning\"\n    codec => \"json\"\n  }\n  file {\n   type => \"slow-mysql\"\n   path => \"/var/run/mysqld/mysqld-slow.log\"\n   start_position => \"beginning\"\n   codec => multiline {\n     pattern => \"^# User@Host\"\n     negate => true\n     what => \"previous\"\n   }\n  }\n}\n\noutput {\n  if [type] == \"nginx-access\" {\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"nginx-access\"\n      compression_type => \"snappy\"\n    }\n  }\n  if [type] == \"slow-mysql\" {\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"slow-mysql\"\n      compression_type => \"snappy\"\n    }\n  }\n  if [type] == \"web-app\" {\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"web-app-message\"\n      compression_type => \"snappy\"\n    }\n  }\n}\n```\n\n/opt/logstash/bin/logstash -f logstash.conf --configtest --verbose\n\n/opt/logstash/bin/logstash -f logstash.conf\n\n(3)Logstash 从kafka集群中读取日志存储到es中，这里的定义logstash文件是在三台kafka服务器上面\n```\ninput {\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        topic_id => \"web-app-message\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        type => \"nginx-access\"\n        topic_id => \"nginx-access\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        type => \"slow-mysql\"\n        topic_id => \"slow-mysql\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n}\n\noutput {\n    if [type] == \"nginx-access\" {\n         elasticsearch {\n                hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n                 index => \"nginx-access-%{+YYYY-MM}\"\n         }\n    }\n    if [type] == \"slow-mysql\" {\n         elasticsearch {\n                hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n                index => \"slow-mysql-%{+YYYY-MM}\"\n        }\n    }\n    if [type] == \"web-app-message\" {\n         elasticsearch {\n                hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n                index => \"test-web-app-message-%{+YYYY-MM}\"\n        }\n    }\n}\n```\n\n(4)创建nginx-access 日志索引\n(5)创建MySQL慢日志索引\n\n这两个都是在kibana的页面上创建配置\n\n\n### 7.Kibana报表基本使用;","source":"_posts/ELK-Kafka企业日志收集平台搭建总结.md","raw":"---\ntitle: ELK+Kafka企业日志收集平台搭建总结\ndate: 2016-09-09 01:31:02\ntags: [ELK, elasticsearch, es, kafka, zookeeper, kibana, logstash, nginx, log]\n---\n\n# 3.ELK+Kafka 企业日志收集平台搭建总结\n\n\n\n### 平台架构：\n- 1台生产应用服务器：192.168.1.119\n- 3台zookeeper+kafka集群服务器：192.168.1.245, 192.168.1.246, 192.168.1.247\n- 2台es+kibana集群服务器：192.168.1.162, 192.168.1.163\n- 1台nginx服务器反向代理到kibana集群：192.168.1.244\n\n### 软件选用\n```\nelasticsearch-1.7.3.tar.gz \nLogstash-2.3.*\nkibana-4.1.2-linux-x64.tar.gz\n以上软件都可以从官网下载:https://www.elastic.co/downloads\njava-1.8.65\nnginx采用yum安装\n```\n\n### 平台安装配置\n\n####部署步骤：\n1.ES集群安装配置;\n2.Logstash客户端配置(直接写入数据到ES集群，写入系统messages日志);\n3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);\n4.Kibana部署;\n5.Nginx负载均衡Kibana请求;\n6.案例：nginx日志收集以及MySQL慢日志收集;\n7.Kibana报表基本使用;\n\n\n### 1.ES集群安装配置;\n- 需要先安装java1.8\n- 2.获取es软件包\n```\nwget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.3.tar.gz\ntar -xf elasticsearch-1.7.3.tar.gz -C /usr/local\nln -sv /usr/local/elasticsearch-1.7.3 /usr/local/elasticsearch\n```\n\n- 3.修改配置文件\n\n```\n[root@es1 ~]# vim /usr/local/elasticsearch/config/elasticsearch.yml \n32 cluster.name: es-cluster                         #组播的名称地址\n40 node.name: \"es-node1 \"                           #节点名称，不能和其他节点重复\n47 node.master: true                                #节点能否被选举为master\n51 node.data: true                                  #节点是否存储数据\n107 index.number_of_shards: 5                       #索引分片的个数\n111 index.number_of_replicas: 1                     #分片的副本个数\n145 path.conf: /usr/local/elasticsearch/config/     #配置文件的路径\n149 path.data: /data/es/data                        #数据目录路径\n159 path.work: /data/es/worker                      #工作目录路径\n163 path.logs:  /usr/local/elasticsearch/logs/      #日志文件路径\n167 path.plugins:  /data/es/plugins                 #插件路径\n184 bootstrap.mlockall: true                        #内存不向swap交换\n232 http.enabled: true                              #启用http\n```\n\n- 4.创建相关目录\n```\nmkdir /data/es/{data,worker,plugins} -p\n```\n\n- 5.获取es服务管理脚本\n```\n​[root@es1 ~]# git clone https://github.com/elastic/elasticsearch-servicewrapper.git\n[root@es1 ~]# mv elasticsearch-servicewrapper/service /usr/local/elasticsearch/bin/\n[root@es1 ~]# /usr/local/elasticsearch/bin/service/elasticsearch install \nDetected RHEL or Fedora:\nInstalling the Elasticsearch daemon..\n[root@es1 ~]# \n```\n这时就会在/etc/init.d/目录下安装上es的管理脚本啦\n\n- 修改其配置:\n```\n[root@es1 ~]# \nset.default.ES_HOME=/usr/local/elasticsearch   #安装路径\nset.default.ES_HEAP_SIZE=1024\n```\n\n- 6.启动es ，并检查其服务是否正常\nes启动方式是进入bin目录\n```\n/usr/local/elasticsearch/bin/\n```\n运行\n```\n./elasticsearch\n```\n启动\n\n```\n[root@es1 ~]# netstat -nlpt | grep -E \"9200|\"9300\ntcp        0      0 0.0.0.0:9200                0.0.0.0:*                   LISTEN      1684/java           \ntcp        0      0 0.0.0.0:9300                0.0.0.0:*                   LISTEN      1684/java\n```\n\n访问http://192.168.2.18:9200/ 返回es节点信息，说明安装配置完成.\n\n- 7.复制同样的步骤和配置到es2，只需要修改node.name即可，其他都与es1相同配置\n- 8.安装es的管理插件\nes官方提供一个用于管理es的插件，可清晰直观看到es集群的状态，以及对集群的操作管理，安装方法如下：\n```\n[root@es1 local]# /usr/local/elasticsearch/bin/plugin -i mobz/elasticsearch-head\n```\n\n安装好之后，访问方式为： http://192.168.2.18:9200/_plugin/head\n\n### 2.Logstash客户端安装配置\n- 安装前，需要先安装java\n- YUM方式安装Logstash\n\nDownload and install the public signing key:\n```\nrpm --import https://packages.elastic.co/GPG-KEY-elasticsearch\n```\n\nAdd the following in your /etc/yum.repos.d/ directory in a file with a .repo suffix, for example logstash.repo\n```\n[logstash-2.3]\nname=Logstash repository for 2.3.x packages\nbaseurl=https://packages.elastic.co/logstash/2.3/centos\ngpgcheck=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n\nAnd your repository is ready for use. You can install it with:\n```\nyum install logstash\n```\n\n此时logstash会安装在目录：/opt/logstash/\n进入/opt/logstash/bin/目录\nvim logstash.conf\n即可对这个logstash客户端进行设置，可以设置输入和输出\n输入定义信息来源于何处，输出定义消息发送到哪里\n\n\n- logstash一些操作：\n检查配置是否正确\n/opt/logstash/bin/logstash -f logstash.conf --configtest --verbose\n启动logstash\n/opt/logstash/bin/logstash -f logstash.conf\n\n- 3.Logstash 向es集群写数据\n编写一个logstash配置文件\n```\n[root@webserver1 etc]# vi logstash.conf \ninput {              #数据的输入从标准输入\n  stdin {}   \n}\n\noutput {             #数据的输出我们指向了es集群\n  elasticsearch {\n    hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]　　　＃es主机的ip及端口\n  }\n}\n```\n\n- 命令/opt/logstash/bin/logstash -f logstash.conf 启动后，如果有信息产生，就会向es集群写入数据，可以在es页面中看到\n\n- 例子：将web app的log日志写入es中，使用如下脚本\n```\ninput {\n  file {\n    path => \"/usr/local/log.log\"\n    start_position => \"beginning\"\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n    index => \"web-app-%{+YYYY-MM}\"\n  }\n}\n```\n\n\n### 3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);\n\nkafka的软件包中自带zookeeper，并且是解压即可使用。可以官网下载上传服务器，也可直接服务器下载\n\n- 1.获取软件包.官网：http://kafka.apache.org\n```\n[root@kafka1 ~]# wget http://mirror.rise.ph/apache/kafka/0.8.2.1/kafka_2.11-0.8.2.1.tgz\n[root@kafka1 ~]# tar -xf kafka_2.11-0.8.2.1.tgz -C /usr/local/\n[root@kafka1 ~]# cd /usr/local/\n[root@kafka1 local]# ln -sv kafka_2.11-0.8.2.1 kafka\n```\n\n- 2.配置zookeeper集群，修改配置文件\n```\n[root@kafka1 ~]# vim /usr/local/kafka/config/zookeeper.propertie\ndataDir=/data/zookeeper\nclienrtPort=2181\ntickTime=2000\ninitLimit=20\nsyncLimit=10\nserver.2=192.168.1.245:2888:3888\nserver.3=192.168.1.246:2888:3888\nserver.4=192.168.1.247:2888:3888\n```\n\n- 3.创建zookeeper所需要的目录\n```\n[root@kafka1 ~]# mkdir /data/zookeeper\n```\n\n- 4.在/data/zookeeper目录下创建myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper是没法启动的哦\n```\n[root@kafka1 ~]# echo 2 > /data/zookeeper/myid\n```\n以上就是zookeeper集群的配置，下面等我配置好kafka之后直接复制到其他两个节点即可\n\n- 5.kafka配置\n```\n[root@kafka1 ~]# vim /usr/local/kafka/config/server.properties \nbroker.id=2    　　　　    ＃　唯一，填数字，本文中分别为2/3/4\nprot=9092　　　　　　　     ＃　这个broker监听的端口　\nhost.name=192.168.2.22　  ＃　唯一，填服务器IP\nlog.dir=/data/kafka-logs  #  该目录可以不用提前创建，在启动时自己会创建\nzookeeper.connect=192.168.2.22:2181,192.168.2.23:2181,192.168.2.24:2181　　＃这个就是zookeeper的ip及端口\nnum.partitions=16         # 需要配置较大 分片影响读写速度\nlog.dirs=/data/kafka-logs # 数据目录也要单独配置磁盘较大的地方\nlog.retention.hours=168   # 时间按需求保留过期时间 避免磁盘满\n```\n\n\n- 6.将kafka(zookeeper)的程序目录全部拷贝至其他两个节点\n\n- 7.修改两个借点的配置，注意这里除了以下两点不同外，都是相同的配置\n```\n（1）zookeeper的配置\nmkdir /data/zookeeper\necho \"x\" > /data/zookeeper/myid\n（2）kafka的配置\nbroker.id=2\nhost.name=192.168.2.22\n```\n\n- 8.修改完毕配置之后我们就可以启动了，这里先要启动zookeeper集群，才能启动kafka\n```\n[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &   #zookeeper启动命令\n[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-stop.sh                                                   #zookeeper停止的命令\n```\n\n- 9.zookeeper服务检查\n```\n[root@kafka1~]#  netstat -nlpt | grep -E \"2181|2888|3888\"\n```\n\nok.  这时候zookeeper集群已经启动起来了，下面启动kafka，也是依次按照顺序启动\n```\n[root@kafka1 ~]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &   #kafka启动的命令\n[root@kafka1 ~]#  /usr/local/kafka/bin/kafka-server-stop.sh                                                         #kafka停止的命令\n```\n注意，跟zookeeper服务一样，如果kafka有问题 nohup的日志文件会非常大,把磁盘占满，这个kafka服务同样可以通过自己些服务脚本来管理服务的启动与关闭。\n\n- 10，下面我们将webs app上面的logstash的输出改到kafka上面，将数据写入到kafka中\n```\ninput {             #这里的输入还是定义的是从日志文件输入\n  file {\n    type => \"web-app\" \n    path => \"/usr/local/log.log\"\n    start_position => \"beginning\"\n  }\n}\n\noutput {\n    #stdout { codec => rubydebug }\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"web-app-message\"\n      compression_type => \"snappy\"\n    }\n}\n```\n\n- 然后再每台kafka上安装logstash，把kafka的消息发送到es\n使用logstash脚本：\n```\ninput {\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        topic_id => \"web-app-message\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n}\n\noutput {\n    elasticsearch {\n      hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n      index => \"test-web-app-message-%{+YYYY-MM}\"\n  }\n}\n```\n\n\n### 4.Kibana部署;\n\n我们在两台es上面搭建两套kibana\n\n- 1.获取kibana软件包\n```\n[root@es1 ~]# wget https://download.elastic.co/kibana/kibana/kibana-4.1.2-linux-x64.tar.gz\n[root@es1 ~]# tar -xf kibana-4.2.0-linux-x64.tar.gz -C /usr/local/\n```\n\n- 2.修改配置文件\n```\n[root@es1 ~]# cd /usr/local/\n[root@es1 local]# ln -sv kibana-4.1.2-linux-x64 kibana\n`kibana' -> `kibana-4.2.0-linux-x64'\n[root@es1 local]# cd kibana\n\n[root@es1 kibana]# vim config/kibana.yml\nserver.port: 5601      #默认端口可以修改的\nserver.host: \"0.0.0.0\" #kibana监听的ip\nelasticsearch.url: \"http://localhost:9200\" #由于es在本地主机上面，所以这个选项打开注释即可\n```\n\n- kibana安装后，直接进入kibana的安装目录\n/user/local/kibana/bin\n运行\n./kibana\n启动\n\n- 5.服务检查\n```\n[root@es1 config]# ss -tunl | grep \"5601\"\ntcp    LISTEN     0      511                    *:5601                  *:*\n```\n此时访问es1主机的5601端口，即可看见kibana的页面：\nhttp://192.168.1.163:5601\n\n- 6.es2上的kibana与es1一样\n\n\n\n\n### 5.Nginx负载均衡Kibana请求;\n\n- 1.在nginx-proxy上面yum安装nginx\n```\nyum install -y nignx\n```\n\n- 2.编写配置文件es.conf\n```\n[root@saltstack-node1 conf.d]# pwd \n/etc/nginx/conf.d\n[root@saltstack-node1 conf.d]# cat es.conf \nupstream es {\n    server 192.168.2.18:5601 max_fails=3 fail_timeout=30s;\n    server 192.168.2.19:5601 max_fails=3 fail_timeout=30s;\n}\n \nserver {\n    listen       80;\n    server_name  localhost;\n \n    location / {\n        proxy_pass http://es/;\n        index index.html index.htm;\n        #auth\n        auth_basic \"ELK Private\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n \n }\n```\n\n3.创建认证\n```\n[root@saltstack-node1 conf.d]# htpasswd -cm /etc/nginx/.htpasswd elk\nNew password: \nRe-type new password: \nAdding password for user elk-user\n[root@saltstack-node1 conf.d]# /etc/init.d/nginx restart\nStopping nginx:                                            [  OK  ]\nStarting nginx:                                            [  OK  ]\n[root@saltstack-node1 conf.d]# \n```\n\n- 4.直接输入认证用户及密码就可访问啦http://192.168.1.244/\n\n\n\n\n### 6.案例：nginx日志收集以及MySQL慢日志收集;\n\n- 先在web app服务器上安装nginx和mysql\n\n- 1.为了方便nginx日志的统计搜索，这里设置nginx访问日志格式为json\n\n(1)修改nginx主配置文件\n\n说明：如果想实现日志的报表展示，最好将业务日志直接以json格式输出，这样可以极大减轻cpu负载，也省得运维需要写负载的filter过滤正则。\n\n```\n[root@webserver1 nginx]# vim nginx.conf\nlog_format json '{\"@timestamp\":\"$time_iso8601\",'\n                '\"@version\":\"1\",'\n                '\"client\":\"$remote_addr\",'\n                '\"url\":\"$uri\",'\n                '\"status\":\"$status\",'\n                '\"domain\":\"$host\",'\n                '\"host\":\"$server_addr\",'\n                '\"size\":$body_bytes_sent,'\n                '\"responsetime\":$request_time,'\n                '\"referer\": \"$http_referer\",'\n                '\"ua\": \"$http_user_agent\"'\n                '}';\n  access_log  /var/log/access_json.log  json;\n```\n\n(2)收集nginx日志和MySQL日志到消息队列中；这个文件我们是定义在客户端，即生产服务器上面的Logstash文件\n```\ninput {\n  file {\n    type => \"web-app\"\n    path => \"/usr/local/log.log\"\n    start_position => \"beginning\"\n  }\n  file {\n    type => \"nginx-access\"\n    path => \"/var/log/nginx/access.log\"\n    start_position => \"beginning\"\n    codec => \"json\"\n  }\n  file {\n   type => \"slow-mysql\"\n   path => \"/var/run/mysqld/mysqld-slow.log\"\n   start_position => \"beginning\"\n   codec => multiline {\n     pattern => \"^# User@Host\"\n     negate => true\n     what => \"previous\"\n   }\n  }\n}\n\noutput {\n  if [type] == \"nginx-access\" {\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"nginx-access\"\n      compression_type => \"snappy\"\n    }\n  }\n  if [type] == \"slow-mysql\" {\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"slow-mysql\"\n      compression_type => \"snappy\"\n    }\n  }\n  if [type] == \"web-app\" {\n    kafka {\n      bootstrap_servers => \"192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092\"\n      topic_id => \"web-app-message\"\n      compression_type => \"snappy\"\n    }\n  }\n}\n```\n\n/opt/logstash/bin/logstash -f logstash.conf --configtest --verbose\n\n/opt/logstash/bin/logstash -f logstash.conf\n\n(3)Logstash 从kafka集群中读取日志存储到es中，这里的定义logstash文件是在三台kafka服务器上面\n```\ninput {\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        topic_id => \"web-app-message\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        type => \"nginx-access\"\n        topic_id => \"nginx-access\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n    kafka {\n        zk_connect => \"192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181\"\n        type => \"slow-mysql\"\n        topic_id => \"slow-mysql\"\n        codec => plain\n        reset_beginning => false\n        consumer_threads => 5\n        decorate_events => true\n    }\n}\n\noutput {\n    if [type] == \"nginx-access\" {\n         elasticsearch {\n                hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n                 index => \"nginx-access-%{+YYYY-MM}\"\n         }\n    }\n    if [type] == \"slow-mysql\" {\n         elasticsearch {\n                hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n                index => \"slow-mysql-%{+YYYY-MM}\"\n        }\n    }\n    if [type] == \"web-app-message\" {\n         elasticsearch {\n                hosts => [\"192.168.1.162:9200\",\"192.168.1.163:9200\"]\n                index => \"test-web-app-message-%{+YYYY-MM}\"\n        }\n    }\n}\n```\n\n(4)创建nginx-access 日志索引\n(5)创建MySQL慢日志索引\n\n这两个都是在kibana的页面上创建配置\n\n\n### 7.Kibana报表基本使用;","slug":"ELK-Kafka企业日志收集平台搭建总结","published":1,"updated":"2016-12-18T05:14:10.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usne000800uu21aumksd","content":"<h1 id=\"3-ELK-Kafka-企业日志收集平台搭建总结\"><a href=\"#3-ELK-Kafka-企业日志收集平台搭建总结\" class=\"headerlink\" title=\"3.ELK+Kafka 企业日志收集平台搭建总结\"></a>3.ELK+Kafka 企业日志收集平台搭建总结</h1><h3 id=\"平台架构：\"><a href=\"#平台架构：\" class=\"headerlink\" title=\"平台架构：\"></a>平台架构：</h3><ul>\n<li>1台生产应用服务器：192.168.1.119</li>\n<li>3台zookeeper+kafka集群服务器：192.168.1.245, 192.168.1.246, 192.168.1.247</li>\n<li>2台es+kibana集群服务器：192.168.1.162, 192.168.1.163</li>\n<li>1台nginx服务器反向代理到kibana集群：192.168.1.244</li>\n</ul>\n<h3 id=\"软件选用\"><a href=\"#软件选用\" class=\"headerlink\" title=\"软件选用\"></a>软件选用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch-1.7.3.tar.gz </span><br><span class=\"line\">Logstash-2.3.*</span><br><span class=\"line\">kibana-4.1.2-linux-x64.tar.gz</span><br><span class=\"line\">以上软件都可以从官网下载:https://www.elastic.co/downloads</span><br><span class=\"line\">java-1.8.65</span><br><span class=\"line\">nginx采用yum安装</span><br></pre></td></tr></table></figure>\n<h3 id=\"平台安装配置\"><a href=\"#平台安装配置\" class=\"headerlink\" title=\"平台安装配置\"></a>平台安装配置</h3><p>####部署步骤：<br>1.ES集群安装配置;<br>2.Logstash客户端配置(直接写入数据到ES集群，写入系统messages日志);<br>3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);<br>4.Kibana部署;<br>5.Nginx负载均衡Kibana请求;<br>6.案例：nginx日志收集以及MySQL慢日志收集;<br>7.Kibana报表基本使用;</p>\n<h3 id=\"1-ES集群安装配置\"><a href=\"#1-ES集群安装配置\" class=\"headerlink\" title=\"1.ES集群安装配置;\"></a>1.ES集群安装配置;</h3><ul>\n<li>需要先安装java1.8</li>\n<li><p>2.获取es软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.3.tar.gz</span><br><span class=\"line\">tar -xf elasticsearch-1.7.3.tar.gz -C /usr/local</span><br><span class=\"line\">ln -sv /usr/local/elasticsearch-1.7.3 /usr/local/elasticsearch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.修改配置文件</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# vim /usr/local/elasticsearch/config/elasticsearch.yml </span><br><span class=\"line\">32 cluster.name: es-cluster                         #组播的名称地址</span><br><span class=\"line\">40 node.name: &quot;es-node1 &quot;                           #节点名称，不能和其他节点重复</span><br><span class=\"line\">47 node.master: true                                #节点能否被选举为master</span><br><span class=\"line\">51 node.data: true                                  #节点是否存储数据</span><br><span class=\"line\">107 index.number_of_shards: 5                       #索引分片的个数</span><br><span class=\"line\">111 index.number_of_replicas: 1                     #分片的副本个数</span><br><span class=\"line\">145 path.conf: /usr/local/elasticsearch/config/     #配置文件的路径</span><br><span class=\"line\">149 path.data: /data/es/data                        #数据目录路径</span><br><span class=\"line\">159 path.work: /data/es/worker                      #工作目录路径</span><br><span class=\"line\">163 path.logs:  /usr/local/elasticsearch/logs/      #日志文件路径</span><br><span class=\"line\">167 path.plugins:  /data/es/plugins                 #插件路径</span><br><span class=\"line\">184 bootstrap.mlockall: true                        #内存不向swap交换</span><br><span class=\"line\">232 http.enabled: true                              #启用http</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>4.创建相关目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/es/&#123;data,worker,plugins&#125; -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.获取es服务管理脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​[root@es1 ~]# git clone https://github.com/elastic/elasticsearch-servicewrapper.git</span><br><span class=\"line\">[root@es1 ~]# mv elasticsearch-servicewrapper/service /usr/local/elasticsearch/bin/</span><br><span class=\"line\">[root@es1 ~]# /usr/local/elasticsearch/bin/service/elasticsearch install </span><br><span class=\"line\">Detected RHEL or Fedora:</span><br><span class=\"line\">Installing the Elasticsearch daemon..</span><br><span class=\"line\">[root@es1 ~]#</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这时就会在/etc/init.d/目录下安装上es的管理脚本啦</p>\n<ul>\n<li><p>修改其配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# </span><br><span class=\"line\">set.default.ES_HOME=/usr/local/elasticsearch   #安装路径</span><br><span class=\"line\">set.default.ES_HEAP_SIZE=1024</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.启动es ，并检查其服务是否正常<br>es启动方式是进入bin目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/elasticsearch/bin/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./elasticsearch</span><br></pre></td></tr></table></figure></p>\n<p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# netstat -nlpt | grep -E &quot;9200|&quot;9300</span><br><span class=\"line\">tcp        0      0 0.0.0.0:9200                0.0.0.0:*                   LISTEN      1684/java           </span><br><span class=\"line\">tcp        0      0 0.0.0.0:9300                0.0.0.0:*                   LISTEN      1684/java</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://192.168.2.18:9200/\" target=\"_blank\" rel=\"external\">http://192.168.2.18:9200/</a> 返回es节点信息，说明安装配置完成.</p>\n<ul>\n<li>7.复制同样的步骤和配置到es2，只需要修改node.name即可，其他都与es1相同配置</li>\n<li>8.安装es的管理插件<br>es官方提供一个用于管理es的插件，可清晰直观看到es集群的状态，以及对集群的操作管理，安装方法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 local]# /usr/local/elasticsearch/bin/plugin -i mobz/elasticsearch-head</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>安装好之后，访问方式为： <a href=\"http://192.168.2.18:9200/_plugin/head\" target=\"_blank\" rel=\"external\">http://192.168.2.18:9200/_plugin/head</a></p>\n<h3 id=\"2-Logstash客户端安装配置\"><a href=\"#2-Logstash客户端安装配置\" class=\"headerlink\" title=\"2.Logstash客户端安装配置\"></a>2.Logstash客户端安装配置</h3><ul>\n<li>安装前，需要先安装java</li>\n<li>YUM方式安装Logstash</li>\n</ul>\n<p>Download and install the public signing key:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></p>\n<p>Add the following in your /etc/yum.repos.d/ directory in a file with a .repo suffix, for example logstash.repo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[logstash-2.3]</span><br><span class=\"line\">name=Logstash repository for 2.3.x packages</span><br><span class=\"line\">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure></p>\n<p>And your repository is ready for use. You can install it with:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logstash</span><br></pre></td></tr></table></figure></p>\n<p>此时logstash会安装在目录：/opt/logstash/<br>进入/opt/logstash/bin/目录<br>vim logstash.conf<br>即可对这个logstash客户端进行设置，可以设置输入和输出<br>输入定义信息来源于何处，输出定义消息发送到哪里</p>\n<ul>\n<li><p>logstash一些操作：<br>检查配置是否正确<br>/opt/logstash/bin/logstash -f logstash.conf –configtest –verbose<br>启动logstash<br>/opt/logstash/bin/logstash -f logstash.conf</p>\n</li>\n<li><p>3.Logstash 向es集群写数据<br>编写一个logstash配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@webserver1 etc]# vi logstash.conf </span><br><span class=\"line\">input &#123;              #数据的输入从标准输入</span><br><span class=\"line\">  stdin &#123;&#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;             #数据的输出我们指向了es集群</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]　　　＃es主机的ip及端口</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令/opt/logstash/bin/logstash -f logstash.conf 启动后，如果有信息产生，就会向es集群写入数据，可以在es页面中看到</p>\n</li>\n<li><p>例子：将web app的log日志写入es中，使用如下脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">    index =&gt; &quot;web-app-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-Kafka-zookeeper-集群配置-Logstash写入数据到Kafka消息系统\"><a href=\"#3-Kafka-zookeeper-集群配置-Logstash写入数据到Kafka消息系统\" class=\"headerlink\" title=\"3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);\"></a>3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);</h3><p>kafka的软件包中自带zookeeper，并且是解压即可使用。可以官网下载上传服务器，也可直接服务器下载</p>\n<ul>\n<li><p>1.获取软件包.官网：<a href=\"http://kafka.apache.org\" target=\"_blank\" rel=\"external\">http://kafka.apache.org</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# wget http://mirror.rise.ph/apache/kafka/0.8.2.1/kafka_2.11-0.8.2.1.tgz</span><br><span class=\"line\">[root@kafka1 ~]# tar -xf kafka_2.11-0.8.2.1.tgz -C /usr/local/</span><br><span class=\"line\">[root@kafka1 ~]# cd /usr/local/</span><br><span class=\"line\">[root@kafka1 local]# ln -sv kafka_2.11-0.8.2.1 kafka</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.配置zookeeper集群，修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# vim /usr/local/kafka/config/zookeeper.propertie</span><br><span class=\"line\">dataDir=/data/zookeeper</span><br><span class=\"line\">clienrtPort=2181</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=20</span><br><span class=\"line\">syncLimit=10</span><br><span class=\"line\">server.2=192.168.1.245:2888:3888</span><br><span class=\"line\">server.3=192.168.1.246:2888:3888</span><br><span class=\"line\">server.4=192.168.1.247:2888:3888</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.创建zookeeper所需要的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# mkdir /data/zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.在/data/zookeeper目录下创建myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper是没法启动的哦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# echo 2 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上就是zookeeper集群的配置，下面等我配置好kafka之后直接复制到其他两个节点即可</p>\n<ul>\n<li><p>5.kafka配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# vim /usr/local/kafka/config/server.properties </span><br><span class=\"line\">broker.id=2    　　　　    ＃　唯一，填数字，本文中分别为2/3/4</span><br><span class=\"line\">prot=9092　　　　　　　     ＃　这个broker监听的端口　</span><br><span class=\"line\">host.name=192.168.2.22　  ＃　唯一，填服务器IP</span><br><span class=\"line\">log.dir=/data/kafka-logs  #  该目录可以不用提前创建，在启动时自己会创建</span><br><span class=\"line\">zookeeper.connect=192.168.2.22:2181,192.168.2.23:2181,192.168.2.24:2181　　＃这个就是zookeeper的ip及端口</span><br><span class=\"line\">num.partitions=16         # 需要配置较大 分片影响读写速度</span><br><span class=\"line\">log.dirs=/data/kafka-logs # 数据目录也要单独配置磁盘较大的地方</span><br><span class=\"line\">log.retention.hours=168   # 时间按需求保留过期时间 避免磁盘满</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.将kafka(zookeeper)的程序目录全部拷贝至其他两个节点</p>\n</li>\n<li><p>7.修改两个借点的配置，注意这里除了以下两点不同外，都是相同的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）zookeeper的配置</span><br><span class=\"line\">mkdir /data/zookeeper</span><br><span class=\"line\">echo &quot;x&quot; &gt; /data/zookeeper/myid</span><br><span class=\"line\">（2）kafka的配置</span><br><span class=\"line\">broker.id=2</span><br><span class=\"line\">host.name=192.168.2.22</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>8.修改完毕配置之后我们就可以启动了，这里先要启动zookeeper集群，才能启动kafka</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;   #zookeeper启动命令</span><br><span class=\"line\">[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-stop.sh                                                   #zookeeper停止的命令</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>9.zookeeper服务检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1~]#  netstat -nlpt | grep -E &quot;2181|2888|3888&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ok.  这时候zookeeper集群已经启动起来了，下面启动kafka，也是依次按照顺序启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;   #kafka启动的命令</span><br><span class=\"line\">[root@kafka1 ~]#  /usr/local/kafka/bin/kafka-server-stop.sh                                                         #kafka停止的命令</span><br></pre></td></tr></table></figure></p>\n<p>注意，跟zookeeper服务一样，如果kafka有问题 nohup的日志文件会非常大,把磁盘占满，这个kafka服务同样可以通过自己些服务脚本来管理服务的启动与关闭。</p>\n<ul>\n<li><p>10，下面我们将webs app上面的logstash的输出改到kafka上面，将数据写入到kafka中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;             #这里的输入还是定义的是从日志文件输入</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    type =&gt; &quot;web-app&quot; </span><br><span class=\"line\">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    #stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后再每台kafka上安装logstash，把kafka的消息发送到es<br>使用logstash脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">      index =&gt; &quot;test-web-app-message-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4-Kibana部署\"><a href=\"#4-Kibana部署\" class=\"headerlink\" title=\"4.Kibana部署;\"></a>4.Kibana部署;</h3><p>我们在两台es上面搭建两套kibana</p>\n<ul>\n<li><p>1.获取kibana软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# wget https://download.elastic.co/kibana/kibana/kibana-4.1.2-linux-x64.tar.gz</span><br><span class=\"line\">[root@es1 ~]# tar -xf kibana-4.2.0-linux-x64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# cd /usr/local/</span><br><span class=\"line\">[root@es1 local]# ln -sv kibana-4.1.2-linux-x64 kibana</span><br><span class=\"line\">`kibana&apos; -&gt; `kibana-4.2.0-linux-x64&apos;</span><br><span class=\"line\">[root@es1 local]# cd kibana</span><br><span class=\"line\"></span><br><span class=\"line\">[root@es1 kibana]# vim config/kibana.yml</span><br><span class=\"line\">server.port: 5601      #默认端口可以修改的</span><br><span class=\"line\">server.host: &quot;0.0.0.0&quot; #kibana监听的ip</span><br><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot; #由于es在本地主机上面，所以这个选项打开注释即可</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>kibana安装后，直接进入kibana的安装目录<br>/user/local/kibana/bin<br>运行<br>./kibana<br>启动</p>\n</li>\n<li><p>5.服务检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 config]# ss -tunl | grep &quot;5601&quot;</span><br><span class=\"line\">tcp    LISTEN     0      511                    *:5601                  *:*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时访问es1主机的5601端口，即可看见kibana的页面：<br><a href=\"http://192.168.1.163:5601\" target=\"_blank\" rel=\"external\">http://192.168.1.163:5601</a></p>\n<ul>\n<li>6.es2上的kibana与es1一样</li>\n</ul>\n<h3 id=\"5-Nginx负载均衡Kibana请求\"><a href=\"#5-Nginx负载均衡Kibana请求\" class=\"headerlink\" title=\"5.Nginx负载均衡Kibana请求;\"></a>5.Nginx负载均衡Kibana请求;</h3><ul>\n<li><p>1.在nginx-proxy上面yum安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nignx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.编写配置文件es.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@saltstack-node1 conf.d]# pwd </span><br><span class=\"line\">/etc/nginx/conf.d</span><br><span class=\"line\">[root@saltstack-node1 conf.d]# cat es.conf </span><br><span class=\"line\">upstream es &#123;</span><br><span class=\"line\">    server 192.168.2.18:5601 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">    server 192.168.2.19:5601 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://es/;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        #auth</span><br><span class=\"line\">        auth_basic &quot;ELK Private&quot;;</span><br><span class=\"line\">        auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3.创建认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@saltstack-node1 conf.d]# htpasswd -cm /etc/nginx/.htpasswd elk</span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-type new password: </span><br><span class=\"line\">Adding password for user elk-user</span><br><span class=\"line\">[root@saltstack-node1 conf.d]# /etc/init.d/nginx restart</span><br><span class=\"line\">Stopping nginx:                                            [  OK  ]</span><br><span class=\"line\">Starting nginx:                                            [  OK  ]</span><br><span class=\"line\">[root@saltstack-node1 conf.d]#</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>4.直接输入认证用户及密码就可访问啦<a href=\"http://192.168.1.244/\" target=\"_blank\" rel=\"external\">http://192.168.1.244/</a></li>\n</ul>\n<h3 id=\"6-案例：nginx日志收集以及MySQL慢日志收集\"><a href=\"#6-案例：nginx日志收集以及MySQL慢日志收集\" class=\"headerlink\" title=\"6.案例：nginx日志收集以及MySQL慢日志收集;\"></a>6.案例：nginx日志收集以及MySQL慢日志收集;</h3><ul>\n<li><p>先在web app服务器上安装nginx和mysql</p>\n</li>\n<li><p>1.为了方便nginx日志的统计搜索，这里设置nginx访问日志格式为json</p>\n</li>\n</ul>\n<p>(1)修改nginx主配置文件</p>\n<p>说明：如果想实现日志的报表展示，最好将业务日志直接以json格式输出，这样可以极大减轻cpu负载，也省得运维需要写负载的filter过滤正则。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@webserver1 nginx]# vim nginx.conf</span><br><span class=\"line\">log_format json &apos;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;@version&quot;:&quot;1&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;client&quot;:&quot;$remote_addr&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;url&quot;:&quot;$uri&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;status&quot;:&quot;$status&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;domain&quot;:&quot;$host&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;host&quot;:&quot;$server_addr&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;size&quot;:$body_bytes_sent,&apos;</span><br><span class=\"line\">                &apos;&quot;responsetime&quot;:$request_time,&apos;</span><br><span class=\"line\">                &apos;&quot;referer&quot;: &quot;$http_referer&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;ua&quot;: &quot;$http_user_agent&quot;&apos;</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">  access_log  /var/log/access_json.log  json;</span><br></pre></td></tr></table></figure>\n<p>(2)收集nginx日志和MySQL日志到消息队列中；这个文件我们是定义在客户端，即生产服务器上面的Logstash文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    type =&gt; &quot;web-app&quot;</span><br><span class=\"line\">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    type =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">    path =&gt; &quot;/var/log/nginx/access.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">    codec =&gt; &quot;json&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">   type =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">   path =&gt; &quot;/var/run/mysqld/mysqld-slow.log&quot;</span><br><span class=\"line\">   start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">   codec =&gt; multiline &#123;</span><br><span class=\"line\">     pattern =&gt; &quot;^# User@Host&quot;</span><br><span class=\"line\">     negate =&gt; true</span><br><span class=\"line\">     what =&gt; &quot;previous&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if [type] == &quot;slow-mysql&quot; &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if [type] == &quot;web-app&quot; &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>/opt/logstash/bin/logstash -f logstash.conf –configtest –verbose</p>\n<p>/opt/logstash/bin/logstash -f logstash.conf</p>\n<p>(3)Logstash 从kafka集群中读取日志存储到es中，这里的定义logstash文件是在三台kafka服务器上面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        type =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        type =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">         elasticsearch &#123;</span><br><span class=\"line\">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">                 index =&gt; &quot;nginx-access-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if [type] == &quot;slow-mysql&quot; &#123;</span><br><span class=\"line\">         elasticsearch &#123;</span><br><span class=\"line\">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">                index =&gt; &quot;slow-mysql-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if [type] == &quot;web-app-message&quot; &#123;</span><br><span class=\"line\">         elasticsearch &#123;</span><br><span class=\"line\">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">                index =&gt; &quot;test-web-app-message-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(4)创建nginx-access 日志索引<br>(5)创建MySQL慢日志索引</p>\n<p>这两个都是在kibana的页面上创建配置</p>\n<h3 id=\"7-Kibana报表基本使用\"><a href=\"#7-Kibana报表基本使用\" class=\"headerlink\" title=\"7.Kibana报表基本使用;\"></a>7.Kibana报表基本使用;</h3>","excerpt":"","more":"<h1 id=\"3-ELK-Kafka-企业日志收集平台搭建总结\"><a href=\"#3-ELK-Kafka-企业日志收集平台搭建总结\" class=\"headerlink\" title=\"3.ELK+Kafka 企业日志收集平台搭建总结\"></a>3.ELK+Kafka 企业日志收集平台搭建总结</h1><h3 id=\"平台架构：\"><a href=\"#平台架构：\" class=\"headerlink\" title=\"平台架构：\"></a>平台架构：</h3><ul>\n<li>1台生产应用服务器：192.168.1.119</li>\n<li>3台zookeeper+kafka集群服务器：192.168.1.245, 192.168.1.246, 192.168.1.247</li>\n<li>2台es+kibana集群服务器：192.168.1.162, 192.168.1.163</li>\n<li>1台nginx服务器反向代理到kibana集群：192.168.1.244</li>\n</ul>\n<h3 id=\"软件选用\"><a href=\"#软件选用\" class=\"headerlink\" title=\"软件选用\"></a>软件选用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch-1.7.3.tar.gz </span><br><span class=\"line\">Logstash-2.3.*</span><br><span class=\"line\">kibana-4.1.2-linux-x64.tar.gz</span><br><span class=\"line\">以上软件都可以从官网下载:https://www.elastic.co/downloads</span><br><span class=\"line\">java-1.8.65</span><br><span class=\"line\">nginx采用yum安装</span><br></pre></td></tr></table></figure>\n<h3 id=\"平台安装配置\"><a href=\"#平台安装配置\" class=\"headerlink\" title=\"平台安装配置\"></a>平台安装配置</h3><p>####部署步骤：<br>1.ES集群安装配置;<br>2.Logstash客户端配置(直接写入数据到ES集群，写入系统messages日志);<br>3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);<br>4.Kibana部署;<br>5.Nginx负载均衡Kibana请求;<br>6.案例：nginx日志收集以及MySQL慢日志收集;<br>7.Kibana报表基本使用;</p>\n<h3 id=\"1-ES集群安装配置\"><a href=\"#1-ES集群安装配置\" class=\"headerlink\" title=\"1.ES集群安装配置;\"></a>1.ES集群安装配置;</h3><ul>\n<li>需要先安装java1.8</li>\n<li><p>2.获取es软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.3.tar.gz</span><br><span class=\"line\">tar -xf elasticsearch-1.7.3.tar.gz -C /usr/local</span><br><span class=\"line\">ln -sv /usr/local/elasticsearch-1.7.3 /usr/local/elasticsearch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.修改配置文件</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# vim /usr/local/elasticsearch/config/elasticsearch.yml </span><br><span class=\"line\">32 cluster.name: es-cluster                         #组播的名称地址</span><br><span class=\"line\">40 node.name: &quot;es-node1 &quot;                           #节点名称，不能和其他节点重复</span><br><span class=\"line\">47 node.master: true                                #节点能否被选举为master</span><br><span class=\"line\">51 node.data: true                                  #节点是否存储数据</span><br><span class=\"line\">107 index.number_of_shards: 5                       #索引分片的个数</span><br><span class=\"line\">111 index.number_of_replicas: 1                     #分片的副本个数</span><br><span class=\"line\">145 path.conf: /usr/local/elasticsearch/config/     #配置文件的路径</span><br><span class=\"line\">149 path.data: /data/es/data                        #数据目录路径</span><br><span class=\"line\">159 path.work: /data/es/worker                      #工作目录路径</span><br><span class=\"line\">163 path.logs:  /usr/local/elasticsearch/logs/      #日志文件路径</span><br><span class=\"line\">167 path.plugins:  /data/es/plugins                 #插件路径</span><br><span class=\"line\">184 bootstrap.mlockall: true                        #内存不向swap交换</span><br><span class=\"line\">232 http.enabled: true                              #启用http</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>4.创建相关目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/es/&#123;data,worker,plugins&#125; -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.获取es服务管理脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​[root@es1 ~]# git clone https://github.com/elastic/elasticsearch-servicewrapper.git</span><br><span class=\"line\">[root@es1 ~]# mv elasticsearch-servicewrapper/service /usr/local/elasticsearch/bin/</span><br><span class=\"line\">[root@es1 ~]# /usr/local/elasticsearch/bin/service/elasticsearch install </span><br><span class=\"line\">Detected RHEL or Fedora:</span><br><span class=\"line\">Installing the Elasticsearch daemon..</span><br><span class=\"line\">[root@es1 ~]#</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这时就会在/etc/init.d/目录下安装上es的管理脚本啦</p>\n<ul>\n<li><p>修改其配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# </span><br><span class=\"line\">set.default.ES_HOME=/usr/local/elasticsearch   #安装路径</span><br><span class=\"line\">set.default.ES_HEAP_SIZE=1024</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.启动es ，并检查其服务是否正常<br>es启动方式是进入bin目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/elasticsearch/bin/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./elasticsearch</span><br></pre></td></tr></table></figure></p>\n<p>启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# netstat -nlpt | grep -E &quot;9200|&quot;9300</span><br><span class=\"line\">tcp        0      0 0.0.0.0:9200                0.0.0.0:*                   LISTEN      1684/java           </span><br><span class=\"line\">tcp        0      0 0.0.0.0:9300                0.0.0.0:*                   LISTEN      1684/java</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://192.168.2.18:9200/\">http://192.168.2.18:9200/</a> 返回es节点信息，说明安装配置完成.</p>\n<ul>\n<li>7.复制同样的步骤和配置到es2，只需要修改node.name即可，其他都与es1相同配置</li>\n<li>8.安装es的管理插件<br>es官方提供一个用于管理es的插件，可清晰直观看到es集群的状态，以及对集群的操作管理，安装方法如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 local]# /usr/local/elasticsearch/bin/plugin -i mobz/elasticsearch-head</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>安装好之后，访问方式为： <a href=\"http://192.168.2.18:9200/_plugin/head\">http://192.168.2.18:9200/_plugin/head</a></p>\n<h3 id=\"2-Logstash客户端安装配置\"><a href=\"#2-Logstash客户端安装配置\" class=\"headerlink\" title=\"2.Logstash客户端安装配置\"></a>2.Logstash客户端安装配置</h3><ul>\n<li>安装前，需要先安装java</li>\n<li>YUM方式安装Logstash</li>\n</ul>\n<p>Download and install the public signing key:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></p>\n<p>Add the following in your /etc/yum.repos.d/ directory in a file with a .repo suffix, for example logstash.repo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[logstash-2.3]</span><br><span class=\"line\">name=Logstash repository for 2.3.x packages</span><br><span class=\"line\">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure></p>\n<p>And your repository is ready for use. You can install it with:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logstash</span><br></pre></td></tr></table></figure></p>\n<p>此时logstash会安装在目录：/opt/logstash/<br>进入/opt/logstash/bin/目录<br>vim logstash.conf<br>即可对这个logstash客户端进行设置，可以设置输入和输出<br>输入定义信息来源于何处，输出定义消息发送到哪里</p>\n<ul>\n<li><p>logstash一些操作：<br>检查配置是否正确<br>/opt/logstash/bin/logstash -f logstash.conf –configtest –verbose<br>启动logstash<br>/opt/logstash/bin/logstash -f logstash.conf</p>\n</li>\n<li><p>3.Logstash 向es集群写数据<br>编写一个logstash配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@webserver1 etc]# vi logstash.conf </span><br><span class=\"line\">input &#123;              #数据的输入从标准输入</span><br><span class=\"line\">  stdin &#123;&#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;             #数据的输出我们指向了es集群</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]　　　＃es主机的ip及端口</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令/opt/logstash/bin/logstash -f logstash.conf 启动后，如果有信息产生，就会向es集群写入数据，可以在es页面中看到</p>\n</li>\n<li><p>例子：将web app的log日志写入es中，使用如下脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">    index =&gt; &quot;web-app-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-Kafka-zookeeper-集群配置-Logstash写入数据到Kafka消息系统\"><a href=\"#3-Kafka-zookeeper-集群配置-Logstash写入数据到Kafka消息系统\" class=\"headerlink\" title=\"3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);\"></a>3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);</h3><p>kafka的软件包中自带zookeeper，并且是解压即可使用。可以官网下载上传服务器，也可直接服务器下载</p>\n<ul>\n<li><p>1.获取软件包.官网：<a href=\"http://kafka.apache.org\">http://kafka.apache.org</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# wget http://mirror.rise.ph/apache/kafka/0.8.2.1/kafka_2.11-0.8.2.1.tgz</span><br><span class=\"line\">[root@kafka1 ~]# tar -xf kafka_2.11-0.8.2.1.tgz -C /usr/local/</span><br><span class=\"line\">[root@kafka1 ~]# cd /usr/local/</span><br><span class=\"line\">[root@kafka1 local]# ln -sv kafka_2.11-0.8.2.1 kafka</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.配置zookeeper集群，修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# vim /usr/local/kafka/config/zookeeper.propertie</span><br><span class=\"line\">dataDir=/data/zookeeper</span><br><span class=\"line\">clienrtPort=2181</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=20</span><br><span class=\"line\">syncLimit=10</span><br><span class=\"line\">server.2=192.168.1.245:2888:3888</span><br><span class=\"line\">server.3=192.168.1.246:2888:3888</span><br><span class=\"line\">server.4=192.168.1.247:2888:3888</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.创建zookeeper所需要的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# mkdir /data/zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.在/data/zookeeper目录下创建myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper是没法启动的哦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# echo 2 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上就是zookeeper集群的配置，下面等我配置好kafka之后直接复制到其他两个节点即可</p>\n<ul>\n<li><p>5.kafka配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# vim /usr/local/kafka/config/server.properties </span><br><span class=\"line\">broker.id=2    　　　　    ＃　唯一，填数字，本文中分别为2/3/4</span><br><span class=\"line\">prot=9092　　　　　　　     ＃　这个broker监听的端口　</span><br><span class=\"line\">host.name=192.168.2.22　  ＃　唯一，填服务器IP</span><br><span class=\"line\">log.dir=/data/kafka-logs  #  该目录可以不用提前创建，在启动时自己会创建</span><br><span class=\"line\">zookeeper.connect=192.168.2.22:2181,192.168.2.23:2181,192.168.2.24:2181　　＃这个就是zookeeper的ip及端口</span><br><span class=\"line\">num.partitions=16         # 需要配置较大 分片影响读写速度</span><br><span class=\"line\">log.dirs=/data/kafka-logs # 数据目录也要单独配置磁盘较大的地方</span><br><span class=\"line\">log.retention.hours=168   # 时间按需求保留过期时间 避免磁盘满</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.将kafka(zookeeper)的程序目录全部拷贝至其他两个节点</p>\n</li>\n<li><p>7.修改两个借点的配置，注意这里除了以下两点不同外，都是相同的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）zookeeper的配置</span><br><span class=\"line\">mkdir /data/zookeeper</span><br><span class=\"line\">echo &quot;x&quot; &gt; /data/zookeeper/myid</span><br><span class=\"line\">（2）kafka的配置</span><br><span class=\"line\">broker.id=2</span><br><span class=\"line\">host.name=192.168.2.22</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>8.修改完毕配置之后我们就可以启动了，这里先要启动zookeeper集群，才能启动kafka</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;   #zookeeper启动命令</span><br><span class=\"line\">[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-stop.sh                                                   #zookeeper停止的命令</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>9.zookeeper服务检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1~]#  netstat -nlpt | grep -E &quot;2181|2888|3888&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ok.  这时候zookeeper集群已经启动起来了，下面启动kafka，也是依次按照顺序启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kafka1 ~]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;   #kafka启动的命令</span><br><span class=\"line\">[root@kafka1 ~]#  /usr/local/kafka/bin/kafka-server-stop.sh                                                         #kafka停止的命令</span><br></pre></td></tr></table></figure></p>\n<p>注意，跟zookeeper服务一样，如果kafka有问题 nohup的日志文件会非常大,把磁盘占满，这个kafka服务同样可以通过自己些服务脚本来管理服务的启动与关闭。</p>\n<ul>\n<li><p>10，下面我们将webs app上面的logstash的输出改到kafka上面，将数据写入到kafka中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;             #这里的输入还是定义的是从日志文件输入</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    type =&gt; &quot;web-app&quot; </span><br><span class=\"line\">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    #stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后再每台kafka上安装logstash，把kafka的消息发送到es<br>使用logstash脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">      index =&gt; &quot;test-web-app-message-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4-Kibana部署\"><a href=\"#4-Kibana部署\" class=\"headerlink\" title=\"4.Kibana部署;\"></a>4.Kibana部署;</h3><p>我们在两台es上面搭建两套kibana</p>\n<ul>\n<li><p>1.获取kibana软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# wget https://download.elastic.co/kibana/kibana/kibana-4.1.2-linux-x64.tar.gz</span><br><span class=\"line\">[root@es1 ~]# tar -xf kibana-4.2.0-linux-x64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 ~]# cd /usr/local/</span><br><span class=\"line\">[root@es1 local]# ln -sv kibana-4.1.2-linux-x64 kibana</span><br><span class=\"line\">`kibana&apos; -&gt; `kibana-4.2.0-linux-x64&apos;</span><br><span class=\"line\">[root@es1 local]# cd kibana</span><br><span class=\"line\"></span><br><span class=\"line\">[root@es1 kibana]# vim config/kibana.yml</span><br><span class=\"line\">server.port: 5601      #默认端口可以修改的</span><br><span class=\"line\">server.host: &quot;0.0.0.0&quot; #kibana监听的ip</span><br><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot; #由于es在本地主机上面，所以这个选项打开注释即可</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>kibana安装后，直接进入kibana的安装目录<br>/user/local/kibana/bin<br>运行<br>./kibana<br>启动</p>\n</li>\n<li><p>5.服务检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@es1 config]# ss -tunl | grep &quot;5601&quot;</span><br><span class=\"line\">tcp    LISTEN     0      511                    *:5601                  *:*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时访问es1主机的5601端口，即可看见kibana的页面：<br><a href=\"http://192.168.1.163:5601\">http://192.168.1.163:5601</a></p>\n<ul>\n<li>6.es2上的kibana与es1一样</li>\n</ul>\n<h3 id=\"5-Nginx负载均衡Kibana请求\"><a href=\"#5-Nginx负载均衡Kibana请求\" class=\"headerlink\" title=\"5.Nginx负载均衡Kibana请求;\"></a>5.Nginx负载均衡Kibana请求;</h3><ul>\n<li><p>1.在nginx-proxy上面yum安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nignx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.编写配置文件es.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@saltstack-node1 conf.d]# pwd </span><br><span class=\"line\">/etc/nginx/conf.d</span><br><span class=\"line\">[root@saltstack-node1 conf.d]# cat es.conf </span><br><span class=\"line\">upstream es &#123;</span><br><span class=\"line\">    server 192.168.2.18:5601 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">    server 192.168.2.19:5601 max_fails=3 fail_timeout=30s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://es/;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        #auth</span><br><span class=\"line\">        auth_basic &quot;ELK Private&quot;;</span><br><span class=\"line\">        auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3.创建认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@saltstack-node1 conf.d]# htpasswd -cm /etc/nginx/.htpasswd elk</span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-type new password: </span><br><span class=\"line\">Adding password for user elk-user</span><br><span class=\"line\">[root@saltstack-node1 conf.d]# /etc/init.d/nginx restart</span><br><span class=\"line\">Stopping nginx:                                            [  OK  ]</span><br><span class=\"line\">Starting nginx:                                            [  OK  ]</span><br><span class=\"line\">[root@saltstack-node1 conf.d]#</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>4.直接输入认证用户及密码就可访问啦<a href=\"http://192.168.1.244/\">http://192.168.1.244/</a></li>\n</ul>\n<h3 id=\"6-案例：nginx日志收集以及MySQL慢日志收集\"><a href=\"#6-案例：nginx日志收集以及MySQL慢日志收集\" class=\"headerlink\" title=\"6.案例：nginx日志收集以及MySQL慢日志收集;\"></a>6.案例：nginx日志收集以及MySQL慢日志收集;</h3><ul>\n<li><p>先在web app服务器上安装nginx和mysql</p>\n</li>\n<li><p>1.为了方便nginx日志的统计搜索，这里设置nginx访问日志格式为json</p>\n</li>\n</ul>\n<p>(1)修改nginx主配置文件</p>\n<p>说明：如果想实现日志的报表展示，最好将业务日志直接以json格式输出，这样可以极大减轻cpu负载，也省得运维需要写负载的filter过滤正则。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@webserver1 nginx]# vim nginx.conf</span><br><span class=\"line\">log_format json &apos;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;@version&quot;:&quot;1&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;client&quot;:&quot;$remote_addr&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;url&quot;:&quot;$uri&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;status&quot;:&quot;$status&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;domain&quot;:&quot;$host&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;host&quot;:&quot;$server_addr&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;size&quot;:$body_bytes_sent,&apos;</span><br><span class=\"line\">                &apos;&quot;responsetime&quot;:$request_time,&apos;</span><br><span class=\"line\">                &apos;&quot;referer&quot;: &quot;$http_referer&quot;,&apos;</span><br><span class=\"line\">                &apos;&quot;ua&quot;: &quot;$http_user_agent&quot;&apos;</span><br><span class=\"line\">                &apos;&#125;&apos;;</span><br><span class=\"line\">  access_log  /var/log/access_json.log  json;</span><br></pre></td></tr></table></figure>\n<p>(2)收集nginx日志和MySQL日志到消息队列中；这个文件我们是定义在客户端，即生产服务器上面的Logstash文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    type =&gt; &quot;web-app&quot;</span><br><span class=\"line\">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    type =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">    path =&gt; &quot;/var/log/nginx/access.log&quot;</span><br><span class=\"line\">    start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">    codec =&gt; &quot;json&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">   type =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">   path =&gt; &quot;/var/run/mysqld/mysqld-slow.log&quot;</span><br><span class=\"line\">   start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">   codec =&gt; multiline &#123;</span><br><span class=\"line\">     pattern =&gt; &quot;^# User@Host&quot;</span><br><span class=\"line\">     negate =&gt; true</span><br><span class=\"line\">     what =&gt; &quot;previous&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if [type] == &quot;slow-mysql&quot; &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if [type] == &quot;web-app&quot; &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class=\"line\">      topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">      compression_type =&gt; &quot;snappy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>/opt/logstash/bin/logstash -f logstash.conf –configtest –verbose</p>\n<p>/opt/logstash/bin/logstash -f logstash.conf</p>\n<p>(3)Logstash 从kafka集群中读取日志存储到es中，这里的定义logstash文件是在三台kafka服务器上面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;web-app-message&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        type =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kafka &#123;</span><br><span class=\"line\">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class=\"line\">        type =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">        topic_id =&gt; &quot;slow-mysql&quot;</span><br><span class=\"line\">        codec =&gt; plain</span><br><span class=\"line\">        reset_beginning =&gt; false</span><br><span class=\"line\">        consumer_threads =&gt; 5</span><br><span class=\"line\">        decorate_events =&gt; true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">         elasticsearch &#123;</span><br><span class=\"line\">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">                 index =&gt; &quot;nginx-access-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if [type] == &quot;slow-mysql&quot; &#123;</span><br><span class=\"line\">         elasticsearch &#123;</span><br><span class=\"line\">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">                index =&gt; &quot;slow-mysql-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if [type] == &quot;web-app-message&quot; &#123;</span><br><span class=\"line\">         elasticsearch &#123;</span><br><span class=\"line\">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class=\"line\">                index =&gt; &quot;test-web-app-message-%&#123;+YYYY-MM&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(4)创建nginx-access 日志索引<br>(5)创建MySQL慢日志索引</p>\n<p>这两个都是在kibana的页面上创建配置</p>\n<h3 id=\"7-Kibana报表基本使用\"><a href=\"#7-Kibana报表基本使用\" class=\"headerlink\" title=\"7.Kibana报表基本使用;\"></a>7.Kibana报表基本使用;</h3>","sticky":0},{"title":"Springboot应用中如何针对springmvc的controller写单元测试","date":"2016-07-23T04:54:56.000Z","_content":"\n\n## An example test for your controller can be something as simple as\n```\npublic class DemoApplicationTests {\n\n    final String BASE_URL = \"http://localhost:8080/\";\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = standaloneSetup(new HelloWorld()).build();\n    }\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n}\n```\n\n\n\n## The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\n\nThe test would look like so:\n```\n@RunWith(SpringRunner.class)\n@WebMvcTest(HelloWorld.class)\npublic class UserVehicleControllerTests {\n\n    @Autowired\n    private MockMvc mvc;\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n\n}\n```\n\n\n\n## 还有一种方式是使用TestRestTemplate\n\n```\npackage controller;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.TestRestTemplate;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.web.client.RestTemplate;\n\nimport ipicture.service.post.AppServicePost;\nimport ipicture.service.post.model.JsonObject;\nimport ipicture.service.post.model.Subject;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = AppServicePost.class)\n@WebIntegrationTest(\"server.port:8083\")// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口\npublic class SubjectControllerTest {\n\n    private RestTemplate template = new TestRestTemplate();\n    @Value(\"${server.port}\")// 注入端口号\n    private int port;\n    \n    private String getBaseUrl() {\n        return \"http://localhost:\" + port;\n    }\n    \n    @Test \n    public void test() {\n        Subject s = new Subject();\n        s.setCreator(1l);\n        s.setCreated(new Date());\n        s.setSubjectName(\"test5\");\n        s.setDescr(\"test subject\");\n        s.setDeleted(0);\n        s.setParent_id(0);\n        s.setStatus(0);\n        s.setType(0);\n        String url = getBaseUrl() + \"/subject/save\";\n        String result = template.postForObject(url, s, String.class);\n    }\n}\n\n```","source":"_posts/Springboot应用中如何针对springmvc的controller写单元测试.md","raw":"---\ntitle: Springboot应用中如何针对springmvc的controller写单元测试\ndate: 2016-07-23 12:54:56\ntags: [spring boot, java, junit, 测试， spring mvc, Springboot应用中如何针对springmvc的controller写单元测试]\n---\n\n\n## An example test for your controller can be something as simple as\n```\npublic class DemoApplicationTests {\n\n    final String BASE_URL = \"http://localhost:8080/\";\n    private MockMvc mockMvc;\n\n    @Before\n    public void setup() {\n        this.mockMvc = standaloneSetup(new HelloWorld()).build();\n    }\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n}\n```\n\n\n\n## The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\n\nThe test would look like so:\n```\n@RunWith(SpringRunner.class)\n@WebMvcTest(HelloWorld.class)\npublic class UserVehicleControllerTests {\n\n    @Autowired\n    private MockMvc mvc;\n\n    @Test\n    public void testSayHelloWorld() throws Exception {\n        this.mockMvc.perform(get(\"/\").accept(MediaType.parseMediaType(\"application/json;charset=UTF-8\")))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(\"application/json\"));\n\n    }\n\n}\n```\n\n\n\n## 还有一种方式是使用TestRestTemplate\n\n```\npackage controller;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.TestRestTemplate;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.web.client.RestTemplate;\n\nimport ipicture.service.post.AppServicePost;\nimport ipicture.service.post.model.JsonObject;\nimport ipicture.service.post.model.Subject;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = AppServicePost.class)\n@WebIntegrationTest(\"server.port:8083\")// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口\npublic class SubjectControllerTest {\n\n    private RestTemplate template = new TestRestTemplate();\n    @Value(\"${server.port}\")// 注入端口号\n    private int port;\n    \n    private String getBaseUrl() {\n        return \"http://localhost:\" + port;\n    }\n    \n    @Test \n    public void test() {\n        Subject s = new Subject();\n        s.setCreator(1l);\n        s.setCreated(new Date());\n        s.setSubjectName(\"test5\");\n        s.setDescr(\"test subject\");\n        s.setDeleted(0);\n        s.setParent_id(0);\n        s.setStatus(0);\n        s.setType(0);\n        String url = getBaseUrl() + \"/subject/save\";\n        String result = template.postForObject(url, s, String.class);\n    }\n}\n\n```","slug":"Springboot应用中如何针对springmvc的controller写单元测试","published":1,"updated":"2016-07-23T05:01:46.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usni000900uu0rujxwki","content":"<h2 id=\"An-example-test-for-your-controller-can-be-something-as-simple-as\"><a href=\"#An-example-test-for-your-controller-can-be-something-as-simple-as\" class=\"headerlink\" title=\"An example test for your controller can be something as simple as\"></a>An example test for your controller can be something as simple as</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DemoApplicationTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    final String BASE_URL = &quot;http://localhost:8080/&quot;;</span><br><span class=\"line\">    private MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void setup() &#123;</span><br><span class=\"line\">        this.mockMvc = standaloneSetup(new HelloWorld()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\"><a href=\"#The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\" class=\"headerlink\" title=\"The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\"></a>The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.</h2><p>The test would look like so:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@WebMvcTest(HelloWorld.class)</span><br><span class=\"line\">public class UserVehicleControllerTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"还有一种方式是使用TestRestTemplate\"><a href=\"#还有一种方式是使用TestRestTemplate\" class=\"headerlink\" title=\"还有一种方式是使用TestRestTemplate\"></a>还有一种方式是使用TestRestTemplate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.boot.test.SpringApplicationConfiguration;</span><br><span class=\"line\">import org.springframework.boot.test.TestRestTemplate;</span><br><span class=\"line\">import org.springframework.boot.test.WebIntegrationTest;</span><br><span class=\"line\">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\">import org.springframework.web.client.RestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">import ipicture.service.post.AppServicePost;</span><br><span class=\"line\">import ipicture.service.post.model.JsonObject;</span><br><span class=\"line\">import ipicture.service.post.model.Subject;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\">@SpringApplicationConfiguration(classes = AppServicePost.class)</span><br><span class=\"line\">@WebIntegrationTest(&quot;server.port:8083&quot;)// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口</span><br><span class=\"line\">public class SubjectControllerTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RestTemplate template = new TestRestTemplate();</span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)// 注入端口号</span><br><span class=\"line\">    private int port;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String getBaseUrl() &#123;</span><br><span class=\"line\">        return &quot;http://localhost:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Test </span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        Subject s = new Subject();</span><br><span class=\"line\">        s.setCreator(1l);</span><br><span class=\"line\">        s.setCreated(new Date());</span><br><span class=\"line\">        s.setSubjectName(&quot;test5&quot;);</span><br><span class=\"line\">        s.setDescr(&quot;test subject&quot;);</span><br><span class=\"line\">        s.setDeleted(0);</span><br><span class=\"line\">        s.setParent_id(0);</span><br><span class=\"line\">        s.setStatus(0);</span><br><span class=\"line\">        s.setType(0);</span><br><span class=\"line\">        String url = getBaseUrl() + &quot;/subject/save&quot;;</span><br><span class=\"line\">        String result = template.postForObject(url, s, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"An-example-test-for-your-controller-can-be-something-as-simple-as\"><a href=\"#An-example-test-for-your-controller-can-be-something-as-simple-as\" class=\"headerlink\" title=\"An example test for your controller can be something as simple as\"></a>An example test for your controller can be something as simple as</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DemoApplicationTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    final String BASE_URL = &quot;http://localhost:8080/&quot;;</span><br><span class=\"line\">    private MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void setup() &#123;</span><br><span class=\"line\">        this.mockMvc = standaloneSetup(new HelloWorld()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\"><a href=\"#The-new-testing-improvements-that-debuted-in-Spring-Boot-1-4-M2-can-help-reduce-the-amount-of-code-you-need-to-write-situation-such-as-these\" class=\"headerlink\" title=\"The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.\"></a>The new testing improvements that debuted in Spring Boot 1.4.M2 can help reduce the amount of code you need to write situation such as these.</h2><p>The test would look like so:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@WebMvcTest(HelloWorld.class)</span><br><span class=\"line\">public class UserVehicleControllerTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private MockMvc mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSayHelloWorld() throws Exception &#123;</span><br><span class=\"line\">        this.mockMvc.perform(get(&quot;/&quot;).accept(MediaType.parseMediaType(&quot;application/json;charset=UTF-8&quot;)))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().contentType(&quot;application/json&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"还有一种方式是使用TestRestTemplate\"><a href=\"#还有一种方式是使用TestRestTemplate\" class=\"headerlink\" title=\"还有一种方式是使用TestRestTemplate\"></a>还有一种方式是使用TestRestTemplate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.boot.test.SpringApplicationConfiguration;</span><br><span class=\"line\">import org.springframework.boot.test.TestRestTemplate;</span><br><span class=\"line\">import org.springframework.boot.test.WebIntegrationTest;</span><br><span class=\"line\">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\">import org.springframework.web.client.RestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">import ipicture.service.post.AppServicePost;</span><br><span class=\"line\">import ipicture.service.post.model.JsonObject;</span><br><span class=\"line\">import ipicture.service.post.model.Subject;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\">@SpringApplicationConfiguration(classes = AppServicePost.class)</span><br><span class=\"line\">@WebIntegrationTest(&quot;server.port:8083&quot;)// 使用0表示端口号随机，也可以具体指定如8888这样的固定端口</span><br><span class=\"line\">public class SubjectControllerTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RestTemplate template = new TestRestTemplate();</span><br><span class=\"line\">    @Value(&quot;$&#123;server.port&#125;&quot;)// 注入端口号</span><br><span class=\"line\">    private int port;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String getBaseUrl() &#123;</span><br><span class=\"line\">        return &quot;http://localhost:&quot; + port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Test </span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        Subject s = new Subject();</span><br><span class=\"line\">        s.setCreator(1l);</span><br><span class=\"line\">        s.setCreated(new Date());</span><br><span class=\"line\">        s.setSubjectName(&quot;test5&quot;);</span><br><span class=\"line\">        s.setDescr(&quot;test subject&quot;);</span><br><span class=\"line\">        s.setDeleted(0);</span><br><span class=\"line\">        s.setParent_id(0);</span><br><span class=\"line\">        s.setStatus(0);</span><br><span class=\"line\">        s.setType(0);</span><br><span class=\"line\">        String url = getBaseUrl() + &quot;/subject/save&quot;;</span><br><span class=\"line\">        String result = template.postForObject(url, s, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"What's the simplest way to print a Java array?","date":"2016-08-08T10:24:43.000Z","_content":"\n\nExamples:\n- Simple Array:\n```\nString[] array = new String[] {\"John\", \"Mary\", \"Bob\"};\nSystem.out.println(Arrays.toString(array));\n```\nOutput:\n```\n[John, Mary, Bob]\n```\n\n- Nested Array:\n```\nString[][] deepArray = new String[][] {{\"John\", \"Mary\"}, {\"Alice\", \"Bob\"}};\nSystem.out.println(Arrays.toString(deepArray));\n//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]\nSystem.out.println(Arrays.deepToString(deepArray));\n```\nOutput:\n```\n[[John, Mary], [Alice, Bob]]\n```\n\n- double Array:\n```\ndouble[] doubleArray = { 7.0, 9.0, 5.0, 1.0, 3.0 };\nSystem.out.println(Arrays.toString(doubleArray));\n```\nOutput:\n```\n[7.0, 9.0, 5.0, 1.0, 3.0 ]\n```\n- int Array:\n```\nint[] intArray = { 7, 9, 5, 1, 3 };\nSystem.out.println(Arrays.toString(intArray));\n```\nOutput:\n```\n[7, 9, 5, 1, 3 ]\n```","source":"_posts/What-s-the-simplest-way-to-print-a-Java-array.md","raw":"---\ntitle: What's the simplest way to print a Java array?\ndate: 2016-08-08 18:24:43\ntags: [java, array, print, j2se]\n---\n\n\nExamples:\n- Simple Array:\n```\nString[] array = new String[] {\"John\", \"Mary\", \"Bob\"};\nSystem.out.println(Arrays.toString(array));\n```\nOutput:\n```\n[John, Mary, Bob]\n```\n\n- Nested Array:\n```\nString[][] deepArray = new String[][] {{\"John\", \"Mary\"}, {\"Alice\", \"Bob\"}};\nSystem.out.println(Arrays.toString(deepArray));\n//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]\nSystem.out.println(Arrays.deepToString(deepArray));\n```\nOutput:\n```\n[[John, Mary], [Alice, Bob]]\n```\n\n- double Array:\n```\ndouble[] doubleArray = { 7.0, 9.0, 5.0, 1.0, 3.0 };\nSystem.out.println(Arrays.toString(doubleArray));\n```\nOutput:\n```\n[7.0, 9.0, 5.0, 1.0, 3.0 ]\n```\n- int Array:\n```\nint[] intArray = { 7, 9, 5, 1, 3 };\nSystem.out.println(Arrays.toString(intArray));\n```\nOutput:\n```\n[7, 9, 5, 1, 3 ]\n```","slug":"What-s-the-simplest-way-to-print-a-Java-array","published":1,"updated":"2016-08-08T11:33:26.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usoj000b00uuzrnlv28u","content":"<p>Examples:</p>\n<ul>\n<li>Simple Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] array = new String[] &#123;&quot;John&quot;, &quot;Mary&quot;, &quot;Bob&quot;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[John, Mary, Bob]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Nested Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[][] deepArray = new String[][] &#123;&#123;&quot;John&quot;, &quot;Mary&quot;&#125;, &#123;&quot;Alice&quot;, &quot;Bob&quot;&#125;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(deepArray));</span><br><span class=\"line\">//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]</span><br><span class=\"line\">System.out.println(Arrays.deepToString(deepArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[John, Mary], [Alice, Bob]]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>double Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[] doubleArray = &#123; 7.0, 9.0, 5.0, 1.0, 3.0 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(doubleArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7.0, 9.0, 5.0, 1.0, 3.0 ]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>int Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] intArray = &#123; 7, 9, 5, 1, 3 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(intArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7, 9, 5, 1, 3 ]</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Examples:</p>\n<ul>\n<li>Simple Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] array = new String[] &#123;&quot;John&quot;, &quot;Mary&quot;, &quot;Bob&quot;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[John, Mary, Bob]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Nested Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[][] deepArray = new String[][] &#123;&#123;&quot;John&quot;, &quot;Mary&quot;&#125;, &#123;&quot;Alice&quot;, &quot;Bob&quot;&#125;&#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(deepArray));</span><br><span class=\"line\">//output: [[Ljava.lang.String;@106d69c, [Ljava.lang.String;@52e922]</span><br><span class=\"line\">System.out.println(Arrays.deepToString(deepArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[John, Mary], [Alice, Bob]]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>double Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[] doubleArray = &#123; 7.0, 9.0, 5.0, 1.0, 3.0 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(doubleArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7.0, 9.0, 5.0, 1.0, 3.0 ]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>int Array:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] intArray = &#123; 7, 9, 5, 1, 3 &#125;;</span><br><span class=\"line\">System.out.println(Arrays.toString(intArray));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[7, 9, 5, 1, 3 ]</span><br></pre></td></tr></table></figure></p>\n","sticky":0},{"title":"SOA分布式事务解决方案","date":"2016-08-10T01:48:30.000Z","_content":"\n这里是转的一段摘录：\n\n\n传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。\nSOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。\n本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。\n我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。\n1.分布式事务（基于DTC的分布式事务）\n以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。\n由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。\n这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。\n2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）\n世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。\n这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。\n3.异步EDA（基于异步事件流来实现柔性的分布式事务）\nEDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。\n可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。\n异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。","source":"_posts/SOA分布式事务解决方案.md","raw":"---\ntitle: SOA分布式事务解决方案\ndate: 2016-08-10 09:48:30\ntags: [SOA, 分布式事务, 柔性事务, 消息事务]\n---\n\n这里是转的一段摘录：\n\n\n传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。\nSOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。\n本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。\n我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。\n1.分布式事务（基于DTC的分布式事务）\n以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。\n由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。\n这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。\n2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）\n世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。\n这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。\n3.异步EDA（基于异步事件流来实现柔性的分布式事务）\nEDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。\n可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。\n异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。","slug":"SOA分布式事务解决方案","published":1,"updated":"2016-08-10T15:15:57.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usot000c00uuhqz7zt6j","content":"<p>这里是转的一段摘录：</p>\n<p>传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。<br>SOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。<br>本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。<br>我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。<br>1.分布式事务（基于DTC的分布式事务）<br>以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。<br>由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。<br>这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。<br>2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）<br>世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。<br>这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。<br>3.异步EDA（基于异步事件流来实现柔性的分布式事务）<br>EDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。<br>可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。<br>异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。</p>\n","excerpt":"","more":"<p>这里是转的一段摘录：</p>\n<p>传统分布式系统与当代的面向SOA的分布式系统有一定区别，论概念上来讲SOA是以服务为中心，既然以服务为中心就会有很多面向服务的设计原则。而传统的分布式系统没有服务的概念，也没有所谓的一切皆是服务的原则。而当代SOA则首要原则就要以服务为中心，针对服务的设计又有了很多服务设计原则。<br>SOA对服务还进行了类型的划分，按照服务的应用层次来分类：业务服务、组合服务、应用服务，包装服务等。再按照管理与运维的层面来分类：控制服务、调度服务、监控服务等等。传统的分布式系统是没有这些的，我们谈论的是当代SOA的分布式系统，所以我们强调的是以服务为中心，以服务设计原则为架构设计的指导要求，当代SOA是对传统分布式系统的一个迭代进化，不是一个时代的产物，SOA更加强调了以服务为首要原则，已经提升到了另外一个更加高级的层面。<br>本节我们交流一下在当代SOA分布式系统中的数据一致性问题，在SOA中这主要涉及两个层面来考虑，一个是服务层面、一个数据持久化层面。再按照一致性的基本要求，可以分为：读一致性、写一致性、会话一致性、最终一致性、实时一致性等几个维度，当然还有其他几个维度的一致性要求。<br>我们这里重点讨论在企业应用中实施SOA时遇到的一些比较棘手的数据一致性问题和解决方案，对于刚才提到的几个维度的一致性要求均具有重要的参考价值。<br>1.分布式事务（基于DTC的分布式事务）<br>以往包括目前很多项目还是倾向于使用DTC来处理分布式事务，这个方案多数适用于一般的企业应用，业务、访问量、数据量要求都不是很高的情况下。用DTC很方便，事务的自动传播、事务的自动感知、事务的自动回滚和提交，这都是中央DTC帮我们管理好了。<br>由于有中央DTC的统一协调，看似好像帮我们解决了很多我们需要考虑的问题，但是它也是整个平台的致命的瓶颈，一旦DTC由于某个问题出现错误，而且这种错误都是系统层面的错误，很多问题我们是无能为力的。如果出现问题，整个应用平台都无法完成任何一个跨服务的业务流程，这其实很危险，你不无法控制系统的稳定性。<br>这里总结，DTC用于一般的小型企业应用，不建议用在中等规模的企业应用中，不是说这个东西不好，而是无法控制它。<br>2.事务补偿（提供正向或反向的操作来让数据在业务上是一致的）<br>世界级SOA专家所编写的书籍里都提到了使用“补偿”操作来完成数据的不一致性，当我们编写了一个服务方法A，就需要一个服务方法A1的补偿接口来完成A服务的补偿操作。但是真实的业务情况下很难实施这种看起来好像很优美很柔性的设计。没有实践就没有发言权，我们公司的技术团队就实施过这种方案，但是很不理想，这跟技术本身及技术团队没关系，只是我们的平台业务太复杂，很难去“补偿”一个已经做过的操作。<br>这当然也要看你所面对的项目情况，量变引起质变，如果你的各种量都上去了，这个“补偿”方案不实际，而且很难在数据层面进行“补偿“。总之，这不是一个中长期的方案。<br>3.异步EDA（基于异步事件流来实现柔性的分布式事务）<br>EDA简称”事件驱动架构“。多个系统之间通过传播”事件“来驱动整个业务的运转。系统之间没有紧耦合的同步调用的操作，都是通过发出异步的“事件”来通知下一个业务环节。<br>可能你会有一个疑问，异步操作，是不是系统之间延迟会很长，其实不是，现在有很多成熟的消息中间件在内网内几乎是毫秒级别的延迟，至于跨机房就看物理上的距离了。<br>异步操作有很多好处，这里我就不浪费大家时间重复那些好处。使用EDA实现系统之间的一个松散的事务关系，要把控好项目的质量，对系统的非功能需求、BUG数等等可能会影响业务操作中断的地方都要建立起适当的机制，让这些问题尽早的在线下解决。比如可以实施UnitTest、持续集成等一些敏捷的方法论。</p>\n","sticky":0},{"title":"Windows下开启React-Native征途","date":"2016-06-04T01:55:48.000Z","_content":"\n我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。\n不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。\n\n以下是过程：\n## 1. 安装Nodejs\n\nReact Native要求是4.0以上。\n\n## 2. 安装react-native-cli\n\n```\nnpm install -g react-native-cli\n```\n\n## 3. 初始化第一个项目\n```\nreact-native init TestProject\n```\n初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。\n\n## 4. 设置环境变量\n\n设置环境变量ANDROID_HOME指向Android SDK的目录\neg:\n![](/images/react-001.png)\n\n\n## 5. 安装Genymotion模拟器\n\nGenymotion官网下载安装Genymotion模拟器，并创建Android emulator。\n创建实例后，将得到如下画面：\n![](/images/react-002.png)\nGenymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。\n安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。\n设置VirtualBox\n![](/images/react-003.png)\n设置sdk\n![](/images/react-004.png)\n\n配置好后，就把模拟的Android实例启动起来放着吧。\n\n\n## 6. 启动\n\n### 1-启动React Native Server\n```\nreact-native start\n```\n![](/images/react-005.png)\n\n### 2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\n```\ncd android\ngradlew.bat installDebug\n```\n执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。\n![](/images/react-006.png)\n安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。\n![](/images/react-007.png)\n\nWindows下的React Native开发环境搭建 -- done.","source":"_posts/Windows下开启React-Native征途.md","raw":"---\ntitle: Windows下开启React-Native征途\ndate: 2016-06-04 09:55:48\ntags: [react, react-native, nodejs, android, windows]\n---\n\n我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。\n不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。\n\n以下是过程：\n## 1. 安装Nodejs\n\nReact Native要求是4.0以上。\n\n## 2. 安装react-native-cli\n\n```\nnpm install -g react-native-cli\n```\n\n## 3. 初始化第一个项目\n```\nreact-native init TestProject\n```\n初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。\n\n## 4. 设置环境变量\n\n设置环境变量ANDROID_HOME指向Android SDK的目录\neg:\n![](/images/react-001.png)\n\n\n## 5. 安装Genymotion模拟器\n\nGenymotion官网下载安装Genymotion模拟器，并创建Android emulator。\n创建实例后，将得到如下画面：\n![](/images/react-002.png)\nGenymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。\n安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。\n设置VirtualBox\n![](/images/react-003.png)\n设置sdk\n![](/images/react-004.png)\n\n配置好后，就把模拟的Android实例启动起来放着吧。\n\n\n## 6. 启动\n\n### 1-启动React Native Server\n```\nreact-native start\n```\n![](/images/react-005.png)\n\n### 2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\n```\ncd android\ngradlew.bat installDebug\n```\n执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。\n![](/images/react-006.png)\n安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。\n![](/images/react-007.png)\n\nWindows下的React Native开发环境搭建 -- done.","slug":"Windows下开启React-Native征途","published":1,"updated":"2016-06-04T02:26:01.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usox000e00uuxt0jr3u8","content":"<p>我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。<br>不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。</p>\n<p>以下是过程：</p>\n<h2 id=\"1-安装Nodejs\"><a href=\"#1-安装Nodejs\" class=\"headerlink\" title=\"1. 安装Nodejs\"></a>1. 安装Nodejs</h2><p>React Native要求是4.0以上。</p>\n<h2 id=\"2-安装react-native-cli\"><a href=\"#2-安装react-native-cli\" class=\"headerlink\" title=\"2. 安装react-native-cli\"></a>2. 安装react-native-cli</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化第一个项目\"><a href=\"#3-初始化第一个项目\" class=\"headerlink\" title=\"3. 初始化第一个项目\"></a>3. 初始化第一个项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init TestProject</span><br></pre></td></tr></table></figure>\n<p>初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。</p>\n<h2 id=\"4-设置环境变量\"><a href=\"#4-设置环境变量\" class=\"headerlink\" title=\"4. 设置环境变量\"></a>4. 设置环境变量</h2><p>设置环境变量ANDROID_HOME指向Android SDK的目录<br>eg:<br><img src=\"/images/react-001.png\" alt=\"\"></p>\n<h2 id=\"5-安装Genymotion模拟器\"><a href=\"#5-安装Genymotion模拟器\" class=\"headerlink\" title=\"5. 安装Genymotion模拟器\"></a>5. 安装Genymotion模拟器</h2><p>Genymotion官网下载安装Genymotion模拟器，并创建Android emulator。<br>创建实例后，将得到如下画面：<br><img src=\"/images/react-002.png\" alt=\"\"><br>Genymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。<br>安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。<br>设置VirtualBox<br><img src=\"/images/react-003.png\" alt=\"\"><br>设置sdk<br><img src=\"/images/react-004.png\" alt=\"\"></p>\n<p>配置好后，就把模拟的Android实例启动起来放着吧。</p>\n<h2 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6. 启动\"></a>6. 启动</h2><h3 id=\"1-启动React-Native-Server\"><a href=\"#1-启动React-Native-Server\" class=\"headerlink\" title=\"1-启动React Native Server\"></a>1-启动React Native Server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/react-005.png\" alt=\"\"></p>\n<h3 id=\"2-开一个新的命令行终端-cmd-切换到项目目录安装APP\"><a href=\"#2-开一个新的命令行终端-cmd-切换到项目目录安装APP\" class=\"headerlink\" title=\"2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\"></a>2-开一个新的命令行终端(cmd), 切换到项目目录安装APP</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd android</span><br><span class=\"line\">gradlew.bat installDebug</span><br></pre></td></tr></table></figure>\n<p>执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。<br><img src=\"/images/react-006.png\" alt=\"\"><br>安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。<br><img src=\"/images/react-007.png\" alt=\"\"></p>\n<p>Windows下的React Native开发环境搭建 – done.</p>\n","excerpt":"","more":"<p>我们的目标是星辰大海（说白了就是同一个东西咱不想Android做一份，iOS又做一份），现在我们要开启React-Native的征途（在Windows下）。<br>不过说出来你可能不太相信，这故事的开头，来的并没有想象中的困难。</p>\n<p>以下是过程：</p>\n<h2 id=\"1-安装Nodejs\"><a href=\"#1-安装Nodejs\" class=\"headerlink\" title=\"1. 安装Nodejs\"></a>1. 安装Nodejs</h2><p>React Native要求是4.0以上。</p>\n<h2 id=\"2-安装react-native-cli\"><a href=\"#2-安装react-native-cli\" class=\"headerlink\" title=\"2. 安装react-native-cli\"></a>2. 安装react-native-cli</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化第一个项目\"><a href=\"#3-初始化第一个项目\" class=\"headerlink\" title=\"3. 初始化第一个项目\"></a>3. 初始化第一个项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init TestProject</span><br></pre></td></tr></table></figure>\n<p>初始化第一个测试Demo，init的时候可能需要一点时间. 伟大的目标值的那么些耐心的等待。</p>\n<h2 id=\"4-设置环境变量\"><a href=\"#4-设置环境变量\" class=\"headerlink\" title=\"4. 设置环境变量\"></a>4. 设置环境变量</h2><p>设置环境变量ANDROID_HOME指向Android SDK的目录<br>eg:<br><img src=\"/images/react-001.png\" alt=\"\"></p>\n<h2 id=\"5-安装Genymotion模拟器\"><a href=\"#5-安装Genymotion模拟器\" class=\"headerlink\" title=\"5. 安装Genymotion模拟器\"></a>5. 安装Genymotion模拟器</h2><p>Genymotion官网下载安装Genymotion模拟器，并创建Android emulator。<br>创建实例后，将得到如下画面：<br><img src=\"/images/react-002.png\" alt=\"\"><br>Genymotion运行Android模拟实例需要VirtualBox和AndroidSdk的支持。<br>安装Genymotion后默认的VirtualBox和AndroidSdk不好使，我通过Setting设置配置好自己本地的VirtualBox和AndroidSdk。<br>设置VirtualBox<br><img src=\"/images/react-003.png\" alt=\"\"><br>设置sdk<br><img src=\"/images/react-004.png\" alt=\"\"></p>\n<p>配置好后，就把模拟的Android实例启动起来放着吧。</p>\n<h2 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6. 启动\"></a>6. 启动</h2><h3 id=\"1-启动React-Native-Server\"><a href=\"#1-启动React-Native-Server\" class=\"headerlink\" title=\"1-启动React Native Server\"></a>1-启动React Native Server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/react-005.png\" alt=\"\"></p>\n<h3 id=\"2-开一个新的命令行终端-cmd-切换到项目目录安装APP\"><a href=\"#2-开一个新的命令行终端-cmd-切换到项目目录安装APP\" class=\"headerlink\" title=\"2-开一个新的命令行终端(cmd), 切换到项目目录安装APP\"></a>2-开一个新的命令行终端(cmd), 切换到项目目录安装APP</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd android</span><br><span class=\"line\">gradlew.bat installDebug</span><br></pre></td></tr></table></figure>\n<p>执行gradlew.bat installDebug时，需要先正常打开Genymotion模拟器，否则build 和 install会报错。<br><img src=\"/images/react-006.png\" alt=\"\"><br>安装成功后，在Genymotion里手动打开APP ，正常的话，你就可以看到React-Native的欢迎画面。<br><img src=\"/images/react-007.png\" alt=\"\"></p>\n<p>Windows下的React Native开发环境搭建 – done.</p>\n","sticky":0},{"title":"[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目","date":"2016-06-01T10:56:42.000Z","_content":"\n\n[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目\n\n### 目标\n\n#### 场景\nJenkins部署在服务器192.168.1.119:8080.\n有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.\n现在，我们需要使用Jenkins自动化部署实现这个目标.\n\n#### 为什么是springboot？\nSprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n#### 如何实现？\n1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n2-建立目标项目的maven打包项目。build。\n3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n\n### 实现步骤\n下面是具体操作\n#### 1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n由于要区分不同的部署环境，所以这里先建一个dev环境的项目组\n![](/images/jenkins-maven-001.png)\n\n建立maven打包任务，为项目所依赖的父模块建立编译打包任务\n主要填好项目任务名称和项目git地址即可\n![](/images/jenkins-maven-002.png)\n\n#### 2-建立目标项目的maven打包项目。build。\n![](/images/jenkins-maven-003.png)\n\n由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作\n首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod\n```\n<profiles>\n    <profile>\n      <id>local</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <env>local</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>dev</id>\n      <properties>\n        <env>dev</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>prod</id>\n      <properties>\n        <env>prod</env>\n      </properties>\n    </profile>\n  </profiles>\n```\n然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。\n```\n<plugin>\n        <artifactId>maven-resources-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>copy-prod-resources</id>\n            <phase>process-resources</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <!-- this is important -->\n              <overwrite>true</overwrite>\n              <sourceDirectory>${basedir}/src/main/java</sourceDirectory>\n              <outputDirectory>target/classes</outputDirectory>\n              <resources>\n                <resource>\n                  <directory>src/main/resources</directory>\n                  <includes>\n                    <include>*.properties</include>\n                    <include>*.xml</include>\n                  </includes>\n                </resource>\n                <resource>\n                  <directory>src/main/resources/${env}</directory>\n                  <targetPath></targetPath>\n                </resource>\n              </resources>\n              <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>\n              <testOutputDirectory>target/test-classes</testOutputDirectory>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n```\n这样就会在resources目录下生成三个不同环境的目录和配置文件\n![](/images/jenkins-maven-007.png)\n\n如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置\n如dev环境就是mvn install -Pdev\n\n但是我们现在不是命令行，而是使用Jenkins做编译打包。\n于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。\n在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。\n-Pdev表示我们要打的正是dev环境的配置\n![](/images/jenkins-maven-004.png)\n\n#### 3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。\n要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。\n![](/images/jenkins-maven-006.png)\n\n然后配置一个执行远程shell脚本的任务，如下图。\n![](/images/jenkins-maven-005.png)\n\n这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。\n而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。\n\n任务脚本例子：\n这个shell脚本主要做了几件事：\n1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径\n2）kill关闭原java进程\n3）使用nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n启动java程序，并把日志输出到指定的log文件。\n4）检查java程序是否启动成功。\n```\n#!/bin/bash\n# script to update and restart project itimes\nremote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target\ntarget_jar=itimes-1.0.0-SNAPSHOT.jar\ntarget_path=/usr/local/itimes\ntarget_bak_path=/usr/local/itimes_bak\n\nnow=$(date '+%Y%m%d%H%M%S')\necho \"update and restart project itimes start...\"\necho \"now time: ${now}\"\n\nmkdir -p ${target_bak_path}/${now}\n/usr/bin/sshpass -p \"root\" scp root@192.168.1.119:${remote_source_path}/itimes-1.0.0-SNAPSHOT.jar ${target_bak_path\n}/${now}\n\ncd $target_bak_path/$now\nif [ -f ${target_jar} ]; then\n  pkill -f 'java.*itimes'\n  sleep 3\n  temppid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  if [[ \"$temppid\" != \"\" ]]; then\n    echo \"temppid is ${temppid}\"\n    ps -ef | grep ${target_jar} | grep -v grep | awk '{print $2}' | xargs kill\n  fi\n  echo \"kill ${target_jar} done..\"\n  cd $target_path\n  if [ -f ${target_jar} ]; then\n    rm -f ${target_jar}\n    echo \"target_jar deleted..\"\n  else\n    echo \"${target_jar} not exist, go on to copy..\"\n  fi\n  cp ${target_bak_path}/${now}/${target_jar} ${target_path}\n  echo \"cp done!\"\n  chmod 755 ${target_jar}\n  nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n  echo \"app startting..\"\n  for i in 2 4 6 10; do\n    sleep $i\n    echo \"wait and check app starting up...\"\n    APP_PID=`ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}'`\n    if [ $APP_PID > 0 ]; then\n        break;\n    else\n        echo \"app is still starting up...\"\n    fi\n  done\n  pid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  echo \"app id is: ${pid}\"\n  if [ $pid ]; then\n    echo \"${target_jar} is running now!\"\n  else\n    echo \"${target_jar} is not running! ${target_jar} startup failed!\"\n  fi\n  success_flag=\"false\"\n  for i in 2 4 6 8 10 12; do\n    echo \"checking app startup status...\"\n    success_target_tag=`cat ${target_bak_path}/${now}/itime-${now}.log | grep \"Started App in\"`\n    if [[ \"\" != \"$success_target_tag\" ]]; then\n      echo \"Found success target tag, app startup successfully..\"\n      success_flag=\"true\"\n      break;\n    else\n        echo \"app is still starting up...\"\n        sleep $i\n        echo \"sleep $i ...\"\n    fi\n  done\n  if [[ \"true\" != \"$success_flag\"  ]]; then\n    echo \"Not found success target tag, app startup failed...\"\n  fi\nelse\n  echo \"Target jar not exist! Update not complete!\"\nfi\n\necho \"update done!\"\n```\n\ndone.","source":"_posts/Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目.md","raw":"---\ntitle: '[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目'\ndate: 2016-06-01 18:56:42\ntags:\n---\n\n\n[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目\n\n### 目标\n\n#### 场景\nJenkins部署在服务器192.168.1.119:8080.\n有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.\n现在，我们需要使用Jenkins自动化部署实现这个目标.\n\n#### 为什么是springboot？\nSprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n#### 如何实现？\n1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n2-建立目标项目的maven打包项目。build。\n3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n\n### 实现步骤\n下面是具体操作\n#### 1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\n由于要区分不同的部署环境，所以这里先建一个dev环境的项目组\n![](/images/jenkins-maven-001.png)\n\n建立maven打包任务，为项目所依赖的父模块建立编译打包任务\n主要填好项目任务名称和项目git地址即可\n![](/images/jenkins-maven-002.png)\n\n#### 2-建立目标项目的maven打包项目。build。\n![](/images/jenkins-maven-003.png)\n\n由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作\n首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod\n```\n<profiles>\n    <profile>\n      <id>local</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <env>local</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>dev</id>\n      <properties>\n        <env>dev</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>prod</id>\n      <properties>\n        <env>prod</env>\n      </properties>\n    </profile>\n  </profiles>\n```\n然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。\n```\n<plugin>\n        <artifactId>maven-resources-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>copy-prod-resources</id>\n            <phase>process-resources</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <!-- this is important -->\n              <overwrite>true</overwrite>\n              <sourceDirectory>${basedir}/src/main/java</sourceDirectory>\n              <outputDirectory>target/classes</outputDirectory>\n              <resources>\n                <resource>\n                  <directory>src/main/resources</directory>\n                  <includes>\n                    <include>*.properties</include>\n                    <include>*.xml</include>\n                  </includes>\n                </resource>\n                <resource>\n                  <directory>src/main/resources/${env}</directory>\n                  <targetPath></targetPath>\n                </resource>\n              </resources>\n              <testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>\n              <testOutputDirectory>target/test-classes</testOutputDirectory>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n```\n这样就会在resources目录下生成三个不同环境的目录和配置文件\n![](/images/jenkins-maven-007.png)\n\n如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置\n如dev环境就是mvn install -Pdev\n\n但是我们现在不是命令行，而是使用Jenkins做编译打包。\n于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。\n在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。\n-Pdev表示我们要打的正是dev环境的配置\n![](/images/jenkins-maven-004.png)\n\n#### 3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\n\n由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。\n要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。\n![](/images/jenkins-maven-006.png)\n\n然后配置一个执行远程shell脚本的任务，如下图。\n![](/images/jenkins-maven-005.png)\n\n这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。\n而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。\n\n任务脚本例子：\n这个shell脚本主要做了几件事：\n1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径\n2）kill关闭原java进程\n3）使用nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n启动java程序，并把日志输出到指定的log文件。\n4）检查java程序是否启动成功。\n```\n#!/bin/bash\n# script to update and restart project itimes\nremote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target\ntarget_jar=itimes-1.0.0-SNAPSHOT.jar\ntarget_path=/usr/local/itimes\ntarget_bak_path=/usr/local/itimes_bak\n\nnow=$(date '+%Y%m%d%H%M%S')\necho \"update and restart project itimes start...\"\necho \"now time: ${now}\"\n\nmkdir -p ${target_bak_path}/${now}\n/usr/bin/sshpass -p \"root\" scp root@192.168.1.119:${remote_source_path}/itimes-1.0.0-SNAPSHOT.jar ${target_bak_path\n}/${now}\n\ncd $target_bak_path/$now\nif [ -f ${target_jar} ]; then\n  pkill -f 'java.*itimes'\n  sleep 3\n  temppid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  if [[ \"$temppid\" != \"\" ]]; then\n    echo \"temppid is ${temppid}\"\n    ps -ef | grep ${target_jar} | grep -v grep | awk '{print $2}' | xargs kill\n  fi\n  echo \"kill ${target_jar} done..\"\n  cd $target_path\n  if [ -f ${target_jar} ]; then\n    rm -f ${target_jar}\n    echo \"target_jar deleted..\"\n  else\n    echo \"${target_jar} not exist, go on to copy..\"\n  fi\n  cp ${target_bak_path}/${now}/${target_jar} ${target_path}\n  echo \"cp done!\"\n  chmod 755 ${target_jar}\n  nohup java -jar ${target_path}/${target_jar} < /dev/null > ${target_bak_path}/${now}/itime-${now}.log 2>&1 &\n  echo \"app startting..\"\n  for i in 2 4 6 10; do\n    sleep $i\n    echo \"wait and check app starting up...\"\n    APP_PID=`ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}'`\n    if [ $APP_PID > 0 ]; then\n        break;\n    else\n        echo \"app is still starting up...\"\n    fi\n  done\n  pid=$(ps aux | grep java| grep \"${target_jar}\" | grep -v grep | awk '{ print $2}')\n  echo \"app id is: ${pid}\"\n  if [ $pid ]; then\n    echo \"${target_jar} is running now!\"\n  else\n    echo \"${target_jar} is not running! ${target_jar} startup failed!\"\n  fi\n  success_flag=\"false\"\n  for i in 2 4 6 8 10 12; do\n    echo \"checking app startup status...\"\n    success_target_tag=`cat ${target_bak_path}/${now}/itime-${now}.log | grep \"Started App in\"`\n    if [[ \"\" != \"$success_target_tag\" ]]; then\n      echo \"Found success target tag, app startup successfully..\"\n      success_flag=\"true\"\n      break;\n    else\n        echo \"app is still starting up...\"\n        sleep $i\n        echo \"sleep $i ...\"\n    fi\n  done\n  if [[ \"true\" != \"$success_flag\"  ]]; then\n    echo \"Not found success target tag, app startup failed...\"\n  fi\nelse\n  echo \"Target jar not exist! Update not complete!\"\nfi\n\necho \"update done!\"\n```\n\ndone.","slug":"Jenkins自动化部署实践-Jenkins多环境部署git托管的springboot项目","published":1,"updated":"2016-06-01T14:09:14.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usp2000g00uu9zychbd0","content":"<p>[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>Jenkins部署在服务器192.168.1.119:8080.<br>有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.<br>现在，我们需要使用Jenkins自动化部署实现这个目标.</p>\n<h4 id=\"为什么是springboot？\"><a href=\"#为什么是springboot？\" class=\"headerlink\" title=\"为什么是springboot？\"></a>为什么是springboot？</h4><p>Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</p>\n<h4 id=\"如何实现？\"><a href=\"#如何实现？\" class=\"headerlink\" title=\"如何实现？\"></a>如何实现？</h4><p>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。<br>2-建立目标项目的maven打包项目。build。<br>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><p>下面是具体操作</p>\n<h4 id=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"><a href=\"#1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\" class=\"headerlink\" title=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"></a>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。</h4><p>由于要区分不同的部署环境，所以这里先建一个dev环境的项目组<br><img src=\"/images/jenkins-maven-001.png\" alt=\"\"></p>\n<p>建立maven打包任务，为项目所依赖的父模块建立编译打包任务<br>主要填好项目任务名称和项目git地址即可<br><img src=\"/images/jenkins-maven-002.png\" alt=\"\"></p>\n<h4 id=\"2-建立目标项目的maven打包项目。build。\"><a href=\"#2-建立目标项目的maven打包项目。build。\" class=\"headerlink\" title=\"2-建立目标项目的maven打包项目。build。\"></a>2-建立目标项目的maven打包项目。build。</h4><p><img src=\"/images/jenkins-maven-003.png\" alt=\"\"></p>\n<p>由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作<br>首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;local&lt;/id&gt;</span><br><span class=\"line\">      &lt;activation&gt;</span><br><span class=\"line\">        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class=\"line\">      &lt;/activation&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;local&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;dev&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;prod&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;prod&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">  &lt;/profiles&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;copy-prod-resources&lt;/id&gt;</span><br><span class=\"line\">            &lt;phase&gt;process-resources&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;copy-resources&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">              &lt;!-- this is important --&gt;</span><br><span class=\"line\">              &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">              &lt;sourceDirectory&gt;$&#123;basedir&#125;/src/main/java&lt;/sourceDirectory&gt;</span><br><span class=\"line\">              &lt;outputDirectory&gt;target/classes&lt;/outputDirectory&gt;</span><br><span class=\"line\">              &lt;resources&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;includes&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.properties&lt;/include&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.xml&lt;/include&gt;</span><br><span class=\"line\">                  &lt;/includes&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources/$&#123;env&#125;&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;targetPath&gt;&lt;/targetPath&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">              &lt;/resources&gt;</span><br><span class=\"line\">              &lt;testSourceDirectory&gt;$&#123;basedir&#125;/src/test/java&lt;/testSourceDirectory&gt;</span><br><span class=\"line\">              &lt;testOutputDirectory&gt;target/test-classes&lt;/testOutputDirectory&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就会在resources目录下生成三个不同环境的目录和配置文件<br><img src=\"/images/jenkins-maven-007.png\" alt=\"\"></p>\n<p>如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置<br>如dev环境就是mvn install -Pdev</p>\n<p>但是我们现在不是命令行，而是使用Jenkins做编译打包。<br>于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。<br>在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。<br>-Pdev表示我们要打的正是dev环境的配置<br><img src=\"/images/jenkins-maven-004.png\" alt=\"\"></p>\n<h4 id=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"><a href=\"#3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\" class=\"headerlink\" title=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"></a>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</h4><p>由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。<br>要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。<br><img src=\"/images/jenkins-maven-006.png\" alt=\"\"></p>\n<p>然后配置一个执行远程shell脚本的任务，如下图。<br><img src=\"/images/jenkins-maven-005.png\" alt=\"\"></p>\n<p>这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。<br>而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。</p>\n<p>任务脚本例子：<br>这个shell脚本主要做了几件事：<br>1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径<br>2）kill关闭原java进程<br>3）使用nohup java -jar ${target_path}/${target_jar} &lt; /dev/null &gt; ${target_bak_path}/${now}/itime-${now}.log 2&gt;&amp;1 &amp;<br>启动java程序，并把日志输出到指定的log文件。<br>4）检查java程序是否启动成功。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># script to update and restart project itimes</span><br><span class=\"line\">remote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target</span><br><span class=\"line\">target_jar=itimes-1.0.0-SNAPSHOT.jar</span><br><span class=\"line\">target_path=/usr/local/itimes</span><br><span class=\"line\">target_bak_path=/usr/local/itimes_bak</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date &apos;+%Y%m%d%H%M%S&apos;)</span><br><span class=\"line\">echo &quot;update and restart project itimes start...&quot;</span><br><span class=\"line\">echo &quot;now time: $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $&#123;target_bak_path&#125;/$&#123;now&#125;</span><br><span class=\"line\">/usr/bin/sshpass -p &quot;root&quot; scp root@192.168.1.119:$&#123;remote_source_path&#125;/itimes-1.0.0-SNAPSHOT.jar $&#123;target_bak_path</span><br><span class=\"line\">&#125;/$&#123;now&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $target_bak_path/$now</span><br><span class=\"line\">if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">  pkill -f &apos;java.*itimes&apos;</span><br><span class=\"line\">  sleep 3</span><br><span class=\"line\">  temppid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  if [[ &quot;$temppid&quot; != &quot;&quot; ]]; then</span><br><span class=\"line\">    echo &quot;temppid is $&#123;temppid&#125;&quot;</span><br><span class=\"line\">    ps -ef | grep $&#123;target_jar&#125; | grep -v grep | awk &apos;&#123;print $2&#125;&apos; | xargs kill</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;kill $&#123;target_jar&#125; done..&quot;</span><br><span class=\"line\">  cd $target_path</span><br><span class=\"line\">  if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">    rm -f $&#123;target_jar&#125;</span><br><span class=\"line\">    echo &quot;target_jar deleted..&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; not exist, go on to copy..&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  cp $&#123;target_bak_path&#125;/$&#123;now&#125;/$&#123;target_jar&#125; $&#123;target_path&#125;</span><br><span class=\"line\">  echo &quot;cp done!&quot;</span><br><span class=\"line\">  chmod 755 $&#123;target_jar&#125;</span><br><span class=\"line\">  nohup java -jar $&#123;target_path&#125;/$&#123;target_jar&#125; &lt; /dev/null &gt; $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">  echo &quot;app startting..&quot;</span><br><span class=\"line\">  for i in 2 4 6 10; do</span><br><span class=\"line\">    sleep $i</span><br><span class=\"line\">    echo &quot;wait and check app starting up...&quot;</span><br><span class=\"line\">    APP_PID=`ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;`</span><br><span class=\"line\">    if [ $APP_PID &gt; 0 ]; then</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  pid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  echo &quot;app id is: $&#123;pid&#125;&quot;</span><br><span class=\"line\">  if [ $pid ]; then</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is running now!&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is not running! $&#123;target_jar&#125; startup failed!&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  success_flag=&quot;false&quot;</span><br><span class=\"line\">  for i in 2 4 6 8 10 12; do</span><br><span class=\"line\">    echo &quot;checking app startup status...&quot;</span><br><span class=\"line\">    success_target_tag=`cat $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log | grep &quot;Started App in&quot;`</span><br><span class=\"line\">    if [[ &quot;&quot; != &quot;$success_target_tag&quot; ]]; then</span><br><span class=\"line\">      echo &quot;Found success target tag, app startup successfully..&quot;</span><br><span class=\"line\">      success_flag=&quot;true&quot;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">        sleep $i</span><br><span class=\"line\">        echo &quot;sleep $i ...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  if [[ &quot;true&quot; != &quot;$success_flag&quot;  ]]; then</span><br><span class=\"line\">    echo &quot;Not found success target tag, app startup failed...&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;Target jar not exist! Update not complete!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;update done!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>done.</p>\n","excerpt":"","more":"<p>[Jenkins自动化部署实践]Jenkins多环境部署git托管的springboot项目</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>Jenkins部署在服务器192.168.1.119:8080.<br>有一个在git托管的springboot构建的web项目，项目有n个依赖的父模块，现在想要把这个项目部署到服务器192.168.1.134上.<br>现在，我们需要使用Jenkins自动化部署实现这个目标.</p>\n<h4 id=\"为什么是springboot？\"><a href=\"#为什么是springboot？\" class=\"headerlink\" title=\"为什么是springboot？\"></a>为什么是springboot？</h4><p>Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</p>\n<h4 id=\"如何实现？\"><a href=\"#如何实现？\" class=\"headerlink\" title=\"如何实现？\"></a>如何实现？</h4><p>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。<br>2-建立目标项目的maven打包项目。build。<br>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><p>下面是具体操作</p>\n<h4 id=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"><a href=\"#1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\" class=\"headerlink\" title=\"1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。\"></a>1-需要在jenkins上建立n个maven项目打包任务，项目有多少个依赖的父模块，就建多少个。build。</h4><p>由于要区分不同的部署环境，所以这里先建一个dev环境的项目组<br><img src=\"/images/jenkins-maven-001.png\" alt=\"\"></p>\n<p>建立maven打包任务，为项目所依赖的父模块建立编译打包任务<br>主要填好项目任务名称和项目git地址即可<br><img src=\"/images/jenkins-maven-002.png\" alt=\"\"></p>\n<h4 id=\"2-建立目标项目的maven打包项目。build。\"><a href=\"#2-建立目标项目的maven打包项目。build。\" class=\"headerlink\" title=\"2-建立目标项目的maven打包项目。build。\"></a>2-建立目标项目的maven打包项目。build。</h4><p><img src=\"/images/jenkins-maven-003.png\" alt=\"\"></p>\n<p>由于我们要实现不同部署环境区分不同配置，所以我们需要对项目做些额外的工作<br>首先在maven pom中添加profiles设置。我这里添加了3个环境local，dev和prod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;local&lt;/id&gt;</span><br><span class=\"line\">      &lt;activation&gt;</span><br><span class=\"line\">        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class=\"line\">      &lt;/activation&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;local&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;dev&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">    &lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;prod&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;env&gt;prod&lt;/env&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">  &lt;/profiles&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加maven-resources-plugin插件，这个插件会为我们复制生成三个环境的配置文件目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;copy-prod-resources&lt;/id&gt;</span><br><span class=\"line\">            &lt;phase&gt;process-resources&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;copy-resources&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">              &lt;!-- this is important --&gt;</span><br><span class=\"line\">              &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class=\"line\">              &lt;sourceDirectory&gt;$&#123;basedir&#125;/src/main/java&lt;/sourceDirectory&gt;</span><br><span class=\"line\">              &lt;outputDirectory&gt;target/classes&lt;/outputDirectory&gt;</span><br><span class=\"line\">              &lt;resources&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;includes&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.properties&lt;/include&gt;</span><br><span class=\"line\">                    &lt;include&gt;*.xml&lt;/include&gt;</span><br><span class=\"line\">                  &lt;/includes&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">                &lt;resource&gt;</span><br><span class=\"line\">                  &lt;directory&gt;src/main/resources/$&#123;env&#125;&lt;/directory&gt;</span><br><span class=\"line\">                  &lt;targetPath&gt;&lt;/targetPath&gt;</span><br><span class=\"line\">                &lt;/resource&gt;</span><br><span class=\"line\">              &lt;/resources&gt;</span><br><span class=\"line\">              &lt;testSourceDirectory&gt;$&#123;basedir&#125;/src/test/java&lt;/testSourceDirectory&gt;</span><br><span class=\"line\">              &lt;testOutputDirectory&gt;target/test-classes&lt;/testOutputDirectory&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就会在resources目录下生成三个不同环境的目录和配置文件<br><img src=\"/images/jenkins-maven-007.png\" alt=\"\"></p>\n<p>如果是cli命令行下，我们就可以使用mvn install -P$env命令打包不同环境的配置<br>如dev环境就是mvn install -Pdev</p>\n<p>但是我们现在不是命令行，而是使用Jenkins做编译打包。<br>于是，添加的Jenkins任务，除了任务名称和git地址外，还需要额外多一个配置。<br>在“Build”标签下，填写“goals and options”字段，值为“clean install -Pdev”。<br>-Pdev表示我们要打的正是dev环境的配置<br><img src=\"/images/jenkins-maven-004.png\" alt=\"\"></p>\n<h4 id=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"><a href=\"#3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192-168-1-134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\" class=\"headerlink\" title=\"3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。\"></a>3-建立一个自由软件风格任务，作用是使用shell脚本，登录到目标服务器192.168.1.134，执行134上的shell脚本，从Jenkins所在的服务器cp目标jar包，拉取打包好的jar到134，然后启动jar。</h4><p>由于我们需要执行远程服务器上的shell脚本，所以我们必须要让Jenkins知道远程服务器的ssh登录方法。<br>要让Jenkins能登录服务器做远程任务，我们需要在全局配置中配置好“SSH remote host”。<br><img src=\"/images/jenkins-maven-006.png\" alt=\"\"></p>\n<p>然后配置一个执行远程shell脚本的任务，如下图。<br><img src=\"/images/jenkins-maven-005.png\" alt=\"\"></p>\n<p>这个脚本很简单，只是设置好要登录的服务器，在shell中进入shell脚本所在目录，直接执行目标脚本。<br>而拉取jar包并更新启动springboot项目的任务则有远程脚本所承包了。</p>\n<p>任务脚本例子：<br>这个shell脚本主要做了几件事：<br>1）使用sshpass和scp从119服务器远程复制打包好的jar包回来134，备份，再复制到项目定好的目标路径<br>2）kill关闭原java进程<br>3）使用nohup java -jar ${target_path}/${target_jar} &lt; /dev/null &gt; ${target_bak_path}/${now}/itime-${now}.log 2&gt;&amp;1 &amp;<br>启动java程序，并把日志输出到指定的log文件。<br>4）检查java程序是否启动成功。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># script to update and restart project itimes</span><br><span class=\"line\">remote_source_path=/root/.jenkins/workspace/dev-timeitem-itimes/target</span><br><span class=\"line\">target_jar=itimes-1.0.0-SNAPSHOT.jar</span><br><span class=\"line\">target_path=/usr/local/itimes</span><br><span class=\"line\">target_bak_path=/usr/local/itimes_bak</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date &apos;+%Y%m%d%H%M%S&apos;)</span><br><span class=\"line\">echo &quot;update and restart project itimes start...&quot;</span><br><span class=\"line\">echo &quot;now time: $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $&#123;target_bak_path&#125;/$&#123;now&#125;</span><br><span class=\"line\">/usr/bin/sshpass -p &quot;root&quot; scp root@192.168.1.119:$&#123;remote_source_path&#125;/itimes-1.0.0-SNAPSHOT.jar $&#123;target_bak_path</span><br><span class=\"line\">&#125;/$&#123;now&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $target_bak_path/$now</span><br><span class=\"line\">if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">  pkill -f &apos;java.*itimes&apos;</span><br><span class=\"line\">  sleep 3</span><br><span class=\"line\">  temppid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  if [[ &quot;$temppid&quot; != &quot;&quot; ]]; then</span><br><span class=\"line\">    echo &quot;temppid is $&#123;temppid&#125;&quot;</span><br><span class=\"line\">    ps -ef | grep $&#123;target_jar&#125; | grep -v grep | awk &apos;&#123;print $2&#125;&apos; | xargs kill</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo &quot;kill $&#123;target_jar&#125; done..&quot;</span><br><span class=\"line\">  cd $target_path</span><br><span class=\"line\">  if [ -f $&#123;target_jar&#125; ]; then</span><br><span class=\"line\">    rm -f $&#123;target_jar&#125;</span><br><span class=\"line\">    echo &quot;target_jar deleted..&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; not exist, go on to copy..&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  cp $&#123;target_bak_path&#125;/$&#123;now&#125;/$&#123;target_jar&#125; $&#123;target_path&#125;</span><br><span class=\"line\">  echo &quot;cp done!&quot;</span><br><span class=\"line\">  chmod 755 $&#123;target_jar&#125;</span><br><span class=\"line\">  nohup java -jar $&#123;target_path&#125;/$&#123;target_jar&#125; &lt; /dev/null &gt; $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">  echo &quot;app startting..&quot;</span><br><span class=\"line\">  for i in 2 4 6 10; do</span><br><span class=\"line\">    sleep $i</span><br><span class=\"line\">    echo &quot;wait and check app starting up...&quot;</span><br><span class=\"line\">    APP_PID=`ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;`</span><br><span class=\"line\">    if [ $APP_PID &gt; 0 ]; then</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  pid=$(ps aux | grep java| grep &quot;$&#123;target_jar&#125;&quot; | grep -v grep | awk &apos;&#123; print $2&#125;&apos;)</span><br><span class=\"line\">  echo &quot;app id is: $&#123;pid&#125;&quot;</span><br><span class=\"line\">  if [ $pid ]; then</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is running now!&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$&#123;target_jar&#125; is not running! $&#123;target_jar&#125; startup failed!&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  success_flag=&quot;false&quot;</span><br><span class=\"line\">  for i in 2 4 6 8 10 12; do</span><br><span class=\"line\">    echo &quot;checking app startup status...&quot;</span><br><span class=\"line\">    success_target_tag=`cat $&#123;target_bak_path&#125;/$&#123;now&#125;/itime-$&#123;now&#125;.log | grep &quot;Started App in&quot;`</span><br><span class=\"line\">    if [[ &quot;&quot; != &quot;$success_target_tag&quot; ]]; then</span><br><span class=\"line\">      echo &quot;Found success target tag, app startup successfully..&quot;</span><br><span class=\"line\">      success_flag=&quot;true&quot;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;app is still starting up...&quot;</span><br><span class=\"line\">        sleep $i</span><br><span class=\"line\">        echo &quot;sleep $i ...&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">  if [[ &quot;true&quot; != &quot;$success_flag&quot;  ]]; then</span><br><span class=\"line\">    echo &quot;Not found success target tag, app startup failed...&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;Target jar not exist! Update not complete!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;update done!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>done.</p>\n","sticky":0},{"title":"centos6下安装配置mysql，并开启mysql的远程登录","date":"2016-04-25T13:00:38.000Z","_content":"\n\n## 安装：\n\n### 查看是否已安装mysql：\nyum list installed | grep mysql\n### 如果已安装，如下一次卸载：\nyum -y remove mysql-libs.x86_64\n### 查看可用mysql：\nyum list | grep mysql 或 yum -y list mysql*\n### 安装mysql：\nyum -y install mysql-server mysql mysql-devel\n### 查看已安装的mysql状态：\nrpm -qi mysql-server\n\n### 安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\nmysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n\n### 解决：方法操作很简单，如下：\n/etc/init.d/mysql stop\nmysqld_safe --user=mysql --skip-grant-tables --skip-networking &\nmysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('root') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n/etc/init.d/mysqld restart\nmysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n\n## 开启远程连接\n### 设置任意ip可以使用root账户和root密码远程登录\ngrant all privileges  on *.* to root@'%' identified by \"root\";\n### 刷新\nFLUSH PRIVILEGES;\n### 重启：\nservice mysqld restart\n\ndone！","source":"_posts/centos6下安装配置mysql，并开启mysql的远程登录.md","raw":"---\ntitle: centos6下安装配置mysql，并开启mysql的远程登录\ndate: 2016-04-25 21:00:38\ntags: [mysql, install, database]\n---\n\n\n## 安装：\n\n### 查看是否已安装mysql：\nyum list installed | grep mysql\n### 如果已安装，如下一次卸载：\nyum -y remove mysql-libs.x86_64\n### 查看可用mysql：\nyum list | grep mysql 或 yum -y list mysql*\n### 安装mysql：\nyum -y install mysql-server mysql mysql-devel\n### 查看已安装的mysql状态：\nrpm -qi mysql-server\n\n### 安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\nmysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n\n### 解决：方法操作很简单，如下：\n/etc/init.d/mysql stop\nmysqld_safe --user=mysql --skip-grant-tables --skip-networking &\nmysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('root') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n/etc/init.d/mysqld restart\nmysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n\n## 开启远程连接\n### 设置任意ip可以使用root账户和root密码远程登录\ngrant all privileges  on *.* to root@'%' identified by \"root\";\n### 刷新\nFLUSH PRIVILEGES;\n### 重启：\nservice mysqld restart\n\ndone！","slug":"centos6下安装配置mysql，并开启mysql的远程登录","published":1,"updated":"2016-04-25T13:04:16.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uspa000j00uuiby4zdsa","content":"<h2 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h2><h3 id=\"查看是否已安装mysql：\"><a href=\"#查看是否已安装mysql：\" class=\"headerlink\" title=\"查看是否已安装mysql：\"></a>查看是否已安装mysql：</h3><p>yum list installed | grep mysql</p>\n<h3 id=\"如果已安装，如下一次卸载：\"><a href=\"#如果已安装，如下一次卸载：\" class=\"headerlink\" title=\"如果已安装，如下一次卸载：\"></a>如果已安装，如下一次卸载：</h3><p>yum -y remove mysql-libs.x86_64</p>\n<h3 id=\"查看可用mysql：\"><a href=\"#查看可用mysql：\" class=\"headerlink\" title=\"查看可用mysql：\"></a>查看可用mysql：</h3><p>yum list | grep mysql 或 yum -y list mysql*</p>\n<h3 id=\"安装mysql：\"><a href=\"#安装mysql：\" class=\"headerlink\" title=\"安装mysql：\"></a>安装mysql：</h3><p>yum -y install mysql-server mysql mysql-devel</p>\n<h3 id=\"查看已安装的mysql状态：\"><a href=\"#查看已安装的mysql状态：\" class=\"headerlink\" title=\"查看已安装的mysql状态：\"></a>查看已安装的mysql状态：</h3><p>rpm -qi mysql-server</p>\n<h3 id=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\"><a href=\"#安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\" class=\"headerlink\" title=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\"></a>安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:</h3><p>mysql -u root -p<br>Enter password:<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)</p>\n<h3 id=\"解决：方法操作很简单，如下：\"><a href=\"#解决：方法操作很简单，如下：\" class=\"headerlink\" title=\"解决：方法操作很简单，如下：\"></a>解决：方法操作很简单，如下：</h3><p>/etc/init.d/mysql stop<br>mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;<br>mysql -u root mysql<br>mysql&gt; UPDATE user SET Password=PASSWORD(‘root’) where USER=’root’ and host=’root’ or host=’localhost’;//把空的用户密码都修改成非空的密码就行了。<br>mysql&gt; FLUSH PRIVILEGES;<br>mysql&gt; quit<br>/etc/init.d/mysqld restart<br>mysql -uroot -p<br>Enter password: &lt;输入新设的密码newpassword&gt;</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"设置任意ip可以使用root账户和root密码远程登录\"><a href=\"#设置任意ip可以使用root账户和root密码远程登录\" class=\"headerlink\" title=\"设置任意ip可以使用root账户和root密码远程登录\"></a>设置任意ip可以使用root账户和root密码远程登录</h3><p>grant all privileges  on <em>.</em> to root@’%’ identified by “root”;</p>\n<h3 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h3><p>FLUSH PRIVILEGES;</p>\n<h3 id=\"重启：\"><a href=\"#重启：\" class=\"headerlink\" title=\"重启：\"></a>重启：</h3><p>service mysqld restart</p>\n<p>done！</p>\n","excerpt":"","more":"<h2 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h2><h3 id=\"查看是否已安装mysql：\"><a href=\"#查看是否已安装mysql：\" class=\"headerlink\" title=\"查看是否已安装mysql：\"></a>查看是否已安装mysql：</h3><p>yum list installed | grep mysql</p>\n<h3 id=\"如果已安装，如下一次卸载：\"><a href=\"#如果已安装，如下一次卸载：\" class=\"headerlink\" title=\"如果已安装，如下一次卸载：\"></a>如果已安装，如下一次卸载：</h3><p>yum -y remove mysql-libs.x86_64</p>\n<h3 id=\"查看可用mysql：\"><a href=\"#查看可用mysql：\" class=\"headerlink\" title=\"查看可用mysql：\"></a>查看可用mysql：</h3><p>yum list | grep mysql 或 yum -y list mysql*</p>\n<h3 id=\"安装mysql：\"><a href=\"#安装mysql：\" class=\"headerlink\" title=\"安装mysql：\"></a>安装mysql：</h3><p>yum -y install mysql-server mysql mysql-devel</p>\n<h3 id=\"查看已安装的mysql状态：\"><a href=\"#查看已安装的mysql状态：\" class=\"headerlink\" title=\"查看已安装的mysql状态：\"></a>查看已安装的mysql状态：</h3><p>rpm -qi mysql-server</p>\n<h3 id=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\"><a href=\"#安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示\" class=\"headerlink\" title=\"安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:\"></a>安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:</h3><p>mysql -u root -p<br>Enter password:<br>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)</p>\n<h3 id=\"解决：方法操作很简单，如下：\"><a href=\"#解决：方法操作很简单，如下：\" class=\"headerlink\" title=\"解决：方法操作很简单，如下：\"></a>解决：方法操作很简单，如下：</h3><p>/etc/init.d/mysql stop<br>mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;<br>mysql -u root mysql<br>mysql&gt; UPDATE user SET Password=PASSWORD(‘root’) where USER=’root’ and host=’root’ or host=’localhost’;//把空的用户密码都修改成非空的密码就行了。<br>mysql&gt; FLUSH PRIVILEGES;<br>mysql&gt; quit<br>/etc/init.d/mysqld restart<br>mysql -uroot -p<br>Enter password: &lt;输入新设的密码newpassword&gt;</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"设置任意ip可以使用root账户和root密码远程登录\"><a href=\"#设置任意ip可以使用root账户和root密码远程登录\" class=\"headerlink\" title=\"设置任意ip可以使用root账户和root密码远程登录\"></a>设置任意ip可以使用root账户和root密码远程登录</h3><p>grant all privileges  on <em>.</em> to root@’%’ identified by “root”;</p>\n<h3 id=\"刷新\"><a href=\"#刷新\" class=\"headerlink\" title=\"刷新\"></a>刷新</h3><p>FLUSH PRIVILEGES;</p>\n<h3 id=\"重启：\"><a href=\"#重启：\" class=\"headerlink\" title=\"重启：\"></a>重启：</h3><p>service mysqld restart</p>\n<p>done！</p>\n","sticky":0},{"title":"Transform objects with guava(使用Guava库转换对象)","date":"2016-07-23T05:03:29.000Z","_content":"\n# Transform objects with guava\n\nAll the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.\n```\nFunction<String, Integer> lengthFunction = new Function<String, Integer>() {\n  public Integer apply(String string) {\n    return string.length();\n  }\n};\n```\n\n\n## Convert string to Enum\n\n\n\nI have seeded some data so we can get right to the examples and you don't have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.\n\nTaking a look at the Day enum we created, it is a simple class that represents the days of the week:\n```\npublic enum Day {\n\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY;   \n}\n```\nWe may have a list of strings with various strings representing days, Wednesday, Sunday, Monday... What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.\n```\n@Test\npublic void transform_string_to_enum () {\n    \n    List<String> days = Lists.newArrayList(\n            \"WEDNESDAY\", \n            \"SUNDAY\", \n            \"MONDAY\", \n            \"WEDNESDAY\");\n    \n    Function<String, Day> stringToDayEnum = Enums.stringConverter(Day.class);\n    \n    Iterable<Day> daysAsEnum = Iterables.transform(days, stringToDayEnum);\n    \n    for (Day day : daysAsEnum) {\n        System.out.println(day);\n    }\n}\n```\nOutput\n```\nWEDNESDAY\nSUNDAY\nMONDAY\nWEDNESDAY\n```\n\n\n\n## Convert from one object to another\n\nThe next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.\n```\npublic class ETradeInvestment {\n    \n    private String key;\n    private String name;\n    private BigDecimal price;\n\n    ...\n}\n\npublic class TdAmeritradeInvestment {\n    \n    private int investmentKey;\n    private String investmentName;\n    private double investmentPrice;\n\n    ...\n}\n```\nThere is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don't have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <F, T> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.\n\nIf we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don't own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.\n```\n@Test\npublic void convert_tdinvestment_etradeinvestment () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    // convert a list of objects\n    Function<TdAmeritradeInvestment, ETradeInvestment> tdToEtradeFunction = new Function<TdAmeritradeInvestment, ETradeInvestment>() {\n\n        public ETradeInvestment apply(TdAmeritradeInvestment input) {\n            ETradeInvestment investment = new ETradeInvestment();\n            investment.setKey(Ints.stringConverter().reverse()\n                    .convert(input.getInvestmentKey()));\n            investment.setName(input.getInvestmentName());\n            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));\n            return investment;\n        }\n    };\n\n    List<ETradeInvestment> etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);\n    \n    System.out.println(etradeInvestments);\n}\n```\nOutput\n```\n[\nETradeInvestment{key=555, name=Facebook Inc, price=57.50},\nETradeInvestment{key=123, name=Micron Technology, Inc., price=21.28}, \nETradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \nETradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.60}\n]\n```\n\n\n\n## Convert an object\n\nIf you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.\n\nETradeInvestment faceBookInvestment = tdToEtradeFunction\n                .apply(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\nOutput\n```\nETradeInvestment{key=555, name=Facebook Inc, price=57.50}\n```\n\n\n\n## Convert list to map\n\nOne other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.\n```\n@Test\npublic void transform_list_to_map () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    ImmutableMap<Integer, TdAmeritradeInvestment> investmentMap = Maps\n            .uniqueIndex(tdInvestments,\n                    new Function<TdAmeritradeInvestment, Integer>() {\n\n                        public Integer apply(TdAmeritradeInvestment input) {\n                            return new Integer(input.getInvestmentKey());\n                        }\n                    });\n    \n    System.out.println(investmentMap);\n    \n}\n````\nOutput\n```\n{\n555=TdAmeritradeInvestment{key=555, name=Facebook Inc, price=57.51}, \n123=TdAmeritradeInvestment{key=123, name=Micron Technology, Inc., price=21.29}, \n456=TdAmeritradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \n236=TdAmeritradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.6}\n}\n```\n\n原地址：http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/","source":"_posts/Transform-objects-with-guava-使用Guava库转换对象.md","raw":"---\ntitle: Transform objects with guava(使用Guava库转换对象)\ndate: 2016-07-23 13:03:29\ntags: [java, guava, transform objects, convert, 对象转换]\n---\n\n# Transform objects with guava\n\nAll the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.\n```\nFunction<String, Integer> lengthFunction = new Function<String, Integer>() {\n  public Integer apply(String string) {\n    return string.length();\n  }\n};\n```\n\n\n## Convert string to Enum\n\n\n\nI have seeded some data so we can get right to the examples and you don't have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.\n\nTaking a look at the Day enum we created, it is a simple class that represents the days of the week:\n```\npublic enum Day {\n\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY;   \n}\n```\nWe may have a list of strings with various strings representing days, Wednesday, Sunday, Monday... What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.\n```\n@Test\npublic void transform_string_to_enum () {\n    \n    List<String> days = Lists.newArrayList(\n            \"WEDNESDAY\", \n            \"SUNDAY\", \n            \"MONDAY\", \n            \"WEDNESDAY\");\n    \n    Function<String, Day> stringToDayEnum = Enums.stringConverter(Day.class);\n    \n    Iterable<Day> daysAsEnum = Iterables.transform(days, stringToDayEnum);\n    \n    for (Day day : daysAsEnum) {\n        System.out.println(day);\n    }\n}\n```\nOutput\n```\nWEDNESDAY\nSUNDAY\nMONDAY\nWEDNESDAY\n```\n\n\n\n## Convert from one object to another\n\nThe next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.\n```\npublic class ETradeInvestment {\n    \n    private String key;\n    private String name;\n    private BigDecimal price;\n\n    ...\n}\n\npublic class TdAmeritradeInvestment {\n    \n    private int investmentKey;\n    private String investmentName;\n    private double investmentPrice;\n\n    ...\n}\n```\nThere is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don't have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <F, T> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.\n\nIf we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don't own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.\n```\n@Test\npublic void convert_tdinvestment_etradeinvestment () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    // convert a list of objects\n    Function<TdAmeritradeInvestment, ETradeInvestment> tdToEtradeFunction = new Function<TdAmeritradeInvestment, ETradeInvestment>() {\n\n        public ETradeInvestment apply(TdAmeritradeInvestment input) {\n            ETradeInvestment investment = new ETradeInvestment();\n            investment.setKey(Ints.stringConverter().reverse()\n                    .convert(input.getInvestmentKey()));\n            investment.setName(input.getInvestmentName());\n            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));\n            return investment;\n        }\n    };\n\n    List<ETradeInvestment> etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);\n    \n    System.out.println(etradeInvestments);\n}\n```\nOutput\n```\n[\nETradeInvestment{key=555, name=Facebook Inc, price=57.50},\nETradeInvestment{key=123, name=Micron Technology, Inc., price=21.28}, \nETradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \nETradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.60}\n]\n```\n\n\n\n## Convert an object\n\nIf you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.\n\nETradeInvestment faceBookInvestment = tdToEtradeFunction\n                .apply(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\nOutput\n```\nETradeInvestment{key=555, name=Facebook Inc, price=57.50}\n```\n\n\n\n## Convert list to map\n\nOne other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.\n```\n@Test\npublic void transform_list_to_map () {\n    \n    List<TdAmeritradeInvestment> tdInvestments = Lists.newArrayList();\n    tdInvestments.add(new TdAmeritradeInvestment(555, \"Facebook Inc\", 57.51));\n    tdInvestments.add(new TdAmeritradeInvestment(123, \"Micron Technology, Inc.\", 21.29));\n    tdInvestments.add(new TdAmeritradeInvestment(456, \"Ford Motor Company\", 15.31));\n    tdInvestments.add(new TdAmeritradeInvestment(236, \"Sirius XM Holdings Inc\", 3.60));\n    \n    ImmutableMap<Integer, TdAmeritradeInvestment> investmentMap = Maps\n            .uniqueIndex(tdInvestments,\n                    new Function<TdAmeritradeInvestment, Integer>() {\n\n                        public Integer apply(TdAmeritradeInvestment input) {\n                            return new Integer(input.getInvestmentKey());\n                        }\n                    });\n    \n    System.out.println(investmentMap);\n    \n}\n````\nOutput\n```\n{\n555=TdAmeritradeInvestment{key=555, name=Facebook Inc, price=57.51}, \n123=TdAmeritradeInvestment{key=123, name=Micron Technology, Inc., price=21.29}, \n456=TdAmeritradeInvestment{key=456, name=Ford Motor Company, price=15.31}, \n236=TdAmeritradeInvestment{key=236, name=Sirius XM Holdings Inc, price=3.6}\n}\n```\n\n原地址：http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/","slug":"Transform-objects-with-guava-使用Guava库转换对象","published":1,"updated":"2016-07-23T05:07:00.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uspd000l00uuo1eo7e13","content":"<h1 id=\"Transform-objects-with-guava\"><a href=\"#Transform-objects-with-guava\" class=\"headerlink\" title=\"Transform objects with guava\"></a>Transform objects with guava</h1><p>All the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;String, Integer&gt; lengthFunction = new Function&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">  public Integer apply(String string) &#123;</span><br><span class=\"line\">    return string.length();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-string-to-Enum\"><a href=\"#Convert-string-to-Enum\" class=\"headerlink\" title=\"Convert string to Enum\"></a>Convert string to Enum</h2><p>I have seeded some data so we can get right to the examples and you don’t have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.</p>\n<p>Taking a look at the Day enum we created, it is a simple class that represents the days of the week:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Day &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,</span><br><span class=\"line\">    THURSDAY, FRIDAY, SATURDAY;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We may have a list of strings with various strings representing days, Wednesday, Sunday, Monday… What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_string_to_enum () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;String&gt; days = Lists.newArrayList(</span><br><span class=\"line\">            &quot;WEDNESDAY&quot;, </span><br><span class=\"line\">            &quot;SUNDAY&quot;, </span><br><span class=\"line\">            &quot;MONDAY&quot;, </span><br><span class=\"line\">            &quot;WEDNESDAY&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Function&lt;String, Day&gt; stringToDayEnum = Enums.stringConverter(Day.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Iterable&lt;Day&gt; daysAsEnum = Iterables.transform(days, stringToDayEnum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for (Day day : daysAsEnum) &#123;</span><br><span class=\"line\">        System.out.println(day);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEDNESDAY</span><br><span class=\"line\">SUNDAY</span><br><span class=\"line\">MONDAY</span><br><span class=\"line\">WEDNESDAY</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-from-one-object-to-another\"><a href=\"#Convert-from-one-object-to-another\" class=\"headerlink\" title=\"Convert from one object to another\"></a>Convert from one object to another</h2><p>The next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ETradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String key;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private BigDecimal price;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TdAmeritradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private int investmentKey;</span><br><span class=\"line\">    private String investmentName;</span><br><span class=\"line\">    private double investmentPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don’t have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <f, t=\"\"> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.</f,></p>\n<p>If we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don’t own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void convert_tdinvestment_etradeinvestment () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // convert a list of objects</span><br><span class=\"line\">    Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt; tdToEtradeFunction = new Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ETradeInvestment apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">            ETradeInvestment investment = new ETradeInvestment();</span><br><span class=\"line\">            investment.setKey(Ints.stringConverter().reverse()</span><br><span class=\"line\">                    .convert(input.getInvestmentKey()));</span><br><span class=\"line\">            investment.setName(input.getInvestmentName());</span><br><span class=\"line\">            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));</span><br><span class=\"line\">            return investment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;ETradeInvestment&gt; etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(etradeInvestments);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;,</span><br><span class=\"line\">ETradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.28&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.60&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-an-object\"><a href=\"#Convert-an-object\" class=\"headerlink\" title=\"Convert an object\"></a>Convert an object</h2><p>If you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.</p>\n<p>ETradeInvestment faceBookInvestment = tdToEtradeFunction<br>                .apply(new TdAmeritradeInvestment(555, “Facebook Inc”, 57.51));<br>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-list-to-map\"><a href=\"#Convert-list-to-map\" class=\"headerlink\" title=\"Convert list to map\"></a>Convert list to map</h2><p>One other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_list_to_map () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    ImmutableMap&lt;Integer, TdAmeritradeInvestment&gt; investmentMap = Maps</span><br><span class=\"line\">            .uniqueIndex(tdInvestments,</span><br><span class=\"line\">                    new Function&lt;TdAmeritradeInvestment, Integer&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        public Integer apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">                            return new Integer(input.getInvestmentKey());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(investmentMap);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">555=TdAmeritradeInvestment&#123;key=555, name=Facebook Inc, price=57.51&#125;, </span><br><span class=\"line\">123=TdAmeritradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.29&#125;, </span><br><span class=\"line\">456=TdAmeritradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">236=TdAmeritradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.6&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原地址：<a href=\"http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/\" target=\"_blank\" rel=\"external\">http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/</a></p>\n","excerpt":"","more":"<h1 id=\"Transform-objects-with-guava\"><a href=\"#Transform-objects-with-guava\" class=\"headerlink\" title=\"Transform objects with guava\"></a>Transform objects with guava</h1><p>All the function is a specific type of class that has an apply method that can be overridden. In the example, the apply method accepts a string as a parameter and returns an integer or the length of the string. Scrolling a bit further in the documentation, the most common use of functions is transforming collections.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;String, Integer&gt; lengthFunction = new Function&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">  public Integer apply(String string) &#123;</span><br><span class=\"line\">    return string.length();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-string-to-Enum\"><a href=\"#Convert-string-to-Enum\" class=\"headerlink\" title=\"Convert string to Enum\"></a>Convert string to Enum</h2><p>I have seeded some data so we can get right to the examples and you don’t have to watch me type. The first example to show is transforming a string to Enum. Enums are quite popular and you may want to transform as it might be stored as a string in a database or some value.</p>\n<p>Taking a look at the Day enum we created, it is a simple class that represents the days of the week:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Day &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,</span><br><span class=\"line\">    THURSDAY, FRIDAY, SATURDAY;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>We may have a list of strings with various strings representing days, Wednesday, Sunday, Monday… What we want to do is convert the list of strings to enums. There is a function in the Enum utility class in guava valueOfFunction that allows you to pass in the enum you want to convert to. In our case, Day.Class. Since we just upgraded to Guava 16.0, the valueOfFunction has been deprecated in preference of stringConverter. The stringConverter will return a function that converts a string to an Enum. Now we have a function that can be passed to guava utilities, in this case Iterables utility class by calling the transform method which will convert each string of list to a day enum.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_string_to_enum () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;String&gt; days = Lists.newArrayList(</span><br><span class=\"line\">            &quot;WEDNESDAY&quot;, </span><br><span class=\"line\">            &quot;SUNDAY&quot;, </span><br><span class=\"line\">            &quot;MONDAY&quot;, </span><br><span class=\"line\">            &quot;WEDNESDAY&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Function&lt;String, Day&gt; stringToDayEnum = Enums.stringConverter(Day.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Iterable&lt;Day&gt; daysAsEnum = Iterables.transform(days, stringToDayEnum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for (Day day : daysAsEnum) &#123;</span><br><span class=\"line\">        System.out.println(day);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEDNESDAY</span><br><span class=\"line\">SUNDAY</span><br><span class=\"line\">MONDAY</span><br><span class=\"line\">WEDNESDAY</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-from-one-object-to-another\"><a href=\"#Convert-from-one-object-to-another\" class=\"headerlink\" title=\"Convert from one object to another\"></a>Convert from one object to another</h2><p>The next example will look at is how to convert one object to another. Quite often we need to go to a legacy system to get data and populate a new set of domains for our new system. Or we may get data from a web service or whatever it may be. For this example, I created two objects. ETradeInvestment and TdAmeritradeInvestment which contain similar attributes of different types.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ETradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String key;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private BigDecimal price;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TdAmeritradeInvestment &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private int investmentKey;</span><br><span class=\"line\">    private String investmentName;</span><br><span class=\"line\">    private double investmentPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There is a number of other utilities such as BeanUtils.copyProperties in apache commons or written your own if statements and have made it work that way. If we don’t have a list of objects, we can call a method on function that will return a just a single object. We want to create the function that will map the TdAmeritradeInvestment to ETradeInvestment. If you ever get lost, you can use code assist or just remember the <F, T> just means from object, to object. For each iteration of the list, a new ETradeInvestment object will be created while mapping the TdAmeritradeInvestment to it. For the key, we will use the Ints.stringConverter which allows us to convert from a string to an int.</p>\n<p>If we want to get some reuse out of this function, we could extract it outside this method or we can just use it inline. We will use the Lists utility to transform the list, above we use Iterables and there is also FluentIterables and Collections2. There is a lot of different ways which guava provides to use a function. If we run this code, we have EtradeInvestment object with the key, name and price. As a disclosure, I don’t own any of these investments and were pulled from Google home page under the trending section. That did it, we converted from the TdAmeritradeInvestment to ETradeInvestment.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void convert_tdinvestment_etradeinvestment () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // convert a list of objects</span><br><span class=\"line\">    Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt; tdToEtradeFunction = new Function&lt;TdAmeritradeInvestment, ETradeInvestment&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ETradeInvestment apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">            ETradeInvestment investment = new ETradeInvestment();</span><br><span class=\"line\">            investment.setKey(Ints.stringConverter().reverse()</span><br><span class=\"line\">                    .convert(input.getInvestmentKey()));</span><br><span class=\"line\">            investment.setName(input.getInvestmentName());</span><br><span class=\"line\">            investment.setPrice(new BigDecimal(input.getInvestmentPrice()));</span><br><span class=\"line\">            return investment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;ETradeInvestment&gt; etradeInvestments = Lists.transform(tdInvestments, tdToEtradeFunction);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(etradeInvestments);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;,</span><br><span class=\"line\">ETradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.28&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">ETradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.60&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-an-object\"><a href=\"#Convert-an-object\" class=\"headerlink\" title=\"Convert an object\"></a>Convert an object</h2><p>If you have one single investment or object you want to convert, you can call the apply method directly on the function that will do the conversion.</p>\n<p>ETradeInvestment faceBookInvestment = tdToEtradeFunction<br>                .apply(new TdAmeritradeInvestment(555, “Facebook Inc”, 57.51));<br>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETradeInvestment&#123;key=555, name=Facebook Inc, price=57.50&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Convert-list-to-map\"><a href=\"#Convert-list-to-map\" class=\"headerlink\" title=\"Convert list to map\"></a>Convert list to map</h2><p>One other really neat way to use function convert a list to a map. You may want to look up an object based on some object property. In this example, we want to create a map of TdAmeritradeInvestment based on the investment key. Taking a look we can use the Maps utility calling the uniqueIndex method which accepts a list and a function. The function, or the keyfunction, is used to produce the key for each value in the iterable. In this instance, the function will map from a TdAmeritradeInvestment and return an integer which will represent the key in the map.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void transform_list_to_map () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;TdAmeritradeInvestment&gt; tdInvestments = Lists.newArrayList();</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(555, &quot;Facebook Inc&quot;, 57.51));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(123, &quot;Micron Technology, Inc.&quot;, 21.29));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(456, &quot;Ford Motor Company&quot;, 15.31));</span><br><span class=\"line\">    tdInvestments.add(new TdAmeritradeInvestment(236, &quot;Sirius XM Holdings Inc&quot;, 3.60));</span><br><span class=\"line\">    </span><br><span class=\"line\">    ImmutableMap&lt;Integer, TdAmeritradeInvestment&gt; investmentMap = Maps</span><br><span class=\"line\">            .uniqueIndex(tdInvestments,</span><br><span class=\"line\">                    new Function&lt;TdAmeritradeInvestment, Integer&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        public Integer apply(TdAmeritradeInvestment input) &#123;</span><br><span class=\"line\">                            return new Integer(input.getInvestmentKey());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(investmentMap);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">555=TdAmeritradeInvestment&#123;key=555, name=Facebook Inc, price=57.51&#125;, </span><br><span class=\"line\">123=TdAmeritradeInvestment&#123;key=123, name=Micron Technology, Inc., price=21.29&#125;, </span><br><span class=\"line\">456=TdAmeritradeInvestment&#123;key=456, name=Ford Motor Company, price=15.31&#125;, </span><br><span class=\"line\">236=TdAmeritradeInvestment&#123;key=236, name=Sirius XM Holdings Inc, price=3.6&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>原地址：<a href=\"http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/\">http://www.leveluplunch.com/java/tutorials/002-transform-objects-with-guava/</a></p>\n","sticky":0},{"title":"centos6环境下配置mysql主从同步","date":"2016-04-25T13:22:51.000Z","_content":"\n## 1、主从服务器分别作以下操作：\n  1.1、版本一致\n  1.2、初始化表，并在后台启动mysql\n  1.3、修改root的密码\n\n## 2、修改主服务器master:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[必须]启用二进制日志\n       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 3、修改从服务器slave:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[不是必须]启用二进制日志\n       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 4、重启两台服务器的mysql\n    /etc/init.d/mysql restart\n    or：\n    service mysqld restart\n\n## 5、在主服务器上建立帐户并授权slave:\n  #mysql -uroot -proot\n   mysql>GRANT REPLICATION SLAVE ON *.* to 'mysync'@'%' identified by 'root'; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。\n\n## 6、登录主服务器的mysql，查询master的状态\n   mysql>show master status;\n   +------------------+----------+--------------+------------------+\n   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n   +------------------+----------+--------------+------------------+\n   | mysql-bin.000004 |      308 |              |                  |\n   +------------------+----------+--------------+------------------+\n   1 row in set (0.00 sec)\n   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化\n\n## 7、配置从服务器Slave：\n   mysql>change master to master_host='192.168.145.222',master_user='mysync',master_password='root', master_log_file='mysql-bin.000004',master_log_pos=308;   //注意不要断开，308数字前后无单引号。\n\n   Mysql>start slave;    //启动从服务器复制功能\n\n## 8、检查从服务器复制功能状态：\n\n   mysql> show slave status\\G\n\n   *************************** 1. row ***************************\n\n              Slave_IO_State: Waiting for master to send event\n              Master_Host: 192.168.2.222  //主服务器地址\n              Master_User: mysync   //授权帐户名，尽量避免使用root\n              Master_Port: 3306    //数据库端口，部分版本没有此行\n              Connect_Retry: 60\n              Master_Log_File: mysql-bin.000004\n              Read_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\n              Relay_Log_File: ddte-relay-bin.000003\n              Relay_Log_Pos: 251\n              Relay_Master_Log_File: mysql-bin.000004\n              Slave_IO_Running: Yes    //此状态必须YES\n              Slave_SQL_Running: Yes     //此状态必须YES\n                    ......\n\n注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。\n\n以上操作过程，主从服务器配置完成。\n","source":"_posts/centos6环境下配置mysql主从同步.md","raw":"---\ntitle: centos6环境下配置mysql主从同步\ndate: 2016-04-25 21:22:51\ntags: [mysql,database,数据库,主从同步,master-slave]\n---\n\n## 1、主从服务器分别作以下操作：\n  1.1、版本一致\n  1.2、初始化表，并在后台启动mysql\n  1.3、修改root的密码\n\n## 2、修改主服务器master:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[必须]启用二进制日志\n       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 3、修改从服务器slave:\n   #vi /etc/my.cnf\n       [mysqld]\n       log-bin=mysql-bin   //[不是必须]启用二进制日志\n       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n\n## 4、重启两台服务器的mysql\n    /etc/init.d/mysql restart\n    or：\n    service mysqld restart\n\n## 5、在主服务器上建立帐户并授权slave:\n  #mysql -uroot -proot\n   mysql>GRANT REPLICATION SLAVE ON *.* to 'mysync'@'%' identified by 'root'; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。\n\n## 6、登录主服务器的mysql，查询master的状态\n   mysql>show master status;\n   +------------------+----------+--------------+------------------+\n   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n   +------------------+----------+--------------+------------------+\n   | mysql-bin.000004 |      308 |              |                  |\n   +------------------+----------+--------------+------------------+\n   1 row in set (0.00 sec)\n   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化\n\n## 7、配置从服务器Slave：\n   mysql>change master to master_host='192.168.145.222',master_user='mysync',master_password='root', master_log_file='mysql-bin.000004',master_log_pos=308;   //注意不要断开，308数字前后无单引号。\n\n   Mysql>start slave;    //启动从服务器复制功能\n\n## 8、检查从服务器复制功能状态：\n\n   mysql> show slave status\\G\n\n   *************************** 1. row ***************************\n\n              Slave_IO_State: Waiting for master to send event\n              Master_Host: 192.168.2.222  //主服务器地址\n              Master_User: mysync   //授权帐户名，尽量避免使用root\n              Master_Port: 3306    //数据库端口，部分版本没有此行\n              Connect_Retry: 60\n              Master_Log_File: mysql-bin.000004\n              Read_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\n              Relay_Log_File: ddte-relay-bin.000003\n              Relay_Log_Pos: 251\n              Relay_Master_Log_File: mysql-bin.000004\n              Slave_IO_Running: Yes    //此状态必须YES\n              Slave_SQL_Running: Yes     //此状态必须YES\n                    ......\n\n注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。\n\n以上操作过程，主从服务器配置完成。\n","slug":"centos6环境下配置mysql主从同步","published":1,"updated":"2016-04-25T13:25:33.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uspm000n00uuxbq3j1py","content":"<h2 id=\"1、主从服务器分别作以下操作：\"><a href=\"#1、主从服务器分别作以下操作：\" class=\"headerlink\" title=\"1、主从服务器分别作以下操作：\"></a>1、主从服务器分别作以下操作：</h2><p>  1.1、版本一致<br>  1.2、初始化表，并在后台启动mysql<br>  1.3、修改root的密码</p>\n<h2 id=\"2、修改主服务器master\"><a href=\"#2、修改主服务器master\" class=\"headerlink\" title=\"2、修改主服务器master:\"></a>2、修改主服务器master:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[必须]启用二进制日志<br>       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"3、修改从服务器slave\"><a href=\"#3、修改从服务器slave\" class=\"headerlink\" title=\"3、修改从服务器slave:\"></a>3、修改从服务器slave:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[不是必须]启用二进制日志<br>       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"4、重启两台服务器的mysql\"><a href=\"#4、重启两台服务器的mysql\" class=\"headerlink\" title=\"4、重启两台服务器的mysql\"></a>4、重启两台服务器的mysql</h2><pre><code>/etc/init.d/mysql restart\nor：\nservice mysqld restart\n</code></pre><h2 id=\"5、在主服务器上建立帐户并授权slave\"><a href=\"#5、在主服务器上建立帐户并授权slave\" class=\"headerlink\" title=\"5、在主服务器上建立帐户并授权slave:\"></a>5、在主服务器上建立帐户并授权slave:</h2><p>  #mysql -uroot -proot<br>   mysql&gt;GRANT REPLICATION SLAVE ON <em>.</em> to ‘mysync’@’%’ identified by ‘root’; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。</p>\n<h2 id=\"6、登录主服务器的mysql，查询master的状态\"><a href=\"#6、登录主服务器的mysql，查询master的状态\" class=\"headerlink\" title=\"6、登录主服务器的mysql，查询master的状态\"></a>6、登录主服务器的mysql，查询master的状态</h2><p>   mysql&gt;show master status;<br>   +——————+———-+————–+——————+<br>   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |<br>   +——————+———-+————–+——————+<br>   | mysql-bin.000004 |      308 |              |                  |<br>   +——————+———-+————–+——————+<br>   1 row in set (0.00 sec)<br>   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p>\n<h2 id=\"7、配置从服务器Slave：\"><a href=\"#7、配置从服务器Slave：\" class=\"headerlink\" title=\"7、配置从服务器Slave：\"></a>7、配置从服务器Slave：</h2><p>   mysql&gt;change master to master_host=’192.168.145.222’,master_user=’mysync’,master_password=’root’, master_log_file=’mysql-bin.000004’,master_log_pos=308;   //注意不要断开，308数字前后无单引号。</p>\n<p>   Mysql&gt;start slave;    //启动从服务器复制功能</p>\n<h2 id=\"8、检查从服务器复制功能状态：\"><a href=\"#8、检查从服务器复制功能状态：\" class=\"headerlink\" title=\"8、检查从服务器复制功能状态：\"></a>8、检查从服务器复制功能状态：</h2><p>   mysql&gt; show slave status\\G</p>\n<p>   <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong> 1. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></p>\n<pre><code>Slave_IO_State: Waiting for master to send event\nMaster_Host: 192.168.2.222  //主服务器地址\nMaster_User: mysync   //授权帐户名，尽量避免使用root\nMaster_Port: 3306    //数据库端口，部分版本没有此行\nConnect_Retry: 60\nMaster_Log_File: mysql-bin.000004\nRead_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\nRelay_Log_File: ddte-relay-bin.000003\nRelay_Log_Pos: 251\nRelay_Master_Log_File: mysql-bin.000004\nSlave_IO_Running: Yes    //此状态必须YES\nSlave_SQL_Running: Yes     //此状态必须YES\n      ......\n</code></pre><p>注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。</p>\n<p>以上操作过程，主从服务器配置完成。</p>\n","excerpt":"","more":"<h2 id=\"1、主从服务器分别作以下操作：\"><a href=\"#1、主从服务器分别作以下操作：\" class=\"headerlink\" title=\"1、主从服务器分别作以下操作：\"></a>1、主从服务器分别作以下操作：</h2><p>  1.1、版本一致<br>  1.2、初始化表，并在后台启动mysql<br>  1.3、修改root的密码</p>\n<h2 id=\"2、修改主服务器master\"><a href=\"#2、修改主服务器master\" class=\"headerlink\" title=\"2、修改主服务器master:\"></a>2、修改主服务器master:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[必须]启用二进制日志<br>       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"3、修改从服务器slave\"><a href=\"#3、修改从服务器slave\" class=\"headerlink\" title=\"3、修改从服务器slave:\"></a>3、修改从服务器slave:</h2><p>   #vi /etc/my.cnf<br>       [mysqld]<br>       log-bin=mysql-bin   //[不是必须]启用二进制日志<br>       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</p>\n<h2 id=\"4、重启两台服务器的mysql\"><a href=\"#4、重启两台服务器的mysql\" class=\"headerlink\" title=\"4、重启两台服务器的mysql\"></a>4、重启两台服务器的mysql</h2><pre><code>/etc/init.d/mysql restart\nor：\nservice mysqld restart\n</code></pre><h2 id=\"5、在主服务器上建立帐户并授权slave\"><a href=\"#5、在主服务器上建立帐户并授权slave\" class=\"headerlink\" title=\"5、在主服务器上建立帐户并授权slave:\"></a>5、在主服务器上建立帐户并授权slave:</h2><p>  #mysql -uroot -proot<br>   mysql&gt;GRANT REPLICATION SLAVE ON <em>.</em> to ‘mysync’@’%’ identified by ‘root’; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。</p>\n<h2 id=\"6、登录主服务器的mysql，查询master的状态\"><a href=\"#6、登录主服务器的mysql，查询master的状态\" class=\"headerlink\" title=\"6、登录主服务器的mysql，查询master的状态\"></a>6、登录主服务器的mysql，查询master的状态</h2><p>   mysql&gt;show master status;<br>   +——————+———-+————–+——————+<br>   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |<br>   +——————+———-+————–+——————+<br>   | mysql-bin.000004 |      308 |              |                  |<br>   +——————+———-+————–+——————+<br>   1 row in set (0.00 sec)<br>   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p>\n<h2 id=\"7、配置从服务器Slave：\"><a href=\"#7、配置从服务器Slave：\" class=\"headerlink\" title=\"7、配置从服务器Slave：\"></a>7、配置从服务器Slave：</h2><p>   mysql&gt;change master to master_host=’192.168.145.222’,master_user=’mysync’,master_password=’root’, master_log_file=’mysql-bin.000004’,master_log_pos=308;   //注意不要断开，308数字前后无单引号。</p>\n<p>   Mysql&gt;start slave;    //启动从服务器复制功能</p>\n<h2 id=\"8、检查从服务器复制功能状态：\"><a href=\"#8、检查从服务器复制功能状态：\" class=\"headerlink\" title=\"8、检查从服务器复制功能状态：\"></a>8、检查从服务器复制功能状态：</h2><p>   mysql&gt; show slave status\\G</p>\n<p>   <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong> 1. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></p>\n<pre><code>Slave_IO_State: Waiting for master to send event\nMaster_Host: 192.168.2.222  //主服务器地址\nMaster_User: mysync   //授权帐户名，尽量避免使用root\nMaster_Port: 3306    //数据库端口，部分版本没有此行\nConnect_Retry: 60\nMaster_Log_File: mysql-bin.000004\nRead_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos\nRelay_Log_File: ddte-relay-bin.000003\nRelay_Log_Pos: 251\nRelay_Master_Log_File: mysql-bin.000004\nSlave_IO_Running: Yes    //此状态必须YES\nSlave_SQL_Running: Yes     //此状态必须YES\n      ......\n</code></pre><p>注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。</p>\n<p>以上操作过程，主从服务器配置完成。</p>\n","sticky":0},{"title":"[dev][collect][2016-06-06]collect-of-im-netty-android-etc","date":"2016-06-06T09:42:22.000Z","_content":"\n此集合[dev][collect]汇总开发资源.\n资源含文章，git code等等..\n\n### 2016-06-06\n- 一套仿 微信 IM系统 基于apache mina\nhttp://my.oschina.net/u/1167637/blog/411312\n\n- socketio 服务器推送\nhttp://blog.csdn.net/xtayfjpk/article/details/40948409\n\n- 开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源\nhttps://github.com/caprice/lanyuan\n\n- Simple asynchronous non blocking chat server/client based on Netty 4\nhttps://github.com/caprice/nettychat\nhttps://github.com/YihuaWanglv/nettychat\n\n- [5][android]A High Copy WeChat ,SNS APP (高仿微信)\nhttps://github.com/YihuaWanglv/wechat\n\n- 一个Android开发者博客\nhttp://blog.csdn.net/finddreams\n\n- 案例剖析：从0开始搭建一个微服务的持续交付系统\nhttp://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=2659597380&idx=1&sn=e0087759e6b65df0ba30126c1e3af915&scene=0#wechat_redirect\n\n- [5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏\nhttps://github.com/YihuaWanglv/Android_BaseLib\n\n- 使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中\nhttps://github.com/YihuaWanglv/netty-chat\n\n- 仿淘宝的B2C商城项目\n页面用的jsp，稍显陈旧\nhttps://github.com/YihuaWanglv/B2CWeb\n\n- JavaEE项目开发脚手架\nhttps://github.com/YihuaWanglv/es\n后端:\nIoC容器 spring\nweb框架 springmvc\norm框架 hibernate + spring data jpa\n安全框架 shiro\n验证框架 hibernate validator\n任务调度框架 quartz\n缓存 ehcache\n数据源 druid\n日志 slf4j+logback\nJson fastjson\n日期美化 prettytime\nservlet 3.0(需要支持servlet3的servlet容器，如tomcat7)\njcaptcha 验证码\njsp 模板视图\n前端:\njquery js框架\njquery-ui-bootstrap界面框架\nfont-wesome 字体/图标框架\njquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）\nkindeditor 编辑器\nnicescroll 漂亮的滚动条\nzTree 树框架\njquery blockUI 弹出框/遮罩框架\njquery-fileupload 文件上传\nbootstrap-datatimepicker 日历选择\n\n- [5][android]Collect and classify android open source projects\nhttps://github.com/YihuaWanglv/android-open-project\n\n- Blog avec Spring MVC + spring DATA + mongodb + angularjs\nhttps://github.com/YihuaWanglv/blog_java\n\n- dianping-api-samples\nhttps://github.com/YihuaWanglv/dianping-open-sdk\n\n- JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。\nhttps://github.com/YihuaWanglv/jeesite\n\n- Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 https://github.com/waylau/apache-mina-2.x-user-guide\nhttps://github.com/waylau/apache-mina-2-user-guide-demos\n\n- Spring Framework 4.x Reference Documentation 中文翻译\nhttps://www.gitbook.com/book/waylau/spring-framework-4-reference/details\nhttps://github.com/waylau/spring-framework-4-reference\n\n- 免费的计算机编程类中文书籍\nhttps://github.com/YihuaWanglv/free-programming-books-zh_CN\n网页版：\nhttp://siberiawolf.com/free_programming/index.html\n\n- 一个合格的程序员应该读过哪些书\nhttp://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\n\n- Google 全球 IP 地址库\nhttps://github.com/justjavac/Google-IPs\n\n- 一份关于“资料汇总”的汇总\nhttps://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\n\n- Freely available programming books\nhttps://github.com/YihuaWanglv/free-programming-books\n\n- RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计\nhttps://github.com/aisuhua/restful-api-design-references\n\n- ssential Netty in Action 《Netty 实战(精髓)》\nhttps://github.com/waylau/essential-netty-in-action\ngitbook：\nhttp://waylau.com/essential-netty-in-action/\n\n- Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》\nhttps://github.com/waylau/Gradle-2-User-Guide\ngitbook：\nhttps://www.gitbook.com/book/waylau/gradle-2-user-guide/details\n\n- Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》\nhttps://github.com/waylau/netty-4-user-guide\ngitbook：\nhttp://waylau.com/netty-4-user-guide/\n\n- 这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新\nhttps://github.com/YihuaWanglv/Perfect_IM_SNS\n\n- 基于位置信息，空间时间结合的社交与分享的应用\nhttps://github.com/YihuaWanglv/Tuyi\n\n- SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）\nhttps://github.com/YihuaWanglv/SYTeamApp\n\n- MeifuGO：An open source android app by using easemob IM SDK \nhttps://github.com/YihuaWanglv/MeifuGO\n\n- fangyuanshili：环信SDK,IM,geohash,lbs \nhttps://github.com/YihuaWanglv/fangyuanshili\n\n- zaina：该项目是改编自环信即时通讯云的demo改编\nhttps://github.com/YihuaWanglv/zaina\n\n- dianhua：基于react native 和 环信的实时通话的免费店话\nhttps://github.com/YihuaWanglv/dianhua\n\n- Baby：一个私密社交APP\nhttps://github.com/YihuaWanglv/Baby\n\n- MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。\na common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.\nhttps://github.com/YihuaWanglv/MVPCommon\n从零开始搭建android框架系列：\nhttp://www.jianshu.com/notebooks/3767449/latest\n\n- learnCloud：\n和应用服务器、存储服务器说再见\n再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。\nhttps://leancloud.cn/\n\n- 不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】\nhttp://www.jianshu.com/p/1f21e1d375aa\n\n- 安卓架构文章合集（a collection of android Architecture）\nhttps://github.com/YihuaWanglv/AndroidArchitectureCollection","source":"_posts/dev-collect-2016-06-06-collect-of-im-netty-android-etc.md","raw":"---\ntitle: '[dev][collect][2016-06-06]collect-of-im-netty-android-etc'\ndate: 2016-06-06 17:42:22\ntags: [dev, collect, post, git, resouce]\n---\n\n此集合[dev][collect]汇总开发资源.\n资源含文章，git code等等..\n\n### 2016-06-06\n- 一套仿 微信 IM系统 基于apache mina\nhttp://my.oschina.net/u/1167637/blog/411312\n\n- socketio 服务器推送\nhttp://blog.csdn.net/xtayfjpk/article/details/40948409\n\n- 开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源\nhttps://github.com/caprice/lanyuan\n\n- Simple asynchronous non blocking chat server/client based on Netty 4\nhttps://github.com/caprice/nettychat\nhttps://github.com/YihuaWanglv/nettychat\n\n- [5][android]A High Copy WeChat ,SNS APP (高仿微信)\nhttps://github.com/YihuaWanglv/wechat\n\n- 一个Android开发者博客\nhttp://blog.csdn.net/finddreams\n\n- 案例剖析：从0开始搭建一个微服务的持续交付系统\nhttp://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&mid=2659597380&idx=1&sn=e0087759e6b65df0ba30126c1e3af915&scene=0#wechat_redirect\n\n- [5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏\nhttps://github.com/YihuaWanglv/Android_BaseLib\n\n- 使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中\nhttps://github.com/YihuaWanglv/netty-chat\n\n- 仿淘宝的B2C商城项目\n页面用的jsp，稍显陈旧\nhttps://github.com/YihuaWanglv/B2CWeb\n\n- JavaEE项目开发脚手架\nhttps://github.com/YihuaWanglv/es\n后端:\nIoC容器 spring\nweb框架 springmvc\norm框架 hibernate + spring data jpa\n安全框架 shiro\n验证框架 hibernate validator\n任务调度框架 quartz\n缓存 ehcache\n数据源 druid\n日志 slf4j+logback\nJson fastjson\n日期美化 prettytime\nservlet 3.0(需要支持servlet3的servlet容器，如tomcat7)\njcaptcha 验证码\njsp 模板视图\n前端:\njquery js框架\njquery-ui-bootstrap界面框架\nfont-wesome 字体/图标框架\njquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）\nkindeditor 编辑器\nnicescroll 漂亮的滚动条\nzTree 树框架\njquery blockUI 弹出框/遮罩框架\njquery-fileupload 文件上传\nbootstrap-datatimepicker 日历选择\n\n- [5][android]Collect and classify android open source projects\nhttps://github.com/YihuaWanglv/android-open-project\n\n- Blog avec Spring MVC + spring DATA + mongodb + angularjs\nhttps://github.com/YihuaWanglv/blog_java\n\n- dianping-api-samples\nhttps://github.com/YihuaWanglv/dianping-open-sdk\n\n- JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。\nhttps://github.com/YihuaWanglv/jeesite\n\n- Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 https://github.com/waylau/apache-mina-2.x-user-guide\nhttps://github.com/waylau/apache-mina-2-user-guide-demos\n\n- Spring Framework 4.x Reference Documentation 中文翻译\nhttps://www.gitbook.com/book/waylau/spring-framework-4-reference/details\nhttps://github.com/waylau/spring-framework-4-reference\n\n- 免费的计算机编程类中文书籍\nhttps://github.com/YihuaWanglv/free-programming-books-zh_CN\n网页版：\nhttp://siberiawolf.com/free_programming/index.html\n\n- 一个合格的程序员应该读过哪些书\nhttp://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\n\n- Google 全球 IP 地址库\nhttps://github.com/justjavac/Google-IPs\n\n- 一份关于“资料汇总”的汇总\nhttps://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\n\n- Freely available programming books\nhttps://github.com/YihuaWanglv/free-programming-books\n\n- RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计\nhttps://github.com/aisuhua/restful-api-design-references\n\n- ssential Netty in Action 《Netty 实战(精髓)》\nhttps://github.com/waylau/essential-netty-in-action\ngitbook：\nhttp://waylau.com/essential-netty-in-action/\n\n- Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》\nhttps://github.com/waylau/Gradle-2-User-Guide\ngitbook：\nhttps://www.gitbook.com/book/waylau/gradle-2-user-guide/details\n\n- Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》\nhttps://github.com/waylau/netty-4-user-guide\ngitbook：\nhttp://waylau.com/netty-4-user-guide/\n\n- 这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新\nhttps://github.com/YihuaWanglv/Perfect_IM_SNS\n\n- 基于位置信息，空间时间结合的社交与分享的应用\nhttps://github.com/YihuaWanglv/Tuyi\n\n- SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）\nhttps://github.com/YihuaWanglv/SYTeamApp\n\n- MeifuGO：An open source android app by using easemob IM SDK \nhttps://github.com/YihuaWanglv/MeifuGO\n\n- fangyuanshili：环信SDK,IM,geohash,lbs \nhttps://github.com/YihuaWanglv/fangyuanshili\n\n- zaina：该项目是改编自环信即时通讯云的demo改编\nhttps://github.com/YihuaWanglv/zaina\n\n- dianhua：基于react native 和 环信的实时通话的免费店话\nhttps://github.com/YihuaWanglv/dianhua\n\n- Baby：一个私密社交APP\nhttps://github.com/YihuaWanglv/Baby\n\n- MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。\na common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.\nhttps://github.com/YihuaWanglv/MVPCommon\n从零开始搭建android框架系列：\nhttp://www.jianshu.com/notebooks/3767449/latest\n\n- learnCloud：\n和应用服务器、存储服务器说再见\n再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。\nhttps://leancloud.cn/\n\n- 不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】\nhttp://www.jianshu.com/p/1f21e1d375aa\n\n- 安卓架构文章合集（a collection of android Architecture）\nhttps://github.com/YihuaWanglv/AndroidArchitectureCollection","slug":"dev-collect-2016-06-06-collect-of-im-netty-android-etc","published":1,"updated":"2016-06-06T13:07:42.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uspq000o00uul2492pfx","content":"<p>此集合[dev][collect]汇总开发资源.<br>资源含文章，git code等等..</p>\n<h3 id=\"2016-06-06\"><a href=\"#2016-06-06\" class=\"headerlink\" title=\"2016-06-06\"></a>2016-06-06</h3><ul>\n<li><p>一套仿 微信 IM系统 基于apache mina<br><a href=\"http://my.oschina.net/u/1167637/blog/411312\" target=\"_blank\" rel=\"external\">http://my.oschina.net/u/1167637/blog/411312</a></p>\n</li>\n<li><p>socketio 服务器推送<br><a href=\"http://blog.csdn.net/xtayfjpk/article/details/40948409\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/xtayfjpk/article/details/40948409</a></p>\n</li>\n<li><p>开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源<br><a href=\"https://github.com/caprice/lanyuan\" target=\"_blank\" rel=\"external\">https://github.com/caprice/lanyuan</a></p>\n</li>\n<li><p>Simple asynchronous non blocking chat server/client based on Netty 4<br><a href=\"https://github.com/caprice/nettychat\" target=\"_blank\" rel=\"external\">https://github.com/caprice/nettychat</a><br><a href=\"https://github.com/YihuaWanglv/nettychat\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/nettychat</a></p>\n</li>\n<li><p>[5][android]A High Copy WeChat ,SNS APP (高仿微信)<br><a href=\"https://github.com/YihuaWanglv/wechat\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/wechat</a></p>\n</li>\n<li><p>一个Android开发者博客<br><a href=\"http://blog.csdn.net/finddreams\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/finddreams</a></p>\n</li>\n<li><p>案例剖析：从0开始搭建一个微服务的持续交付系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect</a></p>\n</li>\n<li><p>[5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏<br><a href=\"https://github.com/YihuaWanglv/Android_BaseLib\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Android_BaseLib</a></p>\n</li>\n<li><p>使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中<br><a href=\"https://github.com/YihuaWanglv/netty-chat\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/netty-chat</a></p>\n</li>\n<li><p>仿淘宝的B2C商城项目<br>页面用的jsp，稍显陈旧<br><a href=\"https://github.com/YihuaWanglv/B2CWeb\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/B2CWeb</a></p>\n</li>\n<li><p>JavaEE项目开发脚手架<br><a href=\"https://github.com/YihuaWanglv/es\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/es</a><br>后端:<br>IoC容器 spring<br>web框架 springmvc<br>orm框架 hibernate + spring data jpa<br>安全框架 shiro<br>验证框架 hibernate validator<br>任务调度框架 quartz<br>缓存 ehcache<br>数据源 druid<br>日志 slf4j+logback<br>Json fastjson<br>日期美化 prettytime<br>servlet 3.0(需要支持servlet3的servlet容器，如tomcat7)<br>jcaptcha 验证码<br>jsp 模板视图<br>前端:<br>jquery js框架<br>jquery-ui-bootstrap界面框架<br>font-wesome 字体/图标框架<br>jquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）<br>kindeditor 编辑器<br>nicescroll 漂亮的滚动条<br>zTree 树框架<br>jquery blockUI 弹出框/遮罩框架<br>jquery-fileupload 文件上传<br>bootstrap-datatimepicker 日历选择</p>\n</li>\n<li><p>[5][android]Collect and classify android open source projects<br><a href=\"https://github.com/YihuaWanglv/android-open-project\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/android-open-project</a></p>\n</li>\n<li><p>Blog avec Spring MVC + spring DATA + mongodb + angularjs<br><a href=\"https://github.com/YihuaWanglv/blog_java\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/blog_java</a></p>\n</li>\n<li><p>dianping-api-samples<br><a href=\"https://github.com/YihuaWanglv/dianping-open-sdk\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/dianping-open-sdk</a></p>\n</li>\n<li><p>JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。<br><a href=\"https://github.com/YihuaWanglv/jeesite\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/jeesite</a></p>\n</li>\n<li><p>Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 <a href=\"https://github.com/waylau/apache-mina-2.x-user-guide\" target=\"_blank\" rel=\"external\">https://github.com/waylau/apache-mina-2.x-user-guide</a><br><a href=\"https://github.com/waylau/apache-mina-2-user-guide-demos\" target=\"_blank\" rel=\"external\">https://github.com/waylau/apache-mina-2-user-guide-demos</a></p>\n</li>\n<li><p>Spring Framework 4.x Reference Documentation 中文翻译<br><a href=\"https://www.gitbook.com/book/waylau/spring-framework-4-reference/details\" target=\"_blank\" rel=\"external\">https://www.gitbook.com/book/waylau/spring-framework-4-reference/details</a><br><a href=\"https://github.com/waylau/spring-framework-4-reference\" target=\"_blank\" rel=\"external\">https://github.com/waylau/spring-framework-4-reference</a></p>\n</li>\n<li><p>免费的计算机编程类中文书籍<br><a href=\"https://github.com/YihuaWanglv/free-programming-books-zh_CN\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/free-programming-books-zh_CN</a><br>网页版：<br><a href=\"http://siberiawolf.com/free_programming/index.html\" target=\"_blank\" rel=\"external\">http://siberiawolf.com/free_programming/index.html</a></p>\n</li>\n<li><p>一个合格的程序员应该读过哪些书<br><a href=\"http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\" target=\"_blank\" rel=\"external\">http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html</a></p>\n</li>\n<li><p>Google 全球 IP 地址库<br><a href=\"https://github.com/justjavac/Google-IPs\" target=\"_blank\" rel=\"external\">https://github.com/justjavac/Google-IPs</a></p>\n</li>\n<li><p>一份关于“资料汇总”的汇总<br><a href=\"https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN</a></p>\n</li>\n<li><p>Freely available programming books<br><a href=\"https://github.com/YihuaWanglv/free-programming-books\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/free-programming-books</a></p>\n</li>\n<li><p>RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计<br><a href=\"https://github.com/aisuhua/restful-api-design-references\" target=\"_blank\" rel=\"external\">https://github.com/aisuhua/restful-api-design-references</a></p>\n</li>\n<li><p>ssential Netty in Action 《Netty 实战(精髓)》<br><a href=\"https://github.com/waylau/essential-netty-in-action\" target=\"_blank\" rel=\"external\">https://github.com/waylau/essential-netty-in-action</a><br>gitbook：<br><a href=\"http://waylau.com/essential-netty-in-action/\" target=\"_blank\" rel=\"external\">http://waylau.com/essential-netty-in-action/</a></p>\n</li>\n<li><p>Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》<br><a href=\"https://github.com/waylau/Gradle-2-User-Guide\" target=\"_blank\" rel=\"external\">https://github.com/waylau/Gradle-2-User-Guide</a><br>gitbook：<br><a href=\"https://www.gitbook.com/book/waylau/gradle-2-user-guide/details\" target=\"_blank\" rel=\"external\">https://www.gitbook.com/book/waylau/gradle-2-user-guide/details</a></p>\n</li>\n<li><p>Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》<br><a href=\"https://github.com/waylau/netty-4-user-guide\" target=\"_blank\" rel=\"external\">https://github.com/waylau/netty-4-user-guide</a><br>gitbook：<br><a href=\"http://waylau.com/netty-4-user-guide/\" target=\"_blank\" rel=\"external\">http://waylau.com/netty-4-user-guide/</a></p>\n</li>\n<li><p>这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新<br><a href=\"https://github.com/YihuaWanglv/Perfect_IM_SNS\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Perfect_IM_SNS</a></p>\n</li>\n<li><p>基于位置信息，空间时间结合的社交与分享的应用<br><a href=\"https://github.com/YihuaWanglv/Tuyi\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Tuyi</a></p>\n</li>\n<li><p>SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）<br><a href=\"https://github.com/YihuaWanglv/SYTeamApp\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/SYTeamApp</a></p>\n</li>\n<li><p>MeifuGO：An open source android app by using easemob IM SDK<br><a href=\"https://github.com/YihuaWanglv/MeifuGO\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/MeifuGO</a></p>\n</li>\n<li><p>fangyuanshili：环信SDK,IM,geohash,lbs<br><a href=\"https://github.com/YihuaWanglv/fangyuanshili\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/fangyuanshili</a></p>\n</li>\n<li><p>zaina：该项目是改编自环信即时通讯云的demo改编<br><a href=\"https://github.com/YihuaWanglv/zaina\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/zaina</a></p>\n</li>\n<li><p>dianhua：基于react native 和 环信的实时通话的免费店话<br><a href=\"https://github.com/YihuaWanglv/dianhua\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/dianhua</a></p>\n</li>\n<li><p>Baby：一个私密社交APP<br><a href=\"https://github.com/YihuaWanglv/Baby\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/Baby</a></p>\n</li>\n<li><p>MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。<br>a common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.<br><a href=\"https://github.com/YihuaWanglv/MVPCommon\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/MVPCommon</a><br>从零开始搭建android框架系列：<br><a href=\"http://www.jianshu.com/notebooks/3767449/latest\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/notebooks/3767449/latest</a></p>\n</li>\n<li><p>learnCloud：<br>和应用服务器、存储服务器说再见<br>再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。<br><a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">https://leancloud.cn/</a></p>\n</li>\n<li><p>不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】<br><a href=\"http://www.jianshu.com/p/1f21e1d375aa\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/1f21e1d375aa</a></p>\n</li>\n<li><p>安卓架构文章合集（a collection of android Architecture）<br><a href=\"https://github.com/YihuaWanglv/AndroidArchitectureCollection\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/AndroidArchitectureCollection</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<p>此集合[dev][collect]汇总开发资源.<br>资源含文章，git code等等..</p>\n<h3 id=\"2016-06-06\"><a href=\"#2016-06-06\" class=\"headerlink\" title=\"2016-06-06\"></a>2016-06-06</h3><ul>\n<li><p>一套仿 微信 IM系统 基于apache mina<br><a href=\"http://my.oschina.net/u/1167637/blog/411312\">http://my.oschina.net/u/1167637/blog/411312</a></p>\n</li>\n<li><p>socketio 服务器推送<br><a href=\"http://blog.csdn.net/xtayfjpk/article/details/40948409\">http://blog.csdn.net/xtayfjpk/article/details/40948409</a></p>\n</li>\n<li><p>开放源码,基于springMVC+springSecurity3.x+Mybaits3.x的权限系统,,支持开源<br><a href=\"https://github.com/caprice/lanyuan\">https://github.com/caprice/lanyuan</a></p>\n</li>\n<li><p>Simple asynchronous non blocking chat server/client based on Netty 4<br><a href=\"https://github.com/caprice/nettychat\">https://github.com/caprice/nettychat</a><br><a href=\"https://github.com/YihuaWanglv/nettychat\">https://github.com/YihuaWanglv/nettychat</a></p>\n</li>\n<li><p>[5][android]A High Copy WeChat ,SNS APP (高仿微信)<br><a href=\"https://github.com/YihuaWanglv/wechat\">https://github.com/YihuaWanglv/wechat</a></p>\n</li>\n<li><p>一个Android开发者博客<br><a href=\"http://blog.csdn.net/finddreams\">http://blog.csdn.net/finddreams</a></p>\n</li>\n<li><p>案例剖析：从0开始搭建一个微服务的持续交付系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597380&amp;idx=1&amp;sn=e0087759e6b65df0ba30126c1e3af915&amp;scene=0#wechat_redirect</a></p>\n</li>\n<li><p>[5][android]这是一个可用于Android快速开发的框架，集成了很多项目中通用的东西，免去重复造轮子的麻烦，直接下载来了，修改一下就可以做为基础的框架进行开发，提高开发速度，适合当前移动互联网时代敏捷快速开发的节奏<br><a href=\"https://github.com/YihuaWanglv/Android_BaseLib\">https://github.com/YihuaWanglv/Android_BaseLib</a></p>\n</li>\n<li><p>使用Netty实现IMServer，方便的Entity解码编码机制，融合到二进制协议中<br><a href=\"https://github.com/YihuaWanglv/netty-chat\">https://github.com/YihuaWanglv/netty-chat</a></p>\n</li>\n<li><p>仿淘宝的B2C商城项目<br>页面用的jsp，稍显陈旧<br><a href=\"https://github.com/YihuaWanglv/B2CWeb\">https://github.com/YihuaWanglv/B2CWeb</a></p>\n</li>\n<li><p>JavaEE项目开发脚手架<br><a href=\"https://github.com/YihuaWanglv/es\">https://github.com/YihuaWanglv/es</a><br>后端:<br>IoC容器 spring<br>web框架 springmvc<br>orm框架 hibernate + spring data jpa<br>安全框架 shiro<br>验证框架 hibernate validator<br>任务调度框架 quartz<br>缓存 ehcache<br>数据源 druid<br>日志 slf4j+logback<br>Json fastjson<br>日期美化 prettytime<br>servlet 3.0(需要支持servlet3的servlet容器，如tomcat7)<br>jcaptcha 验证码<br>jsp 模板视图<br>前端:<br>jquery js框架<br>jquery-ui-bootstrap界面框架<br>font-wesome 字体/图标框架<br>jquery Validation Engine 验证框架（配合spring的验证框架，页面验证简化不少）<br>kindeditor 编辑器<br>nicescroll 漂亮的滚动条<br>zTree 树框架<br>jquery blockUI 弹出框/遮罩框架<br>jquery-fileupload 文件上传<br>bootstrap-datatimepicker 日历选择</p>\n</li>\n<li><p>[5][android]Collect and classify android open source projects<br><a href=\"https://github.com/YihuaWanglv/android-open-project\">https://github.com/YihuaWanglv/android-open-project</a></p>\n</li>\n<li><p>Blog avec Spring MVC + spring DATA + mongodb + angularjs<br><a href=\"https://github.com/YihuaWanglv/blog_java\">https://github.com/YihuaWanglv/blog_java</a></p>\n</li>\n<li><p>dianping-api-samples<br><a href=\"https://github.com/YihuaWanglv/dianping-open-sdk\">https://github.com/YihuaWanglv/dianping-open-sdk</a></p>\n</li>\n<li><p>JeeSite 是一个企业信息管理系统基础框架，Java EE（J2EE）快速开发框架，使用经典技术组合（Spring、Spring MVC、Apache Shiro、Hibernate、Bootstrap UI），包括核心模块如：组织机构、用户、权限授权、内容管理、工作流等。<br><a href=\"https://github.com/YihuaWanglv/jeesite\">https://github.com/YihuaWanglv/jeesite</a></p>\n</li>\n<li><p>Demos of Apache MINA User Guide《Apache MINA 2 用户指南》中文翻译，文中用到的例子源码 <a href=\"https://github.com/waylau/apache-mina-2.x-user-guide\">https://github.com/waylau/apache-mina-2.x-user-guide</a><br><a href=\"https://github.com/waylau/apache-mina-2-user-guide-demos\">https://github.com/waylau/apache-mina-2-user-guide-demos</a></p>\n</li>\n<li><p>Spring Framework 4.x Reference Documentation 中文翻译<br><a href=\"https://www.gitbook.com/book/waylau/spring-framework-4-reference/details\">https://www.gitbook.com/book/waylau/spring-framework-4-reference/details</a><br><a href=\"https://github.com/waylau/spring-framework-4-reference\">https://github.com/waylau/spring-framework-4-reference</a></p>\n</li>\n<li><p>免费的计算机编程类中文书籍<br><a href=\"https://github.com/YihuaWanglv/free-programming-books-zh_CN\">https://github.com/YihuaWanglv/free-programming-books-zh_CN</a><br>网页版：<br><a href=\"http://siberiawolf.com/free_programming/index.html\">http://siberiawolf.com/free_programming/index.html</a></p>\n</li>\n<li><p>一个合格的程序员应该读过哪些书<br><a href=\"http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html\">http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html</a></p>\n</li>\n<li><p>Google 全球 IP 地址库<br><a href=\"https://github.com/justjavac/Google-IPs\">https://github.com/justjavac/Google-IPs</a></p>\n</li>\n<li><p>一份关于“资料汇总”的汇总<br><a href=\"https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN\">https://github.com/YihuaWanglv/awesome-awesomeness-zh_CN</a></p>\n</li>\n<li><p>Freely available programming books<br><a href=\"https://github.com/YihuaWanglv/free-programming-books\">https://github.com/YihuaWanglv/free-programming-books</a></p>\n</li>\n<li><p>RESTful API 设计参考文献列表，可帮助你更加彻底的了解REST风格的接口设计<br><a href=\"https://github.com/aisuhua/restful-api-design-references\">https://github.com/aisuhua/restful-api-design-references</a></p>\n</li>\n<li><p>ssential Netty in Action 《Netty 实战(精髓)》<br><a href=\"https://github.com/waylau/essential-netty-in-action\">https://github.com/waylau/essential-netty-in-action</a><br>gitbook：<br><a href=\"http://waylau.com/essential-netty-in-action/\">http://waylau.com/essential-netty-in-action/</a></p>\n</li>\n<li><p>Gradle 2 User Guide 中文翻译《Gradle 2 用户指南》<br><a href=\"https://github.com/waylau/Gradle-2-User-Guide\">https://github.com/waylau/Gradle-2-User-Guide</a><br>gitbook：<br><a href=\"https://www.gitbook.com/book/waylau/gradle-2-user-guide/details\">https://www.gitbook.com/book/waylau/gradle-2-user-guide/details</a></p>\n</li>\n<li><p>Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》<br><a href=\"https://github.com/waylau/netty-4-user-guide\">https://github.com/waylau/netty-4-user-guide</a><br>gitbook：<br><a href=\"http://waylau.com/netty-4-user-guide/\">http://waylau.com/netty-4-user-guide/</a></p>\n</li>\n<li><p>这是一个整理即时通讯（IM）和社交系统（SNS）优秀开源项目的文档，项目上传github欢迎提交更新<br><a href=\"https://github.com/YihuaWanglv/Perfect_IM_SNS\">https://github.com/YihuaWanglv/Perfect_IM_SNS</a></p>\n</li>\n<li><p>基于位置信息，空间时间结合的社交与分享的应用<br><a href=\"https://github.com/YihuaWanglv/Tuyi\">https://github.com/YihuaWanglv/Tuyi</a></p>\n</li>\n<li><p>SYTeamApp：基于环信平台进行开发，旨在打造的高效团队沟通的移动客户端，供企业内部协作使用、适应移动办公需要，提升企业沟通协同效率，增强企业办公管理效率。（当前仅实现了用户登入登出功能、通讯功能、投票功能。）<br><a href=\"https://github.com/YihuaWanglv/SYTeamApp\">https://github.com/YihuaWanglv/SYTeamApp</a></p>\n</li>\n<li><p>MeifuGO：An open source android app by using easemob IM SDK<br><a href=\"https://github.com/YihuaWanglv/MeifuGO\">https://github.com/YihuaWanglv/MeifuGO</a></p>\n</li>\n<li><p>fangyuanshili：环信SDK,IM,geohash,lbs<br><a href=\"https://github.com/YihuaWanglv/fangyuanshili\">https://github.com/YihuaWanglv/fangyuanshili</a></p>\n</li>\n<li><p>zaina：该项目是改编自环信即时通讯云的demo改编<br><a href=\"https://github.com/YihuaWanglv/zaina\">https://github.com/YihuaWanglv/zaina</a></p>\n</li>\n<li><p>dianhua：基于react native 和 环信的实时通话的免费店话<br><a href=\"https://github.com/YihuaWanglv/dianhua\">https://github.com/YihuaWanglv/dianhua</a></p>\n</li>\n<li><p>Baby：一个私密社交APP<br><a href=\"https://github.com/YihuaWanglv/Baby\">https://github.com/YihuaWanglv/Baby</a></p>\n</li>\n<li><p>MVPCommon：一个集成了众多开源项目的Android MVP框架以及应用搭建，全程博客更新。<br>a common Architecture and project build with blogs releasing based on MVP，integrates many Open Source Projects ,to make your developing quicker and easier.<br><a href=\"https://github.com/YihuaWanglv/MVPCommon\">https://github.com/YihuaWanglv/MVPCommon</a><br>从零开始搭建android框架系列：<br><a href=\"http://www.jianshu.com/notebooks/3767449/latest\">http://www.jianshu.com/notebooks/3767449/latest</a></p>\n</li>\n<li><p>learnCloud：<br>和应用服务器、存储服务器说再见<br>再也不用租服务器，也不用写后端代码了。LeanCloud 提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。<br><a href=\"https://leancloud.cn/\">https://leancloud.cn/</a></p>\n</li>\n<li><p>不容错过，最全的安卓架构合集【从零开始搭建android框架系列（2）】<br><a href=\"http://www.jianshu.com/p/1f21e1d375aa\">http://www.jianshu.com/p/1f21e1d375aa</a></p>\n</li>\n<li><p>安卓架构文章合集（a collection of android Architecture）<br><a href=\"https://github.com/YihuaWanglv/AndroidArchitectureCollection\">https://github.com/YihuaWanglv/AndroidArchitectureCollection</a></p>\n</li>\n</ul>\n","sticky":0},{"title":"[dev][collect][2016-06]collect-of-dev","date":"2016-07-07T03:08:24.000Z","_content":"\n## 2016-06\n\n### 2016-06-24\n- 【直播全文记录】 从零开始搭建高可用IM系统\nhttp://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=206924771&idx=1&sn=4705b832c410765a3c89acfa1300b0b6&scene=21#wechat_redirect\n\n- 如何设计类似微信的多终端数据同步协议 | Grouk实践分享\nhttp://chuansong.me/n/1718596\n\n### 2016-06-22\n- 基于Dubbo框架构建分布式服务\nhttp://shiyanjun.cn/archives/1075.html\n\n- 高并发性能调试经验分享\nhttps://zhuanlan.zhihu.com/p/21348220\n\n- Java进阶（三）多线程开发关键技术\nhttp://www.jasongj.com/java/multi_thread/\n\n- blog kafka\nhttp://www.jasongj.com/tags/Kafka/\n\n- 如何构建Android MVVM应用程序\nhttp://www.jianshu.com/p/2fc41a310f79\n\n- 超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用\nhttp://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\n\n- SHELL编程之常用技巧\nhttp://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&mid=2247483698&idx=1&sn=3b52493d202362aae0bf511002e63d52\n\n- 让你爱上写作的 11 款 Markdown 工具\nhttp://www.ifanr.com/app/665209\n\n- 基于Docker搭建Hadoop集群之升级版\nhttp://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\n\n- Kafka设计解析（一）- Kafka背景及架构介绍\nhttp://www.jasongj.com/2015/03/10/KafkaColumn1/\n\n\n\n### 2016-06-15\n- 淘拍拍前端架构2.0-简介\nhttp://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\n\n- 轻松监控上万台服务器：企业运维监控平台架构设计与实践指南\nhttp://dbaplus.cn/news-21-466-1.html\n\n- Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755658&idx=1&sn=9f5e4831b2c27d66e4296c49ffcd3d7c&scene=21#wechat_redirect\n\n- 网易蜂巢微服务架构：用RabbitMQ实现轻量级通信\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755639&idx=2&sn=0e43c1b7168dbcd60582326fb20f2f19&scene=21#wechat_redirect\n\n- 使用Vue.js从零构建GitHub项目浏览器\nhttp://xlbd.me/vue-demo-github-file-explorer/\n\n\n### 2016-06-07\n- 搭建Git服务器\nhttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\n\n- gitlab centos一键安装\nhttp://blog.csdn.net/asd131531/article/details/42374285\nhttp://www.linuxidc.com/Linux/2014-08/105137.htm","source":"_posts/dev-collect-2016-06-collect-of-dev.md","raw":"---\ntitle: '[dev][collect][2016-06]collect-of-dev'\ndate: 2016-07-07 11:08:24\ntags: [collect, dev, java, android, collect-of-dev]\n---\n\n## 2016-06\n\n### 2016-06-24\n- 【直播全文记录】 从零开始搭建高可用IM系统\nhttp://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=206924771&idx=1&sn=4705b832c410765a3c89acfa1300b0b6&scene=21#wechat_redirect\n\n- 如何设计类似微信的多终端数据同步协议 | Grouk实践分享\nhttp://chuansong.me/n/1718596\n\n### 2016-06-22\n- 基于Dubbo框架构建分布式服务\nhttp://shiyanjun.cn/archives/1075.html\n\n- 高并发性能调试经验分享\nhttps://zhuanlan.zhihu.com/p/21348220\n\n- Java进阶（三）多线程开发关键技术\nhttp://www.jasongj.com/java/multi_thread/\n\n- blog kafka\nhttp://www.jasongj.com/tags/Kafka/\n\n- 如何构建Android MVVM应用程序\nhttp://www.jianshu.com/p/2fc41a310f79\n\n- 超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用\nhttp://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\n\n- SHELL编程之常用技巧\nhttp://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&mid=2247483698&idx=1&sn=3b52493d202362aae0bf511002e63d52\n\n- 让你爱上写作的 11 款 Markdown 工具\nhttp://www.ifanr.com/app/665209\n\n- 基于Docker搭建Hadoop集群之升级版\nhttp://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\n\n- Kafka设计解析（一）- Kafka背景及架构介绍\nhttp://www.jasongj.com/2015/03/10/KafkaColumn1/\n\n\n\n### 2016-06-15\n- 淘拍拍前端架构2.0-简介\nhttp://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\n\n- 轻松监控上万台服务器：企业运维监控平台架构设计与实践指南\nhttp://dbaplus.cn/news-21-466-1.html\n\n- Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755658&idx=1&sn=9f5e4831b2c27d66e4296c49ffcd3d7c&scene=21#wechat_redirect\n\n- 网易蜂巢微服务架构：用RabbitMQ实现轻量级通信\nhttp://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650755639&idx=2&sn=0e43c1b7168dbcd60582326fb20f2f19&scene=21#wechat_redirect\n\n- 使用Vue.js从零构建GitHub项目浏览器\nhttp://xlbd.me/vue-demo-github-file-explorer/\n\n\n### 2016-06-07\n- 搭建Git服务器\nhttp://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\n\n- gitlab centos一键安装\nhttp://blog.csdn.net/asd131531/article/details/42374285\nhttp://www.linuxidc.com/Linux/2014-08/105137.htm","slug":"dev-collect-2016-06-collect-of-dev","published":1,"updated":"2016-07-11T12:15:21.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uspu000p00uuz3nlkvuw","content":"<h2 id=\"2016-06\"><a href=\"#2016-06\" class=\"headerlink\" title=\"2016-06\"></a>2016-06</h2><h3 id=\"2016-06-24\"><a href=\"#2016-06-24\" class=\"headerlink\" title=\"2016-06-24\"></a>2016-06-24</h3><ul>\n<li><p>【直播全文记录】 从零开始搭建高可用IM系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>如何设计类似微信的多终端数据同步协议 | Grouk实践分享<br><a href=\"http://chuansong.me/n/1718596\" target=\"_blank\" rel=\"external\">http://chuansong.me/n/1718596</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-22\"><a href=\"#2016-06-22\" class=\"headerlink\" title=\"2016-06-22\"></a>2016-06-22</h3><ul>\n<li><p>基于Dubbo框架构建分布式服务<br><a href=\"http://shiyanjun.cn/archives/1075.html\" target=\"_blank\" rel=\"external\">http://shiyanjun.cn/archives/1075.html</a></p>\n</li>\n<li><p>高并发性能调试经验分享<br><a href=\"https://zhuanlan.zhihu.com/p/21348220\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/21348220</a></p>\n</li>\n<li><p>Java进阶（三）多线程开发关键技术<br><a href=\"http://www.jasongj.com/java/multi_thread/\" target=\"_blank\" rel=\"external\">http://www.jasongj.com/java/multi_thread/</a></p>\n</li>\n<li><p>blog kafka<br><a href=\"http://www.jasongj.com/tags/Kafka/\" target=\"_blank\" rel=\"external\">http://www.jasongj.com/tags/Kafka/</a></p>\n</li>\n<li><p>如何构建Android MVVM应用程序<br><a href=\"http://www.jianshu.com/p/2fc41a310f79\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/2fc41a310f79</a></p>\n</li>\n<li><p>超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用<br><a href=\"http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\" target=\"_blank\" rel=\"external\">http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/</a></p>\n</li>\n<li><p>SHELL编程之常用技巧<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52</a></p>\n</li>\n<li><p>让你爱上写作的 11 款 Markdown 工具<br><a href=\"http://www.ifanr.com/app/665209\" target=\"_blank\" rel=\"external\">http://www.ifanr.com/app/665209</a></p>\n</li>\n<li><p>基于Docker搭建Hadoop集群之升级版<br><a href=\"http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\" target=\"_blank\" rel=\"external\">http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/</a></p>\n</li>\n<li><p>Kafka设计解析（一）- Kafka背景及架构介绍<br><a href=\"http://www.jasongj.com/2015/03/10/KafkaColumn1/\" target=\"_blank\" rel=\"external\">http://www.jasongj.com/2015/03/10/KafkaColumn1/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-15\"><a href=\"#2016-06-15\" class=\"headerlink\" title=\"2016-06-15\"></a>2016-06-15</h3><ul>\n<li><p>淘拍拍前端架构2.0-简介<br><a href=\"http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\" target=\"_blank\" rel=\"external\">http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html</a></p>\n</li>\n<li><p>轻松监控上万台服务器：企业运维监控平台架构设计与实践指南<br><a href=\"http://dbaplus.cn/news-21-466-1.html\" target=\"_blank\" rel=\"external\">http://dbaplus.cn/news-21-466-1.html</a></p>\n</li>\n<li><p>Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>网易蜂巢微服务架构：用RabbitMQ实现轻量级通信<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>使用Vue.js从零构建GitHub项目浏览器<br><a href=\"http://xlbd.me/vue-demo-github-file-explorer/\" target=\"_blank\" rel=\"external\">http://xlbd.me/vue-demo-github-file-explorer/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-07\"><a href=\"#2016-06-07\" class=\"headerlink\" title=\"2016-06-07\"></a>2016-06-07</h3><ul>\n<li><p>搭建Git服务器<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"external\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000</a></p>\n</li>\n<li><p>gitlab centos一键安装<br><a href=\"http://blog.csdn.net/asd131531/article/details/42374285\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/asd131531/article/details/42374285</a><br><a href=\"http://www.linuxidc.com/Linux/2014-08/105137.htm\" target=\"_blank\" rel=\"external\">http://www.linuxidc.com/Linux/2014-08/105137.htm</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"2016-06\"><a href=\"#2016-06\" class=\"headerlink\" title=\"2016-06\"></a>2016-06</h2><h3 id=\"2016-06-24\"><a href=\"#2016-06-24\" class=\"headerlink\" title=\"2016-06-24\"></a>2016-06-24</h3><ul>\n<li><p>【直播全文记录】 从零开始搭建高可用IM系统<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=206924771&amp;idx=1&amp;sn=4705b832c410765a3c89acfa1300b0b6&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>如何设计类似微信的多终端数据同步协议 | Grouk实践分享<br><a href=\"http://chuansong.me/n/1718596\">http://chuansong.me/n/1718596</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-22\"><a href=\"#2016-06-22\" class=\"headerlink\" title=\"2016-06-22\"></a>2016-06-22</h3><ul>\n<li><p>基于Dubbo框架构建分布式服务<br><a href=\"http://shiyanjun.cn/archives/1075.html\">http://shiyanjun.cn/archives/1075.html</a></p>\n</li>\n<li><p>高并发性能调试经验分享<br><a href=\"https://zhuanlan.zhihu.com/p/21348220\">https://zhuanlan.zhihu.com/p/21348220</a></p>\n</li>\n<li><p>Java进阶（三）多线程开发关键技术<br><a href=\"http://www.jasongj.com/java/multi_thread/\">http://www.jasongj.com/java/multi_thread/</a></p>\n</li>\n<li><p>blog kafka<br><a href=\"http://www.jasongj.com/tags/Kafka/\">http://www.jasongj.com/tags/Kafka/</a></p>\n</li>\n<li><p>如何构建Android MVVM应用程序<br><a href=\"http://www.jianshu.com/p/2fc41a310f79\">http://www.jianshu.com/p/2fc41a310f79</a></p>\n</li>\n<li><p>超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用<br><a href=\"http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/\">http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/</a></p>\n</li>\n<li><p>SHELL编程之常用技巧<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52\">http://mp.weixin.qq.com/s?__biz=MzIxNDMyODgyMA==&amp;mid=2247483698&amp;idx=1&amp;sn=3b52493d202362aae0bf511002e63d52</a></p>\n</li>\n<li><p>让你爱上写作的 11 款 Markdown 工具<br><a href=\"http://www.ifanr.com/app/665209\">http://www.ifanr.com/app/665209</a></p>\n</li>\n<li><p>基于Docker搭建Hadoop集群之升级版<br><a href=\"http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/\">http://kiwenlau.com/2016/06/12/160612-hadoop-cluster-docker-update/</a></p>\n</li>\n<li><p>Kafka设计解析（一）- Kafka背景及架构介绍<br><a href=\"http://www.jasongj.com/2015/03/10/KafkaColumn1/\">http://www.jasongj.com/2015/03/10/KafkaColumn1/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-15\"><a href=\"#2016-06-15\" class=\"headerlink\" title=\"2016-06-15\"></a>2016-06-15</h3><ul>\n<li><p>淘拍拍前端架构2.0-简介<br><a href=\"http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html\">http://www.w3cfuns.com/notes/25101/33114eae47bbda0c50fb67eeb4a7fd6c.html</a></p>\n</li>\n<li><p>轻松监控上万台服务器：企业运维监控平台架构设计与实践指南<br><a href=\"http://dbaplus.cn/news-21-466-1.html\">http://dbaplus.cn/news-21-466-1.html</a></p>\n</li>\n<li><p>Mesos+Zookeeper+Marathon+Docker分布式集群管理最佳实践<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755658&amp;idx=1&amp;sn=9f5e4831b2c27d66e4296c49ffcd3d7c&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>网易蜂巢微服务架构：用RabbitMQ实现轻量级通信<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect\">http://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;mid=2650755639&amp;idx=2&amp;sn=0e43c1b7168dbcd60582326fb20f2f19&amp;scene=21#wechat_redirect</a></p>\n</li>\n<li><p>使用Vue.js从零构建GitHub项目浏览器<br><a href=\"http://xlbd.me/vue-demo-github-file-explorer/\">http://xlbd.me/vue-demo-github-file-explorer/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-06-07\"><a href=\"#2016-06-07\" class=\"headerlink\" title=\"2016-06-07\"></a>2016-06-07</h3><ul>\n<li><p>搭建Git服务器<br><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000</a></p>\n</li>\n<li><p>gitlab centos一键安装<br><a href=\"http://blog.csdn.net/asd131531/article/details/42374285\">http://blog.csdn.net/asd131531/article/details/42374285</a><br><a href=\"http://www.linuxidc.com/Linux/2014-08/105137.htm\">http://www.linuxidc.com/Linux/2014-08/105137.htm</a></p>\n</li>\n</ul>\n","sticky":0},{"title":"[api_version]4种在springmvc中进行api版本控制的处理方法","date":"2016-06-28T07:31:54.000Z","_content":"\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}","source":"_posts/api-version-4种在springmvc中进行api版本控制的处理方法.md","raw":"---\ntitle: '[api_version]4种在springmvc中进行api版本控制的处理方法'\ndate: 2016-06-28 15:31:54\ntags: [java, api_verion, spring mvc]\n---\n\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}","slug":"api-version-4种在springmvc中进行api版本控制的处理方法","published":1,"updated":"2016-06-30T15:56:59.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usqa000s00uucjlt53sw","content":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\" target=\"_blank\" rel=\"external\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\" target=\"_blank\" rel=\"external\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：<br>```<br>@Controller<br>@VersionedResource(media = “application/vnd.app.resource”)<br>public class TestController {</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “1.0”, to = “1.0”)<br> @ResponseBody<br> public Resource getResource_v1() {</p>\n<pre><code>return new Resource(&quot;1.0&quot;);\n</code></pre><p> }</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “2.0”)<br> @ResponseBody<br> public Resource getResource_v2_onwards() {</p>\n<pre><code>return new Resource(&quot;2.0&quot;);\n</code></pre><p> }<br>}</p>\n</li>\n</ol>\n","excerpt":"","more":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法，你们看怎么样，能否不使用冗余部署的方式。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：<br>```<br>@Controller<br>@VersionedResource(media = “application/vnd.app.resource”)<br>public class TestController {</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “1.0”, to = “1.0”)<br> @ResponseBody<br> public Resource getResource_v1() {</p>\n<pre><code>return new Resource(&quot;1.0&quot;);\n</code></pre><p> }</p>\n<p> @RequestMapping(value = {“/resource”}, method = RequestMethod.GET)<br> @VersionedResource(from = “2.0”)<br> @ResponseBody<br> public Resource getResource_v2_onwards() {</p>\n<pre><code>return new Resource(&quot;2.0&quot;);\n</code></pre><p> }<br>}</p>\n</li>\n</ol>\n","sticky":0},{"title":"hexo生成的静态文件如何更新到自己的服务器上","date":"2018-09-09T17:27:35.000Z","_content":"\nWaiting...\n","source":"_posts/hexo生成的静态文件如何更新到自己的服务器上.md","raw":"---\ntitle: hexo生成的静态文件如何更新到自己的服务器上\ndate: 2018-09-10 01:27:35\ntags: [hexo, blog, 自动发布, 自动部署, 云服务]\n---\n\nWaiting...\n","slug":"hexo生成的静态文件如何更新到自己的服务器上","published":1,"updated":"2018-09-09T17:28:46.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usqe000u00uulatfhfv3","content":"<p>Waiting…</p>\n","excerpt":"","more":"<p>Waiting…</p>\n","sticky":0},{"title":"[dev][collect][2016-08]collect-of-dev","date":"2016-09-06T15:51:04.000Z","_content":"\n\n## 2016-08\n\n\n### 2016-08-26\n- RabbitMQ Configuration\nhttps://www.rabbitmq.com/configure.html\n\n- RabbitMQ用户角色及权限控制\nhttp://blog.csdn.net/zyz511919766/article/details/42292655\n\n- RabbitMQ Installing on Windows\nhttps://www.rabbitmq.com/install-windows.html\n\n- RabbitMQ Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)\nhttps://www.rabbitmq.com/install-rpm.html\n\n- CentOS6.5安装RabbitMQ\nhttp://www.jianshu.com/p/0d3bf6402e15\n\n\n\n\n### 2016-08-25\n- ELK下载\nhttps://www.elastic.co/downloads\n\n- ELK+Kafka 企业日志收集平台(一)\nhttp://blog.sctux.com/?p=445\n\n- ELK+Kafka 企业日志收集平台(二)\nhttp://blog.sctux.com/?p=451\n\n- https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello\n\n\n\n\n### 2016-08-22\n- 微服务架构下的开发部署实践(1)\nhttps://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- 领域驱动设计和实践\nhttp://www.infoq.com/cn/articles/cjq-ddd\n\n- 教你成为全栈工程师(Full Stack Developer) 四十五-一文读懂hadoop、hbase、hive、spark分布式系统架构\nhttp://www.shareditor.com/blogshow/?blogId=96&hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- 聊一聊排序算法\nhttp://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&mid=2455058728&idx=1&sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd\nhttps://github.com/barretlee/algorithms\n\n- 最简MVP框架\nhttp://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\nhttps://github.com/wolearn/MvpFrame\n\n- 可用性高达五个9！支付系统高可用架构设计实战\nhttp://dbaplus.cn/news-21-591-1.html\n\n- Gson源码分析以其所包含注解的用法\nhttp://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- React Native开源项目-嘎嘎商城客户端(持续更新中)\nhttp://www.lcode.org/react-native-source-gagamall/\nhttps://github.com/jiangqqlmj/GaGaMall\n\n- ActiveMQ高可用集群方案\nhttp://wosyingjun.iteye.com/blog/2314683\n\n- gitbook Zookeeper:分布式进程协同\nhttps://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details\n\n\n\n\n### 2016-08-16\n- 全面分析 Spring 的编程式事务管理及声明式事务管理\nhttps://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/\n\n\n\n\n\n### 2016-08-16\n- Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos\nhttp://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\nhttps://github.com/fabiomaffioletti/mul-at\n\n- JTA 深度历险 - 原理与实现\nhttp://www.ibm.com/developerworks/cn/java/j-lo-jta/\n\n- Java事务之八——分布式事务(Spring+JTA+Atomikos+Hibernate+JMS)\nhttp://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html\n\n- 如何实现XA式、非XA式Spring分布式事务\nhttp://www.importnew.com/15812.html\n\n- Java事务设计策略 微型书\nhttp://www.infoq.com/cn/minibooks/JTDS#idp_register\n\n- 【转】JDBC事务和JTA （XA）事务\nhttp://kazge.com/archives/962.html\n\n\n\n\n\n### 2016-08-15\n- 美团点评技术团队\nhttp://tech.meituan.com/\n\n- 消息队列设计精要\nhttp://tech.meituan.com/mq-design.html\n\n- 阿里中间件团队博客\nhttp://jm.taobao.org/\n\n- Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos\nhttp://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\nhttps://github.com/fabiomaffioletti/mul-at\n\n- GitHub 中国区前 100 名到底是什么样的人?\nhttp://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion\n\n- Spring分布式事务配置(atomikos)\nhttp://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&utm_medium=referral\n\n- 基于spring boot项目的多数据源配置与分布式事务处理总结\nhttp://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html\n\n\n\n\n\n\n### 2016-08-13\n爬虫专题\n- WebMagic\nhttp://webmagic.io/docs/zh/\nhttps://github.com/YihuaWanglv/webmagic\n\n\n- Maven 那点事儿\nhttp://my.oschina.net/huangyong/blog/194583\n\n\n\n### 2016-08-12\n- Base: An Acid Alternative\nhttp://queue.acm.org/detail.cfm?id=1394128\n\n- 分布式事务演进\nhttp://yongpoliu.com/distributed-tx-evolution/\n\n- 系统幂等以及常用实现方式\nhttp://yongpoliu.com/idempotent/\n\n- 实现maven依赖的全局排除\nhttp://maven.apache.org/enforcer/maven-enforcer-plugin/\nhttp://yongpoliu.com/maven-global-exclude/\n\n- bi分析统计工具\nhttp://www.tableau.com/zh-cn/products/cloud-bi\n\n- **如何用消息系统避免分布式事务？**\nhttp://www.cnblogs.com/LBSer/p/4715395.html\n\n- MySQL两阶段提交\nhttp://blog.csdn.net/jesseyoung/article/details/37970271\n\n\n\n\n### 2016-08-11\n- Java自动化测试框架TestNG之入门篇\nhttp://www.jianshu.com/p/a74adec98eff\n\n- Arquillian Guides\nhttp://arquillian.org/guides/getting_started/?utm_source=cta\n\n- 自动化单元测试实践之路\nhttp://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices\n\n- 8个超实用的Java测试工具和框架\nhttp://www.imooc.com/article/1154\n\n- 使用 Selenium 实现基于 Web 的自动化测试\nhttps://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/\n\n- 用 STAF+Selenium 实现并行的自动化测试框架\nhttps://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/\n\n- Java Fluent Restful API自动化测试框架\nhttp://www.cnblogs.com/jinsdu/p/4606113.html\n\n- HTTP API自动化测试从手工到平台的演变\nhttp://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform\n\n- 快速入门测试驱动开发（TDD）\nhttp://wwsun.github.io/posts/tdd.html\n\n- 使用 REST-Assured 测试 REST API 的进阶技巧和最佳实践\nhttps://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/\n\n\n\n### 2016-08-10\n- Sharding-JDBC\nhttp://dangdangdotcom.github.io/sharding-jdbc/\n\n- [blog]庄周梦蝶\nhttp://fnil.net/\n\n- Atlas是由 Qihoo 360公司Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目\nhttps://github.com/Qihoo360/Atlas/blob/master/README_ZH.md\nhttps://github.com/Qihoo360/Atlas\n\n- RDBMS分布式两阶段提交与Zookeeper的Paxos同步算法\nhttp://blog.csdn.net/victory0508/article/details/48003527\n\n- 分布式系统的事务处理\nhttp://coolshell.cn/articles/10910.html\n\n- 分布式事务 - 最终一致性(一)\nhttps://segmentfault.com/a/1190000005969526\n\n- 介绍下用消息队列实现分布式事务 \nhttp://blog.chinaunix.net/uid-20047304-id-4515035.html\n\n\n\n\n### 2016-08-03\n- 解放程序猿（媛）的双手—iOS UI自动化测试\nhttp://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- 5小时搞定谷歌原生自动化框架UiAutomator1.0\nhttp://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/\n\n- 有赞延迟队列设计\nhttp://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io","source":"_posts/dev-collect-2016-08-collect-of-dev.md","raw":"---\ntitle: '[dev][collect][2016-08]collect-of-dev'\ndate: 2016-09-06 23:51:04\ntags: [collect, dev, java, android, collect-of-dev]\n---\n\n\n## 2016-08\n\n\n### 2016-08-26\n- RabbitMQ Configuration\nhttps://www.rabbitmq.com/configure.html\n\n- RabbitMQ用户角色及权限控制\nhttp://blog.csdn.net/zyz511919766/article/details/42292655\n\n- RabbitMQ Installing on Windows\nhttps://www.rabbitmq.com/install-windows.html\n\n- RabbitMQ Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)\nhttps://www.rabbitmq.com/install-rpm.html\n\n- CentOS6.5安装RabbitMQ\nhttp://www.jianshu.com/p/0d3bf6402e15\n\n\n\n\n### 2016-08-25\n- ELK下载\nhttps://www.elastic.co/downloads\n\n- ELK+Kafka 企业日志收集平台(一)\nhttp://blog.sctux.com/?p=445\n\n- ELK+Kafka 企业日志收集平台(二)\nhttp://blog.sctux.com/?p=451\n\n- https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello\n\n\n\n\n### 2016-08-22\n- 微服务架构下的开发部署实践(1)\nhttps://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- 领域驱动设计和实践\nhttp://www.infoq.com/cn/articles/cjq-ddd\n\n- 教你成为全栈工程师(Full Stack Developer) 四十五-一文读懂hadoop、hbase、hive、spark分布式系统架构\nhttp://www.shareditor.com/blogshow/?blogId=96&hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- 聊一聊排序算法\nhttp://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&mid=2455058728&idx=1&sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd\nhttps://github.com/barretlee/algorithms\n\n- 最简MVP框架\nhttp://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\nhttps://github.com/wolearn/MvpFrame\n\n- 可用性高达五个9！支付系统高可用架构设计实战\nhttp://dbaplus.cn/news-21-591-1.html\n\n- Gson源码分析以其所包含注解的用法\nhttp://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- React Native开源项目-嘎嘎商城客户端(持续更新中)\nhttp://www.lcode.org/react-native-source-gagamall/\nhttps://github.com/jiangqqlmj/GaGaMall\n\n- ActiveMQ高可用集群方案\nhttp://wosyingjun.iteye.com/blog/2314683\n\n- gitbook Zookeeper:分布式进程协同\nhttps://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details\n\n\n\n\n### 2016-08-16\n- 全面分析 Spring 的编程式事务管理及声明式事务管理\nhttps://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/\n\n\n\n\n\n### 2016-08-16\n- Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos\nhttp://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\nhttps://github.com/fabiomaffioletti/mul-at\n\n- JTA 深度历险 - 原理与实现\nhttp://www.ibm.com/developerworks/cn/java/j-lo-jta/\n\n- Java事务之八——分布式事务(Spring+JTA+Atomikos+Hibernate+JMS)\nhttp://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html\n\n- 如何实现XA式、非XA式Spring分布式事务\nhttp://www.importnew.com/15812.html\n\n- Java事务设计策略 微型书\nhttp://www.infoq.com/cn/minibooks/JTDS#idp_register\n\n- 【转】JDBC事务和JTA （XA）事务\nhttp://kazge.com/archives/962.html\n\n\n\n\n\n### 2016-08-15\n- 美团点评技术团队\nhttp://tech.meituan.com/\n\n- 消息队列设计精要\nhttp://tech.meituan.com/mq-design.html\n\n- 阿里中间件团队博客\nhttp://jm.taobao.org/\n\n- Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos\nhttp://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\nhttps://github.com/fabiomaffioletti/mul-at\n\n- GitHub 中国区前 100 名到底是什么样的人?\nhttp://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion\n\n- Spring分布式事务配置(atomikos)\nhttp://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&utm_medium=referral\n\n- 基于spring boot项目的多数据源配置与分布式事务处理总结\nhttp://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html\n\n\n\n\n\n\n### 2016-08-13\n爬虫专题\n- WebMagic\nhttp://webmagic.io/docs/zh/\nhttps://github.com/YihuaWanglv/webmagic\n\n\n- Maven 那点事儿\nhttp://my.oschina.net/huangyong/blog/194583\n\n\n\n### 2016-08-12\n- Base: An Acid Alternative\nhttp://queue.acm.org/detail.cfm?id=1394128\n\n- 分布式事务演进\nhttp://yongpoliu.com/distributed-tx-evolution/\n\n- 系统幂等以及常用实现方式\nhttp://yongpoliu.com/idempotent/\n\n- 实现maven依赖的全局排除\nhttp://maven.apache.org/enforcer/maven-enforcer-plugin/\nhttp://yongpoliu.com/maven-global-exclude/\n\n- bi分析统计工具\nhttp://www.tableau.com/zh-cn/products/cloud-bi\n\n- **如何用消息系统避免分布式事务？**\nhttp://www.cnblogs.com/LBSer/p/4715395.html\n\n- MySQL两阶段提交\nhttp://blog.csdn.net/jesseyoung/article/details/37970271\n\n\n\n\n### 2016-08-11\n- Java自动化测试框架TestNG之入门篇\nhttp://www.jianshu.com/p/a74adec98eff\n\n- Arquillian Guides\nhttp://arquillian.org/guides/getting_started/?utm_source=cta\n\n- 自动化单元测试实践之路\nhttp://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices\n\n- 8个超实用的Java测试工具和框架\nhttp://www.imooc.com/article/1154\n\n- 使用 Selenium 实现基于 Web 的自动化测试\nhttps://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/\n\n- 用 STAF+Selenium 实现并行的自动化测试框架\nhttps://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/\n\n- Java Fluent Restful API自动化测试框架\nhttp://www.cnblogs.com/jinsdu/p/4606113.html\n\n- HTTP API自动化测试从手工到平台的演变\nhttp://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform\n\n- 快速入门测试驱动开发（TDD）\nhttp://wwsun.github.io/posts/tdd.html\n\n- 使用 REST-Assured 测试 REST API 的进阶技巧和最佳实践\nhttps://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/\n\n\n\n### 2016-08-10\n- Sharding-JDBC\nhttp://dangdangdotcom.github.io/sharding-jdbc/\n\n- [blog]庄周梦蝶\nhttp://fnil.net/\n\n- Atlas是由 Qihoo 360公司Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目\nhttps://github.com/Qihoo360/Atlas/blob/master/README_ZH.md\nhttps://github.com/Qihoo360/Atlas\n\n- RDBMS分布式两阶段提交与Zookeeper的Paxos同步算法\nhttp://blog.csdn.net/victory0508/article/details/48003527\n\n- 分布式系统的事务处理\nhttp://coolshell.cn/articles/10910.html\n\n- 分布式事务 - 最终一致性(一)\nhttps://segmentfault.com/a/1190000005969526\n\n- 介绍下用消息队列实现分布式事务 \nhttp://blog.chinaunix.net/uid-20047304-id-4515035.html\n\n\n\n\n### 2016-08-03\n- 解放程序猿（媛）的双手—iOS UI自动化测试\nhttp://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n- 5小时搞定谷歌原生自动化框架UiAutomator1.0\nhttp://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/\n\n- 有赞延迟队列设计\nhttp://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io","slug":"dev-collect-2016-08-collect-of-dev","published":1,"updated":"2016-09-06T15:52:13.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usql000x00uuevqfzjjv","content":"<h2 id=\"2016-08\"><a href=\"#2016-08\" class=\"headerlink\" title=\"2016-08\"></a>2016-08</h2><h3 id=\"2016-08-26\"><a href=\"#2016-08-26\" class=\"headerlink\" title=\"2016-08-26\"></a>2016-08-26</h3><ul>\n<li><p>RabbitMQ Configuration<br><a href=\"https://www.rabbitmq.com/configure.html\" target=\"_blank\" rel=\"external\">https://www.rabbitmq.com/configure.html</a></p>\n</li>\n<li><p>RabbitMQ用户角色及权限控制<br><a href=\"http://blog.csdn.net/zyz511919766/article/details/42292655\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zyz511919766/article/details/42292655</a></p>\n</li>\n<li><p>RabbitMQ Installing on Windows<br><a href=\"https://www.rabbitmq.com/install-windows.html\" target=\"_blank\" rel=\"external\">https://www.rabbitmq.com/install-windows.html</a></p>\n</li>\n<li><p>RabbitMQ Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)<br><a href=\"https://www.rabbitmq.com/install-rpm.html\" target=\"_blank\" rel=\"external\">https://www.rabbitmq.com/install-rpm.html</a></p>\n</li>\n<li><p>CentOS6.5安装RabbitMQ<br><a href=\"http://www.jianshu.com/p/0d3bf6402e15\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/0d3bf6402e15</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-25\"><a href=\"#2016-08-25\" class=\"headerlink\" title=\"2016-08-25\"></a>2016-08-25</h3><ul>\n<li><p>ELK下载<br><a href=\"https://www.elastic.co/downloads\" target=\"_blank\" rel=\"external\">https://www.elastic.co/downloads</a></p>\n</li>\n<li><p>ELK+Kafka 企业日志收集平台(一)<br><a href=\"http://blog.sctux.com/?p=445\" target=\"_blank\" rel=\"external\">http://blog.sctux.com/?p=445</a></p>\n</li>\n<li><p>ELK+Kafka 企业日志收集平台(二)<br><a href=\"http://blog.sctux.com/?p=451\" target=\"_blank\" rel=\"external\">http://blog.sctux.com/?p=451</a></p>\n</li>\n<li><p><a href=\"https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello\" target=\"_blank\" rel=\"external\">https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-22\"><a href=\"#2016-08-22\" class=\"headerlink\" title=\"2016-08-22\"></a>2016-08-22</h3><ul>\n<li><p>微服务架构下的开发部署实践(1)<br><a href=\"https://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>领域驱动设计和实践<br><a href=\"http://www.infoq.com/cn/articles/cjq-ddd\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/cjq-ddd</a></p>\n</li>\n<li><p>教你成为全栈工程师(Full Stack Developer) 四十五-一文读懂hadoop、hbase、hive、spark分布式系统架构<br><a href=\"http://www.shareditor.com/blogshow/?blogId=96&amp;hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">http://www.shareditor.com/blogshow/?blogId=96&amp;hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>聊一聊排序算法<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&amp;mid=2455058728&amp;idx=1&amp;sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&amp;mid=2455058728&amp;idx=1&amp;sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd</a><br><a href=\"https://github.com/barretlee/algorithms\" target=\"_blank\" rel=\"external\">https://github.com/barretlee/algorithms</a></p>\n</li>\n<li><p>最简MVP框架<br><a href=\"http://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a><br><a href=\"https://github.com/wolearn/MvpFrame\" target=\"_blank\" rel=\"external\">https://github.com/wolearn/MvpFrame</a></p>\n</li>\n<li><p>可用性高达五个9！支付系统高可用架构设计实战<br><a href=\"http://dbaplus.cn/news-21-591-1.html\" target=\"_blank\" rel=\"external\">http://dbaplus.cn/news-21-591-1.html</a></p>\n</li>\n<li><p>Gson源码分析以其所包含注解的用法<br><a href=\"http://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">http://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>React Native开源项目-嘎嘎商城客户端(持续更新中)<br><a href=\"http://www.lcode.org/react-native-source-gagamall/\" target=\"_blank\" rel=\"external\">http://www.lcode.org/react-native-source-gagamall/</a><br><a href=\"https://github.com/jiangqqlmj/GaGaMall\" target=\"_blank\" rel=\"external\">https://github.com/jiangqqlmj/GaGaMall</a></p>\n</li>\n<li><p>ActiveMQ高可用集群方案<br><a href=\"http://wosyingjun.iteye.com/blog/2314683\" target=\"_blank\" rel=\"external\">http://wosyingjun.iteye.com/blog/2314683</a></p>\n</li>\n<li><p>gitbook Zookeeper:分布式进程协同<br><a href=\"https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details\" target=\"_blank\" rel=\"external\">https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-16\"><a href=\"#2016-08-16\" class=\"headerlink\" title=\"2016-08-16\"></a>2016-08-16</h3><ul>\n<li>全面分析 Spring 的编程式事务管理及声明式事务管理<br><a href=\"https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/\" target=\"_blank\" rel=\"external\">https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/</a></li>\n</ul>\n<h3 id=\"2016-08-16-1\"><a href=\"#2016-08-16-1\" class=\"headerlink\" title=\"2016-08-16\"></a>2016-08-16</h3><ul>\n<li><p>Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos<br><a href=\"http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\" target=\"_blank\" rel=\"external\">http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/</a><br><a href=\"https://github.com/fabiomaffioletti/mul-at\" target=\"_blank\" rel=\"external\">https://github.com/fabiomaffioletti/mul-at</a></p>\n</li>\n<li><p>JTA 深度历险 - 原理与实现<br><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-jta/\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/java/j-lo-jta/</a></p>\n</li>\n<li><p>Java事务之八——分布式事务(Spring+JTA+Atomikos+Hibernate+JMS)<br><a href=\"http://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html</a></p>\n</li>\n<li><p>如何实现XA式、非XA式Spring分布式事务<br><a href=\"http://www.importnew.com/15812.html\" target=\"_blank\" rel=\"external\">http://www.importnew.com/15812.html</a></p>\n</li>\n<li><p>Java事务设计策略 微型书<br><a href=\"http://www.infoq.com/cn/minibooks/JTDS#idp_register\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/minibooks/JTDS#idp_register</a></p>\n</li>\n<li><p>【转】JDBC事务和JTA （XA）事务<br><a href=\"http://kazge.com/archives/962.html\" target=\"_blank\" rel=\"external\">http://kazge.com/archives/962.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-15\"><a href=\"#2016-08-15\" class=\"headerlink\" title=\"2016-08-15\"></a>2016-08-15</h3><ul>\n<li><p>美团点评技术团队<br><a href=\"http://tech.meituan.com/\" target=\"_blank\" rel=\"external\">http://tech.meituan.com/</a></p>\n</li>\n<li><p>消息队列设计精要<br><a href=\"http://tech.meituan.com/mq-design.html\" target=\"_blank\" rel=\"external\">http://tech.meituan.com/mq-design.html</a></p>\n</li>\n<li><p>阿里中间件团队博客<br><a href=\"http://jm.taobao.org/\" target=\"_blank\" rel=\"external\">http://jm.taobao.org/</a></p>\n</li>\n<li><p>Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos<br><a href=\"http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\" target=\"_blank\" rel=\"external\">http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/</a><br><a href=\"https://github.com/fabiomaffioletti/mul-at\" target=\"_blank\" rel=\"external\">https://github.com/fabiomaffioletti/mul-at</a></p>\n</li>\n<li><p>GitHub 中国区前 100 名到底是什么样的人?<br><a href=\"http://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion\" target=\"_blank\" rel=\"external\">http://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion</a></p>\n</li>\n<li><p>Spring分布式事务配置(atomikos)<br><a href=\"http://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">http://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&amp;utm_medium=referral</a></p>\n</li>\n<li><p>基于spring boot项目的多数据源配置与分布式事务处理总结<br><a href=\"http://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html\" target=\"_blank\" rel=\"external\">http://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-13\"><a href=\"#2016-08-13\" class=\"headerlink\" title=\"2016-08-13\"></a>2016-08-13</h3><p>爬虫专题</p>\n<ul>\n<li>WebMagic<br><a href=\"http://webmagic.io/docs/zh/\" target=\"_blank\" rel=\"external\">http://webmagic.io/docs/zh/</a><br><a href=\"https://github.com/YihuaWanglv/webmagic\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/webmagic</a></li>\n</ul>\n<ul>\n<li>Maven 那点事儿<br><a href=\"http://my.oschina.net/huangyong/blog/194583\" target=\"_blank\" rel=\"external\">http://my.oschina.net/huangyong/blog/194583</a></li>\n</ul>\n<h3 id=\"2016-08-12\"><a href=\"#2016-08-12\" class=\"headerlink\" title=\"2016-08-12\"></a>2016-08-12</h3><ul>\n<li><p>Base: An Acid Alternative<br><a href=\"http://queue.acm.org/detail.cfm?id=1394128\" target=\"_blank\" rel=\"external\">http://queue.acm.org/detail.cfm?id=1394128</a></p>\n</li>\n<li><p>分布式事务演进<br><a href=\"http://yongpoliu.com/distributed-tx-evolution/\" target=\"_blank\" rel=\"external\">http://yongpoliu.com/distributed-tx-evolution/</a></p>\n</li>\n<li><p>系统幂等以及常用实现方式<br><a href=\"http://yongpoliu.com/idempotent/\" target=\"_blank\" rel=\"external\">http://yongpoliu.com/idempotent/</a></p>\n</li>\n<li><p>实现maven依赖的全局排除<br><a href=\"http://maven.apache.org/enforcer/maven-enforcer-plugin/\" target=\"_blank\" rel=\"external\">http://maven.apache.org/enforcer/maven-enforcer-plugin/</a><br><a href=\"http://yongpoliu.com/maven-global-exclude/\" target=\"_blank\" rel=\"external\">http://yongpoliu.com/maven-global-exclude/</a></p>\n</li>\n<li><p>bi分析统计工具<br><a href=\"http://www.tableau.com/zh-cn/products/cloud-bi\" target=\"_blank\" rel=\"external\">http://www.tableau.com/zh-cn/products/cloud-bi</a></p>\n</li>\n<li><p><strong>如何用消息系统避免分布式事务？</strong><br><a href=\"http://www.cnblogs.com/LBSer/p/4715395.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/LBSer/p/4715395.html</a></p>\n</li>\n<li><p>MySQL两阶段提交<br><a href=\"http://blog.csdn.net/jesseyoung/article/details/37970271\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jesseyoung/article/details/37970271</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-11\"><a href=\"#2016-08-11\" class=\"headerlink\" title=\"2016-08-11\"></a>2016-08-11</h3><ul>\n<li><p>Java自动化测试框架TestNG之入门篇<br><a href=\"http://www.jianshu.com/p/a74adec98eff\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/a74adec98eff</a></p>\n</li>\n<li><p>Arquillian Guides<br><a href=\"http://arquillian.org/guides/getting_started/?utm_source=cta\" target=\"_blank\" rel=\"external\">http://arquillian.org/guides/getting_started/?utm_source=cta</a></p>\n</li>\n<li><p>自动化单元测试实践之路<br><a href=\"http://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices</a></p>\n</li>\n<li><p>8个超实用的Java测试工具和框架<br><a href=\"http://www.imooc.com/article/1154\" target=\"_blank\" rel=\"external\">http://www.imooc.com/article/1154</a></p>\n</li>\n<li><p>使用 Selenium 实现基于 Web 的自动化测试<br><a href=\"https://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/\" target=\"_blank\" rel=\"external\">https://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/</a></p>\n</li>\n<li><p>用 STAF+Selenium 实现并行的自动化测试框架<br><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/\" target=\"_blank\" rel=\"external\">https://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/</a></p>\n</li>\n<li><p>Java Fluent Restful API自动化测试框架<br><a href=\"http://www.cnblogs.com/jinsdu/p/4606113.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/jinsdu/p/4606113.html</a></p>\n</li>\n<li><p>HTTP API自动化测试从手工到平台的演变<br><a href=\"http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform</a></p>\n</li>\n<li><p>快速入门测试驱动开发（TDD）<br><a href=\"http://wwsun.github.io/posts/tdd.html\" target=\"_blank\" rel=\"external\">http://wwsun.github.io/posts/tdd.html</a></p>\n</li>\n<li><p>使用 REST-Assured 测试 REST API 的进阶技巧和最佳实践<br><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/\" target=\"_blank\" rel=\"external\">https://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-10\"><a href=\"#2016-08-10\" class=\"headerlink\" title=\"2016-08-10\"></a>2016-08-10</h3><ul>\n<li><p>Sharding-JDBC<br><a href=\"http://dangdangdotcom.github.io/sharding-jdbc/\" target=\"_blank\" rel=\"external\">http://dangdangdotcom.github.io/sharding-jdbc/</a></p>\n</li>\n<li><p>[blog]庄周梦蝶<br><a href=\"http://fnil.net/\" target=\"_blank\" rel=\"external\">http://fnil.net/</a></p>\n</li>\n<li><p>Atlas是由 Qihoo 360公司Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目<br><a href=\"https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md\" target=\"_blank\" rel=\"external\">https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md</a><br><a href=\"https://github.com/Qihoo360/Atlas\" target=\"_blank\" rel=\"external\">https://github.com/Qihoo360/Atlas</a></p>\n</li>\n<li><p>RDBMS分布式两阶段提交与Zookeeper的Paxos同步算法<br><a href=\"http://blog.csdn.net/victory0508/article/details/48003527\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/victory0508/article/details/48003527</a></p>\n</li>\n<li><p>分布式系统的事务处理<br><a href=\"http://coolshell.cn/articles/10910.html\" target=\"_blank\" rel=\"external\">http://coolshell.cn/articles/10910.html</a></p>\n</li>\n<li><p>分布式事务 - 最终一致性(一)<br><a href=\"https://segmentfault.com/a/1190000005969526\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000005969526</a></p>\n</li>\n<li><p>介绍下用消息队列实现分布式事务<br><a href=\"http://blog.chinaunix.net/uid-20047304-id-4515035.html\" target=\"_blank\" rel=\"external\">http://blog.chinaunix.net/uid-20047304-id-4515035.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-03\"><a href=\"#2016-08-03\" class=\"headerlink\" title=\"2016-08-03\"></a>2016-08-03</h3><ul>\n<li><p>解放程序猿（媛）的双手—iOS UI自动化测试<br><a href=\"http://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">http://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>5小时搞定谷歌原生自动化框架UiAutomator1.0<br><a href=\"http://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/\" target=\"_blank\" rel=\"external\">http://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/</a></p>\n</li>\n<li><p>有赞延迟队列设计<br><a href=\"http://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">http://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"2016-08\"><a href=\"#2016-08\" class=\"headerlink\" title=\"2016-08\"></a>2016-08</h2><h3 id=\"2016-08-26\"><a href=\"#2016-08-26\" class=\"headerlink\" title=\"2016-08-26\"></a>2016-08-26</h3><ul>\n<li><p>RabbitMQ Configuration<br><a href=\"https://www.rabbitmq.com/configure.html\">https://www.rabbitmq.com/configure.html</a></p>\n</li>\n<li><p>RabbitMQ用户角色及权限控制<br><a href=\"http://blog.csdn.net/zyz511919766/article/details/42292655\">http://blog.csdn.net/zyz511919766/article/details/42292655</a></p>\n</li>\n<li><p>RabbitMQ Installing on Windows<br><a href=\"https://www.rabbitmq.com/install-windows.html\">https://www.rabbitmq.com/install-windows.html</a></p>\n</li>\n<li><p>RabbitMQ Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)<br><a href=\"https://www.rabbitmq.com/install-rpm.html\">https://www.rabbitmq.com/install-rpm.html</a></p>\n</li>\n<li><p>CentOS6.5安装RabbitMQ<br><a href=\"http://www.jianshu.com/p/0d3bf6402e15\">http://www.jianshu.com/p/0d3bf6402e15</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-25\"><a href=\"#2016-08-25\" class=\"headerlink\" title=\"2016-08-25\"></a>2016-08-25</h3><ul>\n<li><p>ELK下载<br><a href=\"https://www.elastic.co/downloads\">https://www.elastic.co/downloads</a></p>\n</li>\n<li><p>ELK+Kafka 企业日志收集平台(一)<br><a href=\"http://blog.sctux.com/?p=445\">http://blog.sctux.com/?p=445</a></p>\n</li>\n<li><p>ELK+Kafka 企业日志收集平台(二)<br><a href=\"http://blog.sctux.com/?p=451\">http://blog.sctux.com/?p=451</a></p>\n</li>\n<li><p><a href=\"https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello\">https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-22\"><a href=\"#2016-08-22\" class=\"headerlink\" title=\"2016-08-22\"></a>2016-08-22</h3><ul>\n<li><p>微服务架构下的开发部署实践(1)<br><a href=\"https://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">https://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>领域驱动设计和实践<br><a href=\"http://www.infoq.com/cn/articles/cjq-ddd\">http://www.infoq.com/cn/articles/cjq-ddd</a></p>\n</li>\n<li><p>教你成为全栈工程师(Full Stack Developer) 四十五-一文读懂hadoop、hbase、hive、spark分布式系统架构<br><a href=\"http://www.shareditor.com/blogshow/?blogId=96&amp;hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">http://www.shareditor.com/blogshow/?blogId=96&amp;hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>聊一聊排序算法<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&amp;mid=2455058728&amp;idx=1&amp;sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd\">http://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&amp;mid=2455058728&amp;idx=1&amp;sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd</a><br><a href=\"https://github.com/barretlee/algorithms\">https://github.com/barretlee/algorithms</a></p>\n</li>\n<li><p>最简MVP框架<br><a href=\"http://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">http://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a><br><a href=\"https://github.com/wolearn/MvpFrame\">https://github.com/wolearn/MvpFrame</a></p>\n</li>\n<li><p>可用性高达五个9！支付系统高可用架构设计实战<br><a href=\"http://dbaplus.cn/news-21-591-1.html\">http://dbaplus.cn/news-21-591-1.html</a></p>\n</li>\n<li><p>Gson源码分析以其所包含注解的用法<br><a href=\"http://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">http://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>React Native开源项目-嘎嘎商城客户端(持续更新中)<br><a href=\"http://www.lcode.org/react-native-source-gagamall/\">http://www.lcode.org/react-native-source-gagamall/</a><br><a href=\"https://github.com/jiangqqlmj/GaGaMall\">https://github.com/jiangqqlmj/GaGaMall</a></p>\n</li>\n<li><p>ActiveMQ高可用集群方案<br><a href=\"http://wosyingjun.iteye.com/blog/2314683\">http://wosyingjun.iteye.com/blog/2314683</a></p>\n</li>\n<li><p>gitbook Zookeeper:分布式进程协同<br><a href=\"https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details\">https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-16\"><a href=\"#2016-08-16\" class=\"headerlink\" title=\"2016-08-16\"></a>2016-08-16</h3><ul>\n<li>全面分析 Spring 的编程式事务管理及声明式事务管理<br><a href=\"https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/\">https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/</a></li>\n</ul>\n<h3 id=\"2016-08-16-1\"><a href=\"#2016-08-16-1\" class=\"headerlink\" title=\"2016-08-16\"></a>2016-08-16</h3><ul>\n<li><p>Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos<br><a href=\"http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\">http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/</a><br><a href=\"https://github.com/fabiomaffioletti/mul-at\">https://github.com/fabiomaffioletti/mul-at</a></p>\n</li>\n<li><p>JTA 深度历险 - 原理与实现<br><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-jta/\">http://www.ibm.com/developerworks/cn/java/j-lo-jta/</a></p>\n</li>\n<li><p>Java事务之八——分布式事务(Spring+JTA+Atomikos+Hibernate+JMS)<br><a href=\"http://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html\">http://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html</a></p>\n</li>\n<li><p>如何实现XA式、非XA式Spring分布式事务<br><a href=\"http://www.importnew.com/15812.html\">http://www.importnew.com/15812.html</a></p>\n</li>\n<li><p>Java事务设计策略 微型书<br><a href=\"http://www.infoq.com/cn/minibooks/JTDS#idp_register\">http://www.infoq.com/cn/minibooks/JTDS#idp_register</a></p>\n</li>\n<li><p>【转】JDBC事务和JTA （XA）事务<br><a href=\"http://kazge.com/archives/962.html\">http://kazge.com/archives/962.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-15\"><a href=\"#2016-08-15\" class=\"headerlink\" title=\"2016-08-15\"></a>2016-08-15</h3><ul>\n<li><p>美团点评技术团队<br><a href=\"http://tech.meituan.com/\">http://tech.meituan.com/</a></p>\n</li>\n<li><p>消息队列设计精要<br><a href=\"http://tech.meituan.com/mq-design.html\">http://tech.meituan.com/mq-design.html</a></p>\n</li>\n<li><p>阿里中间件团队博客<br><a href=\"http://jm.taobao.org/\">http://jm.taobao.org/</a></p>\n</li>\n<li><p>Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos<br><a href=\"http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/\">http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/</a><br><a href=\"https://github.com/fabiomaffioletti/mul-at\">https://github.com/fabiomaffioletti/mul-at</a></p>\n</li>\n<li><p>GitHub 中国区前 100 名到底是什么样的人?<br><a href=\"http://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion\">http://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion</a></p>\n</li>\n<li><p>Spring分布式事务配置(atomikos)<br><a href=\"http://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&amp;utm_medium=referral\">http://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&amp;utm_medium=referral</a></p>\n</li>\n<li><p>基于spring boot项目的多数据源配置与分布式事务处理总结<br><a href=\"http://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html\">http://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-13\"><a href=\"#2016-08-13\" class=\"headerlink\" title=\"2016-08-13\"></a>2016-08-13</h3><p>爬虫专题</p>\n<ul>\n<li>WebMagic<br><a href=\"http://webmagic.io/docs/zh/\">http://webmagic.io/docs/zh/</a><br><a href=\"https://github.com/YihuaWanglv/webmagic\">https://github.com/YihuaWanglv/webmagic</a></li>\n</ul>\n<ul>\n<li>Maven 那点事儿<br><a href=\"http://my.oschina.net/huangyong/blog/194583\">http://my.oschina.net/huangyong/blog/194583</a></li>\n</ul>\n<h3 id=\"2016-08-12\"><a href=\"#2016-08-12\" class=\"headerlink\" title=\"2016-08-12\"></a>2016-08-12</h3><ul>\n<li><p>Base: An Acid Alternative<br><a href=\"http://queue.acm.org/detail.cfm?id=1394128\">http://queue.acm.org/detail.cfm?id=1394128</a></p>\n</li>\n<li><p>分布式事务演进<br><a href=\"http://yongpoliu.com/distributed-tx-evolution/\">http://yongpoliu.com/distributed-tx-evolution/</a></p>\n</li>\n<li><p>系统幂等以及常用实现方式<br><a href=\"http://yongpoliu.com/idempotent/\">http://yongpoliu.com/idempotent/</a></p>\n</li>\n<li><p>实现maven依赖的全局排除<br><a href=\"http://maven.apache.org/enforcer/maven-enforcer-plugin/\">http://maven.apache.org/enforcer/maven-enforcer-plugin/</a><br><a href=\"http://yongpoliu.com/maven-global-exclude/\">http://yongpoliu.com/maven-global-exclude/</a></p>\n</li>\n<li><p>bi分析统计工具<br><a href=\"http://www.tableau.com/zh-cn/products/cloud-bi\">http://www.tableau.com/zh-cn/products/cloud-bi</a></p>\n</li>\n<li><p><strong>如何用消息系统避免分布式事务？</strong><br><a href=\"http://www.cnblogs.com/LBSer/p/4715395.html\">http://www.cnblogs.com/LBSer/p/4715395.html</a></p>\n</li>\n<li><p>MySQL两阶段提交<br><a href=\"http://blog.csdn.net/jesseyoung/article/details/37970271\">http://blog.csdn.net/jesseyoung/article/details/37970271</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-11\"><a href=\"#2016-08-11\" class=\"headerlink\" title=\"2016-08-11\"></a>2016-08-11</h3><ul>\n<li><p>Java自动化测试框架TestNG之入门篇<br><a href=\"http://www.jianshu.com/p/a74adec98eff\">http://www.jianshu.com/p/a74adec98eff</a></p>\n</li>\n<li><p>Arquillian Guides<br><a href=\"http://arquillian.org/guides/getting_started/?utm_source=cta\">http://arquillian.org/guides/getting_started/?utm_source=cta</a></p>\n</li>\n<li><p>自动化单元测试实践之路<br><a href=\"http://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices\">http://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices</a></p>\n</li>\n<li><p>8个超实用的Java测试工具和框架<br><a href=\"http://www.imooc.com/article/1154\">http://www.imooc.com/article/1154</a></p>\n</li>\n<li><p>使用 Selenium 实现基于 Web 的自动化测试<br><a href=\"https://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/\">https://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/</a></p>\n</li>\n<li><p>用 STAF+Selenium 实现并行的自动化测试框架<br><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/\">https://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/</a></p>\n</li>\n<li><p>Java Fluent Restful API自动化测试框架<br><a href=\"http://www.cnblogs.com/jinsdu/p/4606113.html\">http://www.cnblogs.com/jinsdu/p/4606113.html</a></p>\n</li>\n<li><p>HTTP API自动化测试从手工到平台的演变<br><a href=\"http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform\">http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform</a></p>\n</li>\n<li><p>快速入门测试驱动开发（TDD）<br><a href=\"http://wwsun.github.io/posts/tdd.html\">http://wwsun.github.io/posts/tdd.html</a></p>\n</li>\n<li><p>使用 REST-Assured 测试 REST API 的进阶技巧和最佳实践<br><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/\">https://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-10\"><a href=\"#2016-08-10\" class=\"headerlink\" title=\"2016-08-10\"></a>2016-08-10</h3><ul>\n<li><p>Sharding-JDBC<br><a href=\"http://dangdangdotcom.github.io/sharding-jdbc/\">http://dangdangdotcom.github.io/sharding-jdbc/</a></p>\n</li>\n<li><p>[blog]庄周梦蝶<br><a href=\"http://fnil.net/\">http://fnil.net/</a></p>\n</li>\n<li><p>Atlas是由 Qihoo 360公司Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目<br><a href=\"https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md\">https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md</a><br><a href=\"https://github.com/Qihoo360/Atlas\">https://github.com/Qihoo360/Atlas</a></p>\n</li>\n<li><p>RDBMS分布式两阶段提交与Zookeeper的Paxos同步算法<br><a href=\"http://blog.csdn.net/victory0508/article/details/48003527\">http://blog.csdn.net/victory0508/article/details/48003527</a></p>\n</li>\n<li><p>分布式系统的事务处理<br><a href=\"http://coolshell.cn/articles/10910.html\">http://coolshell.cn/articles/10910.html</a></p>\n</li>\n<li><p>分布式事务 - 最终一致性(一)<br><a href=\"https://segmentfault.com/a/1190000005969526\">https://segmentfault.com/a/1190000005969526</a></p>\n</li>\n<li><p>介绍下用消息队列实现分布式事务<br><a href=\"http://blog.chinaunix.net/uid-20047304-id-4515035.html\">http://blog.chinaunix.net/uid-20047304-id-4515035.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-08-03\"><a href=\"#2016-08-03\" class=\"headerlink\" title=\"2016-08-03\"></a>2016-08-03</h3><ul>\n<li><p>解放程序猿（媛）的双手—iOS UI自动化测试<br><a href=\"http://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">http://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n<li><p>5小时搞定谷歌原生自动化框架UiAutomator1.0<br><a href=\"http://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/\">http://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/</a></p>\n</li>\n<li><p>有赞延迟队列设计<br><a href=\"http://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">http://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n</li>\n</ul>\n","sticky":0},{"title":"[git]git分支使用和管理","date":"2016-06-06T09:37:36.000Z","_content":"\n## git分支常用命令\n```\n从master创建dev分支，并checkout dev分支：\ngit checkout -b dev\n此命令相当于：\ngit branch dev\ngit checkout dev\n\n回到master，合并dev的更改到master：\ngit checkout master\ngit merge dev\n合并后删除dev分支：\ngit branch -d dev\n\n如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述\ngit merge --no-ff -m \"merge with no-ff\" dev\n```\n\n## 保存临时状态\n当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态\n```\n保存当前开发状态：\ngit stash\n\n查看当前已保存的stash列表：\ngit stash list\n\n取出之前保存的stash状态：\ngit stash pop\n\n\n```\n\n## 多人协作的工作模式\n```\n多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin branch-name推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n小结\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n```","source":"_posts/git-git分支使用和管理.md","raw":"---\ntitle: '[git]git分支使用和管理'\ndate: 2016-06-06 17:37:36\ntags: [git, branch, 版本控制, 分支管理]\n---\n\n## git分支常用命令\n```\n从master创建dev分支，并checkout dev分支：\ngit checkout -b dev\n此命令相当于：\ngit branch dev\ngit checkout dev\n\n回到master，合并dev的更改到master：\ngit checkout master\ngit merge dev\n合并后删除dev分支：\ngit branch -d dev\n\n如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述\ngit merge --no-ff -m \"merge with no-ff\" dev\n```\n\n## 保存临时状态\n当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态\n```\n保存当前开发状态：\ngit stash\n\n查看当前已保存的stash列表：\ngit stash list\n\n取出之前保存的stash状态：\ngit stash pop\n\n\n```\n\n## 多人协作的工作模式\n```\n多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin branch-name推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！\n\n如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n小结\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n```","slug":"git-git分支使用和管理","published":1,"updated":"2016-06-06T13:06:22.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usqo000y00uufxf5uc23","content":"<h2 id=\"git分支常用命令\"><a href=\"#git分支常用命令\" class=\"headerlink\" title=\"git分支常用命令\"></a>git分支常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从master创建dev分支，并checkout dev分支：</span><br><span class=\"line\">git checkout -b dev</span><br><span class=\"line\">此命令相当于：</span><br><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\"></span><br><span class=\"line\">回到master，合并dev的更改到master：</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">合并后删除dev分支：</span><br><span class=\"line\">git branch -d dev</span><br><span class=\"line\"></span><br><span class=\"line\">如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述</span><br><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存临时状态\"><a href=\"#保存临时状态\" class=\"headerlink\" title=\"保存临时状态\"></a>保存临时状态</h2><p>当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">保存当前开发状态：</span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前已保存的stash列表：</span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">取出之前保存的stash状态：</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多人协作的工作模式通常是这样：</span><br><span class=\"line\"></span><br><span class=\"line\">首先，可以试图用git push origin branch-name推送自己的修改；</span><br><span class=\"line\"></span><br><span class=\"line\">如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</span><br><span class=\"line\"></span><br><span class=\"line\">如果合并有冲突，则解决冲突，并在本地提交；</span><br><span class=\"line\"></span><br><span class=\"line\">没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</span><br><span class=\"line\"></span><br><span class=\"line\">如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。</span><br><span class=\"line\"></span><br><span class=\"line\">这就是多人协作的工作模式，一旦熟悉了，就非常简单。</span><br><span class=\"line\"></span><br><span class=\"line\">小结</span><br><span class=\"line\"></span><br><span class=\"line\">查看远程库信息，使用git remote -v；</span><br><span class=\"line\"></span><br><span class=\"line\">本地新建的分支如果不推送到远程，对其他人就是不可见的；</span><br><span class=\"line\"></span><br><span class=\"line\">从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</span><br><span class=\"line\"></span><br><span class=\"line\">在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</span><br><span class=\"line\"></span><br><span class=\"line\">建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；</span><br><span class=\"line\"></span><br><span class=\"line\">从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"git分支常用命令\"><a href=\"#git分支常用命令\" class=\"headerlink\" title=\"git分支常用命令\"></a>git分支常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从master创建dev分支，并checkout dev分支：</span><br><span class=\"line\">git checkout -b dev</span><br><span class=\"line\">此命令相当于：</span><br><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\"></span><br><span class=\"line\">回到master，合并dev的更改到master：</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge dev</span><br><span class=\"line\">合并后删除dev分支：</span><br><span class=\"line\">git branch -d dev</span><br><span class=\"line\"></span><br><span class=\"line\">如果直接用git merge dev合并分支，git使用的是fast forward的模式，并不会留下commit历史，如果想要留下commit历史，就要加上--no-ff参数，并使用-m添加commit描述</span><br><span class=\"line\">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"保存临时状态\"><a href=\"#保存临时状态\" class=\"headerlink\" title=\"保存临时状态\"></a>保存临时状态</h2><p>当你正在dev分支进行开发，还没有开发完成能提交，此时突然有一个线上版本的bug要紧急修复，这个时候你就需要用到git stash功能，保存正在开发的dev分支的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">保存当前开发状态：</span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前已保存的stash列表：</span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">取出之前保存的stash状态：</span><br><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多人协作的工作模式通常是这样：</span><br><span class=\"line\"></span><br><span class=\"line\">首先，可以试图用git push origin branch-name推送自己的修改；</span><br><span class=\"line\"></span><br><span class=\"line\">如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</span><br><span class=\"line\"></span><br><span class=\"line\">如果合并有冲突，则解决冲突，并在本地提交；</span><br><span class=\"line\"></span><br><span class=\"line\">没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</span><br><span class=\"line\"></span><br><span class=\"line\">如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。</span><br><span class=\"line\"></span><br><span class=\"line\">这就是多人协作的工作模式，一旦熟悉了，就非常简单。</span><br><span class=\"line\"></span><br><span class=\"line\">小结</span><br><span class=\"line\"></span><br><span class=\"line\">查看远程库信息，使用git remote -v；</span><br><span class=\"line\"></span><br><span class=\"line\">本地新建的分支如果不推送到远程，对其他人就是不可见的；</span><br><span class=\"line\"></span><br><span class=\"line\">从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</span><br><span class=\"line\"></span><br><span class=\"line\">在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</span><br><span class=\"line\"></span><br><span class=\"line\">建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；</span><br><span class=\"line\"></span><br><span class=\"line\">从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-12-08T15:46:29.737Z","updated":"2016-02-20T04:02:04.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usqs001000uunwfmx43j","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n","sticky":0},{"title":"[java][design-pattern]java设计模式之Builder模式","date":"2016-05-08T08:58:38.000Z","_content":"\n\n## java设计模式之Builder模式\n\n设计模式模式很多，实际常用的很少。\n《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。\n假设有一个entity(Entity)，有id，name两个字段，如下：\n```\npackage demo;\npublic class Entity {\n    private int id;\n    private String name;\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。\n加入构造函数的实体代码如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    public Entity() {\n        super();\n    }\n    public Entity(int id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n然后需要初始化实体的时候，我们这样做：\n```\nEntity entity = new Entity(1, \"name\");\n```\n\n这种用法很常用，但是问题来了。\n当实体Entity的字段需要增加变化的时候怎么办呢？\n比如增加字段descr，这样构造函数和客户端初始化都需要更新：\n实体增加：\n```\n    private String descr;\n    public String getDescr() {\n        return descr;\n    }\n    public void setDescr(String descr) {\n        this.descr = descr;\n    }\n    public Entity(int id, String name, String descr) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.descr = descr;\n    }\n```\n然后原来调用构造函数初始化的代码也需要改动：\n```\nEntity entity = new Entity(1, \"name\", \"descr\");\n```\n如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。\n\n而Effective Java中则推荐一种builder模式来进行实体初始化\n如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    private String descr;\n    public static class Builder {\n        private int id;\n        private String name;\n        private String descr;\n        public Builder(int id) {\n            this.id = id;\n        }\n        public Builder name(String name) {\n            this.name = name;\n            return this;\n        }\n        public Builder descr(String descr) {\n            this.descr = descr;\n            return this;\n        }\n        public Entity build() {\n            return new Entity(this);\n        }\n    }\n    private Entity(Builder b) {\n        this.id = b.id;\n        this.name = b.name;\n        this.descr = b.descr;\n    }\n}\n```\n初始化实例的时候，如下：\n```\nEntity entity = new Entity.Builder(10).name(\"name\").descr(\"descr\").build();\n```\n这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。\n","source":"_posts/java-design-pattern-java设计模式之Builder模式.md","raw":"---\ntitle: '[java][design-pattern]java设计模式之Builder模式'\ndate: 2016-05-08 16:58:38\ntags: [java, 设计模式, Builder, design pattern]\n---\n\n\n## java设计模式之Builder模式\n\n设计模式模式很多，实际常用的很少。\n《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。\n假设有一个entity(Entity)，有id，name两个字段，如下：\n```\npackage demo;\npublic class Entity {\n    private int id;\n    private String name;\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。\n加入构造函数的实体代码如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    public Entity() {\n        super();\n    }\n    public Entity(int id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n然后需要初始化实体的时候，我们这样做：\n```\nEntity entity = new Entity(1, \"name\");\n```\n\n这种用法很常用，但是问题来了。\n当实体Entity的字段需要增加变化的时候怎么办呢？\n比如增加字段descr，这样构造函数和客户端初始化都需要更新：\n实体增加：\n```\n    private String descr;\n    public String getDescr() {\n        return descr;\n    }\n    public void setDescr(String descr) {\n        this.descr = descr;\n    }\n    public Entity(int id, String name, String descr) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.descr = descr;\n    }\n```\n然后原来调用构造函数初始化的代码也需要改动：\n```\nEntity entity = new Entity(1, \"name\", \"descr\");\n```\n如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。\n\n而Effective Java中则推荐一种builder模式来进行实体初始化\n如下：\n```\npublic class Entity {\n    private int id;\n    private String name;\n    private String descr;\n    public static class Builder {\n        private int id;\n        private String name;\n        private String descr;\n        public Builder(int id) {\n            this.id = id;\n        }\n        public Builder name(String name) {\n            this.name = name;\n            return this;\n        }\n        public Builder descr(String descr) {\n            this.descr = descr;\n            return this;\n        }\n        public Entity build() {\n            return new Entity(this);\n        }\n    }\n    private Entity(Builder b) {\n        this.id = b.id;\n        this.name = b.name;\n        this.descr = b.descr;\n    }\n}\n```\n初始化实例的时候，如下：\n```\nEntity entity = new Entity.Builder(10).name(\"name\").descr(\"descr\").build();\n```\n这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。\n","slug":"java-design-pattern-java设计模式之Builder模式","published":1,"updated":"2016-05-08T09:00:12.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usqv001100uuctvseb3z","content":"<h2 id=\"java设计模式之Builder模式\"><a href=\"#java设计模式之Builder模式\" class=\"headerlink\" title=\"java设计模式之Builder模式\"></a>java设计模式之Builder模式</h2><p>设计模式模式很多，实际常用的很少。<br>《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。<br>假设有一个entity(Entity)，有id，name两个字段，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package demo;</span><br><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。<br>加入构造函数的实体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public Entity() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Entity(int id, String name) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后需要初始化实体的时候，我们这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>这种用法很常用，但是问题来了。<br>当实体Entity的字段需要增加变化的时候怎么办呢？<br>比如增加字段descr，这样构造函数和客户端初始化都需要更新：<br>实体增加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String descr;</span><br><span class=\"line\">public String getDescr() &#123;</span><br><span class=\"line\">    return descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void setDescr(String descr) &#123;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Entity(int id, String name, String descr) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后原来调用构造函数初始化的代码也需要改动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;, &quot;descr&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。</p>\n<p>而Effective Java中则推荐一种builder模式来进行实体初始化<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String descr;</span><br><span class=\"line\">    public static class Builder &#123;</span><br><span class=\"line\">        private int id;</span><br><span class=\"line\">        private String name;</span><br><span class=\"line\">        private String descr;</span><br><span class=\"line\">        public Builder(int id) &#123;</span><br><span class=\"line\">            this.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder name(String name) &#123;</span><br><span class=\"line\">            this.name = name;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder descr(String descr) &#123;</span><br><span class=\"line\">            this.descr = descr;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Entity build() &#123;</span><br><span class=\"line\">            return new Entity(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private Entity(Builder b) &#123;</span><br><span class=\"line\">        this.id = b.id;</span><br><span class=\"line\">        this.name = b.name;</span><br><span class=\"line\">        this.descr = b.descr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化实例的时候，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity.Builder(10).name(&quot;name&quot;).descr(&quot;descr&quot;).build();</span><br></pre></td></tr></table></figure></p>\n<p>这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。</p>\n","excerpt":"","more":"<h2 id=\"java设计模式之Builder模式\"><a href=\"#java设计模式之Builder模式\" class=\"headerlink\" title=\"java设计模式之Builder模式\"></a>java设计模式之Builder模式</h2><p>设计模式模式很多，实际常用的很少。<br>《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。<br>假设有一个entity(Entity)，有id，name两个字段，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package demo;</span><br><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。<br>加入构造函数的实体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    public Entity() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Entity(int id, String name) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setId(int id) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后需要初始化实体的时候，我们这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>这种用法很常用，但是问题来了。<br>当实体Entity的字段需要增加变化的时候怎么办呢？<br>比如增加字段descr，这样构造函数和客户端初始化都需要更新：<br>实体增加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private String descr;</span><br><span class=\"line\">public String getDescr() &#123;</span><br><span class=\"line\">    return descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void setDescr(String descr) &#123;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Entity(int id, String name, String descr) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.descr = descr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后原来调用构造函数初始化的代码也需要改动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity(1, &quot;name&quot;, &quot;descr&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。</p>\n<p>而Effective Java中则推荐一种builder模式来进行实体初始化<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Entity &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String descr;</span><br><span class=\"line\">    public static class Builder &#123;</span><br><span class=\"line\">        private int id;</span><br><span class=\"line\">        private String name;</span><br><span class=\"line\">        private String descr;</span><br><span class=\"line\">        public Builder(int id) &#123;</span><br><span class=\"line\">            this.id = id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder name(String name) &#123;</span><br><span class=\"line\">            this.name = name;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Builder descr(String descr) &#123;</span><br><span class=\"line\">            this.descr = descr;</span><br><span class=\"line\">            return this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Entity build() &#123;</span><br><span class=\"line\">            return new Entity(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private Entity(Builder b) &#123;</span><br><span class=\"line\">        this.id = b.id;</span><br><span class=\"line\">        this.name = b.name;</span><br><span class=\"line\">        this.descr = b.descr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>初始化实例的时候，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entity entity = new Entity.Builder(10).name(&quot;name&quot;).descr(&quot;descr&quot;).build();</span><br></pre></td></tr></table></figure></p>\n<p>这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。</p>\n","sticky":0},{"title":"git如何使用-记一些常用的git使用方法","date":"2017-03-11T07:47:31.000Z","_content":"\n1. git如何提交修改到远程仓库？\n    - $ git commit –m \"desc..\"  //对你更新或修改了哪些内容做一个描述\n    - $ git remote add origin https://github.com/YihuaWanglv/post.git\n    //如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。\n    - $ git push -u origin master  //将本地的项目提交到远程仓库中\n\n2. 如果你是第一次想把github上面的项目克隆到本地或者要克隆别人的项目到地。\n    - $ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。\n\n3. 假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？\n    - $ git fetch origin    //取得远程更新，这里可以看做是准备要取了\n    - $ git merge origin/master  //把更新的内容合并到本地分支/master\n\n4. 添加和提交\n    - git add *\n    - git commit -m \"代码提交信息\"\n    - git push origin master\n    - 输入用户名密码\n    - 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n    - git remote add origin <server>\n5. 重装系统后，git项目如何恢复？\n    - 本地先进入原项目路径，git clone [path of project], 连接上\n    - 然后告诉git全局配置你是谁，输入你的邮箱和名称\n    - git config --global user.email \"you@example.com\"\n    - git config --global user.name \"Your Name\"\n    - 然后该干嘛干嘛\n\n\n","source":"_posts/git如何使用-记一些常用的git使用方法.md","raw":"---\ntitle: git如何使用-记一些常用的git使用方法\ndate: 2017-03-11 15:47:31\ntags: [git, github, 使用方法]\n---\n\n1. git如何提交修改到远程仓库？\n    - $ git commit –m \"desc..\"  //对你更新或修改了哪些内容做一个描述\n    - $ git remote add origin https://github.com/YihuaWanglv/post.git\n    //如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。\n    - $ git push -u origin master  //将本地的项目提交到远程仓库中\n\n2. 如果你是第一次想把github上面的项目克隆到本地或者要克隆别人的项目到地。\n    - $ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。\n\n3. 假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？\n    - $ git fetch origin    //取得远程更新，这里可以看做是准备要取了\n    - $ git merge origin/master  //把更新的内容合并到本地分支/master\n\n4. 添加和提交\n    - git add *\n    - git commit -m \"代码提交信息\"\n    - git push origin master\n    - 输入用户名密码\n    - 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n    - git remote add origin <server>\n5. 重装系统后，git项目如何恢复？\n    - 本地先进入原项目路径，git clone [path of project], 连接上\n    - 然后告诉git全局配置你是谁，输入你的邮箱和名称\n    - git config --global user.email \"you@example.com\"\n    - git config --global user.name \"Your Name\"\n    - 然后该干嘛干嘛\n\n\n","slug":"git如何使用-记一些常用的git使用方法","published":1,"updated":"2017-03-11T07:49:37.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usr4001300uuqz2jfj4e","content":"<ol>\n<li><p>git如何提交修改到远程仓库？</p>\n<ul>\n<li>$ git commit –m “desc..”  //对你更新或修改了哪些内容做一个描述</li>\n<li>$ git remote add origin <a href=\"https://github.com/YihuaWanglv/post.git\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/post.git</a><br>//如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。</li>\n<li>$ git push -u origin master  //将本地的项目提交到远程仓库中</li>\n</ul>\n</li>\n<li><p>如果你是第一次想把github上面的项目克隆到本地或者要克隆别人的项目到地。</p>\n<ul>\n<li>$ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。</li>\n</ul>\n</li>\n<li><p>假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？</p>\n<ul>\n<li>$ git fetch origin    //取得远程更新，这里可以看做是准备要取了</li>\n<li>$ git merge origin/master  //把更新的内容合并到本地分支/master</li>\n</ul>\n</li>\n<li><p>添加和提交</p>\n<ul>\n<li>git add *</li>\n<li>git commit -m “代码提交信息”</li>\n<li>git push origin master</li>\n<li>输入用户名密码</li>\n<li>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</li>\n<li>git remote add origin <server></server></li>\n</ul>\n</li>\n<li>重装系统后，git项目如何恢复？<ul>\n<li>本地先进入原项目路径，git clone [path of project], 连接上</li>\n<li>然后告诉git全局配置你是谁，输入你的邮箱和名称</li>\n<li>git config –global user.email “you@example.com”</li>\n<li>git config –global user.name “Your Name”</li>\n<li>然后该干嘛干嘛</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>git如何提交修改到远程仓库？</p>\n<ul>\n<li>$ git commit –m “desc..”  //对你更新或修改了哪些内容做一个描述</li>\n<li>$ git remote add origin <a href=\"https://github.com/YihuaWanglv/post.git\">https://github.com/YihuaWanglv/post.git</a><br>//如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。</li>\n<li>$ git push -u origin master  //将本地的项目提交到远程仓库中</li>\n</ul>\n</li>\n<li><p>如果你是第一次想把github上面的项目克隆到本地或者要克隆别人的项目到地。</p>\n<ul>\n<li>$ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。</li>\n</ul>\n</li>\n<li><p>假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？</p>\n<ul>\n<li>$ git fetch origin    //取得远程更新，这里可以看做是准备要取了</li>\n<li>$ git merge origin/master  //把更新的内容合并到本地分支/master</li>\n</ul>\n</li>\n<li><p>添加和提交</p>\n<ul>\n<li>git add *</li>\n<li>git commit -m “代码提交信息”</li>\n<li>git push origin master</li>\n<li>输入用户名密码</li>\n<li>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</li>\n<li>git remote add origin <server></li>\n</ul>\n</li>\n<li>重装系统后，git项目如何恢复？<ul>\n<li>本地先进入原项目路径，git clone [path of project], 连接上</li>\n<li>然后告诉git全局配置你是谁，输入你的邮箱和名称</li>\n<li>git config –global user.email “you@example.com”</li>\n<li>git config –global user.name “Your Name”</li>\n<li>然后该干嘛干嘛</li>\n</ul>\n</li>\n</ol>\n","sticky":0},{"title":"java static 关键字总结","date":"2016-05-08T16:11:19.000Z","_content":"\n\n## 总结：\n### 1.\n修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；\n\n### 2.\n修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。\n该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。\n也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的\n\n### 3.\n普通类不允许被声明为静态的，只有一个内部类可以。\n被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。\n\n\n\n\n## 详述：\n### 1.\n static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 \n\n　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 \n\n　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 \n\n　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 \n\n　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为： \n类名.静态方法名(参数列表...) \n类名.静态变量名 \n\n　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 \n\n### 2.static变量 \n　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是： \n　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。 \n　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 \n\n### 3.static方法 \n　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！ \n　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。\n","source":"_posts/java-static-关键字总结.md","raw":"---\ntitle: java static 关键字总结\ndate: 2016-05-09 00:11:19\ntags: [java, static关键字]\n---\n\n\n## 总结：\n### 1.\n修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；\n\n### 2.\n修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。\n该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。\n也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的\n\n### 3.\n普通类不允许被声明为静态的，只有一个内部类可以。\n被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。\n\n\n\n\n## 详述：\n### 1.\n static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 \n\n　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 \n\n　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 \n\n　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 \n\n　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为： \n类名.静态方法名(参数列表...) \n类名.静态变量名 \n\n　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 \n\n### 2.static变量 \n　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是： \n　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。 \n　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 \n\n### 3.static方法 \n　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！ \n　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。\n","slug":"java-static-关键字总结","published":1,"updated":"2016-05-08T16:14:15.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usr7001400uul3tljwrf","content":"<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p>修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><p>修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。<br>该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。<br>也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><p>普通类不允许被声明为静态的，只有一个内部类可以。<br>被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。</p>\n<h2 id=\"详述：\"><a href=\"#详述：\" class=\"headerlink\" title=\"详述：\"></a>详述：</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p> static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 </p>\n<p>　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 </p>\n<p>　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 </p>\n<p>　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用–废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 </p>\n<p>　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：<br>类名.静态方法名(参数列表…)<br>类名.静态变量名 </p>\n<p>　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 </p>\n<h3 id=\"2-static变量\"><a href=\"#2-static变量\" class=\"headerlink\" title=\"2.static变量\"></a>2.static变量</h3><p>　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：<br>　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。<br>　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 </p>\n<h3 id=\"3-static方法\"><a href=\"#3-static方法\" class=\"headerlink\" title=\"3.static方法\"></a>3.static方法</h3><p>　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！<br>　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</p>\n","excerpt":"","more":"<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p>修饰方法时，表示该方法是静态方法，表示该类的该方法可以不产生实例而直接通过类名加方法名的方法去执行该静态方法；</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h3><p>修饰变量时，表示该变量是静态变量，在java里可以理解为静态变量全局变量。<br>该类的所有实例共享此静态变量，类装载时，只会分配一块存储空间，所有此类对象可以操作此块存储空间。<br>也就是说，static修饰的静态变量也是可以直接通过类名加变量名直接使用的</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3><p>普通类不允许被声明为静态的，只有一个内部类可以。<br>被声明为静态的内部类，可以直接作为一个普通类来使用，而不需要一个外部类了。</p>\n<h2 id=\"详述：\"><a href=\"#详述：\" class=\"headerlink\" title=\"详述：\"></a>详述：</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.\"></a>1.</h3><p> static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。 </p>\n<p>　被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 </p>\n<p>　用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。 </p>\n<p>　static 变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用–废话），但是不能在其他类中通过类名来直接引用，这一点很重要。实际上你需要搞明白，private是访问权限限定，static表示不要实例化就可以使用，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。 </p>\n<p>　static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：<br>类名.静态方法名(参数列表…)<br>类名.静态变量名 </p>\n<p>　用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。 </p>\n<h3 id=\"2-static变量\"><a href=\"#2-static变量\" class=\"headerlink\" title=\"2.static变量\"></a>2.static变量</h3><p>　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：<br>　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。<br>　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 </p>\n<h3 id=\"3-static方法\"><a href=\"#3-static方法\" class=\"headerlink\" title=\"3.static方法\"></a>3.static方法</h3><p>　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法 (就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！<br>　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</p>\n","sticky":0},{"title":"[git]git常用-把本地项目提交到github","date":"2015-12-31T10:04:12.000Z","_content":"\n### 1.把本地项目提交到github\ntouch README.md //新建说明文件\ngit init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录\ngit add . //添加当前目录中的所有文件到索引\ngit commit -m \"first commit\" //提交到本地源码库，并附加提交注释\ngit remote add origin https://github.com/chape/test.git //添加到远程项目，别名为origin\ngit push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交\n\n\n### 2.如果有error: failed to push some refs to 'https://github.com/YihuaWanglv/myhexo.git'\n有如下几种解决方法：\n\n1.使用强制push的方法：\n$ git push -u origin master -f \n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n2.push前先将远程repository修改pull下来\n$ git pull origin master\n$ git push -u origin master\n3.若不想merge远程和本地修改，可以先创建新的分支：\n$ git branch [name]\n然后push\n$ git push -u origin [name]\n\n\n","source":"_posts/git-git常用-把本地项目提交到github.md","raw":"---\ntitle: '[git]git常用-把本地项目提交到github'\ndate: 2015-12-31 18:04:12\ntags: [git]\n---\n\n### 1.把本地项目提交到github\ntouch README.md //新建说明文件\ngit init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录\ngit add . //添加当前目录中的所有文件到索引\ngit commit -m \"first commit\" //提交到本地源码库，并附加提交注释\ngit remote add origin https://github.com/chape/test.git //添加到远程项目，别名为origin\ngit push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交\n\n\n### 2.如果有error: failed to push some refs to 'https://github.com/YihuaWanglv/myhexo.git'\n有如下几种解决方法：\n\n1.使用强制push的方法：\n$ git push -u origin master -f \n这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。\n2.push前先将远程repository修改pull下来\n$ git pull origin master\n$ git push -u origin master\n3.若不想merge远程和本地修改，可以先创建新的分支：\n$ git branch [name]\n然后push\n$ git push -u origin [name]\n\n\n","slug":"git-git常用-把本地项目提交到github","published":1,"updated":"2016-02-20T04:02:04.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usrd001600uurpv3lqeu","content":"<h3 id=\"1-把本地项目提交到github\"><a href=\"#1-把本地项目提交到github\" class=\"headerlink\" title=\"1.把本地项目提交到github\"></a>1.把本地项目提交到github</h3><p>touch README.md //新建说明文件<br>git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录<br>git add . //添加当前目录中的所有文件到索引<br>git commit -m “first commit” //提交到本地源码库，并附加提交注释<br>git remote add origin <a href=\"https://github.com/chape/test.git\" target=\"_blank\" rel=\"external\">https://github.com/chape/test.git</a> //添加到远程项目，别名为origin<br>git push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交</p>\n<h3 id=\"2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\"><a href=\"#2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\" class=\"headerlink\" title=\"2.如果有error: failed to push some refs to ‘https://github.com/YihuaWanglv/myhexo.git‘\"></a>2.如果有error: failed to push some refs to ‘<a href=\"https://github.com/YihuaWanglv/myhexo.git\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/myhexo.git</a>‘</h3><p>有如下几种解决方法：</p>\n<p>1.使用强制push的方法：<br>$ git push -u origin master -f<br>这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。<br>2.push前先将远程repository修改pull下来<br>$ git pull origin master<br>$ git push -u origin master<br>3.若不想merge远程和本地修改，可以先创建新的分支：<br>$ git branch [name]<br>然后push<br>$ git push -u origin [name]</p>\n","excerpt":"","more":"<h3 id=\"1-把本地项目提交到github\"><a href=\"#1-把本地项目提交到github\" class=\"headerlink\" title=\"1.把本地项目提交到github\"></a>1.把本地项目提交到github</h3><p>touch README.md //新建说明文件<br>git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录<br>git add . //添加当前目录中的所有文件到索引<br>git commit -m “first commit” //提交到本地源码库，并附加提交注释<br>git remote add origin <a href=\"https://github.com/chape/test.git\">https://github.com/chape/test.git</a> //添加到远程项目，别名为origin<br>git push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交</p>\n<h3 id=\"2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\"><a href=\"#2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘\" class=\"headerlink\" title=\"2.如果有error: failed to push some refs to ‘https://github.com/YihuaWanglv/myhexo.git‘\"></a>2.如果有error: failed to push some refs to ‘<a href=\"https://github.com/YihuaWanglv/myhexo.git\">https://github.com/YihuaWanglv/myhexo.git</a>‘</h3><p>有如下几种解决方法：</p>\n<p>1.使用强制push的方法：<br>$ git push -u origin master -f<br>这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。<br>2.push前先将远程repository修改pull下来<br>$ git pull origin master<br>$ git push -u origin master<br>3.若不想merge远程和本地修改，可以先创建新的分支：<br>$ git branch [name]<br>然后push<br>$ git push -u origin [name]</p>\n","sticky":0},{"title":"[java]从代码中去除if-else","date":"2016-02-02T08:09:30.000Z","_content":"\n有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？\n\n首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。\n\n当判断到确实需要优化if else，方法有很多，总结如下。\n1. 使用map.\n2. 使用枚举.\n3. 多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。\n当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。\n\n下面举例。\n要优化的原if else语句：\n```\nint code;\nif(\"Name\".equals(str))\n    code = 0;\nelse if(\"Age\".equals(str))\n    code = 1;\nelse if(\"Address\".equals(str))\n    code = 2;\n```\n\n## 使用map优化\n```\npublic final static Map map = new HashMap();  \nstatic {  \n    map.put(\"Name\", 0);  \n    map.put(\"Age\", 1);\n    map.put(\"Address\", 2);  \n}\n\nint code = map.get(type);\n```\n\n## 使用枚举优化\n```\npublic enum Codes {\n    Name(0), Age(1), Address(2);\n    public int code;\n    Codes(int code){\n        this.code = code;\n    }\n}\n\nint code = Codes.valueOf(str).code;\n```\n\n## 使用多态优化\n```\nICode iCode = (ICode)Class.forName(\"com.xxx.\" + str).newInstance();\n\nint code = iCode.getCode();\n```\n\n\n## “责任链”如何优化if else？\n首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。\n\n好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。\n\n现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。\n\n好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。\n\n现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。\n\n到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）\n\n最后，我们为了交流方便，把这种组合方式称为“责任链”。\n\n\n## 使用状态模式优化if else\n参考：http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html","source":"_posts/java-从代码中去除if-else.md","raw":"---\ntitle: '[java]从代码中去除if-else'\ndate: 2016-02-02 16:09:30\ntags: [java,patten,coding]\n---\n\n有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？\n\n首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。\n\n当判断到确实需要优化if else，方法有很多，总结如下。\n1. 使用map.\n2. 使用枚举.\n3. 多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。\n当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。\n\n下面举例。\n要优化的原if else语句：\n```\nint code;\nif(\"Name\".equals(str))\n    code = 0;\nelse if(\"Age\".equals(str))\n    code = 1;\nelse if(\"Address\".equals(str))\n    code = 2;\n```\n\n## 使用map优化\n```\npublic final static Map map = new HashMap();  \nstatic {  \n    map.put(\"Name\", 0);  \n    map.put(\"Age\", 1);\n    map.put(\"Address\", 2);  \n}\n\nint code = map.get(type);\n```\n\n## 使用枚举优化\n```\npublic enum Codes {\n    Name(0), Age(1), Address(2);\n    public int code;\n    Codes(int code){\n        this.code = code;\n    }\n}\n\nint code = Codes.valueOf(str).code;\n```\n\n## 使用多态优化\n```\nICode iCode = (ICode)Class.forName(\"com.xxx.\" + str).newInstance();\n\nint code = iCode.getCode();\n```\n\n\n## “责任链”如何优化if else？\n首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。\n\n好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。\n\n现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。\n\n好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。\n\n现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。\n\n到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）\n\n最后，我们为了交流方便，把这种组合方式称为“责任链”。\n\n\n## 使用状态模式优化if else\n参考：http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html","slug":"java-从代码中去除if-else","published":1,"updated":"2016-02-20T04:02:04.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usrm001800uuu57gw83p","content":"<p>有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？</p>\n<p>首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。</p>\n<p>当判断到确实需要优化if else，方法有很多，总结如下。</p>\n<ol>\n<li>使用map.</li>\n<li>使用枚举.</li>\n<li>多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。<br>当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。</li>\n</ol>\n<p>下面举例。<br>要优化的原if else语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int code;</span><br><span class=\"line\">if(&quot;Name&quot;.equals(str))</span><br><span class=\"line\">    code = 0;</span><br><span class=\"line\">else if(&quot;Age&quot;.equals(str))</span><br><span class=\"line\">    code = 1;</span><br><span class=\"line\">else if(&quot;Address&quot;.equals(str))</span><br><span class=\"line\">    code = 2;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用map优化\"><a href=\"#使用map优化\" class=\"headerlink\" title=\"使用map优化\"></a>使用map优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final static Map map = new HashMap();  </span><br><span class=\"line\">static &#123;  </span><br><span class=\"line\">    map.put(&quot;Name&quot;, 0);  </span><br><span class=\"line\">    map.put(&quot;Age&quot;, 1);</span><br><span class=\"line\">    map.put(&quot;Address&quot;, 2);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = map.get(type);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用枚举优化\"><a href=\"#使用枚举优化\" class=\"headerlink\" title=\"使用枚举优化\"></a>使用枚举优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Codes &#123;</span><br><span class=\"line\">    Name(0), Age(1), Address(2);</span><br><span class=\"line\">    public int code;</span><br><span class=\"line\">    Codes(int code)&#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = Codes.valueOf(str).code;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用多态优化\"><a href=\"#使用多态优化\" class=\"headerlink\" title=\"使用多态优化\"></a>使用多态优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ICode iCode = (ICode)Class.forName(&quot;com.xxx.&quot; + str).newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">int code = iCode.getCode();</span><br></pre></td></tr></table></figure>\n<h2 id=\"“责任链”如何优化if-else？\"><a href=\"#“责任链”如何优化if-else？\" class=\"headerlink\" title=\"“责任链”如何优化if else？\"></a>“责任链”如何优化if else？</h2><p>首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。</p>\n<p>好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。</p>\n<p>现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。</p>\n<p>好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。</p>\n<p>现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。</p>\n<p>到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）</p>\n<p>最后，我们为了交流方便，把这种组合方式称为“责任链”。</p>\n<h2 id=\"使用状态模式优化if-else\"><a href=\"#使用状态模式优化if-else\" class=\"headerlink\" title=\"使用状态模式优化if else\"></a>使用状态模式优化if else</h2><p>参考：<a href=\"http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html\" target=\"_blank\" rel=\"external\">http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html</a></p>\n","excerpt":"","more":"<p>有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？</p>\n<p>首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。</p>\n<p>当判断到确实需要优化if else，方法有很多，总结如下。</p>\n<ol>\n<li>使用map.</li>\n<li>使用枚举.</li>\n<li>多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。<br>当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。</li>\n</ol>\n<p>下面举例。<br>要优化的原if else语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int code;</span><br><span class=\"line\">if(&quot;Name&quot;.equals(str))</span><br><span class=\"line\">    code = 0;</span><br><span class=\"line\">else if(&quot;Age&quot;.equals(str))</span><br><span class=\"line\">    code = 1;</span><br><span class=\"line\">else if(&quot;Address&quot;.equals(str))</span><br><span class=\"line\">    code = 2;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用map优化\"><a href=\"#使用map优化\" class=\"headerlink\" title=\"使用map优化\"></a>使用map优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final static Map map = new HashMap();  </span><br><span class=\"line\">static &#123;  </span><br><span class=\"line\">    map.put(&quot;Name&quot;, 0);  </span><br><span class=\"line\">    map.put(&quot;Age&quot;, 1);</span><br><span class=\"line\">    map.put(&quot;Address&quot;, 2);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = map.get(type);</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用枚举优化\"><a href=\"#使用枚举优化\" class=\"headerlink\" title=\"使用枚举优化\"></a>使用枚举优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Codes &#123;</span><br><span class=\"line\">    Name(0), Age(1), Address(2);</span><br><span class=\"line\">    public int code;</span><br><span class=\"line\">    Codes(int code)&#123;</span><br><span class=\"line\">        this.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int code = Codes.valueOf(str).code;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用多态优化\"><a href=\"#使用多态优化\" class=\"headerlink\" title=\"使用多态优化\"></a>使用多态优化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ICode iCode = (ICode)Class.forName(&quot;com.xxx.&quot; + str).newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">int code = iCode.getCode();</span><br></pre></td></tr></table></figure>\n<h2 id=\"“责任链”如何优化if-else？\"><a href=\"#“责任链”如何优化if-else？\" class=\"headerlink\" title=\"“责任链”如何优化if else？\"></a>“责任链”如何优化if else？</h2><p>首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。</p>\n<p>好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。</p>\n<p>现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。</p>\n<p>好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。</p>\n<p>现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。</p>\n<p>到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）</p>\n<p>最后，我们为了交流方便，把这种组合方式称为“责任链”。</p>\n<h2 id=\"使用状态模式优化if-else\"><a href=\"#使用状态模式优化if-else\" class=\"headerlink\" title=\"使用状态模式优化if else\"></a>使用状态模式优化if else</h2><p>参考：<a href=\"http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html\">http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html</a></p>\n","sticky":0},{"title":"java-io体系整理","date":"2016-02-20T04:20:38.000Z","_content":"\n### java io体系使用整理\n- 来源：http://www.importnew.com/17714.html\n- 思维导图：http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\n\n![](/images/java+io.png)","source":"_posts/java-io体系整理.md","raw":"---\ntitle: java-io体系整理\ndate: 2016-02-20 12:20:38\ntags: [java,io,整理,思维导图]\n---\n\n### java io体系使用整理\n- 来源：http://www.importnew.com/17714.html\n- 思维导图：http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\n\n![](/images/java+io.png)","slug":"java-io体系整理","published":1,"updated":"2016-02-20T04:39:58.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usrs001b00uugd18o4ir","content":"<h3 id=\"java-io体系使用整理\"><a href=\"#java-io体系使用整理\" class=\"headerlink\" title=\"java io体系使用整理\"></a>java io体系使用整理</h3><ul>\n<li>来源：<a href=\"http://www.importnew.com/17714.html\" target=\"_blank\" rel=\"external\">http://www.importnew.com/17714.html</a></li>\n<li>思维导图：<a href=\"http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\" target=\"_blank\" rel=\"external\">http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f</a></li>\n</ul>\n<p><img src=\"/images/java+io.png\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"java-io体系使用整理\"><a href=\"#java-io体系使用整理\" class=\"headerlink\" title=\"java io体系使用整理\"></a>java io体系使用整理</h3><ul>\n<li>来源：<a href=\"http://www.importnew.com/17714.html\">http://www.importnew.com/17714.html</a></li>\n<li>思维导图：<a href=\"http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f\">http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f</a></li>\n</ul>\n<p><img src=\"/images/java+io.png\" alt=\"\"></p>\n","sticky":0},{"title":"[dev][collect][2016-07]collect-of-dev","date":"2016-08-03T05:21:52.000Z","_content":"\n## 2016-07\n\n### 2016-07-29\n- 搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台\nhttps://www.iamle.com/archives/2058.html\n\n### 2016-07-23\n- discover meteor\nhttp://zh.discovermeteor.com/chapters/introduction/\n\n- webpack gitbook\nhttps://hulufei.gitbooks.io/react-tutorial/content/webpack.html\n\n\n\n### 2016-07-22\n- Spring Boot应用的测试——Mockito\nhttp://www.jianshu.com/p/972cd6b93206\n\n- 利用Mockito模拟DB\nhttp://www.jianshu.com/p/c1c495f231ea\n\n- 在Spring Boot项目中使用Spock框架\nhttp://www.jianshu.com/p/f1e354d382cd\n\n- Spring Boot Testing\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\n\n- Integration Testing a Spring Boot Application\nhttps://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\n\n\n### 2016-07-21\n- Growth: 全栈增长工程师指南\nhttp://growth.phodal.com/#\n\n### 2016-07-19\n- 微服务架构的分布式事务解决方案\nhttp://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\n\n### 2016-07-16\n- 使用 Vaadin 实现全堆栈 Java Web 开发\nhttp://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\n\n- Creating CRUD UI with Vaadin\nhttps://spring.io/guides/gs/crud-with-vaadin/\ngit clone https://github.com/spring-guides/gs-crud-with-vaadin.git\n\n- 当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用\nhttp://www.infoq.com/cn/news/2014/10/dubbox-open-source\n\n- 在Dubbo中开发REST风格的远程调用（RESTful Remoting）\nhttp://dangdangdotcom.github.io/dubbox/rest.html\n\n- 使用JavaConfig方式配置dubbox\nhttp://dangdangdotcom.github.io/dubbox/java-config.html\n\n- Microservices with Spring\nhttps://spring.io/blog/2015/07/14/microservices-with-spring\n\n### 2016-07-14\n- Import/Read excel file 2003 or 2007 with Spring MVC\nhttp://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\n- SPRING BOOT FILE UPLOAD WITH AJAX\nhttp://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\nhttps://github.com/netgloo/spring-boot-samples\n\n\n### 2016-07-13\n- cSphere Docker 实训课程\nhttp://git.oschina.net/dockerf/docker-training\n\n- Spring Cloud方面的博客\nhttp://blog.didispace.com/\n\n- 白话 IT 之浅谈 ELK 日志系统\nhttps://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&mid=2653788351&idx=1&sn=a38a0b95b63186b789423195fa09f91d&scene=0&key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&ascene=0&uin=MTM4NTI5NTI4Mg%3D%3D&devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&version=11020201&pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\n\n- 用户行为分析项目\nhttps://github.com/YihuaWanglv/piwik\n\n### 2016-07-12\n- 使用API网关构建微服务\nhttp://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\n\n- 使用Spring Cloud和Docker构建微服务\nhttp://www.dockone.io/article/510\n原文链接：\nhttp://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\n\n- The API Gateway Pattern: Angular JS and Spring Security Part IV\nhttps://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\n\n- git demo for spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-cloud-microservice-example\n\n- Implementing Netflix Zuul in Spring Cloud\nhttp://kubecloud.io/apigatewaypattern/\nhttp://start.spring.io/\n\n\n### 2016-07-11\n- 使用 Vuex + Vue.js 构建单页应用\nhttps://segmentfault.com/a/1190000005891026\nhttps://github.com/lichenbuliren/vuex-notes-app\n\n- 两篇关于微服务api gateway的著名文章\nhttp://microservices.io/patterns/apigateway.html\nhttps://www.nginx.com/blog/building-microservices-using-an-api-gateway/\n\n\n### 2016-07-08\n- 使用spring boot和thrift、zookeeper建立微服务\nhttp://www.cnblogs.com/skyblog/p/5535418.html\n\n- Jenkins+Docker搭建持续集成测试环境\nhttp://www.dockone.io/article/1464\n\n- spring boot+spring cloud服务化系列博客\nhttp://www.cnblogs.com/skyblog/category/774535.html\n\n\n\n### 2016-07-06\n- 使用Jenkins搭建iOS/Android持续集成打包平台\nhttp://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\n\n- React-Native For Android 环境搭建及踩坑\nhttp://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\n\n- React Native 开发培训免费书\nhttps://unbug.gitbooks.io/react-native-training/content/\n\n- Android Studio插件整理\nhttps://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\n\n- FastDFS + Nginx 反向代理缓存 安装与配置\nhttp://www.linux178.com/storage/fastdfs-nginx-cache.html\n","source":"_posts/dev-collect-2016-07-collect-of-dev.md","raw":"---\ntitle: '[dev][collect][2016-07]collect-of-dev'\ndate: 2016-08-03 13:21:52\ntags: [collect, dev, java, android, collect-of-dev]\n---\n\n## 2016-07\n\n### 2016-07-29\n- 搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台\nhttps://www.iamle.com/archives/2058.html\n\n### 2016-07-23\n- discover meteor\nhttp://zh.discovermeteor.com/chapters/introduction/\n\n- webpack gitbook\nhttps://hulufei.gitbooks.io/react-tutorial/content/webpack.html\n\n\n\n### 2016-07-22\n- Spring Boot应用的测试——Mockito\nhttp://www.jianshu.com/p/972cd6b93206\n\n- 利用Mockito模拟DB\nhttp://www.jianshu.com/p/c1c495f231ea\n\n- 在Spring Boot项目中使用Spock框架\nhttp://www.jianshu.com/p/f1e354d382cd\n\n- Spring Boot Testing\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\n\n- Integration Testing a Spring Boot Application\nhttps://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\n\n\n### 2016-07-21\n- Growth: 全栈增长工程师指南\nhttp://growth.phodal.com/#\n\n### 2016-07-19\n- 微服务架构的分布式事务解决方案\nhttp://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\n\n### 2016-07-16\n- 使用 Vaadin 实现全堆栈 Java Web 开发\nhttp://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\n\n- Creating CRUD UI with Vaadin\nhttps://spring.io/guides/gs/crud-with-vaadin/\ngit clone https://github.com/spring-guides/gs-crud-with-vaadin.git\n\n- 当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用\nhttp://www.infoq.com/cn/news/2014/10/dubbox-open-source\n\n- 在Dubbo中开发REST风格的远程调用（RESTful Remoting）\nhttp://dangdangdotcom.github.io/dubbox/rest.html\n\n- 使用JavaConfig方式配置dubbox\nhttp://dangdangdotcom.github.io/dubbox/java-config.html\n\n- Microservices with Spring\nhttps://spring.io/blog/2015/07/14/microservices-with-spring\n\n### 2016-07-14\n- Import/Read excel file 2003 or 2007 with Spring MVC\nhttp://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\n- SPRING BOOT FILE UPLOAD WITH AJAX\nhttp://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\nhttps://github.com/netgloo/spring-boot-samples\n\n\n### 2016-07-13\n- cSphere Docker 实训课程\nhttp://git.oschina.net/dockerf/docker-training\n\n- Spring Cloud方面的博客\nhttp://blog.didispace.com/\n\n- 白话 IT 之浅谈 ELK 日志系统\nhttps://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&mid=2653788351&idx=1&sn=a38a0b95b63186b789423195fa09f91d&scene=0&key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&ascene=0&uin=MTM4NTI5NTI4Mg%3D%3D&devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&version=11020201&pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\n\n- 用户行为分析项目\nhttps://github.com/YihuaWanglv/piwik\n\n### 2016-07-12\n- 使用API网关构建微服务\nhttp://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\n\n- 使用Spring Cloud和Docker构建微服务\nhttp://www.dockone.io/article/510\n原文链接：\nhttp://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\n\n- The API Gateway Pattern: Angular JS and Spring Security Part IV\nhttps://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\n\n- git demo for spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-boot-microservices\nhttps://github.com/YihuaWanglv/spring-cloud-microservice-example\n\n- Implementing Netflix Zuul in Spring Cloud\nhttp://kubecloud.io/apigatewaypattern/\nhttp://start.spring.io/\n\n\n### 2016-07-11\n- 使用 Vuex + Vue.js 构建单页应用\nhttps://segmentfault.com/a/1190000005891026\nhttps://github.com/lichenbuliren/vuex-notes-app\n\n- 两篇关于微服务api gateway的著名文章\nhttp://microservices.io/patterns/apigateway.html\nhttps://www.nginx.com/blog/building-microservices-using-an-api-gateway/\n\n\n### 2016-07-08\n- 使用spring boot和thrift、zookeeper建立微服务\nhttp://www.cnblogs.com/skyblog/p/5535418.html\n\n- Jenkins+Docker搭建持续集成测试环境\nhttp://www.dockone.io/article/1464\n\n- spring boot+spring cloud服务化系列博客\nhttp://www.cnblogs.com/skyblog/category/774535.html\n\n\n\n### 2016-07-06\n- 使用Jenkins搭建iOS/Android持续集成打包平台\nhttp://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\n\n- React-Native For Android 环境搭建及踩坑\nhttp://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\n\n- React Native 开发培训免费书\nhttps://unbug.gitbooks.io/react-native-training/content/\n\n- Android Studio插件整理\nhttps://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\n\n- FastDFS + Nginx 反向代理缓存 安装与配置\nhttp://www.linux178.com/storage/fastdfs-nginx-cache.html\n","slug":"dev-collect-2016-07-collect-of-dev","published":1,"updated":"2016-08-03T14:42:36.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usrz001d00uui6otrdqy","content":"<h2 id=\"2016-07\"><a href=\"#2016-07\" class=\"headerlink\" title=\"2016-07\"></a>2016-07</h2><h3 id=\"2016-07-29\"><a href=\"#2016-07-29\" class=\"headerlink\" title=\"2016-07-29\"></a>2016-07-29</h3><ul>\n<li>搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台<br><a href=\"https://www.iamle.com/archives/2058.html\" target=\"_blank\" rel=\"external\">https://www.iamle.com/archives/2058.html</a></li>\n</ul>\n<h3 id=\"2016-07-23\"><a href=\"#2016-07-23\" class=\"headerlink\" title=\"2016-07-23\"></a>2016-07-23</h3><ul>\n<li><p>discover meteor<br><a href=\"http://zh.discovermeteor.com/chapters/introduction/\" target=\"_blank\" rel=\"external\">http://zh.discovermeteor.com/chapters/introduction/</a></p>\n</li>\n<li><p>webpack gitbook<br><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/webpack.html\" target=\"_blank\" rel=\"external\">https://hulufei.gitbooks.io/react-tutorial/content/webpack.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-22\"><a href=\"#2016-07-22\" class=\"headerlink\" title=\"2016-07-22\"></a>2016-07-22</h3><ul>\n<li><p>Spring Boot应用的测试——Mockito<br><a href=\"http://www.jianshu.com/p/972cd6b93206\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/972cd6b93206</a></p>\n</li>\n<li><p>利用Mockito模拟DB<br><a href=\"http://www.jianshu.com/p/c1c495f231ea\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/c1c495f231ea</a></p>\n</li>\n<li><p>在Spring Boot项目中使用Spock框架<br><a href=\"http://www.jianshu.com/p/f1e354d382cd\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f1e354d382cd</a></p>\n</li>\n<li><p>Spring Boot Testing<br><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\" target=\"_blank\" rel=\"external\">http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html</a></p>\n</li>\n<li><p>Integration Testing a Spring Boot Application<br><a href=\"https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\" target=\"_blank\" rel=\"external\">https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-21\"><a href=\"#2016-07-21\" class=\"headerlink\" title=\"2016-07-21\"></a>2016-07-21</h3><ul>\n<li>Growth: 全栈增长工程师指南<br><a href=\"http://growth.phodal.com/#\" target=\"_blank\" rel=\"external\">http://growth.phodal.com/#</a></li>\n</ul>\n<h3 id=\"2016-07-19\"><a href=\"#2016-07-19\" class=\"headerlink\" title=\"2016-07-19\"></a>2016-07-19</h3><ul>\n<li>微服务架构的分布式事务解决方案<br><a href=\"http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\" target=\"_blank\" rel=\"external\">http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb</a></li>\n</ul>\n<h3 id=\"2016-07-16\"><a href=\"#2016-07-16\" class=\"headerlink\" title=\"2016-07-16\"></a>2016-07-16</h3><ul>\n<li><p>使用 Vaadin 实现全堆栈 Java Web 开发<br><a href=\"http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/</a></p>\n</li>\n<li><p>Creating CRUD UI with Vaadin<br><a href=\"https://spring.io/guides/gs/crud-with-vaadin/\" target=\"_blank\" rel=\"external\">https://spring.io/guides/gs/crud-with-vaadin/</a><br>git clone <a href=\"https://github.com/spring-guides/gs-crud-with-vaadin.git\" target=\"_blank\" rel=\"external\">https://github.com/spring-guides/gs-crud-with-vaadin.git</a></p>\n</li>\n<li><p>当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用<br><a href=\"http://www.infoq.com/cn/news/2014/10/dubbox-open-source\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/news/2014/10/dubbox-open-source</a></p>\n</li>\n<li><p>在Dubbo中开发REST风格的远程调用（RESTful Remoting）<br><a href=\"http://dangdangdotcom.github.io/dubbox/rest.html\" target=\"_blank\" rel=\"external\">http://dangdangdotcom.github.io/dubbox/rest.html</a></p>\n</li>\n<li><p>使用JavaConfig方式配置dubbox<br><a href=\"http://dangdangdotcom.github.io/dubbox/java-config.html\" target=\"_blank\" rel=\"external\">http://dangdangdotcom.github.io/dubbox/java-config.html</a></p>\n</li>\n<li><p>Microservices with Spring<br><a href=\"https://spring.io/blog/2015/07/14/microservices-with-spring\" target=\"_blank\" rel=\"external\">https://spring.io/blog/2015/07/14/microservices-with-spring</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-14\"><a href=\"#2016-07-14\" class=\"headerlink\" title=\"2016-07-14\"></a>2016-07-14</h3><ul>\n<li>Import/Read excel file 2003 or 2007 with Spring MVC<br><a href=\"http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\" target=\"_blank\" rel=\"external\">http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html</a></li>\n<li>SPRING BOOT FILE UPLOAD WITH AJAX<br><a href=\"http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\" target=\"_blank\" rel=\"external\">http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/</a><br><a href=\"https://github.com/netgloo/spring-boot-samples\" target=\"_blank\" rel=\"external\">https://github.com/netgloo/spring-boot-samples</a></li>\n</ul>\n<h3 id=\"2016-07-13\"><a href=\"#2016-07-13\" class=\"headerlink\" title=\"2016-07-13\"></a>2016-07-13</h3><ul>\n<li><p>cSphere Docker 实训课程<br><a href=\"http://git.oschina.net/dockerf/docker-training\" target=\"_blank\" rel=\"external\">http://git.oschina.net/dockerf/docker-training</a></p>\n</li>\n<li><p>Spring Cloud方面的博客<br><a href=\"http://blog.didispace.com/\" target=\"_blank\" rel=\"external\">http://blog.didispace.com/</a></p>\n</li>\n<li><p>白话 IT 之浅谈 ELK 日志系统<br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct</a></p>\n</li>\n<li><p>用户行为分析项目<br><a href=\"https://github.com/YihuaWanglv/piwik\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/piwik</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-12\"><a href=\"#2016-07-12\" class=\"headerlink\" title=\"2016-07-12\"></a>2016-07-12</h3><ul>\n<li><p>使用API网关构建微服务<br><a href=\"http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway</a></p>\n</li>\n<li><p>使用Spring Cloud和Docker构建微服务<br><a href=\"http://www.dockone.io/article/510\" target=\"_blank\" rel=\"external\">http://www.dockone.io/article/510</a><br>原文链接：<br><a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\" target=\"_blank\" rel=\"external\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D</a></p>\n</li>\n<li><p>The API Gateway Pattern: Angular JS and Spring Security Part IV<br><a href=\"https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\" target=\"_blank\" rel=\"external\">https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv</a></p>\n</li>\n<li><p>git demo for spring-boot-microservices<br><a href=\"https://github.com/YihuaWanglv/spring-boot-microservices\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/spring-boot-microservices</a><br><a href=\"https://github.com/YihuaWanglv/spring-cloud-microservice-example\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/spring-cloud-microservice-example</a></p>\n</li>\n<li><p>Implementing Netflix Zuul in Spring Cloud<br><a href=\"http://kubecloud.io/apigatewaypattern/\" target=\"_blank\" rel=\"external\">http://kubecloud.io/apigatewaypattern/</a><br><a href=\"http://start.spring.io/\" target=\"_blank\" rel=\"external\">http://start.spring.io/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-11\"><a href=\"#2016-07-11\" class=\"headerlink\" title=\"2016-07-11\"></a>2016-07-11</h3><ul>\n<li><p>使用 Vuex + Vue.js 构建单页应用<br><a href=\"https://segmentfault.com/a/1190000005891026\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000005891026</a><br><a href=\"https://github.com/lichenbuliren/vuex-notes-app\" target=\"_blank\" rel=\"external\">https://github.com/lichenbuliren/vuex-notes-app</a></p>\n</li>\n<li><p>两篇关于微服务api gateway的著名文章<br><a href=\"http://microservices.io/patterns/apigateway.html\" target=\"_blank\" rel=\"external\">http://microservices.io/patterns/apigateway.html</a><br><a href=\"https://www.nginx.com/blog/building-microservices-using-an-api-gateway/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/blog/building-microservices-using-an-api-gateway/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-08\"><a href=\"#2016-07-08\" class=\"headerlink\" title=\"2016-07-08\"></a>2016-07-08</h3><ul>\n<li><p>使用spring boot和thrift、zookeeper建立微服务<br><a href=\"http://www.cnblogs.com/skyblog/p/5535418.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/skyblog/p/5535418.html</a></p>\n</li>\n<li><p>Jenkins+Docker搭建持续集成测试环境<br><a href=\"http://www.dockone.io/article/1464\" target=\"_blank\" rel=\"external\">http://www.dockone.io/article/1464</a></p>\n</li>\n<li><p>spring boot+spring cloud服务化系列博客<br><a href=\"http://www.cnblogs.com/skyblog/category/774535.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/skyblog/category/774535.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h3><ul>\n<li><p>使用Jenkins搭建iOS/Android持续集成打包平台<br><a href=\"http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\" target=\"_blank\" rel=\"external\">http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins</a></p>\n</li>\n<li><p>React-Native For Android 环境搭建及踩坑<br><a href=\"http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\" target=\"_blank\" rel=\"external\">http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html</a></p>\n</li>\n<li><p>React Native 开发培训免费书<br><a href=\"https://unbug.gitbooks.io/react-native-training/content/\" target=\"_blank\" rel=\"external\">https://unbug.gitbooks.io/react-native-training/content/</a></p>\n</li>\n<li><p>Android Studio插件整理<br><a href=\"https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\" target=\"_blank\" rel=\"external\">https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</a></p>\n</li>\n<li><p>FastDFS + Nginx 反向代理缓存 安装与配置<br><a href=\"http://www.linux178.com/storage/fastdfs-nginx-cache.html\" target=\"_blank\" rel=\"external\">http://www.linux178.com/storage/fastdfs-nginx-cache.html</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"2016-07\"><a href=\"#2016-07\" class=\"headerlink\" title=\"2016-07\"></a>2016-07</h2><h3 id=\"2016-07-29\"><a href=\"#2016-07-29\" class=\"headerlink\" title=\"2016-07-29\"></a>2016-07-29</h3><ul>\n<li>搭建ElasticSearch-2.x Logstash-2.x Kibana-4.5.x Kafka为消息中心的ELK日志平台<br><a href=\"https://www.iamle.com/archives/2058.html\">https://www.iamle.com/archives/2058.html</a></li>\n</ul>\n<h3 id=\"2016-07-23\"><a href=\"#2016-07-23\" class=\"headerlink\" title=\"2016-07-23\"></a>2016-07-23</h3><ul>\n<li><p>discover meteor<br><a href=\"http://zh.discovermeteor.com/chapters/introduction/\">http://zh.discovermeteor.com/chapters/introduction/</a></p>\n</li>\n<li><p>webpack gitbook<br><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/webpack.html\">https://hulufei.gitbooks.io/react-tutorial/content/webpack.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-22\"><a href=\"#2016-07-22\" class=\"headerlink\" title=\"2016-07-22\"></a>2016-07-22</h3><ul>\n<li><p>Spring Boot应用的测试——Mockito<br><a href=\"http://www.jianshu.com/p/972cd6b93206\">http://www.jianshu.com/p/972cd6b93206</a></p>\n</li>\n<li><p>利用Mockito模拟DB<br><a href=\"http://www.jianshu.com/p/c1c495f231ea\">http://www.jianshu.com/p/c1c495f231ea</a></p>\n</li>\n<li><p>在Spring Boot项目中使用Spock框架<br><a href=\"http://www.jianshu.com/p/f1e354d382cd\">http://www.jianshu.com/p/f1e354d382cd</a></p>\n</li>\n<li><p>Spring Boot Testing<br><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html\">http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html</a></p>\n</li>\n<li><p>Integration Testing a Spring Boot Application<br><a href=\"https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/\">https://www.jayway.com/2014/07/04/integration-testing-a-spring-boot-application/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-21\"><a href=\"#2016-07-21\" class=\"headerlink\" title=\"2016-07-21\"></a>2016-07-21</h3><ul>\n<li>Growth: 全栈增长工程师指南<br><a href=\"http://growth.phodal.com/#\">http://growth.phodal.com/#</a></li>\n</ul>\n<h3 id=\"2016-07-19\"><a href=\"#2016-07-19\" class=\"headerlink\" title=\"2016-07-19\"></a>2016-07-19</h3><ul>\n<li>微服务架构的分布式事务解决方案<br><a href=\"http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb\">http://www.roncoo.com/details?cid=7ae3d7eddc4742f78b0548aa8bd9ccdb</a></li>\n</ul>\n<h3 id=\"2016-07-16\"><a href=\"#2016-07-16\" class=\"headerlink\" title=\"2016-07-16\"></a>2016-07-16</h3><ul>\n<li><p>使用 Vaadin 实现全堆栈 Java Web 开发<br><a href=\"http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/\">http://www.ibm.com/developerworks/cn/java/j-full-stack-java-web-dev-vaadin/</a></p>\n</li>\n<li><p>Creating CRUD UI with Vaadin<br><a href=\"https://spring.io/guides/gs/crud-with-vaadin/\">https://spring.io/guides/gs/crud-with-vaadin/</a><br>git clone <a href=\"https://github.com/spring-guides/gs-crud-with-vaadin.git\">https://github.com/spring-guides/gs-crud-with-vaadin.git</a></p>\n</li>\n<li><p>当当网开源Dubbox，扩展Dubbo服务框架支持REST风格远程调用<br><a href=\"http://www.infoq.com/cn/news/2014/10/dubbox-open-source\">http://www.infoq.com/cn/news/2014/10/dubbox-open-source</a></p>\n</li>\n<li><p>在Dubbo中开发REST风格的远程调用（RESTful Remoting）<br><a href=\"http://dangdangdotcom.github.io/dubbox/rest.html\">http://dangdangdotcom.github.io/dubbox/rest.html</a></p>\n</li>\n<li><p>使用JavaConfig方式配置dubbox<br><a href=\"http://dangdangdotcom.github.io/dubbox/java-config.html\">http://dangdangdotcom.github.io/dubbox/java-config.html</a></p>\n</li>\n<li><p>Microservices with Spring<br><a href=\"https://spring.io/blog/2015/07/14/microservices-with-spring\">https://spring.io/blog/2015/07/14/microservices-with-spring</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-14\"><a href=\"#2016-07-14\" class=\"headerlink\" title=\"2016-07-14\"></a>2016-07-14</h3><ul>\n<li>Import/Read excel file 2003 or 2007 with Spring MVC<br><a href=\"http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html\">http://lvtutorial.com/spring-mvc/read-excel-file-2003-or-2007-with-spring-mvc.html</a></li>\n<li>SPRING BOOT FILE UPLOAD WITH AJAX<br><a href=\"http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/\">http://blog.netgloo.com/2015/02/08/spring-boot-file-upload-with-ajax/</a><br><a href=\"https://github.com/netgloo/spring-boot-samples\">https://github.com/netgloo/spring-boot-samples</a></li>\n</ul>\n<h3 id=\"2016-07-13\"><a href=\"#2016-07-13\" class=\"headerlink\" title=\"2016-07-13\"></a>2016-07-13</h3><ul>\n<li><p>cSphere Docker 实训课程<br><a href=\"http://git.oschina.net/dockerf/docker-training\">http://git.oschina.net/dockerf/docker-training</a></p>\n</li>\n<li><p>Spring Cloud方面的博客<br><a href=\"http://blog.didispace.com/\">http://blog.didispace.com/</a></p>\n</li>\n<li><p>白话 IT 之浅谈 ELK 日志系统<br><a href=\"https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct\">https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788351&amp;idx=1&amp;sn=a38a0b95b63186b789423195fa09f91d&amp;scene=0&amp;key=77421cf58af4a653195d70dcdaaed6e78c06fe4711f95c19349f5ca630c1e7f8481f6f21ba392beedcc329dbcc331cc8&amp;ascene=0&amp;uin=MTM4NTI5NTI4Mg%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.9.5+build(13F1808)&amp;version=11020201&amp;pass_ticket=MxW0cGHvKj7WTMRpzBpE%2FND%2BPkUf91pVVetULpXmjhLbsP9btRTYFt3DF6QSZ5Ct</a></p>\n</li>\n<li><p>用户行为分析项目<br><a href=\"https://github.com/YihuaWanglv/piwik\">https://github.com/YihuaWanglv/piwik</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-12\"><a href=\"#2016-07-12\" class=\"headerlink\" title=\"2016-07-12\"></a>2016-07-12</h3><ul>\n<li><p>使用API网关构建微服务<br><a href=\"http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway\">http://www.infoq.com/cn/articles/construct-micro-service-using-api-gateway</a></p>\n</li>\n<li><p>使用Spring Cloud和Docker构建微服务<br><a href=\"http://www.dockone.io/article/510\">http://www.dockone.io/article/510</a><br>原文链接：<br><a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ukoWaC0lMI%2F0ER3fOvrPUfGjI4ATcdqI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D</a></p>\n</li>\n<li><p>The API Gateway Pattern: Angular JS and Spring Security Part IV<br><a href=\"https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv\">https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv</a></p>\n</li>\n<li><p>git demo for spring-boot-microservices<br><a href=\"https://github.com/YihuaWanglv/spring-boot-microservices\">https://github.com/YihuaWanglv/spring-boot-microservices</a><br><a href=\"https://github.com/YihuaWanglv/spring-cloud-microservice-example\">https://github.com/YihuaWanglv/spring-cloud-microservice-example</a></p>\n</li>\n<li><p>Implementing Netflix Zuul in Spring Cloud<br><a href=\"http://kubecloud.io/apigatewaypattern/\">http://kubecloud.io/apigatewaypattern/</a><br><a href=\"http://start.spring.io/\">http://start.spring.io/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-11\"><a href=\"#2016-07-11\" class=\"headerlink\" title=\"2016-07-11\"></a>2016-07-11</h3><ul>\n<li><p>使用 Vuex + Vue.js 构建单页应用<br><a href=\"https://segmentfault.com/a/1190000005891026\">https://segmentfault.com/a/1190000005891026</a><br><a href=\"https://github.com/lichenbuliren/vuex-notes-app\">https://github.com/lichenbuliren/vuex-notes-app</a></p>\n</li>\n<li><p>两篇关于微服务api gateway的著名文章<br><a href=\"http://microservices.io/patterns/apigateway.html\">http://microservices.io/patterns/apigateway.html</a><br><a href=\"https://www.nginx.com/blog/building-microservices-using-an-api-gateway/\">https://www.nginx.com/blog/building-microservices-using-an-api-gateway/</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-08\"><a href=\"#2016-07-08\" class=\"headerlink\" title=\"2016-07-08\"></a>2016-07-08</h3><ul>\n<li><p>使用spring boot和thrift、zookeeper建立微服务<br><a href=\"http://www.cnblogs.com/skyblog/p/5535418.html\">http://www.cnblogs.com/skyblog/p/5535418.html</a></p>\n</li>\n<li><p>Jenkins+Docker搭建持续集成测试环境<br><a href=\"http://www.dockone.io/article/1464\">http://www.dockone.io/article/1464</a></p>\n</li>\n<li><p>spring boot+spring cloud服务化系列博客<br><a href=\"http://www.cnblogs.com/skyblog/category/774535.html\">http://www.cnblogs.com/skyblog/category/774535.html</a></p>\n</li>\n</ul>\n<h3 id=\"2016-07-06\"><a href=\"#2016-07-06\" class=\"headerlink\" title=\"2016-07-06\"></a>2016-07-06</h3><ul>\n<li><p>使用Jenkins搭建iOS/Android持续集成打包平台<br><a href=\"http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins\">http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins</a></p>\n</li>\n<li><p>React-Native For Android 环境搭建及踩坑<br><a href=\"http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html\">http://www.imbeta.cn/react-native-for-android-huan-jing-da-jian-ji-cai-keng.html</a></p>\n</li>\n<li><p>React Native 开发培训免费书<br><a href=\"https://unbug.gitbooks.io/react-native-training/content/\">https://unbug.gitbooks.io/react-native-training/content/</a></p>\n</li>\n<li><p>Android Studio插件整理<br><a href=\"https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/\">https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</a></p>\n</li>\n<li><p>FastDFS + Nginx 反向代理缓存 安装与配置<br><a href=\"http://www.linux178.com/storage/fastdfs-nginx-cache.html\">http://www.linux178.com/storage/fastdfs-nginx-cache.html</a></p>\n</li>\n</ul>\n","sticky":0},{"title":"java-web知识体系","date":"2016-05-04T15:05:21.000Z","_content":"\n## 一张java web知识体系思维导图\n就是稍微旧了点\n\n![](/images/java-web.png)\n","source":"_posts/java-web知识体系.md","raw":"---\ntitle: java-web知识体系\ndate: 2016-05-04 23:05:21\ntags: [java,web,java web,思维导图]\n---\n\n## 一张java web知识体系思维导图\n就是稍微旧了点\n\n![](/images/java-web.png)\n","slug":"java-web知识体系","published":1,"updated":"2016-05-04T15:07:13.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uss5001f00uu2f8sqi63","content":"<h2 id=\"一张java-web知识体系思维导图\"><a href=\"#一张java-web知识体系思维导图\" class=\"headerlink\" title=\"一张java web知识体系思维导图\"></a>一张java web知识体系思维导图</h2><p>就是稍微旧了点</p>\n<p><img src=\"/images/java-web.png\" alt=\"\"></p>\n","excerpt":"","more":"<h2 id=\"一张java-web知识体系思维导图\"><a href=\"#一张java-web知识体系思维导图\" class=\"headerlink\" title=\"一张java web知识体系思维导图\"></a>一张java web知识体系思维导图</h2><p>就是稍微旧了点</p>\n<p><img src=\"/images/java-web.png\" alt=\"\"></p>\n","sticky":0},{"title":"[java][enum]典型用法","date":"2016-05-08T15:57:31.000Z","_content":"\n\n## java enum典型用法\n\n### 代码：\n```\npackage com.iyihua.model.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum GroupType {\n\n     CATEGORY(0, \"category\"), PROJECT(1, \"project\"), LOCATION(2, \"location\" );\n\n     private final int id;\n     private final String key;\n\n     GroupType(int id, String key) {\n            this. id = id;\n            this. key = key;\n     }\n     \n     public int getId() {\n            return id;\n     }\n     public String getKey() {\n            return key;\n     }\n\n     private static final Map<String, GroupType> keyToEnum = new HashMap<String, GroupType>();\n     static {\n            for (GroupType gt : GroupType. values())\n                 keyToEnum.put(gt .getKey(), gt );\n     }\n\n     public static GroupType fromString(String symbol) {\n            return keyToEnum.get(symbol );\n     }\n\n     public static void main(String[] args) {\n           System. out.println( fromString(\"category\"));\n     }\n}\n```\n\n\n### 说明：\n代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。\n如此就可以通过fromString方法，传入key string值，即可返回对应的enum值","source":"_posts/java-enum-典型用法.md","raw":"---\ntitle: '[java][enum]典型用法'\ndate: 2016-05-08 23:57:31\ntags: [java, enum]\n---\n\n\n## java enum典型用法\n\n### 代码：\n```\npackage com.iyihua.model.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum GroupType {\n\n     CATEGORY(0, \"category\"), PROJECT(1, \"project\"), LOCATION(2, \"location\" );\n\n     private final int id;\n     private final String key;\n\n     GroupType(int id, String key) {\n            this. id = id;\n            this. key = key;\n     }\n     \n     public int getId() {\n            return id;\n     }\n     public String getKey() {\n            return key;\n     }\n\n     private static final Map<String, GroupType> keyToEnum = new HashMap<String, GroupType>();\n     static {\n            for (GroupType gt : GroupType. values())\n                 keyToEnum.put(gt .getKey(), gt );\n     }\n\n     public static GroupType fromString(String symbol) {\n            return keyToEnum.get(symbol );\n     }\n\n     public static void main(String[] args) {\n           System. out.println( fromString(\"category\"));\n     }\n}\n```\n\n\n### 说明：\n代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。\n如此就可以通过fromString方法，传入key string值，即可返回对应的enum值","slug":"java-enum-典型用法","published":1,"updated":"2016-05-08T16:07:15.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ussa001h00uukagvuayh","content":"<h2 id=\"java-enum典型用法\"><a href=\"#java-enum典型用法\" class=\"headerlink\" title=\"java enum典型用法\"></a>java enum典型用法</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.iyihua.model.enums;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public enum GroupType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     CATEGORY(0, &quot;category&quot;), PROJECT(1, &quot;project&quot;), LOCATION(2, &quot;location&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">     private final int id;</span><br><span class=\"line\">     private final String key;</span><br><span class=\"line\"></span><br><span class=\"line\">     GroupType(int id, String key) &#123;</span><br><span class=\"line\">            this. id = id;</span><br><span class=\"line\">            this. key = key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     public int getId() &#123;</span><br><span class=\"line\">            return id;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     public String getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     private static final Map&lt;String, GroupType&gt; keyToEnum = new HashMap&lt;String, GroupType&gt;();</span><br><span class=\"line\">     static &#123;</span><br><span class=\"line\">            for (GroupType gt : GroupType. values())</span><br><span class=\"line\">                 keyToEnum.put(gt .getKey(), gt );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static GroupType fromString(String symbol) &#123;</span><br><span class=\"line\">            return keyToEnum.get(symbol );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static void main(String[] args) &#123;</span><br><span class=\"line\">           System. out.println( fromString(&quot;category&quot;));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><p>代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。<br>如此就可以通过fromString方法，传入key string值，即可返回对应的enum值</p>\n","excerpt":"","more":"<h2 id=\"java-enum典型用法\"><a href=\"#java-enum典型用法\" class=\"headerlink\" title=\"java enum典型用法\"></a>java enum典型用法</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.iyihua.model.enums;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">public enum GroupType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     CATEGORY(0, &quot;category&quot;), PROJECT(1, &quot;project&quot;), LOCATION(2, &quot;location&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">     private final int id;</span><br><span class=\"line\">     private final String key;</span><br><span class=\"line\"></span><br><span class=\"line\">     GroupType(int id, String key) &#123;</span><br><span class=\"line\">            this. id = id;</span><br><span class=\"line\">            this. key = key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     public int getId() &#123;</span><br><span class=\"line\">            return id;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     public String getKey() &#123;</span><br><span class=\"line\">            return key;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     private static final Map&lt;String, GroupType&gt; keyToEnum = new HashMap&lt;String, GroupType&gt;();</span><br><span class=\"line\">     static &#123;</span><br><span class=\"line\">            for (GroupType gt : GroupType. values())</span><br><span class=\"line\">                 keyToEnum.put(gt .getKey(), gt );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static GroupType fromString(String symbol) &#123;</span><br><span class=\"line\">            return keyToEnum.get(symbol );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static void main(String[] args) &#123;</span><br><span class=\"line\">           System. out.println( fromString(&quot;category&quot;));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><p>代码中把枚举值对应的string-枚举放到了一个map keyToEnum中，并且是静态化的。<br>如此就可以通过fromString方法，传入key string值，即可返回对应的enum值</p>\n","sticky":0},{"title":"java自动化测试整理","date":"2016-08-12T05:14:27.000Z","_content":"\n\n\n## java自动化测试整理\n\n\n\n## 1. 自动化测试的4个关键部分\n![](/images/test-001.png)\n\n- 使用svn/git作为代码版本管理\n- 使用maven构建项目，依赖和目录统一\n- 使用junit/testng+mockito写单元测试\n- 使用jenkins执行项目构建和测试任务\n- 使用Sonar作为自动化单元测试反馈报告统一展现平台\n\n\n## 2. web自动化测试管理工具\n- 使用 Selenium 实现基于 Web 的自动化测试\n- 使用 Rest-Assured 测试 REST API\n- api测试，从手工到平台的演变：运用web+httpclient实现，测试的可配置\n\n\n## 3. restapi的自动化测试之路\n- Rest-Assured或其他工具，编写针对api的单元测试；\n- 新代码提交，自动触发构建，成功部署服务器；\n- 自动运行使用 Rest-Assured 编写的单元测试，对 REST API 进行测试\n\n\n## 4. 自动化测试工具脑图\n![](/images/test-002.png)","source":"_posts/java自动化测试整理.md","raw":"---\ntitle: java自动化测试整理\ndate: 2016-08-12 13:14:27\ntags: [Test, 测试, 单元测试, 自动化测试]\n---\n\n\n\n## java自动化测试整理\n\n\n\n## 1. 自动化测试的4个关键部分\n![](/images/test-001.png)\n\n- 使用svn/git作为代码版本管理\n- 使用maven构建项目，依赖和目录统一\n- 使用junit/testng+mockito写单元测试\n- 使用jenkins执行项目构建和测试任务\n- 使用Sonar作为自动化单元测试反馈报告统一展现平台\n\n\n## 2. web自动化测试管理工具\n- 使用 Selenium 实现基于 Web 的自动化测试\n- 使用 Rest-Assured 测试 REST API\n- api测试，从手工到平台的演变：运用web+httpclient实现，测试的可配置\n\n\n## 3. restapi的自动化测试之路\n- Rest-Assured或其他工具，编写针对api的单元测试；\n- 新代码提交，自动触发构建，成功部署服务器；\n- 自动运行使用 Rest-Assured 编写的单元测试，对 REST API 进行测试\n\n\n## 4. 自动化测试工具脑图\n![](/images/test-002.png)","slug":"java自动化测试整理","published":1,"updated":"2016-08-19T16:19:05.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ussc001i00uugjgudgux","content":"<h2 id=\"java自动化测试整理\"><a href=\"#java自动化测试整理\" class=\"headerlink\" title=\"java自动化测试整理\"></a>java自动化测试整理</h2><h2 id=\"1-自动化测试的4个关键部分\"><a href=\"#1-自动化测试的4个关键部分\" class=\"headerlink\" title=\"1. 自动化测试的4个关键部分\"></a>1. 自动化测试的4个关键部分</h2><p><img src=\"/images/test-001.png\" alt=\"\"></p>\n<ul>\n<li>使用svn/git作为代码版本管理</li>\n<li>使用maven构建项目，依赖和目录统一</li>\n<li>使用junit/testng+mockito写单元测试</li>\n<li>使用jenkins执行项目构建和测试任务</li>\n<li>使用Sonar作为自动化单元测试反馈报告统一展现平台</li>\n</ul>\n<h2 id=\"2-web自动化测试管理工具\"><a href=\"#2-web自动化测试管理工具\" class=\"headerlink\" title=\"2. web自动化测试管理工具\"></a>2. web自动化测试管理工具</h2><ul>\n<li>使用 Selenium 实现基于 Web 的自动化测试</li>\n<li>使用 Rest-Assured 测试 REST API</li>\n<li>api测试，从手工到平台的演变：运用web+httpclient实现，测试的可配置</li>\n</ul>\n<h2 id=\"3-restapi的自动化测试之路\"><a href=\"#3-restapi的自动化测试之路\" class=\"headerlink\" title=\"3. restapi的自动化测试之路\"></a>3. restapi的自动化测试之路</h2><ul>\n<li>Rest-Assured或其他工具，编写针对api的单元测试；</li>\n<li>新代码提交，自动触发构建，成功部署服务器；</li>\n<li>自动运行使用 Rest-Assured 编写的单元测试，对 REST API 进行测试</li>\n</ul>\n<h2 id=\"4-自动化测试工具脑图\"><a href=\"#4-自动化测试工具脑图\" class=\"headerlink\" title=\"4. 自动化测试工具脑图\"></a>4. 自动化测试工具脑图</h2><p><img src=\"/images/test-002.png\" alt=\"\"></p>\n","excerpt":"","more":"<h2 id=\"java自动化测试整理\"><a href=\"#java自动化测试整理\" class=\"headerlink\" title=\"java自动化测试整理\"></a>java自动化测试整理</h2><h2 id=\"1-自动化测试的4个关键部分\"><a href=\"#1-自动化测试的4个关键部分\" class=\"headerlink\" title=\"1. 自动化测试的4个关键部分\"></a>1. 自动化测试的4个关键部分</h2><p><img src=\"/images/test-001.png\" alt=\"\"></p>\n<ul>\n<li>使用svn/git作为代码版本管理</li>\n<li>使用maven构建项目，依赖和目录统一</li>\n<li>使用junit/testng+mockito写单元测试</li>\n<li>使用jenkins执行项目构建和测试任务</li>\n<li>使用Sonar作为自动化单元测试反馈报告统一展现平台</li>\n</ul>\n<h2 id=\"2-web自动化测试管理工具\"><a href=\"#2-web自动化测试管理工具\" class=\"headerlink\" title=\"2. web自动化测试管理工具\"></a>2. web自动化测试管理工具</h2><ul>\n<li>使用 Selenium 实现基于 Web 的自动化测试</li>\n<li>使用 Rest-Assured 测试 REST API</li>\n<li>api测试，从手工到平台的演变：运用web+httpclient实现，测试的可配置</li>\n</ul>\n<h2 id=\"3-restapi的自动化测试之路\"><a href=\"#3-restapi的自动化测试之路\" class=\"headerlink\" title=\"3. restapi的自动化测试之路\"></a>3. restapi的自动化测试之路</h2><ul>\n<li>Rest-Assured或其他工具，编写针对api的单元测试；</li>\n<li>新代码提交，自动触发构建，成功部署服务器；</li>\n<li>自动运行使用 Rest-Assured 编写的单元测试，对 REST API 进行测试</li>\n</ul>\n<h2 id=\"4-自动化测试工具脑图\"><a href=\"#4-自动化测试工具脑图\" class=\"headerlink\" title=\"4. 自动化测试工具脑图\"></a>4. 自动化测试工具脑图</h2><p><img src=\"/images/test-002.png\" alt=\"\"></p>\n","sticky":0},{"title":"[microservices]03-Zookeeper注册发现服务","date":"2017-03-29T13:00:37.000Z","_content":"\n# [microservices]03-Zookeeper注册发现服务\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. zookeeper原理介绍\n\n- [分布式服务框架 Zookeeper -- 管理分布式环境中的数据](https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/)\n\n## 2. 基础微服务简单架构与demo说明\n\n![](/images/framework-microservices.png)\n\n- api-gateway实例：dispatcher(/microservices/api-gateway/dispatcher)\n- web-client实例：web-client(/microservices/apps/web-client)\n- api-service实例：api-demo(/microservices/services/api-demo)\n\n- zookeeper：注册中心\n- spring boot应用api-demo，作为一个service微服务实例，依赖一个服务注册组件service-registry(/microservices/services/service-registry)，实现服务向zookeeper注册。启动api-demo即可向外提供服务并注册到zookeeper。\n- Nodejs应用dispatcher，作为api网关，它使用一个node-zookeeper-client组件，连接zookeeper，根据client传递过来的service名称，发现服务，并转发请求到目标服务中。\n- web-client，即是前端web客户端，它只向api网关dispatcher发送请求，并且在请求的header中传递Service-Name字段，指明要请求的服务名称.\n\n## 3. 运行demo\n\n### 3.1 bin/zkServer.sh start启动zookeeper\n\n没有zookeeper请先下载：http://zookeeper.apache.org/releases.html\n\n\n### 3.2 打包运行api-demo\n```\ncd ../microservices/services/api-demo\nmvn clean package\njava -jar api-demo-1.0.0.jar\n```\n或者直接导入项目，运行ApiDemoApplication启动.\n\n\n### 3.3 运行api网关dispatcher\n```\ncd ../microservices/api-gateway/dispatcher\nnode app.js\n```\n\n如果想每次更改代码后即刻生效，可使用supervisor模块启动应用：\n```\nnpm install supervisor -g\nsupervisor app.js\n```\n\n如果需要Node应用在发生异常停止时能够重新启动，可使用forever模块启动应用：\n```\nnpm install forever -g\nforever app.js\n```\nforever app.js表示在前台启动，想要后台启动，使用命令：\n```\nforever start app.js\n```\n\n### 3.4 运行web-client，访问首页，进行服务请求.\n```\ncd ../microservices/api-gateway/dispatcher\nnode app.js\n```\n访问：http://localhost:9001/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/microservices-03-Zookeeper注册发现服务.md","raw":"---\ntitle: '[microservices]03-Zookeeper注册发现服务'\ndate: 2017-03-29 21:00:37\ntags: [microservices,zookeeper,微服务,服务注册,服务发现]\n---\n\n# [microservices]03-Zookeeper注册发现服务\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. zookeeper原理介绍\n\n- [分布式服务框架 Zookeeper -- 管理分布式环境中的数据](https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/)\n\n## 2. 基础微服务简单架构与demo说明\n\n![](/images/framework-microservices.png)\n\n- api-gateway实例：dispatcher(/microservices/api-gateway/dispatcher)\n- web-client实例：web-client(/microservices/apps/web-client)\n- api-service实例：api-demo(/microservices/services/api-demo)\n\n- zookeeper：注册中心\n- spring boot应用api-demo，作为一个service微服务实例，依赖一个服务注册组件service-registry(/microservices/services/service-registry)，实现服务向zookeeper注册。启动api-demo即可向外提供服务并注册到zookeeper。\n- Nodejs应用dispatcher，作为api网关，它使用一个node-zookeeper-client组件，连接zookeeper，根据client传递过来的service名称，发现服务，并转发请求到目标服务中。\n- web-client，即是前端web客户端，它只向api网关dispatcher发送请求，并且在请求的header中传递Service-Name字段，指明要请求的服务名称.\n\n## 3. 运行demo\n\n### 3.1 bin/zkServer.sh start启动zookeeper\n\n没有zookeeper请先下载：http://zookeeper.apache.org/releases.html\n\n\n### 3.2 打包运行api-demo\n```\ncd ../microservices/services/api-demo\nmvn clean package\njava -jar api-demo-1.0.0.jar\n```\n或者直接导入项目，运行ApiDemoApplication启动.\n\n\n### 3.3 运行api网关dispatcher\n```\ncd ../microservices/api-gateway/dispatcher\nnode app.js\n```\n\n如果想每次更改代码后即刻生效，可使用supervisor模块启动应用：\n```\nnpm install supervisor -g\nsupervisor app.js\n```\n\n如果需要Node应用在发生异常停止时能够重新启动，可使用forever模块启动应用：\n```\nnpm install forever -g\nforever app.js\n```\nforever app.js表示在前台启动，想要后台启动，使用命令：\n```\nforever start app.js\n```\n\n### 3.4 运行web-client，访问首页，进行服务请求.\n```\ncd ../microservices/api-gateway/dispatcher\nnode app.js\n```\n访问：http://localhost:9001/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"microservices-03-Zookeeper注册发现服务","published":1,"updated":"2017-03-29T13:44:00.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ussl001k00uumoq5us3y","content":"<h1 id=\"microservices-03-Zookeeper注册发现服务\"><a href=\"#microservices-03-Zookeeper注册发现服务\" class=\"headerlink\" title=\"[microservices]03-Zookeeper注册发现服务\"></a>[microservices]03-Zookeeper注册发现服务</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\" target=\"_blank\" rel=\"external\">microservices</a></li>\n</ul>\n<h2 id=\"1-zookeeper原理介绍\"><a href=\"#1-zookeeper原理介绍\" class=\"headerlink\" title=\"1. zookeeper原理介绍\"></a>1. zookeeper原理介绍</h2><ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/\" target=\"_blank\" rel=\"external\">分布式服务框架 Zookeeper – 管理分布式环境中的数据</a></li>\n</ul>\n<h2 id=\"2-基础微服务简单架构与demo说明\"><a href=\"#2-基础微服务简单架构与demo说明\" class=\"headerlink\" title=\"2. 基础微服务简单架构与demo说明\"></a>2. 基础微服务简单架构与demo说明</h2><p><img src=\"/images/framework-microservices.png\" alt=\"\"></p>\n<ul>\n<li>api-gateway实例：dispatcher(/microservices/api-gateway/dispatcher)</li>\n<li>web-client实例：web-client(/microservices/apps/web-client)</li>\n<li><p>api-service实例：api-demo(/microservices/services/api-demo)</p>\n</li>\n<li><p>zookeeper：注册中心</p>\n</li>\n<li>spring boot应用api-demo，作为一个service微服务实例，依赖一个服务注册组件service-registry(/microservices/services/service-registry)，实现服务向zookeeper注册。启动api-demo即可向外提供服务并注册到zookeeper。</li>\n<li>Nodejs应用dispatcher，作为api网关，它使用一个node-zookeeper-client组件，连接zookeeper，根据client传递过来的service名称，发现服务，并转发请求到目标服务中。</li>\n<li>web-client，即是前端web客户端，它只向api网关dispatcher发送请求，并且在请求的header中传递Service-Name字段，指明要请求的服务名称.</li>\n</ul>\n<h2 id=\"3-运行demo\"><a href=\"#3-运行demo\" class=\"headerlink\" title=\"3. 运行demo\"></a>3. 运行demo</h2><h3 id=\"3-1-bin-zkServer-sh-start启动zookeeper\"><a href=\"#3-1-bin-zkServer-sh-start启动zookeeper\" class=\"headerlink\" title=\"3.1 bin/zkServer.sh start启动zookeeper\"></a>3.1 bin/zkServer.sh start启动zookeeper</h3><p>没有zookeeper请先下载：<a href=\"http://zookeeper.apache.org/releases.html\" target=\"_blank\" rel=\"external\">http://zookeeper.apache.org/releases.html</a></p>\n<h3 id=\"3-2-打包运行api-demo\"><a href=\"#3-2-打包运行api-demo\" class=\"headerlink\" title=\"3.2 打包运行api-demo\"></a>3.2 打包运行api-demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../microservices/services/api-demo</span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\">java -jar api-demo-1.0.0.jar</span><br></pre></td></tr></table></figure>\n<p>或者直接导入项目，运行ApiDemoApplication启动.</p>\n<h3 id=\"3-3-运行api网关dispatcher\"><a href=\"#3-3-运行api网关dispatcher\" class=\"headerlink\" title=\"3.3 运行api网关dispatcher\"></a>3.3 运行api网关dispatcher</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../microservices/api-gateway/dispatcher</span><br><span class=\"line\">node app.js</span><br></pre></td></tr></table></figure>\n<p>如果想每次更改代码后即刻生效，可使用supervisor模块启动应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install supervisor -g</span><br><span class=\"line\">supervisor app.js</span><br></pre></td></tr></table></figure></p>\n<p>如果需要Node应用在发生异常停止时能够重新启动，可使用forever模块启动应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br><span class=\"line\">forever app.js</span><br></pre></td></tr></table></figure></p>\n<p>forever app.js表示在前台启动，想要后台启动，使用命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever start app.js</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-4-运行web-client，访问首页，进行服务请求\"><a href=\"#3-4-运行web-client，访问首页，进行服务请求\" class=\"headerlink\" title=\"3.4 运行web-client，访问首页，进行服务请求.\"></a>3.4 运行web-client，访问首页，进行服务请求.</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../microservices/api-gateway/dispatcher</span><br><span class=\"line\">node app.js</span><br></pre></td></tr></table></figure>\n<p>访问：<a href=\"http://localhost:9001/\">http://localhost:9001/</a></p>\n","excerpt":"","more":"<h1 id=\"microservices-03-Zookeeper注册发现服务\"><a href=\"#microservices-03-Zookeeper注册发现服务\" class=\"headerlink\" title=\"[microservices]03-Zookeeper注册发现服务\"></a>[microservices]03-Zookeeper注册发现服务</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\">microservices</a></li>\n</ul>\n<h2 id=\"1-zookeeper原理介绍\"><a href=\"#1-zookeeper原理介绍\" class=\"headerlink\" title=\"1. zookeeper原理介绍\"></a>1. zookeeper原理介绍</h2><ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/\">分布式服务框架 Zookeeper – 管理分布式环境中的数据</a></li>\n</ul>\n<h2 id=\"2-基础微服务简单架构与demo说明\"><a href=\"#2-基础微服务简单架构与demo说明\" class=\"headerlink\" title=\"2. 基础微服务简单架构与demo说明\"></a>2. 基础微服务简单架构与demo说明</h2><p><img src=\"/images/framework-microservices.png\" alt=\"\"></p>\n<ul>\n<li>api-gateway实例：dispatcher(/microservices/api-gateway/dispatcher)</li>\n<li>web-client实例：web-client(/microservices/apps/web-client)</li>\n<li><p>api-service实例：api-demo(/microservices/services/api-demo)</p>\n</li>\n<li><p>zookeeper：注册中心</p>\n</li>\n<li>spring boot应用api-demo，作为一个service微服务实例，依赖一个服务注册组件service-registry(/microservices/services/service-registry)，实现服务向zookeeper注册。启动api-demo即可向外提供服务并注册到zookeeper。</li>\n<li>Nodejs应用dispatcher，作为api网关，它使用一个node-zookeeper-client组件，连接zookeeper，根据client传递过来的service名称，发现服务，并转发请求到目标服务中。</li>\n<li>web-client，即是前端web客户端，它只向api网关dispatcher发送请求，并且在请求的header中传递Service-Name字段，指明要请求的服务名称.</li>\n</ul>\n<h2 id=\"3-运行demo\"><a href=\"#3-运行demo\" class=\"headerlink\" title=\"3. 运行demo\"></a>3. 运行demo</h2><h3 id=\"3-1-bin-zkServer-sh-start启动zookeeper\"><a href=\"#3-1-bin-zkServer-sh-start启动zookeeper\" class=\"headerlink\" title=\"3.1 bin/zkServer.sh start启动zookeeper\"></a>3.1 bin/zkServer.sh start启动zookeeper</h3><p>没有zookeeper请先下载：<a href=\"http://zookeeper.apache.org/releases.html\">http://zookeeper.apache.org/releases.html</a></p>\n<h3 id=\"3-2-打包运行api-demo\"><a href=\"#3-2-打包运行api-demo\" class=\"headerlink\" title=\"3.2 打包运行api-demo\"></a>3.2 打包运行api-demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../microservices/services/api-demo</span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\">java -jar api-demo-1.0.0.jar</span><br></pre></td></tr></table></figure>\n<p>或者直接导入项目，运行ApiDemoApplication启动.</p>\n<h3 id=\"3-3-运行api网关dispatcher\"><a href=\"#3-3-运行api网关dispatcher\" class=\"headerlink\" title=\"3.3 运行api网关dispatcher\"></a>3.3 运行api网关dispatcher</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../microservices/api-gateway/dispatcher</span><br><span class=\"line\">node app.js</span><br></pre></td></tr></table></figure>\n<p>如果想每次更改代码后即刻生效，可使用supervisor模块启动应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install supervisor -g</span><br><span class=\"line\">supervisor app.js</span><br></pre></td></tr></table></figure></p>\n<p>如果需要Node应用在发生异常停止时能够重新启动，可使用forever模块启动应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br><span class=\"line\">forever app.js</span><br></pre></td></tr></table></figure></p>\n<p>forever app.js表示在前台启动，想要后台启动，使用命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever start app.js</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-4-运行web-client，访问首页，进行服务请求\"><a href=\"#3-4-运行web-client，访问首页，进行服务请求\" class=\"headerlink\" title=\"3.4 运行web-client，访问首页，进行服务请求.\"></a>3.4 运行web-client，访问首页，进行服务请求.</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ../microservices/api-gateway/dispatcher</span><br><span class=\"line\">node app.js</span><br></pre></td></tr></table></figure>\n<p>访问：<a href=\"http://localhost:9001/\">http://localhost:9001/</a></p>\n","sticky":0},{"title":"java并发学习(一)","date":"2017-09-06T15:33:27.000Z","_content":"\n\n\n# 1. 进程和线程\n\n进程，是运行在自己地址空间内的自包容程序。\n\n而java并发系统，会共享内存和IO这样的资源，因此需要协调不同线程驱动的任务之间对资源的使用。\n\n线程机制是在执行程序表示的单一进程中创建任务。这样的好处是操作系统的透明性。\n\njava线程机制，抢占式，调度机会周期性地中断程序，将上下文切换到另一个线程。\n\n线程在设计上的好处是，简化了设计，同时具有松散耦合。\n\n# 2. 基本线程机制\n\n一个线程是进程内的一个单一的顺序控制流，单进程可以同时拥有多个并发任务，其底层是切分CPU时间。\n\n- 定义任务： 继承Runnable，实现run方法。\n\n- yield()线程让步。\n\n- Thread类\n\n- 使用Executor，可以管理一部任务的执行，而无需显式管理线程生命周期，是启动线程的优选方法。\n\n- ExecutorService：\n\nCachedThreadPool\n\nFixedThreadPool：定义好有限的线程集，一次性预先执行代价高昂的线程分配，需要线程时从线程池中获取，省去了创建线程的开销。\n\nSingleThreadPool：同时只有一条线程，顺序执行，序列化任务队列，可以省去贡献资源上的同步\n\n- 返回值，Callable接口，call()方法，Future对象，get()和isDone()方法。\n\n- 休眠：sleep()\n\n- 如果必须控制任务执行的顺序，最好的方式就是使用同步控制。\n\n- 优先级：getPriority(),setPriority(),set优先级是在run的开头部分设置，由于不同系统的有限级别难以一一适配，所以，调整优先级最好是只用这3种：MAX_PRIORITY,NORM_PRIORITY,MIN_PRIORITY\n\n- 让步：yield(),\n\n- 后台线程：\n当所有非后台线程结束时，程序终止，并且杀死所有后台线程。\nsetDeamon(true);\n通过编写定制的ThreadFactory可以定制由Executor创建的线程的属性（后台、优先、名称）\n\n一个后台线程创建的任何线程，会自动设置为后台线程。\n非后台的Executor通常是一种更好的方式，它控制所有任务可以同时被关闭。\n\n- 实现Runnable接口和使用Thread类的区别在于，使用接口，你可以继承另一个不同的类。\n\n- join(),在某个线程上调用，表示加入到某个线程，等待这个线程结束后，才开始执行。\n可使用interrupt()中断。\n\n- interrupt()时会抛出异常，然后就清除了interrupt的标记，这时调用isInterrupted()检查时就会是false。\n\n- 捕获异常：\nmain主体放到try-catch语句中没有作用。\n\nThread.UncaughtExceptionHandler接口，允许你在每个Thread对象上都附上一个异常处理器。\n\nThread.UncaughtExceptionHandler.uncaughtExcetion()会在线程因未捕获的异常而临近死亡时被调用。\n\n使用方法：\n\n1，可以创建一个新的ThreadFactory，在每个新建的Thread对象上附上一个Thread.UncaughtExceptionHandler，然后将这个ThreadFactory传递给Executors创建新的ExecutorService。\n\n2，如果知道要在代码中处处使用相同的异常处理，那么可以简单的在Thread类中设置一个静态域，并将这个处理器设置为默认的未捕获异常处理器。它只有在不存在线程专有的未捕获异常处理器时才被调用。\n\n\n\n# 3. 共享受限资源\n\n- 本质：基本上所有并发模式在解决线程冲突问题的时候，都是采用序列化访问共享资源的方案。\n\n- 互斥量。\n对于某个特定对象而言，其所有synchronized方法共享同一个锁，可防止多个任务同时访问被编码为对象内存。\n\nsynchronized static方法可以在类的范围内防止对static数据的并发访问。\n\n- Brian同步规则：如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。\n\n- 重点：如果一个类中有超过一个方法在处理临界数据，那么必须同步所有相关方法。每个访问临界共享资源的方法都必须被同步，否则它们就不会正确工作。\n\n- 使用显式的Lock对象：ReentrantLock\n\nLock的好处是可以在finally子句中维护抛出异常后的清理，同时具有更细粒度的控制力。\n\n- 平时用synchronized，需要特殊情况时使用Lock。\n\n- 原子性：原子性可以用于除long和double之外的所有基本类型之上的“简单操作”。\n为什么long和double不行？因为jvm可以将64位的读取和写入当做两个分离的32位操作来执行，这就产生了读写两个操作之间发生上下文切换的可能。\n\n- volitle，用于定义变量，提供原子性。它提供了变量在内存中的可视性，即更改会刷新到内存中，可以让别的线程看到。\n\n- 一般还是使用synchronized，只有在类中只有一个可变的域时，volitile才是安全的。\n\n- 原子类：\nAtomic\n可以一定程度的去除一些别的同步方法，但同步锁通常更安全。\n\n- 如何把一个不是线程安全的类变成线程安全？\n可以创造一个对象的Manager类，Manager类持有该对象，并控制对它的一切访问，唯一的public方法是get()对象的方法，并且是synchronized的。\n\n- 线程本地存储：ThreadLocal\n根除线程间变量共享，线程隔离。\n\n# 4. 终结任务\n\n- cancle(),isCancled()\n\n- 在阻塞时终结：\n\n进入阻塞几种方式：\n\n1，sleep\n\n2，wait\n\n3，等待某个输入输出完成\n\n4，视图获得对象锁而还没有获取到\n\n- 中断：interrupt()\n\n- 安全离开线程run方法的方式：\n\n1，calcled标志，cancle()\n\n2，interrupt()\n\n3，Executor.shotdownNow()\n\n4，Executor,submit(),Future,cancle()\n\n- 中断时要注意I/O的关闭等底层资源的关闭，因为不能中断正在试图获取synchronized锁或者I/O操作的线程。\n\n- 一个任务应该能够调用在同一个对象中的其他synchronized方法，而这个任务已经持有锁了。\n\n- interrupt()，可以中断被互斥锁所阻塞的调用，并且，interrupt()只能在任务处于阻塞时有效。\n\n- 清除中断状态：如果不清除，那么它可能会提醒你2次。\n\n- 清理策略：try-finally子句\n\n\n# 5. 线程间协作\n\n- wait(),notifyAll()\n\n- 关键：wait()会释放锁，而sleep()和yield()则不会\n\n- 要点：\n\n1，wait(),notifyAll()，notify()是基于类Object的，而不是属于Thread的一部分。而且，只能在同步控制方法或同步控制块里调用wait(),notifyAll()，notify()。\n\n2，必须用一个检查感兴趣的条件的while循环包围wait()，也即是说，不满足我条件，我就继续等的意思。\n\n\n\n","source":"_posts/java并发学习-一.md","raw":"---\ntitle: java并发学习(一)\ndate: 2017-09-06 23:33:27\ntags: [java, 并发, 多线程]\n---\n\n\n\n# 1. 进程和线程\n\n进程，是运行在自己地址空间内的自包容程序。\n\n而java并发系统，会共享内存和IO这样的资源，因此需要协调不同线程驱动的任务之间对资源的使用。\n\n线程机制是在执行程序表示的单一进程中创建任务。这样的好处是操作系统的透明性。\n\njava线程机制，抢占式，调度机会周期性地中断程序，将上下文切换到另一个线程。\n\n线程在设计上的好处是，简化了设计，同时具有松散耦合。\n\n# 2. 基本线程机制\n\n一个线程是进程内的一个单一的顺序控制流，单进程可以同时拥有多个并发任务，其底层是切分CPU时间。\n\n- 定义任务： 继承Runnable，实现run方法。\n\n- yield()线程让步。\n\n- Thread类\n\n- 使用Executor，可以管理一部任务的执行，而无需显式管理线程生命周期，是启动线程的优选方法。\n\n- ExecutorService：\n\nCachedThreadPool\n\nFixedThreadPool：定义好有限的线程集，一次性预先执行代价高昂的线程分配，需要线程时从线程池中获取，省去了创建线程的开销。\n\nSingleThreadPool：同时只有一条线程，顺序执行，序列化任务队列，可以省去贡献资源上的同步\n\n- 返回值，Callable接口，call()方法，Future对象，get()和isDone()方法。\n\n- 休眠：sleep()\n\n- 如果必须控制任务执行的顺序，最好的方式就是使用同步控制。\n\n- 优先级：getPriority(),setPriority(),set优先级是在run的开头部分设置，由于不同系统的有限级别难以一一适配，所以，调整优先级最好是只用这3种：MAX_PRIORITY,NORM_PRIORITY,MIN_PRIORITY\n\n- 让步：yield(),\n\n- 后台线程：\n当所有非后台线程结束时，程序终止，并且杀死所有后台线程。\nsetDeamon(true);\n通过编写定制的ThreadFactory可以定制由Executor创建的线程的属性（后台、优先、名称）\n\n一个后台线程创建的任何线程，会自动设置为后台线程。\n非后台的Executor通常是一种更好的方式，它控制所有任务可以同时被关闭。\n\n- 实现Runnable接口和使用Thread类的区别在于，使用接口，你可以继承另一个不同的类。\n\n- join(),在某个线程上调用，表示加入到某个线程，等待这个线程结束后，才开始执行。\n可使用interrupt()中断。\n\n- interrupt()时会抛出异常，然后就清除了interrupt的标记，这时调用isInterrupted()检查时就会是false。\n\n- 捕获异常：\nmain主体放到try-catch语句中没有作用。\n\nThread.UncaughtExceptionHandler接口，允许你在每个Thread对象上都附上一个异常处理器。\n\nThread.UncaughtExceptionHandler.uncaughtExcetion()会在线程因未捕获的异常而临近死亡时被调用。\n\n使用方法：\n\n1，可以创建一个新的ThreadFactory，在每个新建的Thread对象上附上一个Thread.UncaughtExceptionHandler，然后将这个ThreadFactory传递给Executors创建新的ExecutorService。\n\n2，如果知道要在代码中处处使用相同的异常处理，那么可以简单的在Thread类中设置一个静态域，并将这个处理器设置为默认的未捕获异常处理器。它只有在不存在线程专有的未捕获异常处理器时才被调用。\n\n\n\n# 3. 共享受限资源\n\n- 本质：基本上所有并发模式在解决线程冲突问题的时候，都是采用序列化访问共享资源的方案。\n\n- 互斥量。\n对于某个特定对象而言，其所有synchronized方法共享同一个锁，可防止多个任务同时访问被编码为对象内存。\n\nsynchronized static方法可以在类的范围内防止对static数据的并发访问。\n\n- Brian同步规则：如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。\n\n- 重点：如果一个类中有超过一个方法在处理临界数据，那么必须同步所有相关方法。每个访问临界共享资源的方法都必须被同步，否则它们就不会正确工作。\n\n- 使用显式的Lock对象：ReentrantLock\n\nLock的好处是可以在finally子句中维护抛出异常后的清理，同时具有更细粒度的控制力。\n\n- 平时用synchronized，需要特殊情况时使用Lock。\n\n- 原子性：原子性可以用于除long和double之外的所有基本类型之上的“简单操作”。\n为什么long和double不行？因为jvm可以将64位的读取和写入当做两个分离的32位操作来执行，这就产生了读写两个操作之间发生上下文切换的可能。\n\n- volitle，用于定义变量，提供原子性。它提供了变量在内存中的可视性，即更改会刷新到内存中，可以让别的线程看到。\n\n- 一般还是使用synchronized，只有在类中只有一个可变的域时，volitile才是安全的。\n\n- 原子类：\nAtomic\n可以一定程度的去除一些别的同步方法，但同步锁通常更安全。\n\n- 如何把一个不是线程安全的类变成线程安全？\n可以创造一个对象的Manager类，Manager类持有该对象，并控制对它的一切访问，唯一的public方法是get()对象的方法，并且是synchronized的。\n\n- 线程本地存储：ThreadLocal\n根除线程间变量共享，线程隔离。\n\n# 4. 终结任务\n\n- cancle(),isCancled()\n\n- 在阻塞时终结：\n\n进入阻塞几种方式：\n\n1，sleep\n\n2，wait\n\n3，等待某个输入输出完成\n\n4，视图获得对象锁而还没有获取到\n\n- 中断：interrupt()\n\n- 安全离开线程run方法的方式：\n\n1，calcled标志，cancle()\n\n2，interrupt()\n\n3，Executor.shotdownNow()\n\n4，Executor,submit(),Future,cancle()\n\n- 中断时要注意I/O的关闭等底层资源的关闭，因为不能中断正在试图获取synchronized锁或者I/O操作的线程。\n\n- 一个任务应该能够调用在同一个对象中的其他synchronized方法，而这个任务已经持有锁了。\n\n- interrupt()，可以中断被互斥锁所阻塞的调用，并且，interrupt()只能在任务处于阻塞时有效。\n\n- 清除中断状态：如果不清除，那么它可能会提醒你2次。\n\n- 清理策略：try-finally子句\n\n\n# 5. 线程间协作\n\n- wait(),notifyAll()\n\n- 关键：wait()会释放锁，而sleep()和yield()则不会\n\n- 要点：\n\n1，wait(),notifyAll()，notify()是基于类Object的，而不是属于Thread的一部分。而且，只能在同步控制方法或同步控制块里调用wait(),notifyAll()，notify()。\n\n2，必须用一个检查感兴趣的条件的while循环包围wait()，也即是说，不满足我条件，我就继续等的意思。\n\n\n\n","slug":"java并发学习-一","published":1,"updated":"2017-09-06T15:41:11.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usss001l00uupse3sytr","content":"<h1 id=\"1-进程和线程\"><a href=\"#1-进程和线程\" class=\"headerlink\" title=\"1. 进程和线程\"></a>1. 进程和线程</h1><p>进程，是运行在自己地址空间内的自包容程序。</p>\n<p>而java并发系统，会共享内存和IO这样的资源，因此需要协调不同线程驱动的任务之间对资源的使用。</p>\n<p>线程机制是在执行程序表示的单一进程中创建任务。这样的好处是操作系统的透明性。</p>\n<p>java线程机制，抢占式，调度机会周期性地中断程序，将上下文切换到另一个线程。</p>\n<p>线程在设计上的好处是，简化了设计，同时具有松散耦合。</p>\n<h1 id=\"2-基本线程机制\"><a href=\"#2-基本线程机制\" class=\"headerlink\" title=\"2. 基本线程机制\"></a>2. 基本线程机制</h1><p>一个线程是进程内的一个单一的顺序控制流，单进程可以同时拥有多个并发任务，其底层是切分CPU时间。</p>\n<ul>\n<li><p>定义任务： 继承Runnable，实现run方法。</p>\n</li>\n<li><p>yield()线程让步。</p>\n</li>\n<li><p>Thread类</p>\n</li>\n<li><p>使用Executor，可以管理一部任务的执行，而无需显式管理线程生命周期，是启动线程的优选方法。</p>\n</li>\n<li><p>ExecutorService：</p>\n</li>\n</ul>\n<p>CachedThreadPool</p>\n<p>FixedThreadPool：定义好有限的线程集，一次性预先执行代价高昂的线程分配，需要线程时从线程池中获取，省去了创建线程的开销。</p>\n<p>SingleThreadPool：同时只有一条线程，顺序执行，序列化任务队列，可以省去贡献资源上的同步</p>\n<ul>\n<li><p>返回值，Callable接口，call()方法，Future对象，get()和isDone()方法。</p>\n</li>\n<li><p>休眠：sleep()</p>\n</li>\n<li><p>如果必须控制任务执行的顺序，最好的方式就是使用同步控制。</p>\n</li>\n<li><p>优先级：getPriority(),setPriority(),set优先级是在run的开头部分设置，由于不同系统的有限级别难以一一适配，所以，调整优先级最好是只用这3种：MAX_PRIORITY,NORM_PRIORITY,MIN_PRIORITY</p>\n</li>\n<li><p>让步：yield(),</p>\n</li>\n<li><p>后台线程：<br>当所有非后台线程结束时，程序终止，并且杀死所有后台线程。<br>setDeamon(true);<br>通过编写定制的ThreadFactory可以定制由Executor创建的线程的属性（后台、优先、名称）</p>\n</li>\n</ul>\n<p>一个后台线程创建的任何线程，会自动设置为后台线程。<br>非后台的Executor通常是一种更好的方式，它控制所有任务可以同时被关闭。</p>\n<ul>\n<li><p>实现Runnable接口和使用Thread类的区别在于，使用接口，你可以继承另一个不同的类。</p>\n</li>\n<li><p>join(),在某个线程上调用，表示加入到某个线程，等待这个线程结束后，才开始执行。<br>可使用interrupt()中断。</p>\n</li>\n<li><p>interrupt()时会抛出异常，然后就清除了interrupt的标记，这时调用isInterrupted()检查时就会是false。</p>\n</li>\n<li><p>捕获异常：<br>main主体放到try-catch语句中没有作用。</p>\n</li>\n</ul>\n<p>Thread.UncaughtExceptionHandler接口，允许你在每个Thread对象上都附上一个异常处理器。</p>\n<p>Thread.UncaughtExceptionHandler.uncaughtExcetion()会在线程因未捕获的异常而临近死亡时被调用。</p>\n<p>使用方法：</p>\n<p>1，可以创建一个新的ThreadFactory，在每个新建的Thread对象上附上一个Thread.UncaughtExceptionHandler，然后将这个ThreadFactory传递给Executors创建新的ExecutorService。</p>\n<p>2，如果知道要在代码中处处使用相同的异常处理，那么可以简单的在Thread类中设置一个静态域，并将这个处理器设置为默认的未捕获异常处理器。它只有在不存在线程专有的未捕获异常处理器时才被调用。</p>\n<h1 id=\"3-共享受限资源\"><a href=\"#3-共享受限资源\" class=\"headerlink\" title=\"3. 共享受限资源\"></a>3. 共享受限资源</h1><ul>\n<li><p>本质：基本上所有并发模式在解决线程冲突问题的时候，都是采用序列化访问共享资源的方案。</p>\n</li>\n<li><p>互斥量。<br>对于某个特定对象而言，其所有synchronized方法共享同一个锁，可防止多个任务同时访问被编码为对象内存。</p>\n</li>\n</ul>\n<p>synchronized static方法可以在类的范围内防止对static数据的并发访问。</p>\n<ul>\n<li><p>Brian同步规则：如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。</p>\n</li>\n<li><p>重点：如果一个类中有超过一个方法在处理临界数据，那么必须同步所有相关方法。每个访问临界共享资源的方法都必须被同步，否则它们就不会正确工作。</p>\n</li>\n<li><p>使用显式的Lock对象：ReentrantLock</p>\n</li>\n</ul>\n<p>Lock的好处是可以在finally子句中维护抛出异常后的清理，同时具有更细粒度的控制力。</p>\n<ul>\n<li><p>平时用synchronized，需要特殊情况时使用Lock。</p>\n</li>\n<li><p>原子性：原子性可以用于除long和double之外的所有基本类型之上的“简单操作”。<br>为什么long和double不行？因为jvm可以将64位的读取和写入当做两个分离的32位操作来执行，这就产生了读写两个操作之间发生上下文切换的可能。</p>\n</li>\n<li><p>volitle，用于定义变量，提供原子性。它提供了变量在内存中的可视性，即更改会刷新到内存中，可以让别的线程看到。</p>\n</li>\n<li><p>一般还是使用synchronized，只有在类中只有一个可变的域时，volitile才是安全的。</p>\n</li>\n<li><p>原子类：<br>Atomic<br>可以一定程度的去除一些别的同步方法，但同步锁通常更安全。</p>\n</li>\n<li><p>如何把一个不是线程安全的类变成线程安全？<br>可以创造一个对象的Manager类，Manager类持有该对象，并控制对它的一切访问，唯一的public方法是get()对象的方法，并且是synchronized的。</p>\n</li>\n<li><p>线程本地存储：ThreadLocal<br>根除线程间变量共享，线程隔离。</p>\n</li>\n</ul>\n<h1 id=\"4-终结任务\"><a href=\"#4-终结任务\" class=\"headerlink\" title=\"4. 终结任务\"></a>4. 终结任务</h1><ul>\n<li><p>cancle(),isCancled()</p>\n</li>\n<li><p>在阻塞时终结：</p>\n</li>\n</ul>\n<p>进入阻塞几种方式：</p>\n<p>1，sleep</p>\n<p>2，wait</p>\n<p>3，等待某个输入输出完成</p>\n<p>4，视图获得对象锁而还没有获取到</p>\n<ul>\n<li><p>中断：interrupt()</p>\n</li>\n<li><p>安全离开线程run方法的方式：</p>\n</li>\n</ul>\n<p>1，calcled标志，cancle()</p>\n<p>2，interrupt()</p>\n<p>3，Executor.shotdownNow()</p>\n<p>4，Executor,submit(),Future,cancle()</p>\n<ul>\n<li><p>中断时要注意I/O的关闭等底层资源的关闭，因为不能中断正在试图获取synchronized锁或者I/O操作的线程。</p>\n</li>\n<li><p>一个任务应该能够调用在同一个对象中的其他synchronized方法，而这个任务已经持有锁了。</p>\n</li>\n<li><p>interrupt()，可以中断被互斥锁所阻塞的调用，并且，interrupt()只能在任务处于阻塞时有效。</p>\n</li>\n<li><p>清除中断状态：如果不清除，那么它可能会提醒你2次。</p>\n</li>\n<li><p>清理策略：try-finally子句</p>\n</li>\n</ul>\n<h1 id=\"5-线程间协作\"><a href=\"#5-线程间协作\" class=\"headerlink\" title=\"5. 线程间协作\"></a>5. 线程间协作</h1><ul>\n<li><p>wait(),notifyAll()</p>\n</li>\n<li><p>关键：wait()会释放锁，而sleep()和yield()则不会</p>\n</li>\n<li><p>要点：</p>\n</li>\n</ul>\n<p>1，wait(),notifyAll()，notify()是基于类Object的，而不是属于Thread的一部分。而且，只能在同步控制方法或同步控制块里调用wait(),notifyAll()，notify()。</p>\n<p>2，必须用一个检查感兴趣的条件的while循环包围wait()，也即是说，不满足我条件，我就继续等的意思。</p>\n","excerpt":"","more":"<h1 id=\"1-进程和线程\"><a href=\"#1-进程和线程\" class=\"headerlink\" title=\"1. 进程和线程\"></a>1. 进程和线程</h1><p>进程，是运行在自己地址空间内的自包容程序。</p>\n<p>而java并发系统，会共享内存和IO这样的资源，因此需要协调不同线程驱动的任务之间对资源的使用。</p>\n<p>线程机制是在执行程序表示的单一进程中创建任务。这样的好处是操作系统的透明性。</p>\n<p>java线程机制，抢占式，调度机会周期性地中断程序，将上下文切换到另一个线程。</p>\n<p>线程在设计上的好处是，简化了设计，同时具有松散耦合。</p>\n<h1 id=\"2-基本线程机制\"><a href=\"#2-基本线程机制\" class=\"headerlink\" title=\"2. 基本线程机制\"></a>2. 基本线程机制</h1><p>一个线程是进程内的一个单一的顺序控制流，单进程可以同时拥有多个并发任务，其底层是切分CPU时间。</p>\n<ul>\n<li><p>定义任务： 继承Runnable，实现run方法。</p>\n</li>\n<li><p>yield()线程让步。</p>\n</li>\n<li><p>Thread类</p>\n</li>\n<li><p>使用Executor，可以管理一部任务的执行，而无需显式管理线程生命周期，是启动线程的优选方法。</p>\n</li>\n<li><p>ExecutorService：</p>\n</li>\n</ul>\n<p>CachedThreadPool</p>\n<p>FixedThreadPool：定义好有限的线程集，一次性预先执行代价高昂的线程分配，需要线程时从线程池中获取，省去了创建线程的开销。</p>\n<p>SingleThreadPool：同时只有一条线程，顺序执行，序列化任务队列，可以省去贡献资源上的同步</p>\n<ul>\n<li><p>返回值，Callable接口，call()方法，Future对象，get()和isDone()方法。</p>\n</li>\n<li><p>休眠：sleep()</p>\n</li>\n<li><p>如果必须控制任务执行的顺序，最好的方式就是使用同步控制。</p>\n</li>\n<li><p>优先级：getPriority(),setPriority(),set优先级是在run的开头部分设置，由于不同系统的有限级别难以一一适配，所以，调整优先级最好是只用这3种：MAX_PRIORITY,NORM_PRIORITY,MIN_PRIORITY</p>\n</li>\n<li><p>让步：yield(),</p>\n</li>\n<li><p>后台线程：<br>当所有非后台线程结束时，程序终止，并且杀死所有后台线程。<br>setDeamon(true);<br>通过编写定制的ThreadFactory可以定制由Executor创建的线程的属性（后台、优先、名称）</p>\n</li>\n</ul>\n<p>一个后台线程创建的任何线程，会自动设置为后台线程。<br>非后台的Executor通常是一种更好的方式，它控制所有任务可以同时被关闭。</p>\n<ul>\n<li><p>实现Runnable接口和使用Thread类的区别在于，使用接口，你可以继承另一个不同的类。</p>\n</li>\n<li><p>join(),在某个线程上调用，表示加入到某个线程，等待这个线程结束后，才开始执行。<br>可使用interrupt()中断。</p>\n</li>\n<li><p>interrupt()时会抛出异常，然后就清除了interrupt的标记，这时调用isInterrupted()检查时就会是false。</p>\n</li>\n<li><p>捕获异常：<br>main主体放到try-catch语句中没有作用。</p>\n</li>\n</ul>\n<p>Thread.UncaughtExceptionHandler接口，允许你在每个Thread对象上都附上一个异常处理器。</p>\n<p>Thread.UncaughtExceptionHandler.uncaughtExcetion()会在线程因未捕获的异常而临近死亡时被调用。</p>\n<p>使用方法：</p>\n<p>1，可以创建一个新的ThreadFactory，在每个新建的Thread对象上附上一个Thread.UncaughtExceptionHandler，然后将这个ThreadFactory传递给Executors创建新的ExecutorService。</p>\n<p>2，如果知道要在代码中处处使用相同的异常处理，那么可以简单的在Thread类中设置一个静态域，并将这个处理器设置为默认的未捕获异常处理器。它只有在不存在线程专有的未捕获异常处理器时才被调用。</p>\n<h1 id=\"3-共享受限资源\"><a href=\"#3-共享受限资源\" class=\"headerlink\" title=\"3. 共享受限资源\"></a>3. 共享受限资源</h1><ul>\n<li><p>本质：基本上所有并发模式在解决线程冲突问题的时候，都是采用序列化访问共享资源的方案。</p>\n</li>\n<li><p>互斥量。<br>对于某个特定对象而言，其所有synchronized方法共享同一个锁，可防止多个任务同时访问被编码为对象内存。</p>\n</li>\n</ul>\n<p>synchronized static方法可以在类的范围内防止对static数据的并发访问。</p>\n<ul>\n<li><p>Brian同步规则：如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。</p>\n</li>\n<li><p>重点：如果一个类中有超过一个方法在处理临界数据，那么必须同步所有相关方法。每个访问临界共享资源的方法都必须被同步，否则它们就不会正确工作。</p>\n</li>\n<li><p>使用显式的Lock对象：ReentrantLock</p>\n</li>\n</ul>\n<p>Lock的好处是可以在finally子句中维护抛出异常后的清理，同时具有更细粒度的控制力。</p>\n<ul>\n<li><p>平时用synchronized，需要特殊情况时使用Lock。</p>\n</li>\n<li><p>原子性：原子性可以用于除long和double之外的所有基本类型之上的“简单操作”。<br>为什么long和double不行？因为jvm可以将64位的读取和写入当做两个分离的32位操作来执行，这就产生了读写两个操作之间发生上下文切换的可能。</p>\n</li>\n<li><p>volitle，用于定义变量，提供原子性。它提供了变量在内存中的可视性，即更改会刷新到内存中，可以让别的线程看到。</p>\n</li>\n<li><p>一般还是使用synchronized，只有在类中只有一个可变的域时，volitile才是安全的。</p>\n</li>\n<li><p>原子类：<br>Atomic<br>可以一定程度的去除一些别的同步方法，但同步锁通常更安全。</p>\n</li>\n<li><p>如何把一个不是线程安全的类变成线程安全？<br>可以创造一个对象的Manager类，Manager类持有该对象，并控制对它的一切访问，唯一的public方法是get()对象的方法，并且是synchronized的。</p>\n</li>\n<li><p>线程本地存储：ThreadLocal<br>根除线程间变量共享，线程隔离。</p>\n</li>\n</ul>\n<h1 id=\"4-终结任务\"><a href=\"#4-终结任务\" class=\"headerlink\" title=\"4. 终结任务\"></a>4. 终结任务</h1><ul>\n<li><p>cancle(),isCancled()</p>\n</li>\n<li><p>在阻塞时终结：</p>\n</li>\n</ul>\n<p>进入阻塞几种方式：</p>\n<p>1，sleep</p>\n<p>2，wait</p>\n<p>3，等待某个输入输出完成</p>\n<p>4，视图获得对象锁而还没有获取到</p>\n<ul>\n<li><p>中断：interrupt()</p>\n</li>\n<li><p>安全离开线程run方法的方式：</p>\n</li>\n</ul>\n<p>1，calcled标志，cancle()</p>\n<p>2，interrupt()</p>\n<p>3，Executor.shotdownNow()</p>\n<p>4，Executor,submit(),Future,cancle()</p>\n<ul>\n<li><p>中断时要注意I/O的关闭等底层资源的关闭，因为不能中断正在试图获取synchronized锁或者I/O操作的线程。</p>\n</li>\n<li><p>一个任务应该能够调用在同一个对象中的其他synchronized方法，而这个任务已经持有锁了。</p>\n</li>\n<li><p>interrupt()，可以中断被互斥锁所阻塞的调用，并且，interrupt()只能在任务处于阻塞时有效。</p>\n</li>\n<li><p>清除中断状态：如果不清除，那么它可能会提醒你2次。</p>\n</li>\n<li><p>清理策略：try-finally子句</p>\n</li>\n</ul>\n<h1 id=\"5-线程间协作\"><a href=\"#5-线程间协作\" class=\"headerlink\" title=\"5. 线程间协作\"></a>5. 线程间协作</h1><ul>\n<li><p>wait(),notifyAll()</p>\n</li>\n<li><p>关键：wait()会释放锁，而sleep()和yield()则不会</p>\n</li>\n<li><p>要点：</p>\n</li>\n</ul>\n<p>1，wait(),notifyAll()，notify()是基于类Object的，而不是属于Thread的一部分。而且，只能在同步控制方法或同步控制块里调用wait(),notifyAll()，notify()。</p>\n<p>2，必须用一个检查感兴趣的条件的while循环包围wait()，也即是说，不满足我条件，我就继续等的意思。</p>\n","sticky":0},{"title":"jquery-validate常用用法总结","date":"2016-01-04T09:05:28.000Z","_content":"\n\n1. juqry validate中，如何对使用ajax提交的方式进行校验？\n有两种方式\n    1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。\n    2)使用valid方法，监听form的submit事件，当$('#form').valid()返回true的时候再提交。\n    ```\n        //通过监听form的submit事件，对form进行ajax提交。\n         $('#formId').submit(function() {\n             if (!$(\"#formId\").valid()) \n                 return false;\n             $(this).omAjaxSubmit({});\n             return false; //此处必须返回false，阻止常规的form提交\n         });\n    ```\n2. juqry validate中，如何对校验错误的提示信息位置和样式进行更改？\n    1）js代码：\n    ```\n    $(function(){  \n        $(\"#form1\").validate({  \n            errorPlacement: function (error, element) {  \n                error.appendTo(element.parent(\"td\"));  \n            },  \n            rules:{              \n            }  \n        });  \n        $(\"[name$='.sign']\").each(function(){  \n            $(this).rules(\"add\",{required:true,messages:{required:\"至少选择一个选项\"}});  \n        });  \n    }); \n    ```\n    2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了\n    ```\n        <style>  \n        label.error {   \n            color:Red;   \n            font-size:13px;   \n            margin-left:5px;   \n            padding-left:16px;   \n        }   \n        </style> \n    ```\n    3) 校验时机，可以自定义在js中想要的时候去校验\n    ```\n        $('.selector').click(function() {\n            if ($(\"selector of you form\").valid()) {\n                alert('in');\n            } else {\n                alert('out');\n            }\n        });\n        $(\"selector of you form\").validate({\n            rules: {\n                receiveDayFrom: {\n                    required: true\n                }\n            }\n        }); \n    ```\n    4) 例子：\n    ```\n        $(\"#form\").validate({\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            },\n            errorPlacement: function ($error, $element) {\n                var name = $element.attr(\"name\");\n                $(\"#error\" + name).append($error);\n            }\n        });\n    ```\n        or:\n    ```\n        $(\"#form\").validate({\n            errorLabelContainer: \"#errors\",\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            }\n        });\n    ```\n\n3. 如何添加自定义的校验？\n\n- 添加一个方法\n    ```\n    // 字符验证，只能包含英文、数字、下划线等字符。    \n    jQuery.validator.addMethod(\"nameStringCheck\", function(value, element) {   \n         return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); \n    }, \"只能包含英文、数字、下划线等字符\");\n    ```\n- 在validate配置中使用新加的方法\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                required: true,\n                nameStringCheck: true\n            }\n        }\n    });\n    ```\n\n4. 如何使用ajax请求进行远程校验\n    ```\n    jQuery.validator.addMethod(\"checkUnique\", function(value, element) {\n        return validateUsernameByAjax(value, element.name, 'ajax请求地址');\n    }, \"此输入的值不可用\");\n    ```\n\n    ```\n    /**\n     * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true\n     */\n    function validateUsernameByAjax(value, fieldname, url) {\n        var _request = url + \"?\"+fieldname+\"=\"+value;\n        var deferred = $.Deferred();//创建一个延迟对象\n        $.ajax({\n            url:_request,\n            async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码\n            dataType:\"json\",\n            success:function(data) {\n                if (data.status === \"error\" || data.status === \"fail\") {\n                    deferred.reject();\n                } else{\n                    deferred.resolve();  \n                }\n            }\n        });\n        //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功\n        return deferred.state() == \"resolved\" ? true : false;\n    }\n    ```\n\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                checkUnique: true\n            }\n        }\n    });\n    ```\n","source":"_posts/jquery-validate常用用法总结.md","raw":"---\ntitle: jquery-validate常用用法总结\ndate: 2016-01-04 17:05:28\ntags: [jquery,validate]\n---\n\n\n1. juqry validate中，如何对使用ajax提交的方式进行校验？\n有两种方式\n    1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。\n    2)使用valid方法，监听form的submit事件，当$('#form').valid()返回true的时候再提交。\n    ```\n        //通过监听form的submit事件，对form进行ajax提交。\n         $('#formId').submit(function() {\n             if (!$(\"#formId\").valid()) \n                 return false;\n             $(this).omAjaxSubmit({});\n             return false; //此处必须返回false，阻止常规的form提交\n         });\n    ```\n2. juqry validate中，如何对校验错误的提示信息位置和样式进行更改？\n    1）js代码：\n    ```\n    $(function(){  \n        $(\"#form1\").validate({  \n            errorPlacement: function (error, element) {  \n                error.appendTo(element.parent(\"td\"));  \n            },  \n            rules:{              \n            }  \n        });  \n        $(\"[name$='.sign']\").each(function(){  \n            $(this).rules(\"add\",{required:true,messages:{required:\"至少选择一个选项\"}});  \n        });  \n    }); \n    ```\n    2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了\n    ```\n        <style>  \n        label.error {   \n            color:Red;   \n            font-size:13px;   \n            margin-left:5px;   \n            padding-left:16px;   \n        }   \n        </style> \n    ```\n    3) 校验时机，可以自定义在js中想要的时候去校验\n    ```\n        $('.selector').click(function() {\n            if ($(\"selector of you form\").valid()) {\n                alert('in');\n            } else {\n                alert('out');\n            }\n        });\n        $(\"selector of you form\").validate({\n            rules: {\n                receiveDayFrom: {\n                    required: true\n                }\n            }\n        }); \n    ```\n    4) 例子：\n    ```\n        $(\"#form\").validate({\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            },\n            errorPlacement: function ($error, $element) {\n                var name = $element.attr(\"name\");\n                $(\"#error\" + name).append($error);\n            }\n        });\n    ```\n        or:\n    ```\n        $(\"#form\").validate({\n            errorLabelContainer: \"#errors\",\n            rules: {\n                name: {\n                    required: true\n                },\n                firstname: {\n                    required: true\n                }\n            },\n            messages: {\n                name: {\n                    required: \"Enter name\"\n                },\n                firstname: {\n                    required: \"Enter firstname\"\n                }\n            }\n        });\n    ```\n\n3. 如何添加自定义的校验？\n\n- 添加一个方法\n    ```\n    // 字符验证，只能包含英文、数字、下划线等字符。    \n    jQuery.validator.addMethod(\"nameStringCheck\", function(value, element) {   \n         return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); \n    }, \"只能包含英文、数字、下划线等字符\");\n    ```\n- 在validate配置中使用新加的方法\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                required: true,\n                nameStringCheck: true\n            }\n        }\n    });\n    ```\n\n4. 如何使用ajax请求进行远程校验\n    ```\n    jQuery.validator.addMethod(\"checkUnique\", function(value, element) {\n        return validateUsernameByAjax(value, element.name, 'ajax请求地址');\n    }, \"此输入的值不可用\");\n    ```\n\n    ```\n    /**\n     * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true\n     */\n    function validateUsernameByAjax(value, fieldname, url) {\n        var _request = url + \"?\"+fieldname+\"=\"+value;\n        var deferred = $.Deferred();//创建一个延迟对象\n        $.ajax({\n            url:_request,\n            async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码\n            dataType:\"json\",\n            success:function(data) {\n                if (data.status === \"error\" || data.status === \"fail\") {\n                    deferred.reject();\n                } else{\n                    deferred.resolve();  \n                }\n            }\n        });\n        //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功\n        return deferred.state() == \"resolved\" ? true : false;\n    }\n    ```\n\n    ```\n    $('#form selector').validate({\n        rules: {\n            username: {\n                checkUnique: true\n            }\n        }\n    });\n    ```\n","slug":"jquery-validate常用用法总结","published":1,"updated":"2016-02-20T04:02:04.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ussx001n00uuy1cfuw58","content":"<ol>\n<li><p>juqry validate中，如何对使用ajax提交的方式进行校验？<br>有两种方式<br> 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。<br> 2)使用valid方法，监听form的submit事件，当$(‘#form’).valid()返回true的时候再提交。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过监听form的submit事件，对form进行ajax提交。</span><br><span class=\"line\"> $(&apos;#formId&apos;).submit(function() &#123;</span><br><span class=\"line\">     if (!$(&quot;#formId&quot;).valid()) </span><br><span class=\"line\">         return false;</span><br><span class=\"line\">     $(this).omAjaxSubmit(&#123;&#125;);</span><br><span class=\"line\">     return false; //此处必须返回false，阻止常规的form提交</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>juqry validate中，如何对校验错误的提示信息位置和样式进行更改？<br> 1）js代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;  </span><br><span class=\"line\">    $(&quot;#form1&quot;).validate(&#123;  </span><br><span class=\"line\">        errorPlacement: function (error, element) &#123;  </span><br><span class=\"line\">            error.appendTo(element.parent(&quot;td&quot;));  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        rules:&#123;              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">    $(&quot;[name$=&apos;.sign&apos;]&quot;).each(function()&#123;  </span><br><span class=\"line\">        $(this).rules(&quot;add&quot;,&#123;required:true,messages:&#123;required:&quot;至少选择一个选项&quot;&#125;&#125;);  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;  </span><br><span class=\"line\">label.error &#123;   </span><br><span class=\"line\">    color:Red;   </span><br><span class=\"line\">    font-size:13px;   </span><br><span class=\"line\">    margin-left:5px;   </span><br><span class=\"line\">    padding-left:16px;   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p> 3) 校验时机，可以自定义在js中想要的时候去校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.selector&apos;).click(function() &#123;</span><br><span class=\"line\">    if ($(&quot;selector of you form&quot;).valid()) &#123;</span><br><span class=\"line\">        alert(&apos;in&apos;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;out&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;selector of you form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        receiveDayFrom: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 4) 例子：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    errorPlacement: function ($error, $element) &#123;</span><br><span class=\"line\">        var name = $element.attr(&quot;name&quot;);</span><br><span class=\"line\">        $(&quot;#error&quot; + name).append($error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<pre><code>or:\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    errorLabelContainer: &quot;#errors&quot;,</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何添加自定义的校验？</p>\n</li>\n</ol>\n<ul>\n<li><p>添加一个方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符验证，只能包含英文、数字、下划线等字符。    </span><br><span class=\"line\">jQuery.validator.addMethod(&quot;nameStringCheck&quot;, function(value, element) &#123;   </span><br><span class=\"line\">     return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); </span><br><span class=\"line\">&#125;, &quot;只能包含英文、数字、下划线等字符&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在validate配置中使用新加的方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            nameStringCheck: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>如何使用ajax请求进行远程校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.validator.addMethod(&quot;checkUnique&quot;, function(value, element) &#123;</span><br><span class=\"line\">    return validateUsernameByAjax(value, element.name, &apos;ajax请求地址&apos;);</span><br><span class=\"line\">&#125;, &quot;此输入的值不可用&quot;);</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true</span><br><span class=\"line\"> */</span><br><span class=\"line\">function validateUsernameByAjax(value, fieldname, url) &#123;</span><br><span class=\"line\">    var _request = url + &quot;?&quot;+fieldname+&quot;=&quot;+value;</span><br><span class=\"line\">    var deferred = $.Deferred();//创建一个延迟对象</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:_request,</span><br><span class=\"line\">        async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码</span><br><span class=\"line\">        dataType:&quot;json&quot;,</span><br><span class=\"line\">        success:function(data) &#123;</span><br><span class=\"line\">            if (data.status === &quot;error&quot; || data.status === &quot;fail&quot;) &#123;</span><br><span class=\"line\">                deferred.reject();</span><br><span class=\"line\">            &#125; else&#123;</span><br><span class=\"line\">                deferred.resolve();  </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功</span><br><span class=\"line\">    return deferred.state() == &quot;resolved&quot; ? true : false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            checkUnique: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>juqry validate中，如何对使用ajax提交的方式进行校验？<br>有两种方式<br> 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。<br> 2)使用valid方法，监听form的submit事件，当$(‘#form’).valid()返回true的时候再提交。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过监听form的submit事件，对form进行ajax提交。</span><br><span class=\"line\"> $(&apos;#formId&apos;).submit(function() &#123;</span><br><span class=\"line\">     if (!$(&quot;#formId&quot;).valid()) </span><br><span class=\"line\">         return false;</span><br><span class=\"line\">     $(this).omAjaxSubmit(&#123;&#125;);</span><br><span class=\"line\">     return false; //此处必须返回false，阻止常规的form提交</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>juqry validate中，如何对校验错误的提示信息位置和样式进行更改？<br> 1）js代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;  </span><br><span class=\"line\">    $(&quot;#form1&quot;).validate(&#123;  </span><br><span class=\"line\">        errorPlacement: function (error, element) &#123;  </span><br><span class=\"line\">            error.appendTo(element.parent(&quot;td&quot;));  </span><br><span class=\"line\">        &#125;,  </span><br><span class=\"line\">        rules:&#123;              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">    $(&quot;[name$=&apos;.sign&apos;]&quot;).each(function()&#123;  </span><br><span class=\"line\">        $(this).rules(&quot;add&quot;,&#123;required:true,messages:&#123;required:&quot;至少选择一个选项&quot;&#125;&#125;);  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;  </span><br><span class=\"line\">label.error &#123;   </span><br><span class=\"line\">    color:Red;   </span><br><span class=\"line\">    font-size:13px;   </span><br><span class=\"line\">    margin-left:5px;   </span><br><span class=\"line\">    padding-left:16px;   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p> 3) 校验时机，可以自定义在js中想要的时候去校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.selector&apos;).click(function() &#123;</span><br><span class=\"line\">    if ($(&quot;selector of you form&quot;).valid()) &#123;</span><br><span class=\"line\">        alert(&apos;in&apos;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        alert(&apos;out&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&quot;selector of you form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        receiveDayFrom: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 4) 例子：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    errorPlacement: function ($error, $element) &#123;</span><br><span class=\"line\">        var name = $element.attr(&quot;name&quot;);</span><br><span class=\"line\">        $(&quot;#error&quot; + name).append($error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<pre><code>or:\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#form&quot;).validate(&#123;</span><br><span class=\"line\">    errorLabelContainer: &quot;#errors&quot;,</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    messages: &#123;</span><br><span class=\"line\">        name: &#123;</span><br><span class=\"line\">            required: &quot;Enter name&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        firstname: &#123;</span><br><span class=\"line\">            required: &quot;Enter firstname&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如何添加自定义的校验？</p>\n</li>\n</ol>\n<ul>\n<li><p>添加一个方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字符验证，只能包含英文、数字、下划线等字符。    </span><br><span class=\"line\">jQuery.validator.addMethod(&quot;nameStringCheck&quot;, function(value, element) &#123;   </span><br><span class=\"line\">     return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); </span><br><span class=\"line\">&#125;, &quot;只能包含英文、数字、下划线等字符&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在validate配置中使用新加的方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            nameStringCheck: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>如何使用ajax请求进行远程校验</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.validator.addMethod(&quot;checkUnique&quot;, function(value, element) &#123;</span><br><span class=\"line\">    return validateUsernameByAjax(value, element.name, &apos;ajax请求地址&apos;);</span><br><span class=\"line\">&#125;, &quot;此输入的值不可用&quot;);</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 同步做用户名或邮箱的请求，检查到不可用，则返回false，否则返回true</span><br><span class=\"line\"> */</span><br><span class=\"line\">function validateUsernameByAjax(value, fieldname, url) &#123;</span><br><span class=\"line\">    var _request = url + &quot;?&quot;+fieldname+&quot;=&quot;+value;</span><br><span class=\"line\">    var deferred = $.Deferred();//创建一个延迟对象</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url:_request,</span><br><span class=\"line\">        async:false,//要指定不能异步,必须等待后台服务校验完成再执行后续代码</span><br><span class=\"line\">        dataType:&quot;json&quot;,</span><br><span class=\"line\">        success:function(data) &#123;</span><br><span class=\"line\">            if (data.status === &quot;error&quot; || data.status === &quot;fail&quot;) &#123;</span><br><span class=\"line\">                deferred.reject();</span><br><span class=\"line\">            &#125; else&#123;</span><br><span class=\"line\">                deferred.resolve();  </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //deferred.state()有3个状态:pending:还未结束,rejected:失败,resolved:成功</span><br><span class=\"line\">    return deferred.state() == &quot;resolved&quot; ? true : false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#form selector&apos;).validate(&#123;</span><br><span class=\"line\">    rules: &#123;</span><br><span class=\"line\">        username: &#123;</span><br><span class=\"line\">            checkUnique: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","sticky":0},{"title":"[microservices]01-Spring boot开发微服务","date":"2017-03-29T13:33:23.000Z","_content":"\n# Spring boot开发微服务\n\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. 为什么使用spring boot？\n\n- 1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。\n- 2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。\n- 3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n\n## 2. 开始第一个springboot项目\n在一切开始之前，我们首先要知道如何开始一个springboot项目。\n\n### 2.1. 创建一个空的maven项目，pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.2. 编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 2.3. 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n","source":"_posts/microservices-01-Spring-boot开发微服务.md","raw":"---\ntitle: '[microservices]01-Spring boot开发微服务'\ndate: 2017-03-29 21:33:23\ntags: [microservices,java,spring boot]\n---\n\n# Spring boot开发微服务\n\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. 为什么使用spring boot？\n\n- 1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。\n- 2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。\n- 3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n\n## 2. 开始第一个springboot项目\n在一切开始之前，我们首先要知道如何开始一个springboot项目。\n\n### 2.1. 创建一个空的maven项目，pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.2. 编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 2.3. 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n","slug":"microservices-01-Spring-boot开发微服务","published":1,"updated":"2017-03-29T13:43:43.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ustb001p00uu59pqwxj4","content":"<h1 id=\"Spring-boot开发微服务\"><a href=\"#Spring-boot开发微服务\" class=\"headerlink\" title=\"Spring boot开发微服务\"></a>Spring boot开发微服务</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\" target=\"_blank\" rel=\"external\">microservices</a></li>\n</ul>\n<h2 id=\"1-为什么使用spring-boot？\"><a href=\"#1-为什么使用spring-boot？\" class=\"headerlink\" title=\"1. 为什么使用spring boot？\"></a>1. 为什么使用spring boot？</h2><ul>\n<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>\n<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>\n<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>\n</ul>\n<h2 id=\"2-开始第一个springboot项目\"><a href=\"#2-开始第一个springboot项目\" class=\"headerlink\" title=\"2. 开始第一个springboot项目\"></a>2. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>\n<h3 id=\"2-1-创建一个空的maven项目，pom-xml中添加maven依赖\"><a href=\"#2-1-创建一个空的maven项目，pom-xml中添加maven依赖\" class=\"headerlink\" title=\"2.1. 创建一个空的maven项目，pom.xml中添加maven依赖\"></a>2.1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-编写项目启动入口App-java\"><a href=\"#2-2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2.2. 编写项目启动入口App.java\"></a>2.2. 编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"2-3-再进一步，为应用引入spring-mvc\"><a href=\"#2-3-再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"2.3. 再进一步，为应用引入spring mvc\"></a>2.3. 再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n","excerpt":"","more":"<h1 id=\"Spring-boot开发微服务\"><a href=\"#Spring-boot开发微服务\" class=\"headerlink\" title=\"Spring boot开发微服务\"></a>Spring boot开发微服务</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\">microservices</a></li>\n</ul>\n<h2 id=\"1-为什么使用spring-boot？\"><a href=\"#1-为什么使用spring-boot？\" class=\"headerlink\" title=\"1. 为什么使用spring boot？\"></a>1. 为什么使用spring boot？</h2><ul>\n<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>\n<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>\n<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>\n</ul>\n<h2 id=\"2-开始第一个springboot项目\"><a href=\"#2-开始第一个springboot项目\" class=\"headerlink\" title=\"2. 开始第一个springboot项目\"></a>2. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>\n<h3 id=\"2-1-创建一个空的maven项目，pom-xml中添加maven依赖\"><a href=\"#2-1-创建一个空的maven项目，pom-xml中添加maven依赖\" class=\"headerlink\" title=\"2.1. 创建一个空的maven项目，pom.xml中添加maven依赖\"></a>2.1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-编写项目启动入口App-java\"><a href=\"#2-2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2.2. 编写项目启动入口App.java\"></a>2.2. 编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"2-3-再进一步，为应用引入spring-mvc\"><a href=\"#2-3-再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"2.3. 再进一步，为应用引入spring mvc\"></a>2.3. 再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n","sticky":0},{"title":"[microservices]02-Nodejs&Express作为微服务api网关","date":"2017-03-29T12:54:07.000Z","_content":"\n# [microservices]02-Nodejs&Express作为微服务api网关\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. 安装Node、NPM和Express\n\n安装Nodejs后，npm会一起安装，然后npm install express安装Express.\n\n## 2. 使用Express框架开发web应用\n\nexpress使用例子：\n```\nvar express = require('express');\nvar port = 1234;\nvar app = express();\napp.use(express.static('.'));\napp.listen(port, function(){\n    console.log('server is running at %d', port);\n});\n```\n\nexpress进行简易路由：\n```\napp.get('/hello', function(req, res){\n    res.send('Hello');\n});\n```\n\n## 3. 搭建Nodejs集群环境\n\n利用服务器的多核CPU，让每个CPU都运行一个Node.js进程，例子：\n```\nvar cluster = require('cluster');  \nvar express = require('express');  \nvar numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {  \n    for (var i = 0; i < numCPUs; i++) {\n        // Create a worker\n        cluster.fork();\n    }\n} else {\n    // Workers share the TCP connection in this server\n    var app = express();\n\n    app.get('/', function (req, res) {\n        res.send('Hello World!');\n    });\n\n    // All workers use this port\n    app.listen(8080);\n}\n```\n\n## 4. 使用Node.js实现反向代理，作为统一服务网关\n\n使用Node作为api网关，原理是利用Node的http-proxy模块来启动代理服务器，实现反向代理。\n例子：\n```\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar PORT = 3000;\n\nvar proxy = httpProxy.createProxyServer();\nproxy.on('error', function(err, req, res){\n    res.end();//当代理的请求发生错误时，输出空白的相应数据\n});\n\nvar app = http.createServer(function(req, res) {\n    proxy.web(req, res, {\n        target: 'http://localhost:8080' //代理的目标地址\n    });\n});\napp.listen(PORT, function(){\n    console.log('server is running at %d', port);\n});\n\n```\n\n- 下一步，就是服务的注册和发现，Nodejs网关将需要增加服务发现的功能\n\n\n\n","source":"_posts/microservices-02-Nodejs-Express作为微服务api网关.md","raw":"---\ntitle: '[microservices]02-Nodejs&Express作为微服务api网关'\ndate: 2017-03-29 20:54:07\ntags: [microservices,Node.js,Express,微服务,api网关,api-gateway,zookeeper]\n---\n\n# [microservices]02-Nodejs&Express作为微服务api网关\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. 安装Node、NPM和Express\n\n安装Nodejs后，npm会一起安装，然后npm install express安装Express.\n\n## 2. 使用Express框架开发web应用\n\nexpress使用例子：\n```\nvar express = require('express');\nvar port = 1234;\nvar app = express();\napp.use(express.static('.'));\napp.listen(port, function(){\n    console.log('server is running at %d', port);\n});\n```\n\nexpress进行简易路由：\n```\napp.get('/hello', function(req, res){\n    res.send('Hello');\n});\n```\n\n## 3. 搭建Nodejs集群环境\n\n利用服务器的多核CPU，让每个CPU都运行一个Node.js进程，例子：\n```\nvar cluster = require('cluster');  \nvar express = require('express');  \nvar numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {  \n    for (var i = 0; i < numCPUs; i++) {\n        // Create a worker\n        cluster.fork();\n    }\n} else {\n    // Workers share the TCP connection in this server\n    var app = express();\n\n    app.get('/', function (req, res) {\n        res.send('Hello World!');\n    });\n\n    // All workers use this port\n    app.listen(8080);\n}\n```\n\n## 4. 使用Node.js实现反向代理，作为统一服务网关\n\n使用Node作为api网关，原理是利用Node的http-proxy模块来启动代理服务器，实现反向代理。\n例子：\n```\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar PORT = 3000;\n\nvar proxy = httpProxy.createProxyServer();\nproxy.on('error', function(err, req, res){\n    res.end();//当代理的请求发生错误时，输出空白的相应数据\n});\n\nvar app = http.createServer(function(req, res) {\n    proxy.web(req, res, {\n        target: 'http://localhost:8080' //代理的目标地址\n    });\n});\napp.listen(PORT, function(){\n    console.log('server is running at %d', port);\n});\n\n```\n\n- 下一步，就是服务的注册和发现，Nodejs网关将需要增加服务发现的功能\n\n\n\n","slug":"microservices-02-Nodejs-Express作为微服务api网关","published":1,"updated":"2017-03-29T13:43:52.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ustg001s00uuq93kqf3t","content":"<h1 id=\"microservices-02-Nodejs-amp-Express作为微服务api网关\"><a href=\"#microservices-02-Nodejs-amp-Express作为微服务api网关\" class=\"headerlink\" title=\"[microservices]02-Nodejs&amp;Express作为微服务api网关\"></a>[microservices]02-Nodejs&amp;Express作为微服务api网关</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\" target=\"_blank\" rel=\"external\">microservices</a></li>\n</ul>\n<h2 id=\"1-安装Node、NPM和Express\"><a href=\"#1-安装Node、NPM和Express\" class=\"headerlink\" title=\"1. 安装Node、NPM和Express\"></a>1. 安装Node、NPM和Express</h2><p>安装Nodejs后，npm会一起安装，然后npm install express安装Express.</p>\n<h2 id=\"2-使用Express框架开发web应用\"><a href=\"#2-使用Express框架开发web应用\" class=\"headerlink\" title=\"2. 使用Express框架开发web应用\"></a>2. 使用Express框架开发web应用</h2><p>express使用例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var port = 1234;</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(express.static(&apos;.&apos;));</span><br><span class=\"line\">app.listen(port, function()&#123;</span><br><span class=\"line\">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>express进行简易路由：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/hello&apos;, function(req, res)&#123;</span><br><span class=\"line\">    res.send(&apos;Hello&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-搭建Nodejs集群环境\"><a href=\"#3-搭建Nodejs集群环境\" class=\"headerlink\" title=\"3. 搭建Nodejs集群环境\"></a>3. 搭建Nodejs集群环境</h2><p>利用服务器的多核CPU，让每个CPU都运行一个Node.js进程，例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cluster = require(&apos;cluster&apos;);  </span><br><span class=\"line\">var express = require(&apos;express&apos;);  </span><br><span class=\"line\">var numCPUs = require(&apos;os&apos;).cpus().length;</span><br><span class=\"line\"></span><br><span class=\"line\">if (cluster.isMaster) &#123;  </span><br><span class=\"line\">    for (var i = 0; i &lt; numCPUs; i++) &#123;</span><br><span class=\"line\">        // Create a worker</span><br><span class=\"line\">        cluster.fork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // Workers share the TCP connection in this server</span><br><span class=\"line\">    var app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">        res.send(&apos;Hello World!&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // All workers use this port</span><br><span class=\"line\">    app.listen(8080);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-使用Node-js实现反向代理，作为统一服务网关\"><a href=\"#4-使用Node-js实现反向代理，作为统一服务网关\" class=\"headerlink\" title=\"4. 使用Node.js实现反向代理，作为统一服务网关\"></a>4. 使用Node.js实现反向代理，作为统一服务网关</h2><p>使用Node作为api网关，原理是利用Node的http-proxy模块来启动代理服务器，实现反向代理。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var httpProxy = require(&apos;http-proxy&apos;);</span><br><span class=\"line\">var PORT = 3000;</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = httpProxy.createProxyServer();</span><br><span class=\"line\">proxy.on(&apos;error&apos;, function(err, req, res)&#123;</span><br><span class=\"line\">    res.end();//当代理的请求发生错误时，输出空白的相应数据</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = http.createServer(function(req, res) &#123;</span><br><span class=\"line\">    proxy.web(req, res, &#123;</span><br><span class=\"line\">        target: &apos;http://localhost:8080&apos; //代理的目标地址</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(PORT, function()&#123;</span><br><span class=\"line\">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>下一步，就是服务的注册和发现，Nodejs网关将需要增加服务发现的功能</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"microservices-02-Nodejs-amp-Express作为微服务api网关\"><a href=\"#microservices-02-Nodejs-amp-Express作为微服务api网关\" class=\"headerlink\" title=\"[microservices]02-Nodejs&amp;Express作为微服务api网关\"></a>[microservices]02-Nodejs&amp;Express作为微服务api网关</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\">microservices</a></li>\n</ul>\n<h2 id=\"1-安装Node、NPM和Express\"><a href=\"#1-安装Node、NPM和Express\" class=\"headerlink\" title=\"1. 安装Node、NPM和Express\"></a>1. 安装Node、NPM和Express</h2><p>安装Nodejs后，npm会一起安装，然后npm install express安装Express.</p>\n<h2 id=\"2-使用Express框架开发web应用\"><a href=\"#2-使用Express框架开发web应用\" class=\"headerlink\" title=\"2. 使用Express框架开发web应用\"></a>2. 使用Express框架开发web应用</h2><p>express使用例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var port = 1234;</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(express.static(&apos;.&apos;));</span><br><span class=\"line\">app.listen(port, function()&#123;</span><br><span class=\"line\">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>express进行简易路由：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&apos;/hello&apos;, function(req, res)&#123;</span><br><span class=\"line\">    res.send(&apos;Hello&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-搭建Nodejs集群环境\"><a href=\"#3-搭建Nodejs集群环境\" class=\"headerlink\" title=\"3. 搭建Nodejs集群环境\"></a>3. 搭建Nodejs集群环境</h2><p>利用服务器的多核CPU，让每个CPU都运行一个Node.js进程，例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cluster = require(&apos;cluster&apos;);  </span><br><span class=\"line\">var express = require(&apos;express&apos;);  </span><br><span class=\"line\">var numCPUs = require(&apos;os&apos;).cpus().length;</span><br><span class=\"line\"></span><br><span class=\"line\">if (cluster.isMaster) &#123;  </span><br><span class=\"line\">    for (var i = 0; i &lt; numCPUs; i++) &#123;</span><br><span class=\"line\">        // Create a worker</span><br><span class=\"line\">        cluster.fork();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // Workers share the TCP connection in this server</span><br><span class=\"line\">    var app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">        res.send(&apos;Hello World!&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // All workers use this port</span><br><span class=\"line\">    app.listen(8080);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-使用Node-js实现反向代理，作为统一服务网关\"><a href=\"#4-使用Node-js实现反向代理，作为统一服务网关\" class=\"headerlink\" title=\"4. 使用Node.js实现反向代理，作为统一服务网关\"></a>4. 使用Node.js实现反向代理，作为统一服务网关</h2><p>使用Node作为api网关，原理是利用Node的http-proxy模块来启动代理服务器，实现反向代理。<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;);</span><br><span class=\"line\">var httpProxy = require(&apos;http-proxy&apos;);</span><br><span class=\"line\">var PORT = 3000;</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = httpProxy.createProxyServer();</span><br><span class=\"line\">proxy.on(&apos;error&apos;, function(err, req, res)&#123;</span><br><span class=\"line\">    res.end();//当代理的请求发生错误时，输出空白的相应数据</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = http.createServer(function(req, res) &#123;</span><br><span class=\"line\">    proxy.web(req, res, &#123;</span><br><span class=\"line\">        target: &apos;http://localhost:8080&apos; //代理的目标地址</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(PORT, function()&#123;</span><br><span class=\"line\">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>下一步，就是服务的注册和发现，Nodejs网关将需要增加服务发现的功能</li>\n</ul>\n","sticky":0},{"title":"[microservices]06-Jenkins执行自动化的构建","date":"2017-03-29T13:01:58.000Z","_content":"\n# [microservices]06-Jenkins执行自动化的构建\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. Jenkins安装运行\n\n### 1.1 docker方式安装运行\n\ndocker拉取镜像：\n```\ndocker pull jenkinsci/jenkings\n```\n\n启动容器的方式运行jenkins：\n```\ndocker run -d -u root -m 500m -p 8080:8080 -v ~/jenkins:/var/jenkins_home --name jenkins jenkinsci/jenkins\n```\n\n后台查看jenkins日志：\n```\ndocker logs -f jenkins\n```\n\n会看到一条解锁jenkins的key：\n```\nunlock jenkins:c1bbf6aaa7aa4bd99cfcc0fb4a56ec83\n```\n\n访问：http://localhost:8080，首次访问，需要输入key\n复制unlock jenkins key，输入，完成.\n\n后面就是安装插件，可以根据自己需要安装，也可以安装jenkins建议的插件.\n\n### 1.2 war包方式部署运行\n\njenkins官网，下载最新稳定版本jenkins的war包.\n\n放进准备好的tomcat的webapps下，启动tomcat即可运行。\n\n### 1.3 Centos的yum安装\n\n设置yum源\n```\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n```\n\n安装：\n```\nyum install jenkins\n```\n\n修改端口和用户(可选，如果有需要修改端口和运行jenkins用户的需要，可以修改):\n```\nvi /etc/sysconfig/jenkins\n```\n\n启动jenkins：\n```\nservice jenkins start\n```\n\n设置开机启动\n```\nchkconfig jenkins on\n```\n\n\n## 2. jenkins必要设置\n\n基本上安装后第一次运行按照jenkins建议的插件，基本够用。有特殊需要再添加。\n\n要使用git，需要安装git相关插件。\n\n新版本jenkins不再默认设置maven，有需要maven功能的，可以在设置的工具管理页面配置一个maven。\n\n## 3. Jenkins搭建持续集成系统\n\n这个步骤的目标是实现使用jenkins进行项目构建：从代码仓库gitlab/github/svn等拉源代码，通过maven进行编译打包，最后将构建成功输出的程序包进行归档。\n\n\n\n### 3.1 创建构建任务\n\n创建一个新任务，填任务名称，选择构建什么项目\n![](/images/microservice-jenkins-01.png)\n\n配置git仓库。如果需要账号密码认证，填上。\n![](/images/microservice-jenkins-02.png)\n\n添加一个构建步骤：\n![](/images/microservice-jenkins-03.png)\n\n选择maven targets的选项：\n![](/images/microservice-jenkins-04.png)\n\n添加一个构建后步骤，将jar包归档\n![](/images/microservice-jenkins-05.png)\n\n输入框中输入需要存档的文件：\n![](/images/microservice-jenkins-06.png)\n\n\n\n\n### 3.2 手工构建\n\n![](/images/microservice-jenkins-07.png)\n\n### 3.3 实现自动执行构建\n\n我们希望代码提交到git后，自动触发构建。\n\n构建触发器，选择“Poll SCM”：\n![](/images/microservice-jenkins-08.png)\n\n输入“H/10 * * * *”。表示有最新代码提交后，等10分钟就会触发自动构建\n![](/images/microservice-jenkins-09.png)\n\n## 4. 使用jenkins实现自动化发布\n\n### 4.1 自动发布jar包\n\n![](/images/microservice-jenkins-10.png)\n\n在输入框中输入shell命令来运行项目：\n![](/images/microservice-jenkins-11.png)\n```\njava -jar $WORKSPACE/xxx/target/xxx.jar --server.port=10800\n```\n\n仅仅是这样还不够，需要考虑正在运行中的应用的关闭、后台启动、生产环境如何部署发布等众多细节，继续完善的话，是一条路。另一条路是使用docker。\n\n### 4.2 自动发布Docker容器\n\n使用docker容器发布项目，我们要达到的目标是：\n1）开发人员将代码同步到git仓库，随后触发jenkins自动构建\n2）jenkins调用maven进行构建，生成jar包。\n3）根据当前构建过程，生成一个docker镜像，将其推送至局域网内的docker registry中，供生产环境随时获取并发布。\n4）根据生成的docker镜像，运行一个docker容器（若当前存在该镜像，则先移除该镜像）\n\n前2步在前面的步骤已实现，以下将完成后两步：\n\n在构建后步骤中选择shell脚本，在脚本框中输入具体的docker镜像构建和推送：\n![](/images/microservice-jenkins-12.png)\n\n```\nAPI_NAME=\"spring-boot-docker\"\nAPI_VERSION=\"1.0.0\"\nAPI_PORT=8101\nIMAGE_NAME=\"127.0.0.1:5000/com.iyihua/$API_NAME:$BUILD_NUMBER\"\nCONTAINER_NAME=$API_NAME-$API_VERSION\n\ncd $WORKSPACE/target\ncp classes/Dockerfile .\n\ndocker build -t $IMAGE_NAME .\n\ndocker push $IMAGE_NAME\n\ncid=$(docker ps | grep \"$CONTAINER_NAME\" | awk '{print $1}')\nif [ \"$cid\" != \"\" ]; then\n  docker rm -f $cid\nfi\n\ndocker run -d -p $API_PORT:$API_PORT --name $CONTAINER_NAME $IMAGE_NAME\n\nrm -f Dockerfile\n```\n","source":"_posts/microservices-06-Jenkins执行自动化的构建.md","raw":"---\ntitle: '[microservices]06-Jenkins执行自动化的构建'\ndate: 2017-03-29 21:01:58\ntags: [microservices,jenkins,java,自动化,构建,docker]\n---\n\n# [microservices]06-Jenkins执行自动化的构建\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. Jenkins安装运行\n\n### 1.1 docker方式安装运行\n\ndocker拉取镜像：\n```\ndocker pull jenkinsci/jenkings\n```\n\n启动容器的方式运行jenkins：\n```\ndocker run -d -u root -m 500m -p 8080:8080 -v ~/jenkins:/var/jenkins_home --name jenkins jenkinsci/jenkins\n```\n\n后台查看jenkins日志：\n```\ndocker logs -f jenkins\n```\n\n会看到一条解锁jenkins的key：\n```\nunlock jenkins:c1bbf6aaa7aa4bd99cfcc0fb4a56ec83\n```\n\n访问：http://localhost:8080，首次访问，需要输入key\n复制unlock jenkins key，输入，完成.\n\n后面就是安装插件，可以根据自己需要安装，也可以安装jenkins建议的插件.\n\n### 1.2 war包方式部署运行\n\njenkins官网，下载最新稳定版本jenkins的war包.\n\n放进准备好的tomcat的webapps下，启动tomcat即可运行。\n\n### 1.3 Centos的yum安装\n\n设置yum源\n```\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n```\n\n安装：\n```\nyum install jenkins\n```\n\n修改端口和用户(可选，如果有需要修改端口和运行jenkins用户的需要，可以修改):\n```\nvi /etc/sysconfig/jenkins\n```\n\n启动jenkins：\n```\nservice jenkins start\n```\n\n设置开机启动\n```\nchkconfig jenkins on\n```\n\n\n## 2. jenkins必要设置\n\n基本上安装后第一次运行按照jenkins建议的插件，基本够用。有特殊需要再添加。\n\n要使用git，需要安装git相关插件。\n\n新版本jenkins不再默认设置maven，有需要maven功能的，可以在设置的工具管理页面配置一个maven。\n\n## 3. Jenkins搭建持续集成系统\n\n这个步骤的目标是实现使用jenkins进行项目构建：从代码仓库gitlab/github/svn等拉源代码，通过maven进行编译打包，最后将构建成功输出的程序包进行归档。\n\n\n\n### 3.1 创建构建任务\n\n创建一个新任务，填任务名称，选择构建什么项目\n![](/images/microservice-jenkins-01.png)\n\n配置git仓库。如果需要账号密码认证，填上。\n![](/images/microservice-jenkins-02.png)\n\n添加一个构建步骤：\n![](/images/microservice-jenkins-03.png)\n\n选择maven targets的选项：\n![](/images/microservice-jenkins-04.png)\n\n添加一个构建后步骤，将jar包归档\n![](/images/microservice-jenkins-05.png)\n\n输入框中输入需要存档的文件：\n![](/images/microservice-jenkins-06.png)\n\n\n\n\n### 3.2 手工构建\n\n![](/images/microservice-jenkins-07.png)\n\n### 3.3 实现自动执行构建\n\n我们希望代码提交到git后，自动触发构建。\n\n构建触发器，选择“Poll SCM”：\n![](/images/microservice-jenkins-08.png)\n\n输入“H/10 * * * *”。表示有最新代码提交后，等10分钟就会触发自动构建\n![](/images/microservice-jenkins-09.png)\n\n## 4. 使用jenkins实现自动化发布\n\n### 4.1 自动发布jar包\n\n![](/images/microservice-jenkins-10.png)\n\n在输入框中输入shell命令来运行项目：\n![](/images/microservice-jenkins-11.png)\n```\njava -jar $WORKSPACE/xxx/target/xxx.jar --server.port=10800\n```\n\n仅仅是这样还不够，需要考虑正在运行中的应用的关闭、后台启动、生产环境如何部署发布等众多细节，继续完善的话，是一条路。另一条路是使用docker。\n\n### 4.2 自动发布Docker容器\n\n使用docker容器发布项目，我们要达到的目标是：\n1）开发人员将代码同步到git仓库，随后触发jenkins自动构建\n2）jenkins调用maven进行构建，生成jar包。\n3）根据当前构建过程，生成一个docker镜像，将其推送至局域网内的docker registry中，供生产环境随时获取并发布。\n4）根据生成的docker镜像，运行一个docker容器（若当前存在该镜像，则先移除该镜像）\n\n前2步在前面的步骤已实现，以下将完成后两步：\n\n在构建后步骤中选择shell脚本，在脚本框中输入具体的docker镜像构建和推送：\n![](/images/microservice-jenkins-12.png)\n\n```\nAPI_NAME=\"spring-boot-docker\"\nAPI_VERSION=\"1.0.0\"\nAPI_PORT=8101\nIMAGE_NAME=\"127.0.0.1:5000/com.iyihua/$API_NAME:$BUILD_NUMBER\"\nCONTAINER_NAME=$API_NAME-$API_VERSION\n\ncd $WORKSPACE/target\ncp classes/Dockerfile .\n\ndocker build -t $IMAGE_NAME .\n\ndocker push $IMAGE_NAME\n\ncid=$(docker ps | grep \"$CONTAINER_NAME\" | awk '{print $1}')\nif [ \"$cid\" != \"\" ]; then\n  docker rm -f $cid\nfi\n\ndocker run -d -p $API_PORT:$API_PORT --name $CONTAINER_NAME $IMAGE_NAME\n\nrm -f Dockerfile\n```\n","slug":"microservices-06-Jenkins执行自动化的构建","published":1,"updated":"2017-03-29T13:44:18.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ustl001u00uu8f4l3h2z","content":"<h1 id=\"microservices-06-Jenkins执行自动化的构建\"><a href=\"#microservices-06-Jenkins执行自动化的构建\" class=\"headerlink\" title=\"[microservices]06-Jenkins执行自动化的构建\"></a>[microservices]06-Jenkins执行自动化的构建</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\" target=\"_blank\" rel=\"external\">microservices</a></li>\n</ul>\n<h2 id=\"1-Jenkins安装运行\"><a href=\"#1-Jenkins安装运行\" class=\"headerlink\" title=\"1. Jenkins安装运行\"></a>1. Jenkins安装运行</h2><h3 id=\"1-1-docker方式安装运行\"><a href=\"#1-1-docker方式安装运行\" class=\"headerlink\" title=\"1.1 docker方式安装运行\"></a>1.1 docker方式安装运行</h3><p>docker拉取镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkinsci/jenkings</span><br></pre></td></tr></table></figure></p>\n<p>启动容器的方式运行jenkins：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -u root -m 500m -p 8080:8080 -v ~/jenkins:/var/jenkins_home --name jenkins jenkinsci/jenkins</span><br></pre></td></tr></table></figure></p>\n<p>后台查看jenkins日志：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f jenkins</span><br></pre></td></tr></table></figure></p>\n<p>会看到一条解锁jenkins的key：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unlock jenkins:c1bbf6aaa7aa4bd99cfcc0fb4a56ec83</span><br></pre></td></tr></table></figure></p>\n<p>访问：<a href=\"http://localhost:8080，首次访问，需要输入key\">http://localhost:8080，首次访问，需要输入key</a><br>复制unlock jenkins key，输入，完成.</p>\n<p>后面就是安装插件，可以根据自己需要安装，也可以安装jenkins建议的插件.</p>\n<h3 id=\"1-2-war包方式部署运行\"><a href=\"#1-2-war包方式部署运行\" class=\"headerlink\" title=\"1.2 war包方式部署运行\"></a>1.2 war包方式部署运行</h3><p>jenkins官网，下载最新稳定版本jenkins的war包.</p>\n<p>放进准备好的tomcat的webapps下，启动tomcat即可运行。</p>\n<h3 id=\"1-3-Centos的yum安装\"><a href=\"#1-3-Centos的yum安装\" class=\"headerlink\" title=\"1.3 Centos的yum安装\"></a>1.3 Centos的yum安装</h3><p>设置yum源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br></pre></td></tr></table></figure></p>\n<p>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>修改端口和用户(可选，如果有需要修改端口和运行jenkins用户的需要，可以修改):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure></p>\n<p>启动jenkins：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure></p>\n<p>设置开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig jenkins on</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-jenkins必要设置\"><a href=\"#2-jenkins必要设置\" class=\"headerlink\" title=\"2. jenkins必要设置\"></a>2. jenkins必要设置</h2><p>基本上安装后第一次运行按照jenkins建议的插件，基本够用。有特殊需要再添加。</p>\n<p>要使用git，需要安装git相关插件。</p>\n<p>新版本jenkins不再默认设置maven，有需要maven功能的，可以在设置的工具管理页面配置一个maven。</p>\n<h2 id=\"3-Jenkins搭建持续集成系统\"><a href=\"#3-Jenkins搭建持续集成系统\" class=\"headerlink\" title=\"3. Jenkins搭建持续集成系统\"></a>3. Jenkins搭建持续集成系统</h2><p>这个步骤的目标是实现使用jenkins进行项目构建：从代码仓库gitlab/github/svn等拉源代码，通过maven进行编译打包，最后将构建成功输出的程序包进行归档。</p>\n<h3 id=\"3-1-创建构建任务\"><a href=\"#3-1-创建构建任务\" class=\"headerlink\" title=\"3.1 创建构建任务\"></a>3.1 创建构建任务</h3><p>创建一个新任务，填任务名称，选择构建什么项目<br><img src=\"/images/microservice-jenkins-01.png\" alt=\"\"></p>\n<p>配置git仓库。如果需要账号密码认证，填上。<br><img src=\"/images/microservice-jenkins-02.png\" alt=\"\"></p>\n<p>添加一个构建步骤：<br><img src=\"/images/microservice-jenkins-03.png\" alt=\"\"></p>\n<p>选择maven targets的选项：<br><img src=\"/images/microservice-jenkins-04.png\" alt=\"\"></p>\n<p>添加一个构建后步骤，将jar包归档<br><img src=\"/images/microservice-jenkins-05.png\" alt=\"\"></p>\n<p>输入框中输入需要存档的文件：<br><img src=\"/images/microservice-jenkins-06.png\" alt=\"\"></p>\n<h3 id=\"3-2-手工构建\"><a href=\"#3-2-手工构建\" class=\"headerlink\" title=\"3.2 手工构建\"></a>3.2 手工构建</h3><p><img src=\"/images/microservice-jenkins-07.png\" alt=\"\"></p>\n<h3 id=\"3-3-实现自动执行构建\"><a href=\"#3-3-实现自动执行构建\" class=\"headerlink\" title=\"3.3 实现自动执行构建\"></a>3.3 实现自动执行构建</h3><p>我们希望代码提交到git后，自动触发构建。</p>\n<p>构建触发器，选择“Poll SCM”：<br><img src=\"/images/microservice-jenkins-08.png\" alt=\"\"></p>\n<p>输入“H/10 <em> </em> <em> </em>”。表示有最新代码提交后，等10分钟就会触发自动构建<br><img src=\"/images/microservice-jenkins-09.png\" alt=\"\"></p>\n<h2 id=\"4-使用jenkins实现自动化发布\"><a href=\"#4-使用jenkins实现自动化发布\" class=\"headerlink\" title=\"4. 使用jenkins实现自动化发布\"></a>4. 使用jenkins实现自动化发布</h2><h3 id=\"4-1-自动发布jar包\"><a href=\"#4-1-自动发布jar包\" class=\"headerlink\" title=\"4.1 自动发布jar包\"></a>4.1 自动发布jar包</h3><p><img src=\"/images/microservice-jenkins-10.png\" alt=\"\"></p>\n<p>在输入框中输入shell命令来运行项目：<br><img src=\"/images/microservice-jenkins-11.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar $WORKSPACE/xxx/target/xxx.jar --server.port=10800</span><br></pre></td></tr></table></figure></p>\n<p>仅仅是这样还不够，需要考虑正在运行中的应用的关闭、后台启动、生产环境如何部署发布等众多细节，继续完善的话，是一条路。另一条路是使用docker。</p>\n<h3 id=\"4-2-自动发布Docker容器\"><a href=\"#4-2-自动发布Docker容器\" class=\"headerlink\" title=\"4.2 自动发布Docker容器\"></a>4.2 自动发布Docker容器</h3><p>使用docker容器发布项目，我们要达到的目标是：<br>1）开发人员将代码同步到git仓库，随后触发jenkins自动构建<br>2）jenkins调用maven进行构建，生成jar包。<br>3）根据当前构建过程，生成一个docker镜像，将其推送至局域网内的docker registry中，供生产环境随时获取并发布。<br>4）根据生成的docker镜像，运行一个docker容器（若当前存在该镜像，则先移除该镜像）</p>\n<p>前2步在前面的步骤已实现，以下将完成后两步：</p>\n<p>在构建后步骤中选择shell脚本，在脚本框中输入具体的docker镜像构建和推送：<br><img src=\"/images/microservice-jenkins-12.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">API_NAME=&quot;spring-boot-docker&quot;</span><br><span class=\"line\">API_VERSION=&quot;1.0.0&quot;</span><br><span class=\"line\">API_PORT=8101</span><br><span class=\"line\">IMAGE_NAME=&quot;127.0.0.1:5000/com.iyihua/$API_NAME:$BUILD_NUMBER&quot;</span><br><span class=\"line\">CONTAINER_NAME=$API_NAME-$API_VERSION</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE/target</span><br><span class=\"line\">cp classes/Dockerfile .</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t $IMAGE_NAME .</span><br><span class=\"line\"></span><br><span class=\"line\">docker push $IMAGE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">cid=$(docker ps | grep &quot;$CONTAINER_NAME&quot; | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class=\"line\">if [ &quot;$cid&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">  docker rm -f $cid</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p $API_PORT:$API_PORT --name $CONTAINER_NAME $IMAGE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">rm -f Dockerfile</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"microservices-06-Jenkins执行自动化的构建\"><a href=\"#microservices-06-Jenkins执行自动化的构建\" class=\"headerlink\" title=\"[microservices]06-Jenkins执行自动化的构建\"></a>[microservices]06-Jenkins执行自动化的构建</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\">microservices</a></li>\n</ul>\n<h2 id=\"1-Jenkins安装运行\"><a href=\"#1-Jenkins安装运行\" class=\"headerlink\" title=\"1. Jenkins安装运行\"></a>1. Jenkins安装运行</h2><h3 id=\"1-1-docker方式安装运行\"><a href=\"#1-1-docker方式安装运行\" class=\"headerlink\" title=\"1.1 docker方式安装运行\"></a>1.1 docker方式安装运行</h3><p>docker拉取镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkinsci/jenkings</span><br></pre></td></tr></table></figure></p>\n<p>启动容器的方式运行jenkins：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -u root -m 500m -p 8080:8080 -v ~/jenkins:/var/jenkins_home --name jenkins jenkinsci/jenkins</span><br></pre></td></tr></table></figure></p>\n<p>后台查看jenkins日志：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f jenkins</span><br></pre></td></tr></table></figure></p>\n<p>会看到一条解锁jenkins的key：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unlock jenkins:c1bbf6aaa7aa4bd99cfcc0fb4a56ec83</span><br></pre></td></tr></table></figure></p>\n<p>访问：<a href=\"http://localhost:8080，首次访问，需要输入key\">http://localhost:8080，首次访问，需要输入key</a><br>复制unlock jenkins key，输入，完成.</p>\n<p>后面就是安装插件，可以根据自己需要安装，也可以安装jenkins建议的插件.</p>\n<h3 id=\"1-2-war包方式部署运行\"><a href=\"#1-2-war包方式部署运行\" class=\"headerlink\" title=\"1.2 war包方式部署运行\"></a>1.2 war包方式部署运行</h3><p>jenkins官网，下载最新稳定版本jenkins的war包.</p>\n<p>放进准备好的tomcat的webapps下，启动tomcat即可运行。</p>\n<h3 id=\"1-3-Centos的yum安装\"><a href=\"#1-3-Centos的yum安装\" class=\"headerlink\" title=\"1.3 Centos的yum安装\"></a>1.3 Centos的yum安装</h3><p>设置yum源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br></pre></td></tr></table></figure></p>\n<p>安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>修改端口和用户(可选，如果有需要修改端口和运行jenkins用户的需要，可以修改):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure></p>\n<p>启动jenkins：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure></p>\n<p>设置开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig jenkins on</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-jenkins必要设置\"><a href=\"#2-jenkins必要设置\" class=\"headerlink\" title=\"2. jenkins必要设置\"></a>2. jenkins必要设置</h2><p>基本上安装后第一次运行按照jenkins建议的插件，基本够用。有特殊需要再添加。</p>\n<p>要使用git，需要安装git相关插件。</p>\n<p>新版本jenkins不再默认设置maven，有需要maven功能的，可以在设置的工具管理页面配置一个maven。</p>\n<h2 id=\"3-Jenkins搭建持续集成系统\"><a href=\"#3-Jenkins搭建持续集成系统\" class=\"headerlink\" title=\"3. Jenkins搭建持续集成系统\"></a>3. Jenkins搭建持续集成系统</h2><p>这个步骤的目标是实现使用jenkins进行项目构建：从代码仓库gitlab/github/svn等拉源代码，通过maven进行编译打包，最后将构建成功输出的程序包进行归档。</p>\n<h3 id=\"3-1-创建构建任务\"><a href=\"#3-1-创建构建任务\" class=\"headerlink\" title=\"3.1 创建构建任务\"></a>3.1 创建构建任务</h3><p>创建一个新任务，填任务名称，选择构建什么项目<br><img src=\"/images/microservice-jenkins-01.png\" alt=\"\"></p>\n<p>配置git仓库。如果需要账号密码认证，填上。<br><img src=\"/images/microservice-jenkins-02.png\" alt=\"\"></p>\n<p>添加一个构建步骤：<br><img src=\"/images/microservice-jenkins-03.png\" alt=\"\"></p>\n<p>选择maven targets的选项：<br><img src=\"/images/microservice-jenkins-04.png\" alt=\"\"></p>\n<p>添加一个构建后步骤，将jar包归档<br><img src=\"/images/microservice-jenkins-05.png\" alt=\"\"></p>\n<p>输入框中输入需要存档的文件：<br><img src=\"/images/microservice-jenkins-06.png\" alt=\"\"></p>\n<h3 id=\"3-2-手工构建\"><a href=\"#3-2-手工构建\" class=\"headerlink\" title=\"3.2 手工构建\"></a>3.2 手工构建</h3><p><img src=\"/images/microservice-jenkins-07.png\" alt=\"\"></p>\n<h3 id=\"3-3-实现自动执行构建\"><a href=\"#3-3-实现自动执行构建\" class=\"headerlink\" title=\"3.3 实现自动执行构建\"></a>3.3 实现自动执行构建</h3><p>我们希望代码提交到git后，自动触发构建。</p>\n<p>构建触发器，选择“Poll SCM”：<br><img src=\"/images/microservice-jenkins-08.png\" alt=\"\"></p>\n<p>输入“H/10 <em> </em> <em> </em>”。表示有最新代码提交后，等10分钟就会触发自动构建<br><img src=\"/images/microservice-jenkins-09.png\" alt=\"\"></p>\n<h2 id=\"4-使用jenkins实现自动化发布\"><a href=\"#4-使用jenkins实现自动化发布\" class=\"headerlink\" title=\"4. 使用jenkins实现自动化发布\"></a>4. 使用jenkins实现自动化发布</h2><h3 id=\"4-1-自动发布jar包\"><a href=\"#4-1-自动发布jar包\" class=\"headerlink\" title=\"4.1 自动发布jar包\"></a>4.1 自动发布jar包</h3><p><img src=\"/images/microservice-jenkins-10.png\" alt=\"\"></p>\n<p>在输入框中输入shell命令来运行项目：<br><img src=\"/images/microservice-jenkins-11.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar $WORKSPACE/xxx/target/xxx.jar --server.port=10800</span><br></pre></td></tr></table></figure></p>\n<p>仅仅是这样还不够，需要考虑正在运行中的应用的关闭、后台启动、生产环境如何部署发布等众多细节，继续完善的话，是一条路。另一条路是使用docker。</p>\n<h3 id=\"4-2-自动发布Docker容器\"><a href=\"#4-2-自动发布Docker容器\" class=\"headerlink\" title=\"4.2 自动发布Docker容器\"></a>4.2 自动发布Docker容器</h3><p>使用docker容器发布项目，我们要达到的目标是：<br>1）开发人员将代码同步到git仓库，随后触发jenkins自动构建<br>2）jenkins调用maven进行构建，生成jar包。<br>3）根据当前构建过程，生成一个docker镜像，将其推送至局域网内的docker registry中，供生产环境随时获取并发布。<br>4）根据生成的docker镜像，运行一个docker容器（若当前存在该镜像，则先移除该镜像）</p>\n<p>前2步在前面的步骤已实现，以下将完成后两步：</p>\n<p>在构建后步骤中选择shell脚本，在脚本框中输入具体的docker镜像构建和推送：<br><img src=\"/images/microservice-jenkins-12.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">API_NAME=&quot;spring-boot-docker&quot;</span><br><span class=\"line\">API_VERSION=&quot;1.0.0&quot;</span><br><span class=\"line\">API_PORT=8101</span><br><span class=\"line\">IMAGE_NAME=&quot;127.0.0.1:5000/com.iyihua/$API_NAME:$BUILD_NUMBER&quot;</span><br><span class=\"line\">CONTAINER_NAME=$API_NAME-$API_VERSION</span><br><span class=\"line\"></span><br><span class=\"line\">cd $WORKSPACE/target</span><br><span class=\"line\">cp classes/Dockerfile .</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t $IMAGE_NAME .</span><br><span class=\"line\"></span><br><span class=\"line\">docker push $IMAGE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">cid=$(docker ps | grep &quot;$CONTAINER_NAME&quot; | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class=\"line\">if [ &quot;$cid&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">  docker rm -f $cid</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p $API_PORT:$API_PORT --name $CONTAINER_NAME $IMAGE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">rm -f Dockerfile</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"[microservices]04-Docker作为服务运行容器","date":"2017-03-29T13:01:01.000Z","_content":"\n# [microservices]04-Docker作为服务运行容器\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. docker运行环境\n\n### 1.1 操作系统选择\n对于linux系统，Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求.\n这里选用centos7系统作为docker的运行环境.\n\n在windows系统下，可以使用vm虚拟机虚拟centos7，运行docker.\n\n### 1.2 linux操作系统配置\n\n#### 1.2.1 防火墙\ncentos7使用firewall作为防火墙，docker向外提供服务，需要开通必要端口。\nfirewall开放端口命令：\n```\n#开放8080端口\nfirewall-cmd --zone=public --add-port=8080/tcp --permanent\n#重启防火墙\nfirewall-cmd --reload\n```\n\n当然，如果习惯于iptables防火墙，也可以关闭firewall，启用iptables防火墙：\n```\n#1、关闭firewall：\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动\n#查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\nfirewall-cmd --state \n\n#2、iptables防火墙（这里iptables已经安装，下面进行配置）\n$ vi /etc/sysconfig/iptables #编辑防火墙配置文件\n\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT[0:0]\n:OUTPUT ACCEPT[0:0]\n-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -jACCEPT\n-A INPUT -i lo -jACCEPT\n-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT\n-A INPUT -j REJECT--reject-with icmp-host-prohibited\n-A FORWARD -jREJECT --reject-with icmp-host-prohibited\nCOMMIT\n:wq! #保存退出\n```\n\n## 2. 安装并启动docker\n\n从2017-03-01起，新版的docker分为了CE和EE两个版本，CE是社区版，EE是企业版. 我们这里使用CE版即可.\n\n### 2.1 安装docker-ce\n\n#### 2.1.1. Set up the repository\n\nSet up the Docker CE repository on CentOS:\n```\nsudo yum install -y yum-utils\n\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\nsudo yum makecache fast\n```\n#### 2.1.2. Get Docker CE\n\nInstall the latest version of Docker CE on CentOS:\n```\nsudo yum -y install docker-ce\n```\nStart Docker:\n```\nsudo systemctl start docker\n```\n\ndocker开机启动：\n```\nsystemctl  enable docker.service\n```\n\n\n#### 2.1.3. Test your Docker CE installation\n\nTest your installation:\n```\nsudo docker run hello-world\n```\n\n### 2.2 添加镜像加速\n假如你有阿里云账号，可配置镜像加速\n```\nvim /etc/docker/daemon.json\n```\n添加：\n```\n{\n    \"registry-mirrors\": [\"https://xxxxxxxx.mirror.aliyuncs.com\"]\n}\n```\n\"https://xxxxxxxx.mirror.aliyuncs.com\"\n是你的专属镜像加速地址，可以在阿里云管理页面找到.\n\n重启docker：\n```\nsystemctl restart docker\n```\n\n## 3. docker镜像操作和docker容器运行使用\n\n### 3.1 拉取镜像，并启动容器\n\n```\n# 查看当前有什么镜像\ndocker images\n# 拉取centos系统镜像\ndocker pull centos\n# 启动刚刚拉取的镜像\ndocker run -it centos /bin/bash\n```\n\n### 3.2 运行docker容器时的一些常用命令和选项\n\n- 列出当前运行中的容器\n```\ndocker ps\n```\n- 如果要列出所有状态（包括已停止）的容器，添加-a参数\n```\ndocker ps -a\n```\n- 进入运行中的容器\n```\ndocker attach 容器id\n```\n- 停止容器\n```\ndocker stop 容器id\n```\n- 删除容器\n```\ndocker rm 容器id\n```\n- 删除镜像\n```\ndocker rmi 镜像名称\n```\n\n- 将宿主机上的磁盘挂载到容器中，也即“目录映射”\n```\ndocker run -i -t -v /home/software:/mnt/software centos /bin/bash\n```\n“-v /home/software:/mnt/software”表示将容器的/mnt/software目录挂载到宿主机的/home/software目录.\n\n## 4. 手工制作java镜像\n\n### 4.1 上传java rpm安装包到/home/software目录\n\n这里使用已下载好的java8 64位安装包：jdk-8u65-linux-x64.rpm\n\n### 4.2 启动容器\n```\ndocker run -i -t -v /home/software:/mnt/software centos /bin/bash\n```\n\n### 4.3 运行安装包\n/mnt/software映射到宿主机的/home/software，说明容器内的/mnt/software已有jdk-8u65-linux-x64.rpm文件，直接rpm运行安装java8\n```\ncd /mnt/software\nrpm -ivh jdk-8u65-linux-x64.rpm\n```\n\n### 4.4 查看是否安装成功\n```\njava -version\n```\n\n### 4.5 提交镜像\n再打开一个终端，查看当前运行的容器\n```\n$docker ps\nCONTAINER ID        IMAGE                                                COMMAND                  CREATED             STATUS              PORTS                     NAMES\n3443c1097867        127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0   \"/bin/sh -c 'java ...\"   6 days ago          Up 6 days           0.0.0.0:18101->8101/tcp   objective_shannon\n\n```\n获取容器id(3443c1097867)，提交镜像\ndocker commit 3443c1097867 iyihua/java\n\n### 4.6 验证镜像\n```\ndocker run -rm iyihua/java java -version\n```\n\"-rm\"参数表示不想保留容器，运行结束后即删除退出\n\n## 5. 使用Dockerfile构建镜像\n\nDockerfile就是把手工构建镜像的过程写成一段自动执行的脚本，最终生成镜像。\n\n### 5.1 Dockerfile构建java镜像\n\n也就是把之前手工构建的java镜像的步骤放到脚本里，脚本如下：\n```\nFROM centos:latest\nMAINTAINER \"iyihua\"<wanglvyihua@gmail.com>\nADD jdk-8u65-linux-x64.rpm /usr/local\nRUN rpm -ivh /usr/local/jdk-8u65-linux-x64.rpm\nCMD java -version\n```\n这个Dockerfile顺利运行要求Dockerfile所在宿主机目录含有一个准备好的java安装包jdk-8u65-linux-x64.rpm。\n\n- 如果构建的镜像与之前构建过的镜像的仓库名、标签名相同，之前的镜像的仓库名和标签名就会更新为<none>. 我们可以使用docker tag命令来修改镜像仓库名和标签名。\n```\ndocker tag 3443c1097867 iyihua/java:1.0.0\n```\n\n## 6. 使用Docker Registry管理镜像\n\n我们默认就是从Docker Hub下载公共镜像。官方的Docker Hub也为我们提供了一个私有仓库，可以让内部人员通过这个仓库上传下载内部镜像，不过免费用户只能创建一个私有仓库。\n\n不过，我们可以通过Docker Registry开源项目，在内部搭建一个私有镜像注册中心。\n\n### 6.1 注册登录Docker Hub\n\n通过浏览器注册登录Docker Hub，手动创建一个私有仓库。\n\n然后我们就可以通过客户端login并push镜像到仓库。\n\n登录：\n```\ndocker login\n```\n\n推送镜像：\n```\ndocker push iyihua/java\n```\n\n### 6.2 搭建Docker Registry\n\n#### 6.2.1 启动\n通过docker本身的镜像，就可以简单的在本地搭建起Docker Registry：\n```\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n  -v `pwd`/data:/var/lib/registry \\\n  registry:2\n```\n这样就会在127.0.0.1:5000的地址启动起Docker Registry服务.\n\n- 参数说明：\n    （1）-d表示后台运行\n    （2）-p是宿主机与容器的端口映射\n    （3）-v是宿主机与容器的目录映射，也即目录挂载\n\n#### 6.2.2 重命名镜像标签\ndocker push默认的镜像中心是Docker Hub，没有指明目标地址的镜像，其完整的镜像名称是“docker.io/iyihua/java”.\n如果我们打算将iyihua/java推送到本地的Docker Registry，则需要将镜像名称修改为127.0.0.1:5000/iyihua/java.\n\n使用docker tag命令更名：\n```\ndocker tag 3443c1097867 127.0.0.1:5000/iyihua/java\n```\n\n使用docker push命令推送：\n```\ndocker push 127.0.0.1:5000/iyihua/java\n```\n\n\n\n\n## 7. Spring Boot与Docker整合\n\n\nSpring Boot与Docker整合的目标是构建spring boot应用程序时可同时生成Docker镜像，并将此镜像推送至Docker Registry，整个构建过程依然使用maven来完成\n\n现在假定已有一个普通spring boot应用spring-boot-docker.\n\n### 7.1 为spring boot程序添加Dockerfile\n在resources目录下添加Dockerfile：\n```\nFROM java\nMAINTAINER \"iyihua\"<wanglvyihua@gmail.com>\nADD spring-boot-docker-1.0.0.jar app.jar\nEXPOSE 8101\nCMD java -jar app.jar\n```\n\n### 7.2 使用maven构建Dockerfile\n在pom文件中添加docker相关插件：\n```\n<plugin>\n    <groupId>com.spotify</groupId>\n    <artifactId>docker-maven-plugin</artifactId>\n    <version>0.4.10</version>\n    <configuration>\n        <imageName>${docker.registry}/${project.groupId}/${project.artifactId}:${project.version}</imageName>\n        <dockerDirectory>${project.build.outputDirectory}</dockerDirectory>\n        <resources>\n            <resource>\n                <!-- <targetPath>/</targetPath> -->\n                <directory>${project.build.directory}</directory>\n                <include>${project.build.finalName}.jar</include>\n            </resource>\n        </resources>\n    </configuration>\n</plugin>\n```\n需要添加的属性配置\n```\n<properties>\n    <docker.registry>127.0.0.1:5000</docker.registry>\n</properties>\n```\n\n### 7.3 构建并推送\n```\nmvn docker:build docker:push\n```\n\n### 7.4 docker容器启动应用\n```\ndocker run -d -p 18101:8101 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0\n```\n\n- p参数指明宿主机和容器的端口映射\n- d参数指明要后台运行\n\n### 7.5 调整docker容器内存\n查看docker容器运行情况\n```\ndocker stats\n```\n\n运行应用时调整内存限制\n```\ndocker run -d -p 18101:8101 -m 512m 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0\n```\n\n- m参数指明内存调整为多少\n\n- demo代码可以在这里获取：\n[spring-boot-docker sample项目](https://github.com/YihuaWanglv/spring-boot-docker)\n\n或者：\n[microservices/spring-boot-docker](https://github.com/YihuaWanglv/microservices/tree/master/services/spring-boot-docker)\n\n\n## 附：常见问题：\n\n### (1)docker iptables failed no chain/target/match by that name\n\n重启docker即可:\n```\nsystemctl restart docker\n```\n\n### (2)当docker run centos，出现：centos exec user process caused \"permission denied\"\n需要加一个参数：--privileged\n\n结果命令变为：\n```\ndocker run --privileged -i -t centos /bin/bash\n```\n\n说明：\n```\n大约在0.6版，privileged被引入docker。\n使用该参数，container内的root拥有真正的root权限。\n否则，container内的root只是外部的一个普通用户权限。\nprivileged启动的容器，可以看到很多host上的设备，并且可以执行mount。\n甚至允许你在docker容器中启动docker容器。\n```\n\n建议：\n```\n如果总是需要privileged才能正常运行docker，那么可能你安装的docker可能有问题，建议重新安装最新的docker-ce，将不再需要privileged参数.\n```\n\n### (3)docker build cannot allocate memory\n\n这个问题的终极解决办法，还是重启docker，或者重启服务器；\n\n\n\n","source":"_posts/microservices-04-Docker作为服务运行容器.md","raw":"---\ntitle: '[microservices]04-Docker作为服务运行容器'\ndate: 2017-03-29 21:01:01\ntags: [microservices,docker,java,centos7]\n---\n\n# [microservices]04-Docker作为服务运行容器\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. docker运行环境\n\n### 1.1 操作系统选择\n对于linux系统，Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求.\n这里选用centos7系统作为docker的运行环境.\n\n在windows系统下，可以使用vm虚拟机虚拟centos7，运行docker.\n\n### 1.2 linux操作系统配置\n\n#### 1.2.1 防火墙\ncentos7使用firewall作为防火墙，docker向外提供服务，需要开通必要端口。\nfirewall开放端口命令：\n```\n#开放8080端口\nfirewall-cmd --zone=public --add-port=8080/tcp --permanent\n#重启防火墙\nfirewall-cmd --reload\n```\n\n当然，如果习惯于iptables防火墙，也可以关闭firewall，启用iptables防火墙：\n```\n#1、关闭firewall：\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动\n#查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\nfirewall-cmd --state \n\n#2、iptables防火墙（这里iptables已经安装，下面进行配置）\n$ vi /etc/sysconfig/iptables #编辑防火墙配置文件\n\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT[0:0]\n:OUTPUT ACCEPT[0:0]\n-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -jACCEPT\n-A INPUT -i lo -jACCEPT\n-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT\n-A INPUT -j REJECT--reject-with icmp-host-prohibited\n-A FORWARD -jREJECT --reject-with icmp-host-prohibited\nCOMMIT\n:wq! #保存退出\n```\n\n## 2. 安装并启动docker\n\n从2017-03-01起，新版的docker分为了CE和EE两个版本，CE是社区版，EE是企业版. 我们这里使用CE版即可.\n\n### 2.1 安装docker-ce\n\n#### 2.1.1. Set up the repository\n\nSet up the Docker CE repository on CentOS:\n```\nsudo yum install -y yum-utils\n\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\nsudo yum makecache fast\n```\n#### 2.1.2. Get Docker CE\n\nInstall the latest version of Docker CE on CentOS:\n```\nsudo yum -y install docker-ce\n```\nStart Docker:\n```\nsudo systemctl start docker\n```\n\ndocker开机启动：\n```\nsystemctl  enable docker.service\n```\n\n\n#### 2.1.3. Test your Docker CE installation\n\nTest your installation:\n```\nsudo docker run hello-world\n```\n\n### 2.2 添加镜像加速\n假如你有阿里云账号，可配置镜像加速\n```\nvim /etc/docker/daemon.json\n```\n添加：\n```\n{\n    \"registry-mirrors\": [\"https://xxxxxxxx.mirror.aliyuncs.com\"]\n}\n```\n\"https://xxxxxxxx.mirror.aliyuncs.com\"\n是你的专属镜像加速地址，可以在阿里云管理页面找到.\n\n重启docker：\n```\nsystemctl restart docker\n```\n\n## 3. docker镜像操作和docker容器运行使用\n\n### 3.1 拉取镜像，并启动容器\n\n```\n# 查看当前有什么镜像\ndocker images\n# 拉取centos系统镜像\ndocker pull centos\n# 启动刚刚拉取的镜像\ndocker run -it centos /bin/bash\n```\n\n### 3.2 运行docker容器时的一些常用命令和选项\n\n- 列出当前运行中的容器\n```\ndocker ps\n```\n- 如果要列出所有状态（包括已停止）的容器，添加-a参数\n```\ndocker ps -a\n```\n- 进入运行中的容器\n```\ndocker attach 容器id\n```\n- 停止容器\n```\ndocker stop 容器id\n```\n- 删除容器\n```\ndocker rm 容器id\n```\n- 删除镜像\n```\ndocker rmi 镜像名称\n```\n\n- 将宿主机上的磁盘挂载到容器中，也即“目录映射”\n```\ndocker run -i -t -v /home/software:/mnt/software centos /bin/bash\n```\n“-v /home/software:/mnt/software”表示将容器的/mnt/software目录挂载到宿主机的/home/software目录.\n\n## 4. 手工制作java镜像\n\n### 4.1 上传java rpm安装包到/home/software目录\n\n这里使用已下载好的java8 64位安装包：jdk-8u65-linux-x64.rpm\n\n### 4.2 启动容器\n```\ndocker run -i -t -v /home/software:/mnt/software centos /bin/bash\n```\n\n### 4.3 运行安装包\n/mnt/software映射到宿主机的/home/software，说明容器内的/mnt/software已有jdk-8u65-linux-x64.rpm文件，直接rpm运行安装java8\n```\ncd /mnt/software\nrpm -ivh jdk-8u65-linux-x64.rpm\n```\n\n### 4.4 查看是否安装成功\n```\njava -version\n```\n\n### 4.5 提交镜像\n再打开一个终端，查看当前运行的容器\n```\n$docker ps\nCONTAINER ID        IMAGE                                                COMMAND                  CREATED             STATUS              PORTS                     NAMES\n3443c1097867        127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0   \"/bin/sh -c 'java ...\"   6 days ago          Up 6 days           0.0.0.0:18101->8101/tcp   objective_shannon\n\n```\n获取容器id(3443c1097867)，提交镜像\ndocker commit 3443c1097867 iyihua/java\n\n### 4.6 验证镜像\n```\ndocker run -rm iyihua/java java -version\n```\n\"-rm\"参数表示不想保留容器，运行结束后即删除退出\n\n## 5. 使用Dockerfile构建镜像\n\nDockerfile就是把手工构建镜像的过程写成一段自动执行的脚本，最终生成镜像。\n\n### 5.1 Dockerfile构建java镜像\n\n也就是把之前手工构建的java镜像的步骤放到脚本里，脚本如下：\n```\nFROM centos:latest\nMAINTAINER \"iyihua\"<wanglvyihua@gmail.com>\nADD jdk-8u65-linux-x64.rpm /usr/local\nRUN rpm -ivh /usr/local/jdk-8u65-linux-x64.rpm\nCMD java -version\n```\n这个Dockerfile顺利运行要求Dockerfile所在宿主机目录含有一个准备好的java安装包jdk-8u65-linux-x64.rpm。\n\n- 如果构建的镜像与之前构建过的镜像的仓库名、标签名相同，之前的镜像的仓库名和标签名就会更新为<none>. 我们可以使用docker tag命令来修改镜像仓库名和标签名。\n```\ndocker tag 3443c1097867 iyihua/java:1.0.0\n```\n\n## 6. 使用Docker Registry管理镜像\n\n我们默认就是从Docker Hub下载公共镜像。官方的Docker Hub也为我们提供了一个私有仓库，可以让内部人员通过这个仓库上传下载内部镜像，不过免费用户只能创建一个私有仓库。\n\n不过，我们可以通过Docker Registry开源项目，在内部搭建一个私有镜像注册中心。\n\n### 6.1 注册登录Docker Hub\n\n通过浏览器注册登录Docker Hub，手动创建一个私有仓库。\n\n然后我们就可以通过客户端login并push镜像到仓库。\n\n登录：\n```\ndocker login\n```\n\n推送镜像：\n```\ndocker push iyihua/java\n```\n\n### 6.2 搭建Docker Registry\n\n#### 6.2.1 启动\n通过docker本身的镜像，就可以简单的在本地搭建起Docker Registry：\n```\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n  -v `pwd`/data:/var/lib/registry \\\n  registry:2\n```\n这样就会在127.0.0.1:5000的地址启动起Docker Registry服务.\n\n- 参数说明：\n    （1）-d表示后台运行\n    （2）-p是宿主机与容器的端口映射\n    （3）-v是宿主机与容器的目录映射，也即目录挂载\n\n#### 6.2.2 重命名镜像标签\ndocker push默认的镜像中心是Docker Hub，没有指明目标地址的镜像，其完整的镜像名称是“docker.io/iyihua/java”.\n如果我们打算将iyihua/java推送到本地的Docker Registry，则需要将镜像名称修改为127.0.0.1:5000/iyihua/java.\n\n使用docker tag命令更名：\n```\ndocker tag 3443c1097867 127.0.0.1:5000/iyihua/java\n```\n\n使用docker push命令推送：\n```\ndocker push 127.0.0.1:5000/iyihua/java\n```\n\n\n\n\n## 7. Spring Boot与Docker整合\n\n\nSpring Boot与Docker整合的目标是构建spring boot应用程序时可同时生成Docker镜像，并将此镜像推送至Docker Registry，整个构建过程依然使用maven来完成\n\n现在假定已有一个普通spring boot应用spring-boot-docker.\n\n### 7.1 为spring boot程序添加Dockerfile\n在resources目录下添加Dockerfile：\n```\nFROM java\nMAINTAINER \"iyihua\"<wanglvyihua@gmail.com>\nADD spring-boot-docker-1.0.0.jar app.jar\nEXPOSE 8101\nCMD java -jar app.jar\n```\n\n### 7.2 使用maven构建Dockerfile\n在pom文件中添加docker相关插件：\n```\n<plugin>\n    <groupId>com.spotify</groupId>\n    <artifactId>docker-maven-plugin</artifactId>\n    <version>0.4.10</version>\n    <configuration>\n        <imageName>${docker.registry}/${project.groupId}/${project.artifactId}:${project.version}</imageName>\n        <dockerDirectory>${project.build.outputDirectory}</dockerDirectory>\n        <resources>\n            <resource>\n                <!-- <targetPath>/</targetPath> -->\n                <directory>${project.build.directory}</directory>\n                <include>${project.build.finalName}.jar</include>\n            </resource>\n        </resources>\n    </configuration>\n</plugin>\n```\n需要添加的属性配置\n```\n<properties>\n    <docker.registry>127.0.0.1:5000</docker.registry>\n</properties>\n```\n\n### 7.3 构建并推送\n```\nmvn docker:build docker:push\n```\n\n### 7.4 docker容器启动应用\n```\ndocker run -d -p 18101:8101 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0\n```\n\n- p参数指明宿主机和容器的端口映射\n- d参数指明要后台运行\n\n### 7.5 调整docker容器内存\n查看docker容器运行情况\n```\ndocker stats\n```\n\n运行应用时调整内存限制\n```\ndocker run -d -p 18101:8101 -m 512m 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0\n```\n\n- m参数指明内存调整为多少\n\n- demo代码可以在这里获取：\n[spring-boot-docker sample项目](https://github.com/YihuaWanglv/spring-boot-docker)\n\n或者：\n[microservices/spring-boot-docker](https://github.com/YihuaWanglv/microservices/tree/master/services/spring-boot-docker)\n\n\n## 附：常见问题：\n\n### (1)docker iptables failed no chain/target/match by that name\n\n重启docker即可:\n```\nsystemctl restart docker\n```\n\n### (2)当docker run centos，出现：centos exec user process caused \"permission denied\"\n需要加一个参数：--privileged\n\n结果命令变为：\n```\ndocker run --privileged -i -t centos /bin/bash\n```\n\n说明：\n```\n大约在0.6版，privileged被引入docker。\n使用该参数，container内的root拥有真正的root权限。\n否则，container内的root只是外部的一个普通用户权限。\nprivileged启动的容器，可以看到很多host上的设备，并且可以执行mount。\n甚至允许你在docker容器中启动docker容器。\n```\n\n建议：\n```\n如果总是需要privileged才能正常运行docker，那么可能你安装的docker可能有问题，建议重新安装最新的docker-ce，将不再需要privileged参数.\n```\n\n### (3)docker build cannot allocate memory\n\n这个问题的终极解决办法，还是重启docker，或者重启服务器；\n\n\n\n","slug":"microservices-04-Docker作为服务运行容器","published":1,"updated":"2017-03-29T13:44:06.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ustq001w00uuhhc7rpu3","content":"<h1 id=\"microservices-04-Docker作为服务运行容器\"><a href=\"#microservices-04-Docker作为服务运行容器\" class=\"headerlink\" title=\"[microservices]04-Docker作为服务运行容器\"></a>[microservices]04-Docker作为服务运行容器</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\" target=\"_blank\" rel=\"external\">microservices</a></li>\n</ul>\n<h2 id=\"1-docker运行环境\"><a href=\"#1-docker运行环境\" class=\"headerlink\" title=\"1. docker运行环境\"></a>1. docker运行环境</h2><h3 id=\"1-1-操作系统选择\"><a href=\"#1-1-操作系统选择\" class=\"headerlink\" title=\"1.1 操作系统选择\"></a>1.1 操作系统选择</h3><p>对于linux系统，Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求.<br>这里选用centos7系统作为docker的运行环境.</p>\n<p>在windows系统下，可以使用vm虚拟机虚拟centos7，运行docker.</p>\n<h3 id=\"1-2-linux操作系统配置\"><a href=\"#1-2-linux操作系统配置\" class=\"headerlink\" title=\"1.2 linux操作系统配置\"></a>1.2 linux操作系统配置</h3><h4 id=\"1-2-1-防火墙\"><a href=\"#1-2-1-防火墙\" class=\"headerlink\" title=\"1.2.1 防火墙\"></a>1.2.1 防火墙</h4><p>centos7使用firewall作为防火墙，docker向外提供服务，需要开通必要端口。<br>firewall开放端口命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开放8080端口</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class=\"line\">#重启防火墙</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>当然，如果习惯于iptables防火墙，也可以关闭firewall，启用iptables防火墙：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1、关闭firewall：</span><br><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class=\"line\">#查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br><span class=\"line\">firewall-cmd --state </span><br><span class=\"line\"></span><br><span class=\"line\">#2、iptables防火墙（这里iptables已经安装，下面进行配置）</span><br><span class=\"line\">$ vi /etc/sysconfig/iptables #编辑防火墙配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT ACCEPT [0:0]</span><br><span class=\"line\">:FORWARD ACCEPT[0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT[0:0]</span><br><span class=\"line\">-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A INPUT -p icmp -jACCEPT</span><br><span class=\"line\">-A INPUT -i lo -jACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT</span><br><span class=\"line\">-A INPUT -j REJECT--reject-with icmp-host-prohibited</span><br><span class=\"line\">-A FORWARD -jREJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\">:wq! #保存退出</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-安装并启动docker\"><a href=\"#2-安装并启动docker\" class=\"headerlink\" title=\"2. 安装并启动docker\"></a>2. 安装并启动docker</h2><p>从2017-03-01起，新版的docker分为了CE和EE两个版本，CE是社区版，EE是企业版. 我们这里使用CE版即可.</p>\n<h3 id=\"2-1-安装docker-ce\"><a href=\"#2-1-安装docker-ce\" class=\"headerlink\" title=\"2.1 安装docker-ce\"></a>2.1 安装docker-ce</h3><h4 id=\"2-1-1-Set-up-the-repository\"><a href=\"#2-1-1-Set-up-the-repository\" class=\"headerlink\" title=\"2.1.1. Set up the repository\"></a>2.1.1. Set up the repository</h4><p>Set up the Docker CE repository on CentOS:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-1-2-Get-Docker-CE\"><a href=\"#2-1-2-Get-Docker-CE\" class=\"headerlink\" title=\"2.1.2. Get Docker CE\"></a>2.1.2. Get Docker CE</h4><p>Install the latest version of Docker CE on CentOS:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure></p>\n<p>Start Docker:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure></p>\n<p>docker开机启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl  enable docker.service</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-1-3-Test-your-Docker-CE-installation\"><a href=\"#2-1-3-Test-your-Docker-CE-installation\" class=\"headerlink\" title=\"2.1.3. Test your Docker CE installation\"></a>2.1.3. Test your Docker CE installation</h4><p>Test your installation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-添加镜像加速\"><a href=\"#2-2-添加镜像加速\" class=\"headerlink\" title=\"2.2 添加镜像加速\"></a>2.2 添加镜像加速</h3><p>假如你有阿里云账号，可配置镜像加速<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p>\n<p>添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>“<a href=\"https://xxxxxxxx.mirror.aliyuncs.com\" target=\"_blank\" rel=\"external\">https://xxxxxxxx.mirror.aliyuncs.com</a>“<br>是你的专属镜像加速地址，可以在阿里云管理页面找到.</p>\n<p>重启docker：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像操作和docker容器运行使用\"><a href=\"#3-docker镜像操作和docker容器运行使用\" class=\"headerlink\" title=\"3. docker镜像操作和docker容器运行使用\"></a>3. docker镜像操作和docker容器运行使用</h2><h3 id=\"3-1-拉取镜像，并启动容器\"><a href=\"#3-1-拉取镜像，并启动容器\" class=\"headerlink\" title=\"3.1 拉取镜像，并启动容器\"></a>3.1 拉取镜像，并启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前有什么镜像</span><br><span class=\"line\">docker images</span><br><span class=\"line\"># 拉取centos系统镜像</span><br><span class=\"line\">docker pull centos</span><br><span class=\"line\"># 启动刚刚拉取的镜像</span><br><span class=\"line\">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-运行docker容器时的一些常用命令和选项\"><a href=\"#3-2-运行docker容器时的一些常用命令和选项\" class=\"headerlink\" title=\"3.2 运行docker容器时的一些常用命令和选项\"></a>3.2 运行docker容器时的一些常用命令和选项</h3><ul>\n<li><p>列出当前运行中的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果要列出所有状态（包括已停止）的容器，添加-a参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入运行中的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 容器id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将宿主机上的磁盘挂载到容器中，也即“目录映射”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>“-v /home/software:/mnt/software”表示将容器的/mnt/software目录挂载到宿主机的/home/software目录.</p>\n<h2 id=\"4-手工制作java镜像\"><a href=\"#4-手工制作java镜像\" class=\"headerlink\" title=\"4. 手工制作java镜像\"></a>4. 手工制作java镜像</h2><h3 id=\"4-1-上传java-rpm安装包到-home-software目录\"><a href=\"#4-1-上传java-rpm安装包到-home-software目录\" class=\"headerlink\" title=\"4.1 上传java rpm安装包到/home/software目录\"></a>4.1 上传java rpm安装包到/home/software目录</h3><p>这里使用已下载好的java8 64位安装包：jdk-8u65-linux-x64.rpm</p>\n<h3 id=\"4-2-启动容器\"><a href=\"#4-2-启动容器\" class=\"headerlink\" title=\"4.2 启动容器\"></a>4.2 启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-运行安装包\"><a href=\"#4-3-运行安装包\" class=\"headerlink\" title=\"4.3 运行安装包\"></a>4.3 运行安装包</h3><p>/mnt/software映射到宿主机的/home/software，说明容器内的/mnt/software已有jdk-8u65-linux-x64.rpm文件，直接rpm运行安装java8<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /mnt/software</span><br><span class=\"line\">rpm -ivh jdk-8u65-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-4-查看是否安装成功\"><a href=\"#4-4-查看是否安装成功\" class=\"headerlink\" title=\"4.4 查看是否安装成功\"></a>4.4 查看是否安装成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-5-提交镜像\"><a href=\"#4-5-提交镜像\" class=\"headerlink\" title=\"4.5 提交镜像\"></a>4.5 提交镜像</h3><p>再打开一个终端，查看当前运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                                                COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class=\"line\">3443c1097867        127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0   &quot;/bin/sh -c &apos;java ...&quot;   6 days ago          Up 6 days           0.0.0.0:18101-&gt;8101/tcp   objective_shannon</span><br></pre></td></tr></table></figure></p>\n<p>获取容器id(3443c1097867)，提交镜像<br>docker commit 3443c1097867 iyihua/java</p>\n<h3 id=\"4-6-验证镜像\"><a href=\"#4-6-验证镜像\" class=\"headerlink\" title=\"4.6 验证镜像\"></a>4.6 验证镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -rm iyihua/java java -version</span><br></pre></td></tr></table></figure>\n<p>“-rm”参数表示不想保留容器，运行结束后即删除退出</p>\n<h2 id=\"5-使用Dockerfile构建镜像\"><a href=\"#5-使用Dockerfile构建镜像\" class=\"headerlink\" title=\"5. 使用Dockerfile构建镜像\"></a>5. 使用Dockerfile构建镜像</h2><p>Dockerfile就是把手工构建镜像的过程写成一段自动执行的脚本，最终生成镜像。</p>\n<h3 id=\"5-1-Dockerfile构建java镜像\"><a href=\"#5-1-Dockerfile构建java镜像\" class=\"headerlink\" title=\"5.1 Dockerfile构建java镜像\"></a>5.1 Dockerfile构建java镜像</h3><p>也就是把之前手工构建的java镜像的步骤放到脚本里，脚本如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:latest</span><br><span class=\"line\">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class=\"line\">ADD jdk-8u65-linux-x64.rpm /usr/local</span><br><span class=\"line\">RUN rpm -ivh /usr/local/jdk-8u65-linux-x64.rpm</span><br><span class=\"line\">CMD java -version</span><br></pre></td></tr></table></figure></p>\n<p>这个Dockerfile顺利运行要求Dockerfile所在宿主机目录含有一个准备好的java安装包jdk-8u65-linux-x64.rpm。</p>\n<ul>\n<li>如果构建的镜像与之前构建过的镜像的仓库名、标签名相同，之前的镜像的仓库名和标签名就会更新为<none>. 我们可以使用docker tag命令来修改镜像仓库名和标签名。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag 3443c1097867 iyihua/java:1.0.0</span><br></pre></td></tr></table></figure>\n</none></li>\n</ul>\n<h2 id=\"6-使用Docker-Registry管理镜像\"><a href=\"#6-使用Docker-Registry管理镜像\" class=\"headerlink\" title=\"6. 使用Docker Registry管理镜像\"></a>6. 使用Docker Registry管理镜像</h2><p>我们默认就是从Docker Hub下载公共镜像。官方的Docker Hub也为我们提供了一个私有仓库，可以让内部人员通过这个仓库上传下载内部镜像，不过免费用户只能创建一个私有仓库。</p>\n<p>不过，我们可以通过Docker Registry开源项目，在内部搭建一个私有镜像注册中心。</p>\n<h3 id=\"6-1-注册登录Docker-Hub\"><a href=\"#6-1-注册登录Docker-Hub\" class=\"headerlink\" title=\"6.1 注册登录Docker Hub\"></a>6.1 注册登录Docker Hub</h3><p>通过浏览器注册登录Docker Hub，手动创建一个私有仓库。</p>\n<p>然后我们就可以通过客户端login并push镜像到仓库。</p>\n<p>登录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure></p>\n<p>推送镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push iyihua/java</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-2-搭建Docker-Registry\"><a href=\"#6-2-搭建Docker-Registry\" class=\"headerlink\" title=\"6.2 搭建Docker Registry\"></a>6.2 搭建Docker Registry</h3><h4 id=\"6-2-1-启动\"><a href=\"#6-2-1-启动\" class=\"headerlink\" title=\"6.2.1 启动\"></a>6.2.1 启动</h4><p>通过docker本身的镜像，就可以简单的在本地搭建起Docker Registry：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">  -v `pwd`/data:/var/lib/registry \\</span><br><span class=\"line\">  registry:2</span><br></pre></td></tr></table></figure></p>\n<p>这样就会在127.0.0.1:5000的地址启动起Docker Registry服务.</p>\n<ul>\n<li>参数说明：<br>  （1）-d表示后台运行<br>  （2）-p是宿主机与容器的端口映射<br>  （3）-v是宿主机与容器的目录映射，也即目录挂载</li>\n</ul>\n<h4 id=\"6-2-2-重命名镜像标签\"><a href=\"#6-2-2-重命名镜像标签\" class=\"headerlink\" title=\"6.2.2 重命名镜像标签\"></a>6.2.2 重命名镜像标签</h4><p>docker push默认的镜像中心是Docker Hub，没有指明目标地址的镜像，其完整的镜像名称是“docker.io/iyihua/java”.<br>如果我们打算将iyihua/java推送到本地的Docker Registry，则需要将镜像名称修改为127.0.0.1:5000/iyihua/java.</p>\n<p>使用docker tag命令更名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag 3443c1097867 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>\n<p>使用docker push命令推送：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-Spring-Boot与Docker整合\"><a href=\"#7-Spring-Boot与Docker整合\" class=\"headerlink\" title=\"7. Spring Boot与Docker整合\"></a>7. Spring Boot与Docker整合</h2><p>Spring Boot与Docker整合的目标是构建spring boot应用程序时可同时生成Docker镜像，并将此镜像推送至Docker Registry，整个构建过程依然使用maven来完成</p>\n<p>现在假定已有一个普通spring boot应用spring-boot-docker.</p>\n<h3 id=\"7-1-为spring-boot程序添加Dockerfile\"><a href=\"#7-1-为spring-boot程序添加Dockerfile\" class=\"headerlink\" title=\"7.1 为spring boot程序添加Dockerfile\"></a>7.1 为spring boot程序添加Dockerfile</h3><p>在resources目录下添加Dockerfile：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java</span><br><span class=\"line\">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class=\"line\">ADD spring-boot-docker-1.0.0.jar app.jar</span><br><span class=\"line\">EXPOSE 8101</span><br><span class=\"line\">CMD java -jar app.jar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-2-使用maven构建Dockerfile\"><a href=\"#7-2-使用maven构建Dockerfile\" class=\"headerlink\" title=\"7.2 使用maven构建Dockerfile\"></a>7.2 使用maven构建Dockerfile</h3><p>在pom文件中添加docker相关插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.4.10&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;imageName&gt;$&#123;docker.registry&#125;/$&#123;project.groupId&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</span><br><span class=\"line\">        &lt;dockerDirectory&gt;$&#123;project.build.outputDirectory&#125;&lt;/dockerDirectory&gt;</span><br><span class=\"line\">        &lt;resources&gt;</span><br><span class=\"line\">            &lt;resource&gt;</span><br><span class=\"line\">                &lt;!-- &lt;targetPath&gt;/&lt;/targetPath&gt; --&gt;</span><br><span class=\"line\">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">            &lt;/resource&gt;</span><br><span class=\"line\">        &lt;/resources&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>需要添加的属性配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;docker.registry&gt;127.0.0.1:5000&lt;/docker.registry&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-3-构建并推送\"><a href=\"#7-3-构建并推送\" class=\"headerlink\" title=\"7.3 构建并推送\"></a>7.3 构建并推送</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn docker:build docker:push</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-4-docker容器启动应用\"><a href=\"#7-4-docker容器启动应用\" class=\"headerlink\" title=\"7.4 docker容器启动应用\"></a>7.4 docker容器启动应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 18101:8101 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>p参数指明宿主机和容器的端口映射</li>\n<li>d参数指明要后台运行</li>\n</ul>\n<h3 id=\"7-5-调整docker容器内存\"><a href=\"#7-5-调整docker容器内存\" class=\"headerlink\" title=\"7.5 调整docker容器内存\"></a>7.5 调整docker容器内存</h3><p>查看docker容器运行情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats</span><br></pre></td></tr></table></figure></p>\n<p>运行应用时调整内存限制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 18101:8101 -m 512m 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>m参数指明内存调整为多少</p>\n</li>\n<li><p>demo代码可以在这里获取：<br><a href=\"https://github.com/YihuaWanglv/spring-boot-docker\" target=\"_blank\" rel=\"external\">spring-boot-docker sample项目</a></p>\n</li>\n</ul>\n<p>或者：<br><a href=\"https://github.com/YihuaWanglv/microservices/tree/master/services/spring-boot-docker\" target=\"_blank\" rel=\"external\">microservices/spring-boot-docker</a></p>\n<h2 id=\"附：常见问题：\"><a href=\"#附：常见问题：\" class=\"headerlink\" title=\"附：常见问题：\"></a>附：常见问题：</h2><h3 id=\"1-docker-iptables-failed-no-chain-target-match-by-that-name\"><a href=\"#1-docker-iptables-failed-no-chain-target-match-by-that-name\" class=\"headerlink\" title=\"(1)docker iptables failed no chain/target/match by that name\"></a>(1)docker iptables failed no chain/target/match by that name</h3><p>重启docker即可:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”\"><a href=\"#2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”\" class=\"headerlink\" title=\"(2)当docker run centos，出现：centos exec user process caused “permission denied”\"></a>(2)当docker run centos，出现：centos exec user process caused “permission denied”</h3><p>需要加一个参数：–privileged</p>\n<p>结果命令变为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --privileged -i -t centos /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大约在0.6版，privileged被引入docker。</span><br><span class=\"line\">使用该参数，container内的root拥有真正的root权限。</span><br><span class=\"line\">否则，container内的root只是外部的一个普通用户权限。</span><br><span class=\"line\">privileged启动的容器，可以看到很多host上的设备，并且可以执行mount。</span><br><span class=\"line\">甚至允许你在docker容器中启动docker容器。</span><br></pre></td></tr></table></figure></p>\n<p>建议：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果总是需要privileged才能正常运行docker，那么可能你安装的docker可能有问题，建议重新安装最新的docker-ce，将不再需要privileged参数.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-docker-build-cannot-allocate-memory\"><a href=\"#3-docker-build-cannot-allocate-memory\" class=\"headerlink\" title=\"(3)docker build cannot allocate memory\"></a>(3)docker build cannot allocate memory</h3><p>这个问题的终极解决办法，还是重启docker，或者重启服务器；</p>\n","excerpt":"","more":"<h1 id=\"microservices-04-Docker作为服务运行容器\"><a href=\"#microservices-04-Docker作为服务运行容器\" class=\"headerlink\" title=\"[microservices]04-Docker作为服务运行容器\"></a>[microservices]04-Docker作为服务运行容器</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\">microservices</a></li>\n</ul>\n<h2 id=\"1-docker运行环境\"><a href=\"#1-docker运行环境\" class=\"headerlink\" title=\"1. docker运行环境\"></a>1. docker运行环境</h2><h3 id=\"1-1-操作系统选择\"><a href=\"#1-1-操作系统选择\" class=\"headerlink\" title=\"1.1 操作系统选择\"></a>1.1 操作系统选择</h3><p>对于linux系统，Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求.<br>这里选用centos7系统作为docker的运行环境.</p>\n<p>在windows系统下，可以使用vm虚拟机虚拟centos7，运行docker.</p>\n<h3 id=\"1-2-linux操作系统配置\"><a href=\"#1-2-linux操作系统配置\" class=\"headerlink\" title=\"1.2 linux操作系统配置\"></a>1.2 linux操作系统配置</h3><h4 id=\"1-2-1-防火墙\"><a href=\"#1-2-1-防火墙\" class=\"headerlink\" title=\"1.2.1 防火墙\"></a>1.2.1 防火墙</h4><p>centos7使用firewall作为防火墙，docker向外提供服务，需要开通必要端口。<br>firewall开放端口命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#开放8080端口</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class=\"line\">#重启防火墙</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>当然，如果习惯于iptables防火墙，也可以关闭firewall，启用iptables防火墙：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1、关闭firewall：</span><br><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class=\"line\">#查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br><span class=\"line\">firewall-cmd --state </span><br><span class=\"line\"></span><br><span class=\"line\">#2、iptables防火墙（这里iptables已经安装，下面进行配置）</span><br><span class=\"line\">$ vi /etc/sysconfig/iptables #编辑防火墙配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT ACCEPT [0:0]</span><br><span class=\"line\">:FORWARD ACCEPT[0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT[0:0]</span><br><span class=\"line\">-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A INPUT -p icmp -jACCEPT</span><br><span class=\"line\">-A INPUT -i lo -jACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT</span><br><span class=\"line\">-A INPUT -j REJECT--reject-with icmp-host-prohibited</span><br><span class=\"line\">-A FORWARD -jREJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\">:wq! #保存退出</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-安装并启动docker\"><a href=\"#2-安装并启动docker\" class=\"headerlink\" title=\"2. 安装并启动docker\"></a>2. 安装并启动docker</h2><p>从2017-03-01起，新版的docker分为了CE和EE两个版本，CE是社区版，EE是企业版. 我们这里使用CE版即可.</p>\n<h3 id=\"2-1-安装docker-ce\"><a href=\"#2-1-安装docker-ce\" class=\"headerlink\" title=\"2.1 安装docker-ce\"></a>2.1 安装docker-ce</h3><h4 id=\"2-1-1-Set-up-the-repository\"><a href=\"#2-1-1-Set-up-the-repository\" class=\"headerlink\" title=\"2.1.1. Set up the repository\"></a>2.1.1. Set up the repository</h4><p>Set up the Docker CE repository on CentOS:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-1-2-Get-Docker-CE\"><a href=\"#2-1-2-Get-Docker-CE\" class=\"headerlink\" title=\"2.1.2. Get Docker CE\"></a>2.1.2. Get Docker CE</h4><p>Install the latest version of Docker CE on CentOS:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure></p>\n<p>Start Docker:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure></p>\n<p>docker开机启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl  enable docker.service</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-1-3-Test-your-Docker-CE-installation\"><a href=\"#2-1-3-Test-your-Docker-CE-installation\" class=\"headerlink\" title=\"2.1.3. Test your Docker CE installation\"></a>2.1.3. Test your Docker CE installation</h4><p>Test your installation:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-添加镜像加速\"><a href=\"#2-2-添加镜像加速\" class=\"headerlink\" title=\"2.2 添加镜像加速\"></a>2.2 添加镜像加速</h3><p>假如你有阿里云账号，可配置镜像加速<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p>\n<p>添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>“<a href=\"https://xxxxxxxx.mirror.aliyuncs.com\">https://xxxxxxxx.mirror.aliyuncs.com</a>“<br>是你的专属镜像加速地址，可以在阿里云管理页面找到.</p>\n<p>重启docker：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像操作和docker容器运行使用\"><a href=\"#3-docker镜像操作和docker容器运行使用\" class=\"headerlink\" title=\"3. docker镜像操作和docker容器运行使用\"></a>3. docker镜像操作和docker容器运行使用</h2><h3 id=\"3-1-拉取镜像，并启动容器\"><a href=\"#3-1-拉取镜像，并启动容器\" class=\"headerlink\" title=\"3.1 拉取镜像，并启动容器\"></a>3.1 拉取镜像，并启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前有什么镜像</span><br><span class=\"line\">docker images</span><br><span class=\"line\"># 拉取centos系统镜像</span><br><span class=\"line\">docker pull centos</span><br><span class=\"line\"># 启动刚刚拉取的镜像</span><br><span class=\"line\">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-运行docker容器时的一些常用命令和选项\"><a href=\"#3-2-运行docker容器时的一些常用命令和选项\" class=\"headerlink\" title=\"3.2 运行docker容器时的一些常用命令和选项\"></a>3.2 运行docker容器时的一些常用命令和选项</h3><ul>\n<li><p>列出当前运行中的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果要列出所有状态（包括已停止）的容器，添加-a参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入运行中的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 容器id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将宿主机上的磁盘挂载到容器中，也即“目录映射”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>“-v /home/software:/mnt/software”表示将容器的/mnt/software目录挂载到宿主机的/home/software目录.</p>\n<h2 id=\"4-手工制作java镜像\"><a href=\"#4-手工制作java镜像\" class=\"headerlink\" title=\"4. 手工制作java镜像\"></a>4. 手工制作java镜像</h2><h3 id=\"4-1-上传java-rpm安装包到-home-software目录\"><a href=\"#4-1-上传java-rpm安装包到-home-software目录\" class=\"headerlink\" title=\"4.1 上传java rpm安装包到/home/software目录\"></a>4.1 上传java rpm安装包到/home/software目录</h3><p>这里使用已下载好的java8 64位安装包：jdk-8u65-linux-x64.rpm</p>\n<h3 id=\"4-2-启动容器\"><a href=\"#4-2-启动容器\" class=\"headerlink\" title=\"4.2 启动容器\"></a>4.2 启动容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-运行安装包\"><a href=\"#4-3-运行安装包\" class=\"headerlink\" title=\"4.3 运行安装包\"></a>4.3 运行安装包</h3><p>/mnt/software映射到宿主机的/home/software，说明容器内的/mnt/software已有jdk-8u65-linux-x64.rpm文件，直接rpm运行安装java8<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /mnt/software</span><br><span class=\"line\">rpm -ivh jdk-8u65-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-4-查看是否安装成功\"><a href=\"#4-4-查看是否安装成功\" class=\"headerlink\" title=\"4.4 查看是否安装成功\"></a>4.4 查看是否安装成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-5-提交镜像\"><a href=\"#4-5-提交镜像\" class=\"headerlink\" title=\"4.5 提交镜像\"></a>4.5 提交镜像</h3><p>再打开一个终端，查看当前运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                                                COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class=\"line\">3443c1097867        127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0   &quot;/bin/sh -c &apos;java ...&quot;   6 days ago          Up 6 days           0.0.0.0:18101-&gt;8101/tcp   objective_shannon</span><br></pre></td></tr></table></figure></p>\n<p>获取容器id(3443c1097867)，提交镜像<br>docker commit 3443c1097867 iyihua/java</p>\n<h3 id=\"4-6-验证镜像\"><a href=\"#4-6-验证镜像\" class=\"headerlink\" title=\"4.6 验证镜像\"></a>4.6 验证镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -rm iyihua/java java -version</span><br></pre></td></tr></table></figure>\n<p>“-rm”参数表示不想保留容器，运行结束后即删除退出</p>\n<h2 id=\"5-使用Dockerfile构建镜像\"><a href=\"#5-使用Dockerfile构建镜像\" class=\"headerlink\" title=\"5. 使用Dockerfile构建镜像\"></a>5. 使用Dockerfile构建镜像</h2><p>Dockerfile就是把手工构建镜像的过程写成一段自动执行的脚本，最终生成镜像。</p>\n<h3 id=\"5-1-Dockerfile构建java镜像\"><a href=\"#5-1-Dockerfile构建java镜像\" class=\"headerlink\" title=\"5.1 Dockerfile构建java镜像\"></a>5.1 Dockerfile构建java镜像</h3><p>也就是把之前手工构建的java镜像的步骤放到脚本里，脚本如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:latest</span><br><span class=\"line\">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class=\"line\">ADD jdk-8u65-linux-x64.rpm /usr/local</span><br><span class=\"line\">RUN rpm -ivh /usr/local/jdk-8u65-linux-x64.rpm</span><br><span class=\"line\">CMD java -version</span><br></pre></td></tr></table></figure></p>\n<p>这个Dockerfile顺利运行要求Dockerfile所在宿主机目录含有一个准备好的java安装包jdk-8u65-linux-x64.rpm。</p>\n<ul>\n<li>如果构建的镜像与之前构建过的镜像的仓库名、标签名相同，之前的镜像的仓库名和标签名就会更新为<none>. 我们可以使用docker tag命令来修改镜像仓库名和标签名。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag 3443c1097867 iyihua/java:1.0.0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"6-使用Docker-Registry管理镜像\"><a href=\"#6-使用Docker-Registry管理镜像\" class=\"headerlink\" title=\"6. 使用Docker Registry管理镜像\"></a>6. 使用Docker Registry管理镜像</h2><p>我们默认就是从Docker Hub下载公共镜像。官方的Docker Hub也为我们提供了一个私有仓库，可以让内部人员通过这个仓库上传下载内部镜像，不过免费用户只能创建一个私有仓库。</p>\n<p>不过，我们可以通过Docker Registry开源项目，在内部搭建一个私有镜像注册中心。</p>\n<h3 id=\"6-1-注册登录Docker-Hub\"><a href=\"#6-1-注册登录Docker-Hub\" class=\"headerlink\" title=\"6.1 注册登录Docker Hub\"></a>6.1 注册登录Docker Hub</h3><p>通过浏览器注册登录Docker Hub，手动创建一个私有仓库。</p>\n<p>然后我们就可以通过客户端login并push镜像到仓库。</p>\n<p>登录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure></p>\n<p>推送镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push iyihua/java</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-2-搭建Docker-Registry\"><a href=\"#6-2-搭建Docker-Registry\" class=\"headerlink\" title=\"6.2 搭建Docker Registry\"></a>6.2 搭建Docker Registry</h3><h4 id=\"6-2-1-启动\"><a href=\"#6-2-1-启动\" class=\"headerlink\" title=\"6.2.1 启动\"></a>6.2.1 启动</h4><p>通过docker本身的镜像，就可以简单的在本地搭建起Docker Registry：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">  -v `pwd`/data:/var/lib/registry \\</span><br><span class=\"line\">  registry:2</span><br></pre></td></tr></table></figure></p>\n<p>这样就会在127.0.0.1:5000的地址启动起Docker Registry服务.</p>\n<ul>\n<li>参数说明：<br>  （1）-d表示后台运行<br>  （2）-p是宿主机与容器的端口映射<br>  （3）-v是宿主机与容器的目录映射，也即目录挂载</li>\n</ul>\n<h4 id=\"6-2-2-重命名镜像标签\"><a href=\"#6-2-2-重命名镜像标签\" class=\"headerlink\" title=\"6.2.2 重命名镜像标签\"></a>6.2.2 重命名镜像标签</h4><p>docker push默认的镜像中心是Docker Hub，没有指明目标地址的镜像，其完整的镜像名称是“docker.io/iyihua/java”.<br>如果我们打算将iyihua/java推送到本地的Docker Registry，则需要将镜像名称修改为127.0.0.1:5000/iyihua/java.</p>\n<p>使用docker tag命令更名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag 3443c1097867 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>\n<p>使用docker push命令推送：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-Spring-Boot与Docker整合\"><a href=\"#7-Spring-Boot与Docker整合\" class=\"headerlink\" title=\"7. Spring Boot与Docker整合\"></a>7. Spring Boot与Docker整合</h2><p>Spring Boot与Docker整合的目标是构建spring boot应用程序时可同时生成Docker镜像，并将此镜像推送至Docker Registry，整个构建过程依然使用maven来完成</p>\n<p>现在假定已有一个普通spring boot应用spring-boot-docker.</p>\n<h3 id=\"7-1-为spring-boot程序添加Dockerfile\"><a href=\"#7-1-为spring-boot程序添加Dockerfile\" class=\"headerlink\" title=\"7.1 为spring boot程序添加Dockerfile\"></a>7.1 为spring boot程序添加Dockerfile</h3><p>在resources目录下添加Dockerfile：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java</span><br><span class=\"line\">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class=\"line\">ADD spring-boot-docker-1.0.0.jar app.jar</span><br><span class=\"line\">EXPOSE 8101</span><br><span class=\"line\">CMD java -jar app.jar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-2-使用maven构建Dockerfile\"><a href=\"#7-2-使用maven构建Dockerfile\" class=\"headerlink\" title=\"7.2 使用maven构建Dockerfile\"></a>7.2 使用maven构建Dockerfile</h3><p>在pom文件中添加docker相关插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.4.10&lt;/version&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;imageName&gt;$&#123;docker.registry&#125;/$&#123;project.groupId&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</span><br><span class=\"line\">        &lt;dockerDirectory&gt;$&#123;project.build.outputDirectory&#125;&lt;/dockerDirectory&gt;</span><br><span class=\"line\">        &lt;resources&gt;</span><br><span class=\"line\">            &lt;resource&gt;</span><br><span class=\"line\">                &lt;!-- &lt;targetPath&gt;/&lt;/targetPath&gt; --&gt;</span><br><span class=\"line\">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class=\"line\">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class=\"line\">            &lt;/resource&gt;</span><br><span class=\"line\">        &lt;/resources&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>需要添加的属性配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;docker.registry&gt;127.0.0.1:5000&lt;/docker.registry&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-3-构建并推送\"><a href=\"#7-3-构建并推送\" class=\"headerlink\" title=\"7.3 构建并推送\"></a>7.3 构建并推送</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn docker:build docker:push</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-4-docker容器启动应用\"><a href=\"#7-4-docker容器启动应用\" class=\"headerlink\" title=\"7.4 docker容器启动应用\"></a>7.4 docker容器启动应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 18101:8101 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>p参数指明宿主机和容器的端口映射</li>\n<li>d参数指明要后台运行</li>\n</ul>\n<h3 id=\"7-5-调整docker容器内存\"><a href=\"#7-5-调整docker容器内存\" class=\"headerlink\" title=\"7.5 调整docker容器内存\"></a>7.5 调整docker容器内存</h3><p>查看docker容器运行情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats</span><br></pre></td></tr></table></figure></p>\n<p>运行应用时调整内存限制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 18101:8101 -m 512m 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>m参数指明内存调整为多少</p>\n</li>\n<li><p>demo代码可以在这里获取：<br><a href=\"https://github.com/YihuaWanglv/spring-boot-docker\">spring-boot-docker sample项目</a></p>\n</li>\n</ul>\n<p>或者：<br><a href=\"https://github.com/YihuaWanglv/microservices/tree/master/services/spring-boot-docker\">microservices/spring-boot-docker</a></p>\n<h2 id=\"附：常见问题：\"><a href=\"#附：常见问题：\" class=\"headerlink\" title=\"附：常见问题：\"></a>附：常见问题：</h2><h3 id=\"1-docker-iptables-failed-no-chain-target-match-by-that-name\"><a href=\"#1-docker-iptables-failed-no-chain-target-match-by-that-name\" class=\"headerlink\" title=\"(1)docker iptables failed no chain/target/match by that name\"></a>(1)docker iptables failed no chain/target/match by that name</h3><p>重启docker即可:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”\"><a href=\"#2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”\" class=\"headerlink\" title=\"(2)当docker run centos，出现：centos exec user process caused “permission denied”\"></a>(2)当docker run centos，出现：centos exec user process caused “permission denied”</h3><p>需要加一个参数：–privileged</p>\n<p>结果命令变为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --privileged -i -t centos /bin/bash</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大约在0.6版，privileged被引入docker。</span><br><span class=\"line\">使用该参数，container内的root拥有真正的root权限。</span><br><span class=\"line\">否则，container内的root只是外部的一个普通用户权限。</span><br><span class=\"line\">privileged启动的容器，可以看到很多host上的设备，并且可以执行mount。</span><br><span class=\"line\">甚至允许你在docker容器中启动docker容器。</span><br></pre></td></tr></table></figure></p>\n<p>建议：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果总是需要privileged才能正常运行docker，那么可能你安装的docker可能有问题，建议重新安装最新的docker-ce，将不再需要privileged参数.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-docker-build-cannot-allocate-memory\"><a href=\"#3-docker-build-cannot-allocate-memory\" class=\"headerlink\" title=\"(3)docker build cannot allocate memory\"></a>(3)docker build cannot allocate memory</h3><p>这个问题的终极解决办法，还是重启docker，或者重启服务器；</p>\n","sticky":0},{"title":"[microservices]05-Gitlab作为代码仓库","date":"2017-03-29T13:01:26.000Z","_content":"\n# [microservices]05-Gitlab作为代码仓库\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. Gitlab的Docker安装\n\ngitlab安装的过程稍微麻烦，但如果使用docker安装的话，就会非常简单。\n\n下载镜像：\n```\ndocker pull gitlab/gitlab-ce\n```\n\n下载镜像，并启动容器：\n```\ndocker run -d -m 512m -h gitlab.iyihua.com -p 22:22 -p 80:80 -v ~/gitlab/etc:/etc/gitlab -v ~/gitlab/log:/var/log/gitlab -v ~/gitlab/opt:/var/opt/gitlab --name gitlab gitlab/gitlab-ce\n```\n\n说明：\n(1) -h， 设置gitlab访问域名\n(2) -p， 指定映射端口，22表示ssh端口,80表示http端口，\n(3) -m， 指定目录映射\n(4) -v， 指定分配多少内存来运行容器\n\n启动后，访问首页gitlab.iyihua.com，会定向到修改管理员密码页面，修改完管理员密码后，会重定向到登陆页面。\n\n\n\n## 2. git使用\n\ngitlab安装好后，和github的使用并无二致。\n\ngit本地使用需要设置好git全局设置\n```\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n\n如果要用ssh拉取和提交代码，需要设置好ssh公钥\n```\nssh-keygen -t rsa -C \"admin@example.com\"\n\n#可通过以下命令查看ssh key：\ncat ~/.ssh/id_rsa.pub\n\n把得到的key进入gitlab ssh密钥管理界面，输入这个ssh key.\n```\n\n\n## 3. more\n\ngitlab运行需要的资源比较多，一个800m的虚拟机用docker跑gitlab比较吃力，经常会出现页面502.建议最低内存是1G。\n\n如果仅仅是个人使用，可以直接使用github代替，或者使用GOGS代替.\n\n\n\n\n","source":"_posts/microservices-05-Gitlab作为代码仓库.md","raw":"---\ntitle: '[microservices]05-Gitlab作为代码仓库'\ndate: 2017-03-29 21:01:26\ntags: [microservices,gitlab,git,代码仓库,docker]\n---\n\n# [microservices]05-Gitlab作为代码仓库\n\n- github项目地址： [microservices](https://github.com/YihuaWanglv/microservices)\n\n## 1. Gitlab的Docker安装\n\ngitlab安装的过程稍微麻烦，但如果使用docker安装的话，就会非常简单。\n\n下载镜像：\n```\ndocker pull gitlab/gitlab-ce\n```\n\n下载镜像，并启动容器：\n```\ndocker run -d -m 512m -h gitlab.iyihua.com -p 22:22 -p 80:80 -v ~/gitlab/etc:/etc/gitlab -v ~/gitlab/log:/var/log/gitlab -v ~/gitlab/opt:/var/opt/gitlab --name gitlab gitlab/gitlab-ce\n```\n\n说明：\n(1) -h， 设置gitlab访问域名\n(2) -p， 指定映射端口，22表示ssh端口,80表示http端口，\n(3) -m， 指定目录映射\n(4) -v， 指定分配多少内存来运行容器\n\n启动后，访问首页gitlab.iyihua.com，会定向到修改管理员密码页面，修改完管理员密码后，会重定向到登陆页面。\n\n\n\n## 2. git使用\n\ngitlab安装好后，和github的使用并无二致。\n\ngit本地使用需要设置好git全局设置\n```\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n\n如果要用ssh拉取和提交代码，需要设置好ssh公钥\n```\nssh-keygen -t rsa -C \"admin@example.com\"\n\n#可通过以下命令查看ssh key：\ncat ~/.ssh/id_rsa.pub\n\n把得到的key进入gitlab ssh密钥管理界面，输入这个ssh key.\n```\n\n\n## 3. more\n\ngitlab运行需要的资源比较多，一个800m的虚拟机用docker跑gitlab比较吃力，经常会出现页面502.建议最低内存是1G。\n\n如果仅仅是个人使用，可以直接使用github代替，或者使用GOGS代替.\n\n\n\n\n","slug":"microservices-05-Gitlab作为代码仓库","published":1,"updated":"2017-03-29T13:44:11.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4ustv001y00uugiul5c2m","content":"<h1 id=\"microservices-05-Gitlab作为代码仓库\"><a href=\"#microservices-05-Gitlab作为代码仓库\" class=\"headerlink\" title=\"[microservices]05-Gitlab作为代码仓库\"></a>[microservices]05-Gitlab作为代码仓库</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\" target=\"_blank\" rel=\"external\">microservices</a></li>\n</ul>\n<h2 id=\"1-Gitlab的Docker安装\"><a href=\"#1-Gitlab的Docker安装\" class=\"headerlink\" title=\"1. Gitlab的Docker安装\"></a>1. Gitlab的Docker安装</h2><p>gitlab安装的过程稍微麻烦，但如果使用docker安装的话，就会非常简单。</p>\n<p>下载镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>\n<p>下载镜像，并启动容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -m 512m -h gitlab.iyihua.com -p 22:22 -p 80:80 -v ~/gitlab/etc:/etc/gitlab -v ~/gitlab/log:/var/log/gitlab -v ~/gitlab/opt:/var/opt/gitlab --name gitlab gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br>(1) -h， 设置gitlab访问域名<br>(2) -p， 指定映射端口，22表示ssh端口,80表示http端口，<br>(3) -m， 指定目录映射<br>(4) -v， 指定分配多少内存来运行容器</p>\n<p>启动后，访问首页gitlab.iyihua.com，会定向到修改管理员密码页面，修改完管理员密码后，会重定向到登陆页面。</p>\n<h2 id=\"2-git使用\"><a href=\"#2-git使用\" class=\"headerlink\" title=\"2. git使用\"></a>2. git使用</h2><p>gitlab安装好后，和github的使用并无二致。</p>\n<p>git本地使用需要设置好git全局设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;John Doe&quot;</span><br><span class=\"line\">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>\n<p>如果要用ssh拉取和提交代码，需要设置好ssh公钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;admin@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#可通过以下命令查看ssh key：</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">把得到的key进入gitlab ssh密钥管理界面，输入这个ssh key.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-more\"><a href=\"#3-more\" class=\"headerlink\" title=\"3. more\"></a>3. more</h2><p>gitlab运行需要的资源比较多，一个800m的虚拟机用docker跑gitlab比较吃力，经常会出现页面502.建议最低内存是1G。</p>\n<p>如果仅仅是个人使用，可以直接使用github代替，或者使用GOGS代替.</p>\n","excerpt":"","more":"<h1 id=\"microservices-05-Gitlab作为代码仓库\"><a href=\"#microservices-05-Gitlab作为代码仓库\" class=\"headerlink\" title=\"[microservices]05-Gitlab作为代码仓库\"></a>[microservices]05-Gitlab作为代码仓库</h1><ul>\n<li>github项目地址： <a href=\"https://github.com/YihuaWanglv/microservices\">microservices</a></li>\n</ul>\n<h2 id=\"1-Gitlab的Docker安装\"><a href=\"#1-Gitlab的Docker安装\" class=\"headerlink\" title=\"1. Gitlab的Docker安装\"></a>1. Gitlab的Docker安装</h2><p>gitlab安装的过程稍微麻烦，但如果使用docker安装的话，就会非常简单。</p>\n<p>下载镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>\n<p>下载镜像，并启动容器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -m 512m -h gitlab.iyihua.com -p 22:22 -p 80:80 -v ~/gitlab/etc:/etc/gitlab -v ~/gitlab/log:/var/log/gitlab -v ~/gitlab/opt:/var/opt/gitlab --name gitlab gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br>(1) -h， 设置gitlab访问域名<br>(2) -p， 指定映射端口，22表示ssh端口,80表示http端口，<br>(3) -m， 指定目录映射<br>(4) -v， 指定分配多少内存来运行容器</p>\n<p>启动后，访问首页gitlab.iyihua.com，会定向到修改管理员密码页面，修改完管理员密码后，会重定向到登陆页面。</p>\n<h2 id=\"2-git使用\"><a href=\"#2-git使用\" class=\"headerlink\" title=\"2. git使用\"></a>2. git使用</h2><p>gitlab安装好后，和github的使用并无二致。</p>\n<p>git本地使用需要设置好git全局设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;John Doe&quot;</span><br><span class=\"line\">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>\n<p>如果要用ssh拉取和提交代码，需要设置好ssh公钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;admin@example.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#可通过以下命令查看ssh key：</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">把得到的key进入gitlab ssh密钥管理界面，输入这个ssh key.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-more\"><a href=\"#3-more\" class=\"headerlink\" title=\"3. more\"></a>3. more</h2><p>gitlab运行需要的资源比较多，一个800m的虚拟机用docker跑gitlab比较吃力，经常会出现页面502.建议最低内存是1G。</p>\n<p>如果仅仅是个人使用，可以直接使用github代替，或者使用GOGS代替.</p>\n","sticky":0},{"title":"shell-从svn更新代码maven打包后部署的一个简单脚本","date":"2017-03-11T07:48:45.000Z","_content":"\nshell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：\n\n```\n#!/bin/bash\n#build icms app\npath_src=/home/src/trunk/icms\npath_target=${path_src}/target\npath_app=/home/app\npath_log=/data/logs/icms\nfile_app=icms-1.4.1.RELEASE.jar\nurl_app=localhost:8091\n\ncd /home/src/trunk/icms\nsvn update\nmvn clean package -P pro -Dmaven.test.skip=true\n\nif [ -f ${path_target}/${file_app} ]; then\n        echo \"build success, now begin to deploy...\"\n        curl -X POST ${url_app}/shutdown\n        yes | cp -rf ${path_target}/${file_app} ${path_app}/\n        chmod +x ${path_app}/${file_app}\n        nohup java -jar ${path_app}/${file_app} < /dev/null > ${path_log}/icms.log 2>&1 &\nelse\n        echo \"build failed!\"\nfi\n\necho \"build process finish.\"\n```\n\n脚本中的“curl -X POST ${url_app}/shutdown”这里是因为使用了spring boot的优雅关闭应用，需要在应用添加maven依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n```\n\n然后在配置文件中添加：\n```\nendpoints.shutdown.enabled=true\nendpoints.shutdown.sensitive=false\n```","source":"_posts/shell-从svn更新代码maven打包后部署的一个简单脚本.md","raw":"---\ntitle: shell-从svn更新代码maven打包后部署的一个简单脚本\ndate: 2017-03-11 15:48:45\ntags: [shell, sh, spring boot, java, linux]\n---\n\nshell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：\n\n```\n#!/bin/bash\n#build icms app\npath_src=/home/src/trunk/icms\npath_target=${path_src}/target\npath_app=/home/app\npath_log=/data/logs/icms\nfile_app=icms-1.4.1.RELEASE.jar\nurl_app=localhost:8091\n\ncd /home/src/trunk/icms\nsvn update\nmvn clean package -P pro -Dmaven.test.skip=true\n\nif [ -f ${path_target}/${file_app} ]; then\n        echo \"build success, now begin to deploy...\"\n        curl -X POST ${url_app}/shutdown\n        yes | cp -rf ${path_target}/${file_app} ${path_app}/\n        chmod +x ${path_app}/${file_app}\n        nohup java -jar ${path_app}/${file_app} < /dev/null > ${path_log}/icms.log 2>&1 &\nelse\n        echo \"build failed!\"\nfi\n\necho \"build process finish.\"\n```\n\n脚本中的“curl -X POST ${url_app}/shutdown”这里是因为使用了spring boot的优雅关闭应用，需要在应用添加maven依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n```\n\n然后在配置文件中添加：\n```\nendpoints.shutdown.enabled=true\nendpoints.shutdown.sensitive=false\n```","slug":"shell-从svn更新代码maven打包后部署的一个简单脚本","published":1,"updated":"2017-03-11T07:54:42.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usu4001z00uuv4m0quhu","content":"<p>shell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#build icms app</span><br><span class=\"line\">path_src=/home/src/trunk/icms</span><br><span class=\"line\">path_target=$&#123;path_src&#125;/target</span><br><span class=\"line\">path_app=/home/app</span><br><span class=\"line\">path_log=/data/logs/icms</span><br><span class=\"line\">file_app=icms-1.4.1.RELEASE.jar</span><br><span class=\"line\">url_app=localhost:8091</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/src/trunk/icms</span><br><span class=\"line\">svn update</span><br><span class=\"line\">mvn clean package -P pro -Dmaven.test.skip=true</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -f $&#123;path_target&#125;/$&#123;file_app&#125; ]; then</span><br><span class=\"line\">        echo &quot;build success, now begin to deploy...&quot;</span><br><span class=\"line\">        curl -X POST $&#123;url_app&#125;/shutdown</span><br><span class=\"line\">        yes | cp -rf $&#123;path_target&#125;/$&#123;file_app&#125; $&#123;path_app&#125;/</span><br><span class=\"line\">        chmod +x $&#123;path_app&#125;/$&#123;file_app&#125;</span><br><span class=\"line\">        nohup java -jar $&#123;path_app&#125;/$&#123;file_app&#125; &lt; /dev/null &gt; $&#123;path_log&#125;/icms.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">else</span><br><span class=\"line\">        echo &quot;build failed!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;build process finish.&quot;</span><br></pre></td></tr></table></figure>\n<p>脚本中的“curl -X POST ${url_app}/shutdown”这里是因为使用了spring boot的优雅关闭应用，需要在应用添加maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后在配置文件中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">endpoints.shutdown.enabled=true</span><br><span class=\"line\">endpoints.shutdown.sensitive=false</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>shell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#build icms app</span><br><span class=\"line\">path_src=/home/src/trunk/icms</span><br><span class=\"line\">path_target=$&#123;path_src&#125;/target</span><br><span class=\"line\">path_app=/home/app</span><br><span class=\"line\">path_log=/data/logs/icms</span><br><span class=\"line\">file_app=icms-1.4.1.RELEASE.jar</span><br><span class=\"line\">url_app=localhost:8091</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/src/trunk/icms</span><br><span class=\"line\">svn update</span><br><span class=\"line\">mvn clean package -P pro -Dmaven.test.skip=true</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -f $&#123;path_target&#125;/$&#123;file_app&#125; ]; then</span><br><span class=\"line\">        echo &quot;build success, now begin to deploy...&quot;</span><br><span class=\"line\">        curl -X POST $&#123;url_app&#125;/shutdown</span><br><span class=\"line\">        yes | cp -rf $&#123;path_target&#125;/$&#123;file_app&#125; $&#123;path_app&#125;/</span><br><span class=\"line\">        chmod +x $&#123;path_app&#125;/$&#123;file_app&#125;</span><br><span class=\"line\">        nohup java -jar $&#123;path_app&#125;/$&#123;file_app&#125; &lt; /dev/null &gt; $&#123;path_log&#125;/icms.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">else</span><br><span class=\"line\">        echo &quot;build failed!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;build process finish.&quot;</span><br></pre></td></tr></table></figure>\n<p>脚本中的“curl -X POST ${url_app}/shutdown”这里是因为使用了spring boot的优雅关闭应用，需要在应用添加maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后在配置文件中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">endpoints.shutdown.enabled=true</span><br><span class=\"line\">endpoints.shutdown.sensitive=false</span><br></pre></td></tr></table></figure></p>\n","sticky":0},{"title":"mosquitto使用记录与服务器调试","date":"2018-02-25T03:14:27.000Z","_content":"\n# mosquitto使用记录：\n\n## mqtt：\n\n### 启动：\n\n```\nmosquitto -c /etc/mosquitto/mosquitto.conf\n```\n\n### 加-d表示后台运行：\n\n```\nmosquitto -c /etc/mosquitto/mosquitto.conf -d \n```\n\n### sub一个主题：\n\n```\nmosquitto_sub -h localhost -t test -d\n```\n\n### pub一个消息到主题：\n\n```\nmosquitto_pub -h localhost -m \"中文 的mqtt\" -t test -d\n```\n\n### 重启：找到线程，kill\n\n```\nps -A | grep mosquitto\nkill -9 xxx\n```\n\n## linux最大连接数设置\n\n```\nulimit -n20000 -s512\n\nulimit -f unlimited\nulimit -t unlimited\nulimit -v unlimited\nulimit -n 1048576\nulimit -m unlimited\nulimit -u 1048576\n```\n\nTill now I have achieved 74K concurrent connections on a broker. I have configured the ulimit of broker server by editing sysctl.conf and limit.conf file.\n\n- vi /etc/sysctl.conf\n\n```\nfs.file-max = 10000000 \nfs.nr_open = 10000000\nnet.ipv4.tcp_mem = 786432 1697152 1945728\nnet.ipv4.tcp_rmem = 4096 4096 16777216\nnet.ipv4.tcp_wmem = 4096 4096 16777216\nnet.ipv4.ip_local_port_range = 1000 65535\n```\n\n- vi /etc/security/limits.conf\n\n```\n* soft nofile 10000000\n* hard nofile 10000000\nroot soft nofile 10000000\nroot hard nofile 10000000\n```\n\nAfter this reboot your system.\n\n\n\n## mqtt启动后，需要开放对应端口的，则处理如下\n\nCentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下\n\n1、直接关闭防火墙\n\n```\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service #禁止firewall开机启动\n```\n\n2、设置 iptables service\n\n```\nyum -y install iptables-services\n```\n\n如果要修改防火墙配置，如增加防火墙端口3306\n```\nvi /etc/sysconfig/iptables \n```\n\n增加规则\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n\n保存退出后\n```\nsystemctl restart iptables.service #重启防火墙使配置生效\n\nsystemctl enable iptables.service #设置防火墙开机启动\n```\n\n最后重启系统使设置生效即可。","source":"_posts/mosquitto使用记录与服务器调试.md","raw":"---\ntitle: mosquitto使用记录与服务器调试\ndate: 2018-02-25 11:14:27\ntags: [mosquitto,mqtt,linux,服务器配置]\n---\n\n# mosquitto使用记录：\n\n## mqtt：\n\n### 启动：\n\n```\nmosquitto -c /etc/mosquitto/mosquitto.conf\n```\n\n### 加-d表示后台运行：\n\n```\nmosquitto -c /etc/mosquitto/mosquitto.conf -d \n```\n\n### sub一个主题：\n\n```\nmosquitto_sub -h localhost -t test -d\n```\n\n### pub一个消息到主题：\n\n```\nmosquitto_pub -h localhost -m \"中文 的mqtt\" -t test -d\n```\n\n### 重启：找到线程，kill\n\n```\nps -A | grep mosquitto\nkill -9 xxx\n```\n\n## linux最大连接数设置\n\n```\nulimit -n20000 -s512\n\nulimit -f unlimited\nulimit -t unlimited\nulimit -v unlimited\nulimit -n 1048576\nulimit -m unlimited\nulimit -u 1048576\n```\n\nTill now I have achieved 74K concurrent connections on a broker. I have configured the ulimit of broker server by editing sysctl.conf and limit.conf file.\n\n- vi /etc/sysctl.conf\n\n```\nfs.file-max = 10000000 \nfs.nr_open = 10000000\nnet.ipv4.tcp_mem = 786432 1697152 1945728\nnet.ipv4.tcp_rmem = 4096 4096 16777216\nnet.ipv4.tcp_wmem = 4096 4096 16777216\nnet.ipv4.ip_local_port_range = 1000 65535\n```\n\n- vi /etc/security/limits.conf\n\n```\n* soft nofile 10000000\n* hard nofile 10000000\nroot soft nofile 10000000\nroot hard nofile 10000000\n```\n\nAfter this reboot your system.\n\n\n\n## mqtt启动后，需要开放对应端口的，则处理如下\n\nCentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下\n\n1、直接关闭防火墙\n\n```\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service #禁止firewall开机启动\n```\n\n2、设置 iptables service\n\n```\nyum -y install iptables-services\n```\n\n如果要修改防火墙配置，如增加防火墙端口3306\n```\nvi /etc/sysconfig/iptables \n```\n\n增加规则\n```\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n\n保存退出后\n```\nsystemctl restart iptables.service #重启防火墙使配置生效\n\nsystemctl enable iptables.service #设置防火墙开机启动\n```\n\n最后重启系统使设置生效即可。","slug":"mosquitto使用记录与服务器调试","published":1,"updated":"2018-09-08T17:00:02.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usua002100uu3wkz5fl0","content":"<h1 id=\"mosquitto使用记录：\"><a href=\"#mosquitto使用记录：\" class=\"headerlink\" title=\"mosquitto使用记录：\"></a>mosquitto使用记录：</h1><h2 id=\"mqtt：\"><a href=\"#mqtt：\" class=\"headerlink\" title=\"mqtt：\"></a>mqtt：</h2><h3 id=\"启动：\"><a href=\"#启动：\" class=\"headerlink\" title=\"启动：\"></a>启动：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto -c /etc/mosquitto/mosquitto.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"加-d表示后台运行：\"><a href=\"#加-d表示后台运行：\" class=\"headerlink\" title=\"加-d表示后台运行：\"></a>加-d表示后台运行：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto -c /etc/mosquitto/mosquitto.conf -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"sub一个主题：\"><a href=\"#sub一个主题：\" class=\"headerlink\" title=\"sub一个主题：\"></a>sub一个主题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto_sub -h localhost -t test -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"pub一个消息到主题：\"><a href=\"#pub一个消息到主题：\" class=\"headerlink\" title=\"pub一个消息到主题：\"></a>pub一个消息到主题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto_pub -h localhost -m &quot;中文 的mqtt&quot; -t test -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启：找到线程，kill\"><a href=\"#重启：找到线程，kill\" class=\"headerlink\" title=\"重启：找到线程，kill\"></a>重启：找到线程，kill</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -A | grep mosquitto</span><br><span class=\"line\">kill -9 xxx</span><br></pre></td></tr></table></figure>\n<h2 id=\"linux最大连接数设置\"><a href=\"#linux最大连接数设置\" class=\"headerlink\" title=\"linux最大连接数设置\"></a>linux最大连接数设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -n20000 -s512</span><br><span class=\"line\"></span><br><span class=\"line\">ulimit -f unlimited</span><br><span class=\"line\">ulimit -t unlimited</span><br><span class=\"line\">ulimit -v unlimited</span><br><span class=\"line\">ulimit -n 1048576</span><br><span class=\"line\">ulimit -m unlimited</span><br><span class=\"line\">ulimit -u 1048576</span><br></pre></td></tr></table></figure>\n<p>Till now I have achieved 74K concurrent connections on a broker. I have configured the ulimit of broker server by editing sysctl.conf and limit.conf file.</p>\n<ul>\n<li>vi /etc/sysctl.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.file-max = 10000000 </span><br><span class=\"line\">fs.nr_open = 10000000</span><br><span class=\"line\">net.ipv4.tcp_mem = 786432 1697152 1945728</span><br><span class=\"line\">net.ipv4.tcp_rmem = 4096 4096 16777216</span><br><span class=\"line\">net.ipv4.tcp_wmem = 4096 4096 16777216</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1000 65535</span><br></pre></td></tr></table></figure>\n<ul>\n<li>vi /etc/security/limits.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 10000000</span><br><span class=\"line\">* hard nofile 10000000</span><br><span class=\"line\">root soft nofile 10000000</span><br><span class=\"line\">root hard nofile 10000000</span><br></pre></td></tr></table></figure>\n<p>After this reboot your system.</p>\n<h2 id=\"mqtt启动后，需要开放对应端口的，则处理如下\"><a href=\"#mqtt启动后，需要开放对应端口的，则处理如下\" class=\"headerlink\" title=\"mqtt启动后，需要开放对应端口的，则处理如下\"></a>mqtt启动后，需要开放对应端口的，则处理如下</h2><p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>\n<p>1、直接关闭防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure>\n<p>2、设置 iptables service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install iptables-services</span><br></pre></td></tr></table></figure>\n<p>如果要修改防火墙配置，如增加防火墙端口3306<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p>\n<p>增加规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>保存退出后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart iptables.service #重启防火墙使配置生效</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable iptables.service #设置防火墙开机启动</span><br></pre></td></tr></table></figure></p>\n<p>最后重启系统使设置生效即可。</p>\n","excerpt":"","more":"<h1 id=\"mosquitto使用记录：\"><a href=\"#mosquitto使用记录：\" class=\"headerlink\" title=\"mosquitto使用记录：\"></a>mosquitto使用记录：</h1><h2 id=\"mqtt：\"><a href=\"#mqtt：\" class=\"headerlink\" title=\"mqtt：\"></a>mqtt：</h2><h3 id=\"启动：\"><a href=\"#启动：\" class=\"headerlink\" title=\"启动：\"></a>启动：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto -c /etc/mosquitto/mosquitto.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"加-d表示后台运行：\"><a href=\"#加-d表示后台运行：\" class=\"headerlink\" title=\"加-d表示后台运行：\"></a>加-d表示后台运行：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto -c /etc/mosquitto/mosquitto.conf -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"sub一个主题：\"><a href=\"#sub一个主题：\" class=\"headerlink\" title=\"sub一个主题：\"></a>sub一个主题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto_sub -h localhost -t test -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"pub一个消息到主题：\"><a href=\"#pub一个消息到主题：\" class=\"headerlink\" title=\"pub一个消息到主题：\"></a>pub一个消息到主题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mosquitto_pub -h localhost -m &quot;中文 的mqtt&quot; -t test -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启：找到线程，kill\"><a href=\"#重启：找到线程，kill\" class=\"headerlink\" title=\"重启：找到线程，kill\"></a>重启：找到线程，kill</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -A | grep mosquitto</span><br><span class=\"line\">kill -9 xxx</span><br></pre></td></tr></table></figure>\n<h2 id=\"linux最大连接数设置\"><a href=\"#linux最大连接数设置\" class=\"headerlink\" title=\"linux最大连接数设置\"></a>linux最大连接数设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -n20000 -s512</span><br><span class=\"line\"></span><br><span class=\"line\">ulimit -f unlimited</span><br><span class=\"line\">ulimit -t unlimited</span><br><span class=\"line\">ulimit -v unlimited</span><br><span class=\"line\">ulimit -n 1048576</span><br><span class=\"line\">ulimit -m unlimited</span><br><span class=\"line\">ulimit -u 1048576</span><br></pre></td></tr></table></figure>\n<p>Till now I have achieved 74K concurrent connections on a broker. I have configured the ulimit of broker server by editing sysctl.conf and limit.conf file.</p>\n<ul>\n<li>vi /etc/sysctl.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.file-max = 10000000 </span><br><span class=\"line\">fs.nr_open = 10000000</span><br><span class=\"line\">net.ipv4.tcp_mem = 786432 1697152 1945728</span><br><span class=\"line\">net.ipv4.tcp_rmem = 4096 4096 16777216</span><br><span class=\"line\">net.ipv4.tcp_wmem = 4096 4096 16777216</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1000 65535</span><br></pre></td></tr></table></figure>\n<ul>\n<li>vi /etc/security/limits.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 10000000</span><br><span class=\"line\">* hard nofile 10000000</span><br><span class=\"line\">root soft nofile 10000000</span><br><span class=\"line\">root hard nofile 10000000</span><br></pre></td></tr></table></figure>\n<p>After this reboot your system.</p>\n<h2 id=\"mqtt启动后，需要开放对应端口的，则处理如下\"><a href=\"#mqtt启动后，需要开放对应端口的，则处理如下\" class=\"headerlink\" title=\"mqtt启动后，需要开放对应端口的，则处理如下\"></a>mqtt启动后，需要开放对应端口的，则处理如下</h2><p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>\n<p>1、直接关闭防火墙</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure>\n<p>2、设置 iptables service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install iptables-services</span><br></pre></td></tr></table></figure>\n<p>如果要修改防火墙配置，如增加防火墙端口3306<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p>\n<p>增加规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>保存退出后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart iptables.service #重启防火墙使配置生效</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable iptables.service #设置防火墙开机启动</span><br></pre></td></tr></table></figure></p>\n<p>最后重启系统使设置生效即可。</p>\n","sticky":0},{"title":"[springboot][items][项目使用实践]springboot get started","date":"2016-02-01T09:10:18.000Z","_content":"\n往后将通过一个时间记录web app项目，实践并记录spring boot的使用\n为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。\n\n### 1.pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\n","source":"_posts/springboot-items-项目使用实践-springboot-get-started.md","raw":"---\ntitle: '[springboot][items][项目使用实践]springboot get started'\ndate: 2016-02-01 17:10:18\ntags: [springboot,itime]\n---\n\n往后将通过一个时间记录web app项目，实践并记录spring boot的使用\n为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。\n\n### 1.pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2.编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\n","slug":"springboot-items-项目使用实践-springboot-get-started","published":1,"updated":"2016-02-20T04:02:04.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usud002200uuoqpld5g8","content":"<p>往后将通过一个时间记录web app项目，实践并记录spring boot的使用<br>为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。</p>\n<h3 id=\"1-pom-xml中添加maven依赖\"><a href=\"#1-pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1.pom.xml中添加maven依赖\"></a>1.pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2.编写项目启动入口App.java\"></a>2.编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"再进一步，为应用引入spring-mvc\"><a href=\"#再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"再进一步，为应用引入spring mvc\"></a>再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n","excerpt":"","more":"<p>往后将通过一个时间记录web app项目，实践并记录spring boot的使用<br>为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。</p>\n<h3 id=\"1-pom-xml中添加maven依赖\"><a href=\"#1-pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1.pom.xml中添加maven依赖\"></a>1.pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2.编写项目启动入口App.java\"></a>2.编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"再进一步，为应用引入spring-mvc\"><a href=\"#再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"再进一步，为应用引入spring mvc\"></a>再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n","sticky":0},{"title":"[springboot]在spring项目中连接数据库以及spring-datajpa和mybatis的使用","date":"2016-04-09T03:37:07.000Z","_content":"\n## 1.在项目中添加数据库配置（添加数据源等配置）\nspring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。\n比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。\n如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。\n在启动类添加注解：\n@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}\n\n回到数据源配置上来。\n首先,在配置文件application.properties里面配置数据库url\n```\nspring.datasource.url=jdbc:mysql://localhost/dbname\nspring.datasource.username=username\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n使用mysql数据库，还需要添加maven依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n然后，添加数据库配置类\n\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        return sessionFactory.getObject();\n    }\n}\n```\n如此，项目中就有了数据源\n\n\n## 2.在项目中使用spring-data-jpa\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n添加Repository类：\n```\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.CrudRepository;\n\nimport com.xxx.xxx.model.User;\n\npublic interface UserRepository extends CrudRepository<User, Long> {\n\n    Page<User> findAll(Pageable pageable);\n    Page<User> findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);\n    User findByNameAndTypeAllIgnoringCase(String name, Integer type);\n    User findByName(String name);\n}\n```\npring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现\n这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。\n然后你只需添加一些你需要的额外接口方法。\n同样你只需按照其约定的方式写好接口方法，而不需要具体实现。\n\n使用：\n在需要的地方注解注入即可。\n@Autowrite UserRepository userRepository;\n\n\n## 3.在项目中使用mybatis\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.2.2</version>\n</dependency>\n```\n\nmybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。\n你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。\n\n注解sql例子：\n```\npublic interface ItemMapper {\n    @Select(\"select * from item\")\n    List<Item> findAll();\n}\n```\n而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。\n\n当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。\n首先需要改一下DatabaseConfig配置类：\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\n@MapperScan(basePackages=\"com.xxx.xxx.mapper\")\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        sessionFactory.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        return sessionFactory.getObject();\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);\n    }\n}\n```\n添加mybatis配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <package name=\"com.xxx.xxx.model\"/>\n    </typeAliases>\n    <mappers>\n        <mapper resource=\"mapper/xxxMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n具体Mapper实现类：\n```\n@Component\npublic class ItemMapper {\n    @Autowired private SqlSessionTemplate sqlSessionTemplate;\n\n    public Item selectItemById(long id) {\n        return this.sqlSessionTemplate.selectOne(\"selectItemById\", id);\n    }\n}\n```\n\ndone！","source":"_posts/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用.md","raw":"---\ntitle: '[springboot]在spring项目中连接数据库以及spring-datajpa和mybatis的使用'\ndate: 2016-04-09 11:37:07\ntags: [spring boot,mysql,数据库,spring data jpa,mybatis]\n---\n\n## 1.在项目中添加数据库配置（添加数据源等配置）\nspring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。\n比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。\n如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。\n在启动类添加注解：\n@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}\n\n回到数据源配置上来。\n首先,在配置文件application.properties里面配置数据库url\n```\nspring.datasource.url=jdbc:mysql://localhost/dbname\nspring.datasource.username=username\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n使用mysql数据库，还需要添加maven依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n然后，添加数据库配置类\n\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        return sessionFactory.getObject();\n    }\n}\n```\n如此，项目中就有了数据源\n\n\n## 2.在项目中使用spring-data-jpa\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n添加Repository类：\n```\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.repository.CrudRepository;\n\nimport com.xxx.xxx.model.User;\n\npublic interface UserRepository extends CrudRepository<User, Long> {\n\n    Page<User> findAll(Pageable pageable);\n    Page<User> findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);\n    User findByNameAndTypeAllIgnoringCase(String name, Integer type);\n    User findByName(String name);\n}\n```\npring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现\n这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。\n然后你只需添加一些你需要的额外接口方法。\n同样你只需按照其约定的方式写好接口方法，而不需要具体实现。\n\n使用：\n在需要的地方注解注入即可。\n@Autowrite UserRepository userRepository;\n\n\n## 3.在项目中使用mybatis\n添加maven依赖：\n```\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-spring</artifactId>\n    <version>1.2.2</version>\n</dependency>\n```\n\nmybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。\n你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。\n\n注解sql例子：\n```\npublic interface ItemMapper {\n    @Select(\"select * from item\")\n    List<Item> findAll();\n}\n```\n而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。\n\n当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。\n首先需要改一下DatabaseConfig配置类：\n```\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\n\n@Configuration\n@MapperScan(basePackages=\"com.xxx.xxx.mapper\")\npublic class DatabaseConfig {\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(dataSource);\n        sessionFactory.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        return sessionFactory.getObject();\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);\n    }\n}\n```\n添加mybatis配置文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <typeAliases>\n        <package name=\"com.xxx.xxx.model\"/>\n    </typeAliases>\n    <mappers>\n        <mapper resource=\"mapper/xxxMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n具体Mapper实现类：\n```\n@Component\npublic class ItemMapper {\n    @Autowired private SqlSessionTemplate sqlSessionTemplate;\n\n    public Item selectItemById(long id) {\n        return this.sqlSessionTemplate.selectOne(\"selectItemById\", id);\n    }\n}\n```\n\ndone！","slug":"springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用","published":1,"updated":"2016-04-09T04:30:03.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usuh002400uuaio9e70a","content":"<h2 id=\"1-在项目中添加数据库配置（添加数据源等配置）\"><a href=\"#1-在项目中添加数据库配置（添加数据源等配置）\" class=\"headerlink\" title=\"1.在项目中添加数据库配置（添加数据源等配置）\"></a>1.在项目中添加数据库配置（添加数据源等配置）</h2><p>spring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。<br>比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。<br>如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。<br>在启动类添加注解：<br>@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}</p>\n<p>回到数据源配置上来。<br>首先,在配置文件application.properties里面配置数据库url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost/dbname</span><br><span class=\"line\">spring.datasource.username=username</span><br><span class=\"line\">spring.datasource.password=password</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p>\n<p>使用mysql数据库，还需要添加maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加数据库配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此，项目中就有了数据源</p>\n<h2 id=\"2-在项目中使用spring-data-jpa\"><a href=\"#2-在项目中使用spring-data-jpa\" class=\"headerlink\" title=\"2.在项目中使用spring-data-jpa\"></a>2.在项目中使用spring-data-jpa</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加Repository类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.data.domain.Page;</span><br><span class=\"line\">import org.springframework.data.domain.Pageable;</span><br><span class=\"line\">import org.springframework.data.repository.CrudRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.model.User;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserRepository extends CrudRepository&lt;User, Long&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;User&gt; findAll(Pageable pageable);</span><br><span class=\"line\">    Page&lt;User&gt; findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);</span><br><span class=\"line\">    User findByNameAndTypeAllIgnoringCase(String name, Integer type);</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现<br>这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。<br>然后你只需添加一些你需要的额外接口方法。<br>同样你只需按照其约定的方式写好接口方法，而不需要具体实现。</p>\n<p>使用：<br>在需要的地方注解注入即可。<br>@Autowrite UserRepository userRepository;</p>\n<h2 id=\"3-在项目中使用mybatis\"><a href=\"#3-在项目中使用mybatis\" class=\"headerlink\" title=\"3.在项目中使用mybatis\"></a>3.在项目中使用mybatis</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>mybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。<br>你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。</p>\n<p>注解sql例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ItemMapper &#123;</span><br><span class=\"line\">    @Select(&quot;select * from item&quot;)</span><br><span class=\"line\">    List&lt;Item&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。</p>\n<p>当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。<br>首先需要改一下DatabaseConfig配置类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@MapperScan(basePackages=&quot;com.xxx.xxx.mapper&quot;)</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        sessionFactory.setConfigLocation(new ClassPathResource(&quot;mybatis-config.xml&quot;));</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加mybatis配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;package name=&quot;com.xxx.xxx.model&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mapper/xxxMapper.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<p>具体Mapper实现类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class ItemMapper &#123;</span><br><span class=\"line\">    @Autowired private SqlSessionTemplate sqlSessionTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Item selectItemById(long id) &#123;</span><br><span class=\"line\">        return this.sqlSessionTemplate.selectOne(&quot;selectItemById&quot;, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done！</p>\n","excerpt":"","more":"<h2 id=\"1-在项目中添加数据库配置（添加数据源等配置）\"><a href=\"#1-在项目中添加数据库配置（添加数据源等配置）\" class=\"headerlink\" title=\"1.在项目中添加数据库配置（添加数据源等配置）\"></a>1.在项目中添加数据库配置（添加数据源等配置）</h2><p>spring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。<br>比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。<br>如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。<br>在启动类添加注解：<br>@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}</p>\n<p>回到数据源配置上来。<br>首先,在配置文件application.properties里面配置数据库url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://localhost/dbname</span><br><span class=\"line\">spring.datasource.username=username</span><br><span class=\"line\">spring.datasource.password=password</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p>\n<p>使用mysql数据库，还需要添加maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后，添加数据库配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此，项目中就有了数据源</p>\n<h2 id=\"2-在项目中使用spring-data-jpa\"><a href=\"#2-在项目中使用spring-data-jpa\" class=\"headerlink\" title=\"2.在项目中使用spring-data-jpa\"></a>2.在项目中使用spring-data-jpa</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加Repository类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.data.domain.Page;</span><br><span class=\"line\">import org.springframework.data.domain.Pageable;</span><br><span class=\"line\">import org.springframework.data.repository.CrudRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.model.User;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserRepository extends CrudRepository&lt;User, Long&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;User&gt; findAll(Pageable pageable);</span><br><span class=\"line\">    Page&lt;User&gt; findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);</span><br><span class=\"line\">    User findByNameAndTypeAllIgnoringCase(String name, Integer type);</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现<br>这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。<br>然后你只需添加一些你需要的额外接口方法。<br>同样你只需按照其约定的方式写好接口方法，而不需要具体实现。</p>\n<p>使用：<br>在需要的地方注解注入即可。<br>@Autowrite UserRepository userRepository;</p>\n<h2 id=\"3-在项目中使用mybatis\"><a href=\"#3-在项目中使用mybatis\" class=\"headerlink\" title=\"3.在项目中使用mybatis\"></a>3.在项目中使用mybatis</h2><p>添加maven依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>mybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。<br>你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。</p>\n<p>注解sql例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ItemMapper &#123;</span><br><span class=\"line\">    @Select(&quot;select * from item&quot;)</span><br><span class=\"line\">    List&lt;Item&gt; findAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。</p>\n<p>当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。<br>首先需要改一下DatabaseConfig配置类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import org.apache.ibatis.session.ExecutorType;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class=\"line\">import org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@MapperScan(basePackages=&quot;com.xxx.xxx.mapper&quot;)</span><br><span class=\"line\">public class DatabaseConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &#123;</span><br><span class=\"line\">        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();</span><br><span class=\"line\">        sessionFactory.setDataSource(dataSource);</span><br><span class=\"line\">        sessionFactory.setConfigLocation(new ClassPathResource(&quot;mybatis-config.xml&quot;));</span><br><span class=\"line\">        return sessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class=\"line\">        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加mybatis配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;package name=&quot;com.xxx.xxx.model&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mapper/xxxMapper.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<p>具体Mapper实现类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class ItemMapper &#123;</span><br><span class=\"line\">    @Autowired private SqlSessionTemplate sqlSessionTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Item selectItemById(long id) &#123;</span><br><span class=\"line\">        return this.sqlSessionTemplate.selectOne(&quot;selectItemById&quot;, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done！</p>\n","sticky":0},{"title":"[springboot+shiro+redis+rediscluster+sso]在springboot项目中接入shiro","date":"2016-04-09T04:52:53.000Z","_content":"\n在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。\n\n现在开始是第一篇：在springboot项目中接入shiro\n\n## 引入shiro的maven依赖\n```\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-core</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-spring</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-web</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-ehcache</artifactId>\n    <version>1.2.3</version>\n</dependency>\n```\n\n## 程序具体实现\n\n### 首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\n```\nshiro:\n  realm: com.xxx.xxx.config.security.MyRealm\n  loginUrl: /view/sign-in.html\n  successUrl: /item.html\n  unauthorizedUrl: /forbidden.html\n  filterChainDefinitions:\n    \"/login\": anon\n    \"/static/**\": anon\n    \"/bower_components/**\": anon\n    \"/logout\": logout\n    \"/**\": authc\n```\n说明：\nrealm: com.xxx.xxx.config.security.MyRealm\nRealm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。\n为了获得更好的自定义功能，通常我们会自己实现一个Realm.\n所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。\nloginUrl，定义了需要认证用户时，跳转到的登录页面\nsuccessUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。\nunauthorizedUrl，定义未认证时显示的页面。\nfilterChainDefinitions，定义哪些路径应该做何种过滤策略。\nanon，logout，authc这些都是shiro默认实现的过滤器filter。\nanon表示可以匿名访问的路径，authc表示需要登录认证的路径\n\n过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。\n\n### 下面是自己实现的自定义Realm：MyRealm\n```\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.xxx.model.base.UserDTO;\nimport com.xxx.remote.base.UserRemote;\n\npublic class MyRealm extends AuthorizingRealm {\n    @Autowired UserRemote userService;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();\n        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n        List<String> roles = userService.findByUserId(user.getId());\n        info.addRoles(roles);\n        return info;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;\n        String username = usernamePasswordToken.getUsername();\n        UserDTO user = userService.findUserByName(username);\n        if (null != user) {\n            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());\n            return new SimpleAuthenticationInfo(user, cih, getName());\n        }\n        return null;\n    }\n}\n```\nMyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。\nAuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. \n\ndoGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。\ndoGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。\n\n例子中UserRemote userService是提供用户数据的具体service服务。\n\n### 有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\n#### springboot shiro配置类：ShiroAutoConfig.java\n```\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.realm.Realm;\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Import;\n\nimport com.xxx.xxx.config.security.MyRealm;\n\n@Configuration\n@EnableConfigurationProperties(ShiroProperties.class)\n@Import(ShiroManager.class)\npublic class ShiroAutoConfig {\n    @Autowired private ShiroProperties properties;\n\n    @Bean(name = \"realm\")\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public MyRealm realm() {\n        Class<?> relmClass = properties.getRealm();\n        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);\n        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);\n        r.setCredentialsMatcher(credentialsMatcher);\n        return r;\n    }\n\n    @Bean(name = \"shiroFilter\")\n    @DependsOn(\"securityManager\")\n    @ConditionalOnMissingBean\n    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) {\n        MyRealm myRealm = (MyRealm) realm;\n        securityManager.setRealm(myRealm);\n        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();\n        shiroFilter.setSecurityManager(securityManager);\n        shiroFilter.setLoginUrl(properties.getLoginUrl());\n        shiroFilter.setSuccessUrl(properties.getSuccessUrl());\n        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());\n        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());\n        return shiroFilter;\n    }\n}\n```\n这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。\ngetShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。\nyml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。\n当然，还需要配置几个其他配置，都在ShiroManager配置好了。\n\n#### ShiroProperties：\n```\nimport java.util.Map;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n/**\n * Configuration properties for Shiro.\n */\n@ConfigurationProperties(prefix = \"shiro\")\npublic class ShiroProperties {\n    private Class<?> realm;\n    private String loginUrl;\n    private String successUrl;\n    private String unauthorizedUrl;\n    private Map<String, String> filterChainDefinitions;\n\n}\n```\n\n#### ShiroManager：\n```\nimport org.apache.shiro.cache.CacheManager;\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.session.mgt.SessionManager;\nimport org.apache.shiro.session.mgt.eis.SessionDAO;\nimport org.apache.shiro.spring.LifecycleBeanPostProcessor;\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\nimport org.apache.shiro.web.session.mgt.DefaultWebSessionManager;\nimport org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.DependsOn;\n\n/**\n * Shiro Config Manager.\n */\npublic class ShiroManager {\n    /**\n     * 保证实现了Shiro内部lifecycle函数的bean执行\n     */\n    @Bean(name = \"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n    @Bean(name = \"defaultAdvisorAutoProxyCreator\")\n    @ConditionalOnMissingBean\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {\n        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);\n        return defaultAdvisorAutoProxyCreator;\n\n    }\n    /**\n     * 用户授权信息Cache\n     */\n    @Bean(name = \"cacheManager\")\n    @ConditionalOnMissingBean\n    public CacheManager cacheManager() {\n        return new MemoryConstrainedCacheManager();\n    }\n    @Bean(name = \"securityManager\")\n    @ConditionalOnMissingBean\n    public DefaultSecurityManager securityManager(CacheManager cacheManager) {\n        DefaultSecurityManager sm = new DefaultWebSecurityManager();\n        sm.setCacheManager(cacheManager);\n        return sm;\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) {\n        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();\n        aasa.setSecurityManager(securityManager);\n        return new AuthorizationAttributeSourceAdvisor();\n    }\n}\n```\nCacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。\n如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。\n\n至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。\n\n### 这里简单的提供一下在mvc的controller中做登录和登出怎么做。\n\nLoginController：\n```\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.IncorrectCredentialsException;\nimport org.apache.shiro.authc.UnknownAccountException;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.subject.Subject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class LoginController {\n    @RequestMapping(\"/login\")\n    @ResponseBody\n    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException {\n        Subject subject = SecurityUtils.getSubject();\n        String error = null;\n        UsernamePasswordToken token = new UsernamePasswordToken(username, password);\n        try {\n            subject.login(token);\n        } catch (UnknownAccountException e) {\n            error = \"用户名/密码错误\";\n        } catch (IncorrectCredentialsException e) {\n            error = \"用户名/密码错误\";\n        } catch (AuthenticationException e) {\n            // 其他错误，比如锁定，如果想单独处理请单独catch处理\n            error = \"其他错误：\" + e.getMessage();\n        }\n        if (error != null) {// 出错了，返回登录页面\n            req.setAttribute(\"error\", error);\n            resp.sendRedirect(\"/forbidden.html\");\n        } else {// 登录成功\n            resp.sendRedirect(\"/index.html\");// 设置跳转的页面\n        }\n    }\n    @RequestMapping(value = \"/logout\")\n    @ResponseBody\n    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n\n        Subject currentUser = SecurityUtils.getSubject();\n        currentUser.logout();\n        resp.sendRedirect(\"/index.html\");\n    }\n}\n```\n\ndone!","source":"_posts/springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro.md","raw":"---\ntitle: '[springboot+shiro+redis+rediscluster+sso]在springboot项目中接入shiro'\ndate: 2016-04-09 12:52:53\ntags: [spring boot,shiro,java]\n---\n\n在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。\n\n现在开始是第一篇：在springboot项目中接入shiro\n\n## 引入shiro的maven依赖\n```\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-core</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-spring</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-web</artifactId>\n    <version>1.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-ehcache</artifactId>\n    <version>1.2.3</version>\n</dependency>\n```\n\n## 程序具体实现\n\n### 首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\n```\nshiro:\n  realm: com.xxx.xxx.config.security.MyRealm\n  loginUrl: /view/sign-in.html\n  successUrl: /item.html\n  unauthorizedUrl: /forbidden.html\n  filterChainDefinitions:\n    \"/login\": anon\n    \"/static/**\": anon\n    \"/bower_components/**\": anon\n    \"/logout\": logout\n    \"/**\": authc\n```\n说明：\nrealm: com.xxx.xxx.config.security.MyRealm\nRealm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。\n为了获得更好的自定义功能，通常我们会自己实现一个Realm.\n所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。\nloginUrl，定义了需要认证用户时，跳转到的登录页面\nsuccessUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。\nunauthorizedUrl，定义未认证时显示的页面。\nfilterChainDefinitions，定义哪些路径应该做何种过滤策略。\nanon，logout，authc这些都是shiro默认实现的过滤器filter。\nanon表示可以匿名访问的路径，authc表示需要登录认证的路径\n\n过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。\n\n### 下面是自己实现的自定义Realm：MyRealm\n```\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.xxx.model.base.UserDTO;\nimport com.xxx.remote.base.UserRemote;\n\npublic class MyRealm extends AuthorizingRealm {\n    @Autowired UserRemote userService;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();\n        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n        List<String> roles = userService.findByUserId(user.getId());\n        info.addRoles(roles);\n        return info;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;\n        String username = usernamePasswordToken.getUsername();\n        UserDTO user = userService.findUserByName(username);\n        if (null != user) {\n            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());\n            return new SimpleAuthenticationInfo(user, cih, getName());\n        }\n        return null;\n    }\n}\n```\nMyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。\nAuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. \n\ndoGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。\ndoGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。\n\n例子中UserRemote userService是提供用户数据的具体service服务。\n\n### 有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\n#### springboot shiro配置类：ShiroAutoConfig.java\n```\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.realm.Realm;\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Import;\n\nimport com.xxx.xxx.config.security.MyRealm;\n\n@Configuration\n@EnableConfigurationProperties(ShiroProperties.class)\n@Import(ShiroManager.class)\npublic class ShiroAutoConfig {\n    @Autowired private ShiroProperties properties;\n\n    @Bean(name = \"realm\")\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public MyRealm realm() {\n        Class<?> relmClass = properties.getRealm();\n        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);\n        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);\n        r.setCredentialsMatcher(credentialsMatcher);\n        return r;\n    }\n\n    @Bean(name = \"shiroFilter\")\n    @DependsOn(\"securityManager\")\n    @ConditionalOnMissingBean\n    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) {\n        MyRealm myRealm = (MyRealm) realm;\n        securityManager.setRealm(myRealm);\n        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();\n        shiroFilter.setSecurityManager(securityManager);\n        shiroFilter.setLoginUrl(properties.getLoginUrl());\n        shiroFilter.setSuccessUrl(properties.getSuccessUrl());\n        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());\n        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());\n        return shiroFilter;\n    }\n}\n```\n这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。\ngetShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。\nyml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。\n当然，还需要配置几个其他配置，都在ShiroManager配置好了。\n\n#### ShiroProperties：\n```\nimport java.util.Map;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n/**\n * Configuration properties for Shiro.\n */\n@ConfigurationProperties(prefix = \"shiro\")\npublic class ShiroProperties {\n    private Class<?> realm;\n    private String loginUrl;\n    private String successUrl;\n    private String unauthorizedUrl;\n    private Map<String, String> filterChainDefinitions;\n\n}\n```\n\n#### ShiroManager：\n```\nimport org.apache.shiro.cache.CacheManager;\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.session.mgt.SessionManager;\nimport org.apache.shiro.session.mgt.eis.SessionDAO;\nimport org.apache.shiro.spring.LifecycleBeanPostProcessor;\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\nimport org.apache.shiro.web.session.mgt.DefaultWebSessionManager;\nimport org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.DependsOn;\n\n/**\n * Shiro Config Manager.\n */\npublic class ShiroManager {\n    /**\n     * 保证实现了Shiro内部lifecycle函数的bean执行\n     */\n    @Bean(name = \"lifecycleBeanPostProcessor\")\n    @ConditionalOnMissingBean\n    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n    @Bean(name = \"defaultAdvisorAutoProxyCreator\")\n    @ConditionalOnMissingBean\n    @DependsOn(\"lifecycleBeanPostProcessor\")\n    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {\n        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);\n        return defaultAdvisorAutoProxyCreator;\n\n    }\n    /**\n     * 用户授权信息Cache\n     */\n    @Bean(name = \"cacheManager\")\n    @ConditionalOnMissingBean\n    public CacheManager cacheManager() {\n        return new MemoryConstrainedCacheManager();\n    }\n    @Bean(name = \"securityManager\")\n    @ConditionalOnMissingBean\n    public DefaultSecurityManager securityManager(CacheManager cacheManager) {\n        DefaultSecurityManager sm = new DefaultWebSecurityManager();\n        sm.setCacheManager(cacheManager);\n        return sm;\n    }\n    @Bean\n    @ConditionalOnMissingBean\n    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) {\n        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();\n        aasa.setSecurityManager(securityManager);\n        return new AuthorizationAttributeSourceAdvisor();\n    }\n}\n```\nCacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。\n如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。\n\n至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。\n\n### 这里简单的提供一下在mvc的controller中做登录和登出怎么做。\n\nLoginController：\n```\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.IncorrectCredentialsException;\nimport org.apache.shiro.authc.UnknownAccountException;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.subject.Subject;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class LoginController {\n    @RequestMapping(\"/login\")\n    @ResponseBody\n    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException {\n        Subject subject = SecurityUtils.getSubject();\n        String error = null;\n        UsernamePasswordToken token = new UsernamePasswordToken(username, password);\n        try {\n            subject.login(token);\n        } catch (UnknownAccountException e) {\n            error = \"用户名/密码错误\";\n        } catch (IncorrectCredentialsException e) {\n            error = \"用户名/密码错误\";\n        } catch (AuthenticationException e) {\n            // 其他错误，比如锁定，如果想单独处理请单独catch处理\n            error = \"其他错误：\" + e.getMessage();\n        }\n        if (error != null) {// 出错了，返回登录页面\n            req.setAttribute(\"error\", error);\n            resp.sendRedirect(\"/forbidden.html\");\n        } else {// 登录成功\n            resp.sendRedirect(\"/index.html\");// 设置跳转的页面\n        }\n    }\n    @RequestMapping(value = \"/logout\")\n    @ResponseBody\n    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n\n        Subject currentUser = SecurityUtils.getSubject();\n        currentUser.logout();\n        resp.sendRedirect(\"/index.html\");\n    }\n}\n```\n\ndone!","slug":"springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro","published":1,"updated":"2016-04-09T22:44:27.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usup002500uu1t6z63j0","content":"<p>在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。</p>\n<p>现在开始是第一篇：在springboot项目中接入shiro</p>\n<h2 id=\"引入shiro的maven依赖\"><a href=\"#引入shiro的maven依赖\" class=\"headerlink\" title=\"引入shiro的maven依赖\"></a>引入shiro的maven依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序具体实现\"><a href=\"#程序具体实现\" class=\"headerlink\" title=\"程序具体实现\"></a>程序具体实现</h2><h3 id=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\"><a href=\"#首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\" class=\"headerlink\" title=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\"></a>首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shiro:</span><br><span class=\"line\">  realm: com.xxx.xxx.config.security.MyRealm</span><br><span class=\"line\">  loginUrl: /view/sign-in.html</span><br><span class=\"line\">  successUrl: /item.html</span><br><span class=\"line\">  unauthorizedUrl: /forbidden.html</span><br><span class=\"line\">  filterChainDefinitions:</span><br><span class=\"line\">    &quot;/login&quot;: anon</span><br><span class=\"line\">    &quot;/static/**&quot;: anon</span><br><span class=\"line\">    &quot;/bower_components/**&quot;: anon</span><br><span class=\"line\">    &quot;/logout&quot;: logout</span><br><span class=\"line\">    &quot;/**&quot;: authc</span><br></pre></td></tr></table></figure>\n<p>说明：<br>realm: com.xxx.xxx.config.security.MyRealm<br>Realm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。<br>为了获得更好的自定义功能，通常我们会自己实现一个Realm.<br>所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。<br>loginUrl，定义了需要认证用户时，跳转到的登录页面<br>successUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。<br>unauthorizedUrl，定义未认证时显示的页面。<br>filterChainDefinitions，定义哪些路径应该做何种过滤策略。<br>anon，logout，authc这些都是shiro默认实现的过滤器filter。<br>anon表示可以匿名访问的路径，authc表示需要登录认证的路径</p>\n<p>过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。</p>\n<h3 id=\"下面是自己实现的自定义Realm：MyRealm\"><a href=\"#下面是自己实现的自定义Realm：MyRealm\" class=\"headerlink\" title=\"下面是自己实现的自定义Realm：MyRealm\"></a>下面是自己实现的自定义Realm：MyRealm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class=\"line\">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class=\"line\">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.model.base.UserDTO;</span><br><span class=\"line\">import com.xxx.remote.base.UserRemote;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyRealm extends AuthorizingRealm &#123;</span><br><span class=\"line\">    @Autowired UserRemote userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class=\"line\">        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();</span><br><span class=\"line\">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class=\"line\">        List&lt;String&gt; roles = userService.findByUserId(user.getId());</span><br><span class=\"line\">        info.addRoles(roles);</span><br><span class=\"line\">        return info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class=\"line\">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class=\"line\">        String username = usernamePasswordToken.getUsername();</span><br><span class=\"line\">        UserDTO user = userService.findUserByName(username);</span><br><span class=\"line\">        if (null != user) &#123;</span><br><span class=\"line\">            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());</span><br><span class=\"line\">            return new SimpleAuthenticationInfo(user, cih, getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。<br>AuthorizationInfo represents a single Subject’s stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. </p>\n<p>doGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。<br>doGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。</p>\n<p>例子中UserRemote userService是提供用户数据的具体service服务。</p>\n<h3 id=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"><a href=\"#有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\" class=\"headerlink\" title=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"></a>有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器</h3><h4 id=\"springboot-shiro配置类：ShiroAutoConfig-java\"><a href=\"#springboot-shiro配置类：ShiroAutoConfig-java\" class=\"headerlink\" title=\"springboot shiro配置类：ShiroAutoConfig.java\"></a>springboot shiro配置类：ShiroAutoConfig.java</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.realm.Realm;</span><br><span class=\"line\">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class=\"line\">import org.springframework.beans.BeanUtils;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\">import org.springframework.context.annotation.Import;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.config.security.MyRealm;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableConfigurationProperties(ShiroProperties.class)</span><br><span class=\"line\">@Import(ShiroManager.class)</span><br><span class=\"line\">public class ShiroAutoConfig &#123;</span><br><span class=\"line\">    @Autowired private ShiroProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;realm&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public MyRealm realm() &#123;</span><br><span class=\"line\">        Class&lt;?&gt; relmClass = properties.getRealm();</span><br><span class=\"line\">        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);</span><br><span class=\"line\">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class=\"line\">        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);</span><br><span class=\"line\">        r.setCredentialsMatcher(credentialsMatcher);</span><br><span class=\"line\">        return r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;shiroFilter&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) &#123;</span><br><span class=\"line\">        MyRealm myRealm = (MyRealm) realm;</span><br><span class=\"line\">        securityManager.setRealm(myRealm);</span><br><span class=\"line\">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class=\"line\">        shiroFilter.setSecurityManager(securityManager);</span><br><span class=\"line\">        shiroFilter.setLoginUrl(properties.getLoginUrl());</span><br><span class=\"line\">        shiroFilter.setSuccessUrl(properties.getSuccessUrl());</span><br><span class=\"line\">        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());</span><br><span class=\"line\">        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());</span><br><span class=\"line\">        return shiroFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。<br>getShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。<br>yml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。<br>当然，还需要配置几个其他配置，都在ShiroManager配置好了。</p>\n<h4 id=\"ShiroProperties：\"><a href=\"#ShiroProperties：\" class=\"headerlink\" title=\"ShiroProperties：\"></a>ShiroProperties：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Configuration properties for Shiro.</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ConfigurationProperties(prefix = &quot;shiro&quot;)</span><br><span class=\"line\">public class ShiroProperties &#123;</span><br><span class=\"line\">    private Class&lt;?&gt; realm;</span><br><span class=\"line\">    private String loginUrl;</span><br><span class=\"line\">    private String successUrl;</span><br><span class=\"line\">    private String unauthorizedUrl;</span><br><span class=\"line\">    private Map&lt;String, String&gt; filterChainDefinitions;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ShiroManager：\"><a href=\"#ShiroManager：\" class=\"headerlink\" title=\"ShiroManager：\"></a>ShiroManager：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.cache.CacheManager;</span><br><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.SessionManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.eis.SessionDAO;</span><br><span class=\"line\">import org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class=\"line\">import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class=\"line\">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;</span><br><span class=\"line\">import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Shiro Config Manager.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ShiroManager &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 保证实现了Shiro内部lifecycle函数的bean执行</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class=\"line\">        return new LifecycleBeanPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;defaultAdvisorAutoProxyCreator&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &#123;</span><br><span class=\"line\">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();</span><br><span class=\"line\">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class=\"line\">        return defaultAdvisorAutoProxyCreator;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 用户授权信息Cache</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;cacheManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public CacheManager cacheManager() &#123;</span><br><span class=\"line\">        return new MemoryConstrainedCacheManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public DefaultSecurityManager securityManager(CacheManager cacheManager) &#123;</span><br><span class=\"line\">        DefaultSecurityManager sm = new DefaultWebSecurityManager();</span><br><span class=\"line\">        sm.setCacheManager(cacheManager);</span><br><span class=\"line\">        return sm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) &#123;</span><br><span class=\"line\">        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">        aasa.setSecurityManager(securityManager);</span><br><span class=\"line\">        return new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。<br>如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。</p>\n<p>至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。</p>\n<h3 id=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"><a href=\"#这里简单的提供一下在mvc的controller中做登录和登出怎么做。\" class=\"headerlink\" title=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"></a>这里简单的提供一下在mvc的controller中做登录和登出怎么做。</h3><p>LoginController：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.shiro.SecurityUtils;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class=\"line\">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.subject.Subject;</span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class LoginController &#123;</span><br><span class=\"line\">    @RequestMapping(&quot;/login&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException &#123;</span><br><span class=\"line\">        Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">        String error = null;</span><br><span class=\"line\">        UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            subject.login(token);</span><br><span class=\"line\">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (IncorrectCredentialsException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (AuthenticationException e) &#123;</span><br><span class=\"line\">            // 其他错误，比如锁定，如果想单独处理请单独catch处理</span><br><span class=\"line\">            error = &quot;其他错误：&quot; + e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (error != null) &#123;// 出错了，返回登录页面</span><br><span class=\"line\">            req.setAttribute(&quot;error&quot;, error);</span><br><span class=\"line\">            resp.sendRedirect(&quot;/forbidden.html&quot;);</span><br><span class=\"line\">        &#125; else &#123;// 登录成功</span><br><span class=\"line\">            resp.sendRedirect(&quot;/index.html&quot;);// 设置跳转的页面</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @RequestMapping(value = &quot;/logout&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class=\"line\">        currentUser.logout();</span><br><span class=\"line\">        resp.sendRedirect(&quot;/index.html&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done!</p>\n","excerpt":"","more":"<p>在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。</p>\n<p>现在开始是第一篇：在springboot项目中接入shiro</p>\n<h2 id=\"引入shiro的maven依赖\"><a href=\"#引入shiro的maven依赖\" class=\"headerlink\" title=\"引入shiro的maven依赖\"></a>引入shiro的maven依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序具体实现\"><a href=\"#程序具体实现\" class=\"headerlink\" title=\"程序具体实现\"></a>程序具体实现</h2><h3 id=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\"><a href=\"#首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml\" class=\"headerlink\" title=\"首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml\"></a>首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shiro:</span><br><span class=\"line\">  realm: com.xxx.xxx.config.security.MyRealm</span><br><span class=\"line\">  loginUrl: /view/sign-in.html</span><br><span class=\"line\">  successUrl: /item.html</span><br><span class=\"line\">  unauthorizedUrl: /forbidden.html</span><br><span class=\"line\">  filterChainDefinitions:</span><br><span class=\"line\">    &quot;/login&quot;: anon</span><br><span class=\"line\">    &quot;/static/**&quot;: anon</span><br><span class=\"line\">    &quot;/bower_components/**&quot;: anon</span><br><span class=\"line\">    &quot;/logout&quot;: logout</span><br><span class=\"line\">    &quot;/**&quot;: authc</span><br></pre></td></tr></table></figure>\n<p>说明：<br>realm: com.xxx.xxx.config.security.MyRealm<br>Realm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。<br>为了获得更好的自定义功能，通常我们会自己实现一个Realm.<br>所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。<br>loginUrl，定义了需要认证用户时，跳转到的登录页面<br>successUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。<br>unauthorizedUrl，定义未认证时显示的页面。<br>filterChainDefinitions，定义哪些路径应该做何种过滤策略。<br>anon，logout，authc这些都是shiro默认实现的过滤器filter。<br>anon表示可以匿名访问的路径，authc表示需要登录认证的路径</p>\n<p>过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。</p>\n<h3 id=\"下面是自己实现的自定义Realm：MyRealm\"><a href=\"#下面是自己实现的自定义Realm：MyRealm\" class=\"headerlink\" title=\"下面是自己实现的自定义Realm：MyRealm\"></a>下面是自己实现的自定义Realm：MyRealm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class=\"line\">import org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class=\"line\">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class=\"line\">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.model.base.UserDTO;</span><br><span class=\"line\">import com.xxx.remote.base.UserRemote;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyRealm extends AuthorizingRealm &#123;</span><br><span class=\"line\">    @Autowired UserRemote userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class=\"line\">        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();</span><br><span class=\"line\">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class=\"line\">        List&lt;String&gt; roles = userService.findByUserId(user.getId());</span><br><span class=\"line\">        info.addRoles(roles);</span><br><span class=\"line\">        return info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;</span><br><span class=\"line\">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class=\"line\">        String username = usernamePasswordToken.getUsername();</span><br><span class=\"line\">        UserDTO user = userService.findUserByName(username);</span><br><span class=\"line\">        if (null != user) &#123;</span><br><span class=\"line\">            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());</span><br><span class=\"line\">            return new SimpleAuthenticationInfo(user, cih, getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。<br>AuthorizationInfo represents a single Subject’s stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. </p>\n<p>doGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。<br>doGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。</p>\n<p>例子中UserRemote userService是提供用户数据的具体service服务。</p>\n<h3 id=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"><a href=\"#有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\" class=\"headerlink\" title=\"有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器\"></a>有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器</h3><h4 id=\"springboot-shiro配置类：ShiroAutoConfig-java\"><a href=\"#springboot-shiro配置类：ShiroAutoConfig-java\" class=\"headerlink\" title=\"springboot shiro配置类：ShiroAutoConfig.java\"></a>springboot shiro配置类：ShiroAutoConfig.java</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.realm.Realm;</span><br><span class=\"line\">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class=\"line\">import org.springframework.beans.BeanUtils;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\">import org.springframework.context.annotation.Import;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.xxx.xxx.config.security.MyRealm;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableConfigurationProperties(ShiroProperties.class)</span><br><span class=\"line\">@Import(ShiroManager.class)</span><br><span class=\"line\">public class ShiroAutoConfig &#123;</span><br><span class=\"line\">    @Autowired private ShiroProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;realm&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public MyRealm realm() &#123;</span><br><span class=\"line\">        Class&lt;?&gt; relmClass = properties.getRealm();</span><br><span class=\"line\">        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);</span><br><span class=\"line\">        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();</span><br><span class=\"line\">        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);</span><br><span class=\"line\">        r.setCredentialsMatcher(credentialsMatcher);</span><br><span class=\"line\">        return r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean(name = &quot;shiroFilter&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) &#123;</span><br><span class=\"line\">        MyRealm myRealm = (MyRealm) realm;</span><br><span class=\"line\">        securityManager.setRealm(myRealm);</span><br><span class=\"line\">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class=\"line\">        shiroFilter.setSecurityManager(securityManager);</span><br><span class=\"line\">        shiroFilter.setLoginUrl(properties.getLoginUrl());</span><br><span class=\"line\">        shiroFilter.setSuccessUrl(properties.getSuccessUrl());</span><br><span class=\"line\">        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());</span><br><span class=\"line\">        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());</span><br><span class=\"line\">        return shiroFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。<br>getShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。<br>yml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。<br>当然，还需要配置几个其他配置，都在ShiroManager配置好了。</p>\n<h4 id=\"ShiroProperties：\"><a href=\"#ShiroProperties：\" class=\"headerlink\" title=\"ShiroProperties：\"></a>ShiroProperties：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Configuration properties for Shiro.</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ConfigurationProperties(prefix = &quot;shiro&quot;)</span><br><span class=\"line\">public class ShiroProperties &#123;</span><br><span class=\"line\">    private Class&lt;?&gt; realm;</span><br><span class=\"line\">    private String loginUrl;</span><br><span class=\"line\">    private String successUrl;</span><br><span class=\"line\">    private String unauthorizedUrl;</span><br><span class=\"line\">    private Map&lt;String, String&gt; filterChainDefinitions;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ShiroManager：\"><a href=\"#ShiroManager：\" class=\"headerlink\" title=\"ShiroManager：\"></a>ShiroManager：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.shiro.cache.CacheManager;</span><br><span class=\"line\">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.SessionManager;</span><br><span class=\"line\">import org.apache.shiro.session.mgt.eis.SessionDAO;</span><br><span class=\"line\">import org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class=\"line\">import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class=\"line\">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class=\"line\">import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;</span><br><span class=\"line\">import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class=\"line\">import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.DependsOn;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Shiro Config Manager.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ShiroManager &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 保证实现了Shiro内部lifecycle函数的bean执行</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;</span><br><span class=\"line\">        return new LifecycleBeanPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;defaultAdvisorAutoProxyCreator&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span><br><span class=\"line\">    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &#123;</span><br><span class=\"line\">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();</span><br><span class=\"line\">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);</span><br><span class=\"line\">        return defaultAdvisorAutoProxyCreator;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 用户授权信息Cache</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean(name = &quot;cacheManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public CacheManager cacheManager() &#123;</span><br><span class=\"line\">        return new MemoryConstrainedCacheManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;securityManager&quot;)</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public DefaultSecurityManager securityManager(CacheManager cacheManager) &#123;</span><br><span class=\"line\">        DefaultSecurityManager sm = new DefaultWebSecurityManager();</span><br><span class=\"line\">        sm.setCacheManager(cacheManager);</span><br><span class=\"line\">        return sm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) &#123;</span><br><span class=\"line\">        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">        aasa.setSecurityManager(securityManager);</span><br><span class=\"line\">        return new AuthorizationAttributeSourceAdvisor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。<br>如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。</p>\n<p>至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。</p>\n<h3 id=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"><a href=\"#这里简单的提供一下在mvc的controller中做登录和登出怎么做。\" class=\"headerlink\" title=\"这里简单的提供一下在mvc的controller中做登录和登出怎么做。\"></a>这里简单的提供一下在mvc的controller中做登录和登出怎么做。</h3><p>LoginController：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.shiro.SecurityUtils;</span><br><span class=\"line\">import org.apache.shiro.authc.AuthenticationException;</span><br><span class=\"line\">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class=\"line\">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class=\"line\">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class=\"line\">import org.apache.shiro.subject.Subject;</span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class LoginController &#123;</span><br><span class=\"line\">    @RequestMapping(&quot;/login&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException &#123;</span><br><span class=\"line\">        Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">        String error = null;</span><br><span class=\"line\">        UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            subject.login(token);</span><br><span class=\"line\">        &#125; catch (UnknownAccountException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (IncorrectCredentialsException e) &#123;</span><br><span class=\"line\">            error = &quot;用户名/密码错误&quot;;</span><br><span class=\"line\">        &#125; catch (AuthenticationException e) &#123;</span><br><span class=\"line\">            // 其他错误，比如锁定，如果想单独处理请单独catch处理</span><br><span class=\"line\">            error = &quot;其他错误：&quot; + e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (error != null) &#123;// 出错了，返回登录页面</span><br><span class=\"line\">            req.setAttribute(&quot;error&quot;, error);</span><br><span class=\"line\">            resp.sendRedirect(&quot;/forbidden.html&quot;);</span><br><span class=\"line\">        &#125; else &#123;// 登录成功</span><br><span class=\"line\">            resp.sendRedirect(&quot;/index.html&quot;);// 设置跳转的页面</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @RequestMapping(value = &quot;/logout&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class=\"line\">        currentUser.logout();</span><br><span class=\"line\">        resp.sendRedirect(&quot;/index.html&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>done!</p>\n","sticky":0},{"title":"spring aop 知识体系整理","date":"2016-02-20T04:48:30.000Z","_content":"\nspring aop 整理\n参考：\n     1.https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\n     2.http://blog.csdn.net/dreamrealised/article/details/12885739\n思维导图：\n     http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\n\n![](/images/java-spring-aop.png)","source":"_posts/spring-aop-知识体系整理.md","raw":"---\ntitle: spring aop 知识体系整理\ndate: 2016-02-20 12:48:30\ntags: [java,spring,aop,思维导图]\n---\n\nspring aop 整理\n参考：\n     1.https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\n     2.http://blog.csdn.net/dreamrealised/article/details/12885739\n思维导图：\n     http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\n\n![](/images/java-spring-aop.png)","slug":"spring-aop-知识体系整理","published":1,"updated":"2016-02-20T04:51:36.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usuu002700uucyqei3xn","content":"<p>spring aop 整理<br>参考：<br>     1.<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\" target=\"_blank\" rel=\"external\">https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/</a><br>     2.<a href=\"http://blog.csdn.net/dreamrealised/article/details/12885739\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dreamrealised/article/details/12885739</a><br>思维导图：<br>     <a href=\"http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\" target=\"_blank\" rel=\"external\">http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2</a></p>\n<p><img src=\"/images/java-spring-aop.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>spring aop 整理<br>参考：<br>     1.<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/\">https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/</a><br>     2.<a href=\"http://blog.csdn.net/dreamrealised/article/details/12885739\">http://blog.csdn.net/dreamrealised/article/details/12885739</a><br>思维导图：<br>     <a href=\"http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2\">http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2</a></p>\n<p><img src=\"/images/java-spring-aop.png\" alt=\"\"></p>\n","sticky":0},{"title":"[spring-boot]springboot实践之在项目中使用spring-cache和redis实现缓存","date":"2016-04-09T02:43:01.000Z","_content":"\n## 1.首先需要准备一个redis服务端作为缓存\nredis下载安装启动，比较简单，请google之。\n\n## 2.项目依赖\n使用spring boot和spring cache，需要springboot依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n```\n连接redis，需要spring data redis和jedis包\n```\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n    </dependency>\n```\n\n## 3.程序配置实现与使用\n不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。\n\n### 添加redis cache相关的config类，如下：\n```\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\n@EnableCaching\npublic class RedisCacheConfig extends CachingConfigurerSupport {\n    @Bean\n    public JedisConnectionFactory redisConnectionFactory() {\n        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();\n        redisConnectionFactory.setHostName(\"127.0.0.1\");\n        redisConnectionFactory.setPort(6379);\n        return redisConnectionFactory;\n    }\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory cf) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(cf);\n        return redisTemplate;\n    }\n    @Bean(name = \"redisCacheManager\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        cacheManager.setDefaultExpiration(300);\n        return cacheManager;\n    }\n}\n```\n@Configuration标记此java类为spring boot的配置类\n@EnableCaching标记为项目启用缓存\n@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean>\n从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。\n其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。\n\n### 如何使用？\n使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可\n下面是一个例子：\n```\n    @Cacheable(value = \"find\")\n    public List<Object> find(Long id) {\n        ...\n    }\n    @CacheEvict(value = \"find\", allEntries = true)\n    public Object saveProject(Object object) {\n        ...\n    }\n    @CacheEvict(value = \"find\" , allEntries = true)\n    public void deleteProject(Long id) {\n        ...\n    }\n```\n这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。\n但如果实际数据改变了怎么办？\n我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：\n每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。\n@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。\n\n这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。","source":"_posts/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存.md","raw":"---\ntitle: '[spring-boot]springboot实践之在项目中使用spring-cache和redis实现缓存'\ndate: 2016-04-09 10:43:01\ntags: [spring boot,spring cache,redis,注解]\n---\n\n## 1.首先需要准备一个redis服务端作为缓存\nredis下载安装启动，比较简单，请google之。\n\n## 2.项目依赖\n使用spring boot和spring cache，需要springboot依赖\n```\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n```\n连接redis，需要spring data redis和jedis包\n```\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-redis</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n    </dependency>\n```\n\n## 3.程序配置实现与使用\n不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。\n\n### 添加redis cache相关的config类，如下：\n```\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\n@EnableCaching\npublic class RedisCacheConfig extends CachingConfigurerSupport {\n    @Bean\n    public JedisConnectionFactory redisConnectionFactory() {\n        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();\n        redisConnectionFactory.setHostName(\"127.0.0.1\");\n        redisConnectionFactory.setPort(6379);\n        return redisConnectionFactory;\n    }\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory cf) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(cf);\n        return redisTemplate;\n    }\n    @Bean(name = \"redisCacheManager\")\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        cacheManager.setDefaultExpiration(300);\n        return cacheManager;\n    }\n}\n```\n@Configuration标记此java类为spring boot的配置类\n@EnableCaching标记为项目启用缓存\n@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean>\n从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。\n其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。\n\n### 如何使用？\n使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可\n下面是一个例子：\n```\n    @Cacheable(value = \"find\")\n    public List<Object> find(Long id) {\n        ...\n    }\n    @CacheEvict(value = \"find\", allEntries = true)\n    public Object saveProject(Object object) {\n        ...\n    }\n    @CacheEvict(value = \"find\" , allEntries = true)\n    public void deleteProject(Long id) {\n        ...\n    }\n```\n这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。\n但如果实际数据改变了怎么办？\n我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：\n每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。\n@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。\n\n这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。","slug":"spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存","published":1,"updated":"2016-04-09T03:25:57.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usux002900uukj82ogvu","content":"<h2 id=\"1-首先需要准备一个redis服务端作为缓存\"><a href=\"#1-首先需要准备一个redis服务端作为缓存\" class=\"headerlink\" title=\"1.首先需要准备一个redis服务端作为缓存\"></a>1.首先需要准备一个redis服务端作为缓存</h2><p>redis下载安装启动，比较简单，请google之。</p>\n<h2 id=\"2-项目依赖\"><a href=\"#2-项目依赖\" class=\"headerlink\" title=\"2.项目依赖\"></a>2.项目依赖</h2><p>使用spring boot和spring cache，需要springboot依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>连接redis，需要spring data redis和jedis包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-程序配置实现与使用\"><a href=\"#3-程序配置实现与使用\" class=\"headerlink\" title=\"3.程序配置实现与使用\"></a>3.程序配置实现与使用</h2><p>不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。</p>\n<h3 id=\"添加redis-cache相关的config类，如下：\"><a href=\"#添加redis-cache相关的config类，如下：\" class=\"headerlink\" title=\"添加redis cache相关的config类，如下：\"></a>添加redis cache相关的config类，如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisConnectionFactory redisConnectionFactory() &#123;</span><br><span class=\"line\">        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();</span><br><span class=\"line\">        redisConnectionFactory.setHostName(&quot;127.0.0.1&quot;);</span><br><span class=\"line\">        redisConnectionFactory.setPort(6379);</span><br><span class=\"line\">        return redisConnectionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory cf) &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, String&gt; redisTemplate = new RedisTemplate&lt;String, String&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(cf);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;redisCacheManager&quot;)</span><br><span class=\"line\">    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;</span><br><span class=\"line\">        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        cacheManager.setDefaultExpiration(300);</span><br><span class=\"line\">        return cacheManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Configuration标记此java类为spring boot的配置类<br>@EnableCaching标记为项目启用缓存<br>@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean><br>从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。<br>其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。</bean></p>\n<h3 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h3><p>使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可<br>下面是一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Cacheable(value = &quot;find&quot;)</span><br><span class=\"line\">public List&lt;Object&gt; find(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot;, allEntries = true)</span><br><span class=\"line\">public Object saveProject(Object object) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot; , allEntries = true)</span><br><span class=\"line\">public void deleteProject(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。<br>但如果实际数据改变了怎么办？<br>我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：<br>每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。<br>@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。</p>\n<p>这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。</p>\n","excerpt":"","more":"<h2 id=\"1-首先需要准备一个redis服务端作为缓存\"><a href=\"#1-首先需要准备一个redis服务端作为缓存\" class=\"headerlink\" title=\"1.首先需要准备一个redis服务端作为缓存\"></a>1.首先需要准备一个redis服务端作为缓存</h2><p>redis下载安装启动，比较简单，请google之。</p>\n<h2 id=\"2-项目依赖\"><a href=\"#2-项目依赖\" class=\"headerlink\" title=\"2.项目依赖\"></a>2.项目依赖</h2><p>使用spring boot和spring cache，需要springboot依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>连接redis，需要spring data redis和jedis包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-程序配置实现与使用\"><a href=\"#3-程序配置实现与使用\" class=\"headerlink\" title=\"3.程序配置实现与使用\"></a>3.程序配置实现与使用</h2><p>不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。</p>\n<h3 id=\"添加redis-cache相关的config类，如下：\"><a href=\"#添加redis-cache相关的config类，如下：\" class=\"headerlink\" title=\"添加redis cache相关的config类，如下：\"></a>添加redis cache相关的config类，如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">public class RedisCacheConfig extends CachingConfigurerSupport &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisConnectionFactory redisConnectionFactory() &#123;</span><br><span class=\"line\">        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();</span><br><span class=\"line\">        redisConnectionFactory.setHostName(&quot;127.0.0.1&quot;);</span><br><span class=\"line\">        redisConnectionFactory.setPort(6379);</span><br><span class=\"line\">        return redisConnectionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory cf) &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, String&gt; redisTemplate = new RedisTemplate&lt;String, String&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(cf);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;redisCacheManager&quot;)</span><br><span class=\"line\">    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;</span><br><span class=\"line\">        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        cacheManager.setDefaultExpiration(300);</span><br><span class=\"line\">        return cacheManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Configuration标记此java类为spring boot的配置类<br>@EnableCaching标记为项目启用缓存<br>@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的<bean><br>从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。<br>其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。</p>\n<h3 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h3><p>使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可<br>下面是一个例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Cacheable(value = &quot;find&quot;)</span><br><span class=\"line\">public List&lt;Object&gt; find(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot;, allEntries = true)</span><br><span class=\"line\">public Object saveProject(Object object) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@CacheEvict(value = &quot;find&quot; , allEntries = true)</span><br><span class=\"line\">public void deleteProject(Long id) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。<br>但如果实际数据改变了怎么办？<br>我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：<br>每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。<br>@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。</p>\n<p>这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。</p>\n","sticky":0},{"title":"【转】-支付宝架构与技术","date":"2016-08-10T03:07:13.000Z","_content":"\n![](/images/frame-zhifubao-001.png)\n\n![](/images/frame-zhifubao-002.png)\n\n![](/images/frame-zhifubao-003.png)\n\n![](/images/frame-zhifubao-004.png)\n\n![](/images/frame-zhifubao-005.png)\n\n![](/images/frame-zhifubao-006.png)\n\n![](/images/frame-zhifubao-007.png)\n\n![](/images/frame-zhifubao-008.png)\n\n![](/images/frame-zhifubao-009.png)\n\n![](/images/frame-zhifubao-010.png)\n\n![](/images/frame-zhifubao-011.png)\n\n![](/images/frame-zhifubao-012.png)\n\n![](/images/frame-zhifubao-013.png)\n\n![](/images/frame-zhifubao-014.png)\n\n![](/images/frame-zhifubao-015.png)\n\n![](/images/frame-zhifubao-016.png)\n\n![](/images/frame-zhifubao-017.png)\n\n![](/images/frame-zhifubao-018.png)\n\n![](/images/frame-zhifubao-019.png)\n\n![](/images/frame-zhifubao-020.png)\n\n![](/images/frame-zhifubao-021.png)\n\n![](/images/frame-zhifubao-022.png)\n\n![](/images/frame-zhifubao-023.png)\n\n![](/images/frame-zhifubao-024.png)\n\n![](/images/frame-zhifubao-025.png)\n\n![](/images/frame-zhifubao-026.png)\n\n![](/images/frame-zhifubao-027.png)\n\n![](/images/frame-zhifubao-028.png)\n\n![](/images/frame-zhifubao-029.png)\n\n\n支付宝的开源分布式消息中间件--Metamorphosis(MetaQ)\n　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。\n　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。\n　　Metamorphosis的起源是我从对linkedin的开源MQ--现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？\n　　简单概括下我重新写出meta的原因：\n　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。\n　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等\n　　Meta相对于kafka特有的一些功能：\n　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker\n　　纯Java实现，从通讯到存储，从client到server都是重新实现。\n　　提供事务支持，包括本地事务和XA分布式事务\n　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性\n　　支持异步发送消息\n　　消费消息失败，支持本地恢复\n　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现\n　　支持group commit，提升数据可靠性和吞吐量。\n　　支持消息广播模式\n　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。\n　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。\n　　Meta适合的应用：\n　　日志传输，高吞吐量的日志传输本来就是kafka的强项\n　　消息广播功能，如广播缓存配置失效。\n　　数据的顺序同步功能，如mysql binlog复制\n　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。\n　　作为一般MQ来使用的其他功能\n\n\n总体结构：\n![](/images/frame-zhifubao-030.jpeg)\n\n内部结构：\n![](/images/frame-zhifubao-031.jpeg)\n","source":"_posts/【转】-支付宝架构与技术.md","raw":"---\ntitle: 【转】-支付宝架构与技术\ndate: 2016-08-10 11:07:13\ntags: [支付宝, 架构]\n---\n\n![](/images/frame-zhifubao-001.png)\n\n![](/images/frame-zhifubao-002.png)\n\n![](/images/frame-zhifubao-003.png)\n\n![](/images/frame-zhifubao-004.png)\n\n![](/images/frame-zhifubao-005.png)\n\n![](/images/frame-zhifubao-006.png)\n\n![](/images/frame-zhifubao-007.png)\n\n![](/images/frame-zhifubao-008.png)\n\n![](/images/frame-zhifubao-009.png)\n\n![](/images/frame-zhifubao-010.png)\n\n![](/images/frame-zhifubao-011.png)\n\n![](/images/frame-zhifubao-012.png)\n\n![](/images/frame-zhifubao-013.png)\n\n![](/images/frame-zhifubao-014.png)\n\n![](/images/frame-zhifubao-015.png)\n\n![](/images/frame-zhifubao-016.png)\n\n![](/images/frame-zhifubao-017.png)\n\n![](/images/frame-zhifubao-018.png)\n\n![](/images/frame-zhifubao-019.png)\n\n![](/images/frame-zhifubao-020.png)\n\n![](/images/frame-zhifubao-021.png)\n\n![](/images/frame-zhifubao-022.png)\n\n![](/images/frame-zhifubao-023.png)\n\n![](/images/frame-zhifubao-024.png)\n\n![](/images/frame-zhifubao-025.png)\n\n![](/images/frame-zhifubao-026.png)\n\n![](/images/frame-zhifubao-027.png)\n\n![](/images/frame-zhifubao-028.png)\n\n![](/images/frame-zhifubao-029.png)\n\n\n支付宝的开源分布式消息中间件--Metamorphosis(MetaQ)\n　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。\n　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。\n　　Metamorphosis的起源是我从对linkedin的开源MQ--现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？\n　　简单概括下我重新写出meta的原因：\n　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。\n　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等\n　　Meta相对于kafka特有的一些功能：\n　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker\n　　纯Java实现，从通讯到存储，从client到server都是重新实现。\n　　提供事务支持，包括本地事务和XA分布式事务\n　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性\n　　支持异步发送消息\n　　消费消息失败，支持本地恢复\n　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现\n　　支持group commit，提升数据可靠性和吞吐量。\n　　支持消息广播模式\n　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。\n　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。\n　　Meta适合的应用：\n　　日志传输，高吞吐量的日志传输本来就是kafka的强项\n　　消息广播功能，如广播缓存配置失效。\n　　数据的顺序同步功能，如mysql binlog复制\n　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。\n　　作为一般MQ来使用的其他功能\n\n\n总体结构：\n![](/images/frame-zhifubao-030.jpeg)\n\n内部结构：\n![](/images/frame-zhifubao-031.jpeg)\n","slug":"【转】-支付宝架构与技术","published":1,"updated":"2016-08-10T15:18:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usv0002b00uusbaujnr4","content":"<p><img src=\"/images/frame-zhifubao-001.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-002.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-003.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-004.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-005.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-006.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-007.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-008.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-009.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-010.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-011.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-012.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-013.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-014.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-015.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-016.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-017.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-018.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-019.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-020.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-021.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-022.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-023.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-024.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-025.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-026.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-027.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-028.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-029.png\" alt=\"\"></p>\n<p>支付宝的开源分布式消息中间件–Metamorphosis(MetaQ)<br>　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。<br>　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。<br>　　Metamorphosis的起源是我从对linkedin的开源MQ–现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？<br>　　简单概括下我重新写出meta的原因：<br>　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。<br>　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等<br>　　Meta相对于kafka特有的一些功能：<br>　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker<br>　　纯Java实现，从通讯到存储，从client到server都是重新实现。<br>　　提供事务支持，包括本地事务和XA分布式事务<br>　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性<br>　　支持异步发送消息<br>　　消费消息失败，支持本地恢复<br>　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现<br>　　支持group commit，提升数据可靠性和吞吐量。<br>　　支持消息广播模式<br>　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。<br>　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。<br>　　Meta适合的应用：<br>　　日志传输，高吞吐量的日志传输本来就是kafka的强项<br>　　消息广播功能，如广播缓存配置失效。<br>　　数据的顺序同步功能，如mysql binlog复制<br>　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。<br>　　作为一般MQ来使用的其他功能</p>\n<p>总体结构：<br><img src=\"/images/frame-zhifubao-030.jpeg\" alt=\"\"></p>\n<p>内部结构：<br><img src=\"/images/frame-zhifubao-031.jpeg\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"/images/frame-zhifubao-001.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-002.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-003.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-004.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-005.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-006.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-007.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-008.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-009.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-010.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-011.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-012.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-013.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-014.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-015.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-016.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-017.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-018.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-019.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-020.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-021.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-022.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-023.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-024.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-025.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-026.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-027.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-028.png\" alt=\"\"></p>\n<p><img src=\"/images/frame-zhifubao-029.png\" alt=\"\"></p>\n<p>支付宝的开源分布式消息中间件–Metamorphosis(MetaQ)<br>　　Metamorphosis (MetaQ) 是一个高性能、高可用、可扩展的分布式消息中间件，类似于LinkedIn的Kafka，具有消息存储顺序写、吞吐量大和支持本地和XA事务等特性，适用于大吞吐量、顺序消息、广播和日志数据传输等场景，在淘宝和支付宝有着广泛的应用，现已开源。<br>　　Metamorphosis是淘宝开源的一个Java消息中间件。关于消息中间件，你应该听说过JMS规范，以及一些开源实现，如ActiveMQ和HornetQ等。Metamorphosis也是其中之一。<br>　　Metamorphosis的起源是我从对linkedin的开源MQ–现在转移到apache的kafka的学习开始的，这是一个设计很独特的MQ系统，它采用pull机制，而不是一般MQ的push模型，它大量利用了zookeeper做服务发现和offset存储，它的设计理念我非常欣赏并赞同，强烈建议你阅读一下它的设计文档，总体上说metamorphosis的设计跟它是完全一致的。但是为什么还需要meta呢？<br>　　简单概括下我重新写出meta的原因：<br>　　Kafka是scala写，我对scala不熟悉，并且kafka整个社区的发展太缓慢了。<br>　　有一些功能是kakfa没有实现，但是我们却需要：事务、多种offset存储、高可用方案(HA)等<br>　　Meta相对于kafka特有的一些功能：<br>　　文本协议设计，非常透明，支持类似memcached stats的协议来监控broker<br>　　纯Java实现，从通讯到存储，从client到server都是重新实现。<br>　　提供事务支持，包括本地事务和XA分布式事务<br>　　支持HA复制，包括异步复制和同步复制，保证消息的可靠性<br>　　支持异步发送消息<br>　　消费消息失败，支持本地恢复<br>　　多种offset存储支持，数据库、磁盘、zookeeper，可自定义实现<br>　　支持group commit，提升数据可靠性和吞吐量。<br>　　支持消息广播模式<br>　　一系列配套项目：python客户端、twitter storm的spout、tail4j等。<br>　　因此meta相比于kafka的提升是巨大的。meta在淘宝和支付宝都得到了广泛应用，现在每天支付宝每天经由meta路由的消息达到120亿，淘宝也有每天也有上亿的消息量。<br>　　Meta适合的应用：<br>　　日志传输，高吞吐量的日志传输本来就是kafka的强项<br>　　消息广播功能，如广播缓存配置失效。<br>　　数据的顺序同步功能，如mysql binlog复制<br>　　分布式环境下（broker,producer,consumer都为集群）的消息路由，对顺序和可靠性有极高要求的场景。<br>　　作为一般MQ来使用的其他功能</p>\n<p>总体结构：<br><img src=\"/images/frame-zhifubao-030.jpeg\" alt=\"\"></p>\n<p>内部结构：<br><img src=\"/images/frame-zhifubao-031.jpeg\" alt=\"\"></p>\n","sticky":0},{"title":"spring事务用法演进","date":"2016-08-18T04:13:57.000Z","_content":"# Spring事务用法演进\n\n- 内容\n\n![](/images/spring-transaction-001.png)\n\n\n- 事务用法演进\n\n![](/images/spring-transaction-002.png)\n\n\n## 编程式事务管理\n\n### 基于底层 API 的编程式事务管理\n\n- 配置\n```\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n        <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n            <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n        </bean>\n    </property>\n</bean>\n```\n\n- TransactionDefinition 类型的属性，它用于定义一个事务\n- PlatformTransactionManager 类型的属性，用于执行事务管理操作\n\n- 程序代码\n```\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n    ......\n    public boolean transfer(Long fromId， Long toId， double amount) {\n        TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n        boolean result = false;\n        try {\n            result = bankDao.transfer(fromId， toId， amount);\n            txManager.commit(txStatus);\n        } catch (Exception e) {\n            result = false;\n            txManager.rollback(txStatus);\n            System.out.println(\"Transfer Error!\");\n        }\n        return result;\n    }\n}\n```\n\n- 事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。\n\n### 基于TransactionTemplate的编程式事务管理\n- 配置文件\n```\n<bean id=\"bankService\"\nclass=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n- 程序示例\n```\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                    result = bankDao.transfer(fromId， toId， amount);\n                } catch (Exception e) {\n                    status.setRollbackOnly();\n                    result = false;\n                    System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n- 在数据访问层非常常见的模板回调模式\n- 以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码\n\n\n## 声明式事务管理\n\n- 不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式）\n- 声明式事务管理由Spring AOP实现\n\n### 基于TransactionInterceptor的声明式事务管理\n\n- 示例配置文件\n```\n<beans...>\n    ......\n    <bean id=\"transactionInterceptor\"\n    class=\"org.springframework.transaction.interceptor.TransactionInterceptor\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n        <property name=\"transactionAttributes\">\n            <props>\n                <prop key=\"transfer\">PROPAGATION_REQUIRED</prop>\n            </props>\n        </property>\n    </bean>\n\n    <bean id=\"bankServiceTarget\" class=\"footmark.spring.core.tx.declare.origin.BankServiceImpl\">\n        <property name=\"bankDao\" ref=\"bankDao\"/>\n    </bean>\n\n    <bean id=\"bankService\"\n    class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n        <property name=\"target\" ref=\"bankServiceTarget\"/>\n        <property name=\"interceptorNames\">\n            <list>\n                <idref bean=\"transactionInterceptor\"/>\n            </list>\n        </property>\n    </bean>\n    ......\n</beans>\n```\n\n- TransactionInterceptor定义相关的事务规则，有两个主要的属性：transactionManager和transactionAttributes\n- transactionManager，用来指定一个事务管理器，并将具体事务相关的操作委托给它；\n- transactionAttributes，Properties 类型，主要用来定义事务规则，该属性的每一个键值对中，键指定的是方法名，方法名可以使用通配符，而值就表示相应方法的所应用的事务属性。\n- ProxyFactoryBean, 组装 target 和advice. 通过 ProxyFactoryBean 生成的代理类就是织入了事务管理逻辑后的目标类。\n\n#### 事务属性取值的书写规则：\n```\n传播行为 [，隔离级别] [，只读属性] [，超时属性] [不影响提交的异常] [，导致回滚的异常]\n```\n- 传播行为是唯一必须设置的属性，其他都可以忽略，Spring为我们提供了合理的默认值\n- 传播行为的取值必须以“PROPAGATION_”开头，具体包括：PROPAGATION_MANDATORY、PROPAGATION_NESTED、PROPAGATION_NEVER、PROPAGATION_NOT_SUPPORTED、PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_SUPPORTS，共七种取值。\n- 隔离级别的取值必须以“ISOLATION_”开头，具体包括：ISOLATION_DEFAULT、ISOLATION_READ_COMMITTED、ISOLATION_READ_UNCOMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE，共五种取值。\n- 如果事务是只读的，那么我们可以指定只读属性，使用“readOnly”指定。否则我们不需要设置该属性。\n- 超时属性的取值必须以“TIMEOUT_”开头，后面跟一个int类型的值，表示超时时间，单位是秒。\n- 不影响提交的异常是指，即使事务中抛出了这些类型的异常，事务任然正常提交。必须在每一个异常的名字前面加上“+”。异常的名字可以是类名的一部分。比如“+RuntimeException”、“+tion”等等。\n- 导致回滚的异常是指，当事务中抛出这些类型的异常时，事务将回滚。必须在每一个异常的名字前面加上“-”。异常的名字可以是类名的全部或者部分，比如“-RuntimeException”、“-tion”等等。\n- 两个示例\n```\n<property name=\"*Service\">\n    PROPAGATION_REQUIRED，ISOLATION_READ_COMMITTED，TIMEOUT_20，+AbcException，+DefException，-HijException\n</property>\n```\n针对所有方法名以 Service 结尾的方法，使用 PROPAGATION_REQUIRED 事务传播行为，事务的隔离级别是 ISOLATION_READ_COMMITTED，超时时间为20秒，当事务抛出 AbcException 或者 DefException 类型的异常，则仍然提交，当抛出 HijException 类型的异常时必须回滚事务。这里没有指定\"readOnly\"，表示事务不是只读的。\n```\n<property name=\"test\">PROPAGATION_REQUIRED，readOnly</property>\n```\n针对所有方法名为 test 的方法，使用 PROPAGATION_REQUIRED 事务传播行为，并且该事务是只读的。\n\n\n### 基于TransactionProxyFactoryBean的声明式事务管理\n\n- 示例配置文件\n```\n<beans......>\n    ......\n    <bean id=\"bankServiceTarget\"\n    class=\"footmark.spring.core.tx.declare.classic.BankServiceImpl\">\n        <property name=\"bankDao\" ref=\"bankDao\"/>\n    </bean>\n\n    <bean id=\"bankService\"\n    class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\n        <property name=\"target\" ref=\"bankServiceTarget\"/>\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n        <property name=\"transactionAttributes\">\n            <props>\n                <prop key=\"transfer\">PROPAGATION_REQUIRED</prop>\n            </props>\n        </property>\n    </bean>\n    ......\n</beans>\n```\n\n- 显式为每一个业务类配置一个TransactionProxyFactoryBean的做法将使得代码显得过于刻板\n\n\n### 基于<tx>命名空间的声明式事务管理\n\n- 示例配置文件\n```\n<beans......>\n    ......\n\n    <tx:advice id=\"bankAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"transfer\" propagation=\"REQUIRED\"/>\n        </tx:attributes>\n    </tx:advice>\n\n    <aop:config>\n        <aop:pointcut id=\"bankPointcut\" expression=\"execution(* *.transfer(..))\"/>\n        <aop:advisor advice-ref=\"bankAdvice\" pointcut-ref=\"bankPointcut\"/>\n    </aop:config>\n    ......\n</beans>\n```\n\n- 如果默认的事务属性就能满足要求，那么代码简化为:\n```\n<beans......>\n    ......\n    <tx:advice id=\"bankAdvice\" transaction-manager=\"transactionManager\">\n\n    <aop:config>\n        <aop:pointcut id=\"bankPointcut\" expression=\"execution(**.transfer(..))\"/>\n        <aop:advisor advice-ref=\"bankAdvice\" pointcut-ref=\"bankPointcut\"/>\n    </aop:config>\n    ......\n</beans>\n```\n- 使用切点表达式，就不需要针对每一个业务类创建一个代理对象.\n\n\n### 基于注解@Transactional的声明式事务管理\n\n- @Transactional 可以作用于接口、接口方法、类以及类方法上\n- 当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。\n\n- 示例配置：\n```\n<!-- 配置事务管理器 -->\n<bean id=\"txManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"\n        p:dataSource-ref=\"dataSource\">\n</bean>\n\n<!-- enables scanning for @Transactional annotations -->\n<tx:annotation-driven transaction-manager=\"txManager\" />\n```\n\n- 代码示例：\n```\n@Transactional(propagation = Propagation.REQUIRED)\npublic boolean transfer(Long fromId, Long toId, double amount) {\n    return bankDao.transfer(fromId, toId, amount);\n}\n```\n\n- 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。\n- @Transactional 注解应该只被应用到 public 方法上. 在protected、private或者默认可见性的方法上使用@Transactional 注解，将被忽略，也不会抛出任何异常。\n\n\n## 事务属性\n\n### Required（需要）\n- 若事务上下文已存在，则使用，如果不存在，则为此方法开启一个新事务\n\n### Mandatory（强制必须）\n- 强制事务上下文必须存在，若不存在，则抛出TransactionRequiredException异常\n\n### RequiresNew（需要新的）\n- 总是开启新事务，前一个事务若存在则会被挂起\n- 此属性在此场景是很有用：一个事务如果需要与其外围包裹事务相独立，不受其执行结果的影响，自行完成提交(比如记录日志)\n\n### Supports（支持）\n- 告知容器，对象方法并不需要一个事务上下文，但当调用到这个方法而事务上下文恰巧存在时，则该方法会使用它\n- 可用于查询的方法当中，如果此查询是在一个正在进行的事务中完成的，对目标方法应用Supports属性会让容器使用当前事务上下文，参考数据库操作记录，从而将事务中作出的各种修改液包括到查询结果中\n\n### NotSupported（不支持）\n- 告知容器此方法不使用事务\n- 若一个事务已存在，容器会将事务暂停直至此方法结束\n- 此属性在方法逻辑中有排斥事务上下文代码存在时很有用，可以暂时屏蔽一些不需要或不能用事务的逻辑\n\n### Never（不用）\n- 告知容器不允许有事务上下文存在。若调用方法前事务存在，则抛出异常\n\n### PROPAGATION_NESTED\n- 告知spring进行事务嵌套，并采用Required属性\n\n\n\n\n\n## 事务传播级别\n\n- 这些事务隔离级别设置需要依赖于底层数据库。底层数据库支持，这些设置才会生效\n\n\n![](/images/spring-transaction-003.png)\n\n### TransactionReadUncommitted\n- 允许事务读取其他事务在提交到数据库之前产生的未提交更改。\n\n![](/images/spring-transaction-004.png)\n\n\n### TransactionReadCommitted\n- 允许多个事务访问同一份数据，但将未提交的数据对其他事务隐藏，直至数据提交\n\n![](/images/spring-transaction-005.png)\n\n\n### TransactionRepeatableRead\n- 保持了事务彼此隔绝。\n- 保证一旦在某一事务中服务了数据库的一个值集，在后续的每次查询操作中都读到同样的值（除非此事务拿到这些数据的读写锁，并自行更改了数据）\n- 在此级别下，一个事务如果要更改数据，而这一数据被其他事务读取时，此事务需要等待占用数据事务提交的操作（或直接返回失败）\n\n![](/images/spring-transaction-006.png)\n\n\n### TransactionSerializable\n- java支持的最高的事务隔离级别\n- 交错发生的事务被“堆迭”起来，以致同一时间点仅仅有一个事务具备访问目标数据的权力\n- 性能会受到很大影响，而数据一致性将会极大提高\n\n![](/images/spring-transaction-007.png)\n\n\n\n\n## 分布式事务\n\n### JTA和JTS\n#### jta：java transaction api\n- 开发人员用于事务管理的接口\n- UserTransaction接口\n```\nbegin();\ncommit();\nrollback();\ngetStatus();\n```\n- TransactionManager接口\n```\nsuspend();\nresume();\n```\n\n#### jts：java transaction service\n- 开源或商用的实现了jta的底层事务服务\n\n![](/images/spring-transaction-008.png)\n\n#### 要进行事务管理，我们需要两个东西：事务管理器和资源管理器\n- 资源管理器（Resource Manager），对于数据库，就是数据源\n- 事务管理器（Transaction Manager）\n*控制JTA事务，管理事务生命周期，并协调资源*\n*在JTA中，事务管理器抽象为TransactionManager，并通过底层事务服务（JTS）实现*\n*负责控制和管理实际资源（数据库或JMS队列）*\n\n### 分布式事务/XA事务\n- 分布式事务和单机事务的区别就是，单机事务是事务管理器管理一个资源，而分布式事务则是事务管理器管理多个数据资源.\n\n#### XA环境\n在同一个处理单元中，需要协调多个数据资源完成逻辑，并保证ACID准备，则需要XA事务保证\n\n#### XA接口\n![](/images/spring-transaction-009.png)\n\n- XA支持两阶段提交协议\n\n### 实例：\n- 使用spring boot + jta + atomikos实现分布式事务管理的代码例子\n- 资金在库（atomikos_one），红包在库（atomikos_two）. 资金账号1转10元到资金账号2；红包账号2转10元到红包账号1\n\n#### 表数据\n- capital_account\n\n![](/images/spring-transaction-010.png)\n\n- red_packet_account\n\n![](/images/spring-transaction-011.png)\n\n#### 程序代码\n\n- 配置2个数据源\n```\norder.datasource.url=jdbc:mysql://localhost:3306/atomikos_two\norder.datasource.username=root\norder.datasource.password=root\n\ncustomer.datasource.url=jdbc:mysql://localhost:3306/atomikos_one\ncustomer.datasource.username=root\ncustomer.datasource.password=root\n```\n\natomikos的maven依赖\n```\n    <dependency>\n        <groupId>com.atomikos</groupId>\n        <artifactId>transactions</artifactId>\n        <version>3.9.3</version>\n    </dependency>\n    <dependency>\n        <groupId>com.atomikos</groupId>\n        <artifactId>transactions-jta</artifactId>\n        <version>3.9.3</version>\n    </dependency>\n    <dependency>\n        <groupId>com.atomikos</groupId>\n        <artifactId>transactions-hibernate3</artifactId>\n        <version>3.9.3</version>\n        <exclusions>\n            <exclusion>\n                <artifactId>hibernate</artifactId>\n                <groupId>org.hibernate</groupId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n```\n\n**AtomikosJtaPlatform这个类指明了，Atomikos需要我们提供UserTransaction和TransactionManager的实现**\n```\npublic class AtomikosJtaPlatform extends AbstractJtaPlatform {\n    private static final long serialVersionUID = 1L;\n    static TransactionManager transactionManager;\n    static UserTransaction transaction;\n    @Override\n    protected TransactionManager locateTransactionManager() {\n        return transactionManager;\n    }\n    @Override\n    protected UserTransaction locateUserTransaction() {\n        return transaction;\n    }\n}\n```\n\n- transactionManager等配置\n```\n@Configuration\n@ComponentScan\n@EnableTransactionManagement\npublic class MainConfig {\n    @Bean\n    public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n    @Bean\n    public JpaVendorAdapter jpaVendorAdapter() {\n        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = new HibernateJpaVendorAdapter();\n        hibernateJpaVendorAdapter.setShowSql(true);\n        hibernateJpaVendorAdapter.setGenerateDdl(true);\n        hibernateJpaVendorAdapter.setDatabase(Database.MYSQL);\n        return hibernateJpaVendorAdapter;\n    }\n    @Bean(name = \"userTransaction\")\n    public UserTransaction userTransaction() throws Throwable {\n        UserTransactionImp userTransactionImp = new UserTransactionImp();\n        userTransactionImp.setTransactionTimeout(10000);\n        return userTransactionImp;\n    }\n    @Bean(name = \"atomikosTransactionManager\", initMethod = \"init\"\n    , destroyMethod = \"close\")\n    public TransactionManager atomikosTransactionManager() throws Throwable {\n        UserTransactionManager userTransactionManager = new UserTransactionManager();\n        userTransactionManager.setForceShutdown(false);\n        AtomikosJtaPlatform.transactionManager = userTransactionManager;\n        return userTransactionManager;\n    }\n    @Bean(name = \"transactionManager\")\n    @DependsOn({ \"userTransaction\", \"atomikosTransactionManager\" })\n    public PlatformTransactionManager transactionManager() throws Throwable {\n        UserTransaction userTransaction = userTransaction();\n        AtomikosJtaPlatform.transaction = userTransaction;\n        TransactionManager atomikosTransactionManager = atomikosTransactionManager();\n        return new JtaTransactionManager(userTransaction, atomikosTransactionManager);\n    }\n}\n```\n\n数据库1的数据源配置CustomerConfig\n```\n@Configuration\n@DependsOn(\"transactionManager\")\n@EnableJpaRepositories(basePackages = \"com.iyihua.sample.repository.customer\"\n, entityManagerFactoryRef = \"customerEntityManager\", transactionManagerRef = \"transactionManager\")\n@EnableConfigurationProperties(CustomerDatasourceProperties.class)\npublic class CustomerConfig {\n    @Autowired\n    private JpaVendorAdapter jpaVendorAdapter;\n    @Autowired\n    private CustomerDatasourceProperties customerDatasourceProperties;\n\n    @Primary\n    @Bean(name = \"customerDataSource\", initMethod = \"init\", destroyMethod = \"close\")\n    public DataSource customerDataSource() {\n        MysqlXADataSource mysqlXaDataSource = new MysqlXADataSource();\n        mysqlXaDataSource.setUrl(customerDatasourceProperties.getUrl());\n        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);\n        mysqlXaDataSource.setPassword(customerDatasourceProperties.getPassword());\n        mysqlXaDataSource.setUser(customerDatasourceProperties.getUsername());\n        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);\n        AtomikosDataSourceBean xaDataSource = new AtomikosDataSourceBean();\n        xaDataSource.setXaDataSource(mysqlXaDataSource);\n        xaDataSource.setUniqueResourceName(\"xads1\");\n        return xaDataSource;\n    }\n    @Primary\n    @Bean(name = \"customerEntityManager\")\n    @DependsOn(\"transactionManager\")\n    public LocalContainerEntityManagerFactoryBean customerEntityManager() throws Throwable {\n        HashMap<String, Object> properties = new HashMap<String, Object>();\n        properties.put(\"hibernate.transaction.jta.platform\", AtomikosJtaPlatform.class.getName());\n        properties.put(\"javax.persistence.transactionType\", \"JTA\");\n        LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();\n        entityManager.setJtaDataSource(customerDataSource());\n        entityManager.setJpaVendorAdapter(jpaVendorAdapter);\n        entityManager.setPackagesToScan(\"com.iyihua.sample.domain.customer\");\n        entityManager.setPersistenceUnitName(\"customerPersistenceUnit\");\n        entityManager.setJpaPropertyMap(properties);\n        return entityManager;\n    }\n}\n```\n\n数据库2的数据源配置OrderConfig\n```\n@Configuration\n@DependsOn(\"transactionManager\")\n@EnableJpaRepositories(basePackages = \"com.iyihua.sample.repository.order\"\n, entityManagerFactoryRef = \"orderEntityManager\", transactionManagerRef = \"transactionManager\")\n@EnableConfigurationProperties(OrderDatasourceProperties.class)\npublic class OrderConfig {\n    \n\n}\n```\n\n- 业务方法:资金在库（atomikos_one），红包在库（atomikos_two）资金账号1转10元到资金账号2；红包账号2转10元到红包账号1**\n```\n@Service\npublic class StoreServiceImpl implements StoreService {\n@Transactional()\n    public void transfer() {\n        CapitalAccount ca1 = capitalAccountRepository.findOne(1l);\n        CapitalAccount ca2 = capitalAccountRepository.findOne(2l);\n        RedPacketAccount rp1 = redPacketAccountRepository.findOne(1l);\n        RedPacketAccount rp2 = redPacketAccountRepository.findOne(2l);\n        BigDecimal capital = BigDecimal.TEN;\n        BigDecimal red = BigDecimal.TEN;\n        ca1.transferFrom(capital);\n        ca2.transferTo(capital);\n        capitalAccountRepository.save(ca1);\n        capitalAccountRepository.save(ca2);\n        rp2.transferFrom(red);\n        rp1.transferTo(red);\n        redPacketAccountRepository.save(rp1);\n        redPacketAccountRepository.save(rp2);\n    }\n}\n```\n\n### get and run demo：\nhttps://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample\n\n- git clone https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git\n- import db script in folder \"docs\"\n- import project into ide and run App.java or build project and run the jar\n- visit utl:http://localhost:8082/save to see saveTest\n\n","source":"_posts/spring事务用法演进.md","raw":"---\ntitle: spring事务用法演进\ndate: 2016-08-18 12:13:57\ntags: [spring, java, transaction, 事务, 分布式事务]\n---\n# Spring事务用法演进\n\n- 内容\n\n![](/images/spring-transaction-001.png)\n\n\n- 事务用法演进\n\n![](/images/spring-transaction-002.png)\n\n\n## 编程式事务管理\n\n### 基于底层 API 的编程式事务管理\n\n- 配置\n```\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n        <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n            <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n        </bean>\n    </property>\n</bean>\n```\n\n- TransactionDefinition 类型的属性，它用于定义一个事务\n- PlatformTransactionManager 类型的属性，用于执行事务管理操作\n\n- 程序代码\n```\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n    ......\n    public boolean transfer(Long fromId， Long toId， double amount) {\n        TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n        boolean result = false;\n        try {\n            result = bankDao.transfer(fromId， toId， amount);\n            txManager.commit(txStatus);\n        } catch (Exception e) {\n            result = false;\n            txManager.rollback(txStatus);\n            System.out.println(\"Transfer Error!\");\n        }\n        return result;\n    }\n}\n```\n\n- 事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。\n\n### 基于TransactionTemplate的编程式事务管理\n- 配置文件\n```\n<bean id=\"bankService\"\nclass=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n- 程序示例\n```\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                    result = bankDao.transfer(fromId， toId， amount);\n                } catch (Exception e) {\n                    status.setRollbackOnly();\n                    result = false;\n                    System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n- 在数据访问层非常常见的模板回调模式\n- 以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码\n\n\n## 声明式事务管理\n\n- 不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式）\n- 声明式事务管理由Spring AOP实现\n\n### 基于TransactionInterceptor的声明式事务管理\n\n- 示例配置文件\n```\n<beans...>\n    ......\n    <bean id=\"transactionInterceptor\"\n    class=\"org.springframework.transaction.interceptor.TransactionInterceptor\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n        <property name=\"transactionAttributes\">\n            <props>\n                <prop key=\"transfer\">PROPAGATION_REQUIRED</prop>\n            </props>\n        </property>\n    </bean>\n\n    <bean id=\"bankServiceTarget\" class=\"footmark.spring.core.tx.declare.origin.BankServiceImpl\">\n        <property name=\"bankDao\" ref=\"bankDao\"/>\n    </bean>\n\n    <bean id=\"bankService\"\n    class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n        <property name=\"target\" ref=\"bankServiceTarget\"/>\n        <property name=\"interceptorNames\">\n            <list>\n                <idref bean=\"transactionInterceptor\"/>\n            </list>\n        </property>\n    </bean>\n    ......\n</beans>\n```\n\n- TransactionInterceptor定义相关的事务规则，有两个主要的属性：transactionManager和transactionAttributes\n- transactionManager，用来指定一个事务管理器，并将具体事务相关的操作委托给它；\n- transactionAttributes，Properties 类型，主要用来定义事务规则，该属性的每一个键值对中，键指定的是方法名，方法名可以使用通配符，而值就表示相应方法的所应用的事务属性。\n- ProxyFactoryBean, 组装 target 和advice. 通过 ProxyFactoryBean 生成的代理类就是织入了事务管理逻辑后的目标类。\n\n#### 事务属性取值的书写规则：\n```\n传播行为 [，隔离级别] [，只读属性] [，超时属性] [不影响提交的异常] [，导致回滚的异常]\n```\n- 传播行为是唯一必须设置的属性，其他都可以忽略，Spring为我们提供了合理的默认值\n- 传播行为的取值必须以“PROPAGATION_”开头，具体包括：PROPAGATION_MANDATORY、PROPAGATION_NESTED、PROPAGATION_NEVER、PROPAGATION_NOT_SUPPORTED、PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_SUPPORTS，共七种取值。\n- 隔离级别的取值必须以“ISOLATION_”开头，具体包括：ISOLATION_DEFAULT、ISOLATION_READ_COMMITTED、ISOLATION_READ_UNCOMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE，共五种取值。\n- 如果事务是只读的，那么我们可以指定只读属性，使用“readOnly”指定。否则我们不需要设置该属性。\n- 超时属性的取值必须以“TIMEOUT_”开头，后面跟一个int类型的值，表示超时时间，单位是秒。\n- 不影响提交的异常是指，即使事务中抛出了这些类型的异常，事务任然正常提交。必须在每一个异常的名字前面加上“+”。异常的名字可以是类名的一部分。比如“+RuntimeException”、“+tion”等等。\n- 导致回滚的异常是指，当事务中抛出这些类型的异常时，事务将回滚。必须在每一个异常的名字前面加上“-”。异常的名字可以是类名的全部或者部分，比如“-RuntimeException”、“-tion”等等。\n- 两个示例\n```\n<property name=\"*Service\">\n    PROPAGATION_REQUIRED，ISOLATION_READ_COMMITTED，TIMEOUT_20，+AbcException，+DefException，-HijException\n</property>\n```\n针对所有方法名以 Service 结尾的方法，使用 PROPAGATION_REQUIRED 事务传播行为，事务的隔离级别是 ISOLATION_READ_COMMITTED，超时时间为20秒，当事务抛出 AbcException 或者 DefException 类型的异常，则仍然提交，当抛出 HijException 类型的异常时必须回滚事务。这里没有指定\"readOnly\"，表示事务不是只读的。\n```\n<property name=\"test\">PROPAGATION_REQUIRED，readOnly</property>\n```\n针对所有方法名为 test 的方法，使用 PROPAGATION_REQUIRED 事务传播行为，并且该事务是只读的。\n\n\n### 基于TransactionProxyFactoryBean的声明式事务管理\n\n- 示例配置文件\n```\n<beans......>\n    ......\n    <bean id=\"bankServiceTarget\"\n    class=\"footmark.spring.core.tx.declare.classic.BankServiceImpl\">\n        <property name=\"bankDao\" ref=\"bankDao\"/>\n    </bean>\n\n    <bean id=\"bankService\"\n    class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\n        <property name=\"target\" ref=\"bankServiceTarget\"/>\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n        <property name=\"transactionAttributes\">\n            <props>\n                <prop key=\"transfer\">PROPAGATION_REQUIRED</prop>\n            </props>\n        </property>\n    </bean>\n    ......\n</beans>\n```\n\n- 显式为每一个业务类配置一个TransactionProxyFactoryBean的做法将使得代码显得过于刻板\n\n\n### 基于<tx>命名空间的声明式事务管理\n\n- 示例配置文件\n```\n<beans......>\n    ......\n\n    <tx:advice id=\"bankAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"transfer\" propagation=\"REQUIRED\"/>\n        </tx:attributes>\n    </tx:advice>\n\n    <aop:config>\n        <aop:pointcut id=\"bankPointcut\" expression=\"execution(* *.transfer(..))\"/>\n        <aop:advisor advice-ref=\"bankAdvice\" pointcut-ref=\"bankPointcut\"/>\n    </aop:config>\n    ......\n</beans>\n```\n\n- 如果默认的事务属性就能满足要求，那么代码简化为:\n```\n<beans......>\n    ......\n    <tx:advice id=\"bankAdvice\" transaction-manager=\"transactionManager\">\n\n    <aop:config>\n        <aop:pointcut id=\"bankPointcut\" expression=\"execution(**.transfer(..))\"/>\n        <aop:advisor advice-ref=\"bankAdvice\" pointcut-ref=\"bankPointcut\"/>\n    </aop:config>\n    ......\n</beans>\n```\n- 使用切点表达式，就不需要针对每一个业务类创建一个代理对象.\n\n\n### 基于注解@Transactional的声明式事务管理\n\n- @Transactional 可以作用于接口、接口方法、类以及类方法上\n- 当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。\n\n- 示例配置：\n```\n<!-- 配置事务管理器 -->\n<bean id=\"txManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"\n        p:dataSource-ref=\"dataSource\">\n</bean>\n\n<!-- enables scanning for @Transactional annotations -->\n<tx:annotation-driven transaction-manager=\"txManager\" />\n```\n\n- 代码示例：\n```\n@Transactional(propagation = Propagation.REQUIRED)\npublic boolean transfer(Long fromId, Long toId, double amount) {\n    return bankDao.transfer(fromId, toId, amount);\n}\n```\n\n- 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。\n- @Transactional 注解应该只被应用到 public 方法上. 在protected、private或者默认可见性的方法上使用@Transactional 注解，将被忽略，也不会抛出任何异常。\n\n\n## 事务属性\n\n### Required（需要）\n- 若事务上下文已存在，则使用，如果不存在，则为此方法开启一个新事务\n\n### Mandatory（强制必须）\n- 强制事务上下文必须存在，若不存在，则抛出TransactionRequiredException异常\n\n### RequiresNew（需要新的）\n- 总是开启新事务，前一个事务若存在则会被挂起\n- 此属性在此场景是很有用：一个事务如果需要与其外围包裹事务相独立，不受其执行结果的影响，自行完成提交(比如记录日志)\n\n### Supports（支持）\n- 告知容器，对象方法并不需要一个事务上下文，但当调用到这个方法而事务上下文恰巧存在时，则该方法会使用它\n- 可用于查询的方法当中，如果此查询是在一个正在进行的事务中完成的，对目标方法应用Supports属性会让容器使用当前事务上下文，参考数据库操作记录，从而将事务中作出的各种修改液包括到查询结果中\n\n### NotSupported（不支持）\n- 告知容器此方法不使用事务\n- 若一个事务已存在，容器会将事务暂停直至此方法结束\n- 此属性在方法逻辑中有排斥事务上下文代码存在时很有用，可以暂时屏蔽一些不需要或不能用事务的逻辑\n\n### Never（不用）\n- 告知容器不允许有事务上下文存在。若调用方法前事务存在，则抛出异常\n\n### PROPAGATION_NESTED\n- 告知spring进行事务嵌套，并采用Required属性\n\n\n\n\n\n## 事务传播级别\n\n- 这些事务隔离级别设置需要依赖于底层数据库。底层数据库支持，这些设置才会生效\n\n\n![](/images/spring-transaction-003.png)\n\n### TransactionReadUncommitted\n- 允许事务读取其他事务在提交到数据库之前产生的未提交更改。\n\n![](/images/spring-transaction-004.png)\n\n\n### TransactionReadCommitted\n- 允许多个事务访问同一份数据，但将未提交的数据对其他事务隐藏，直至数据提交\n\n![](/images/spring-transaction-005.png)\n\n\n### TransactionRepeatableRead\n- 保持了事务彼此隔绝。\n- 保证一旦在某一事务中服务了数据库的一个值集，在后续的每次查询操作中都读到同样的值（除非此事务拿到这些数据的读写锁，并自行更改了数据）\n- 在此级别下，一个事务如果要更改数据，而这一数据被其他事务读取时，此事务需要等待占用数据事务提交的操作（或直接返回失败）\n\n![](/images/spring-transaction-006.png)\n\n\n### TransactionSerializable\n- java支持的最高的事务隔离级别\n- 交错发生的事务被“堆迭”起来，以致同一时间点仅仅有一个事务具备访问目标数据的权力\n- 性能会受到很大影响，而数据一致性将会极大提高\n\n![](/images/spring-transaction-007.png)\n\n\n\n\n## 分布式事务\n\n### JTA和JTS\n#### jta：java transaction api\n- 开发人员用于事务管理的接口\n- UserTransaction接口\n```\nbegin();\ncommit();\nrollback();\ngetStatus();\n```\n- TransactionManager接口\n```\nsuspend();\nresume();\n```\n\n#### jts：java transaction service\n- 开源或商用的实现了jta的底层事务服务\n\n![](/images/spring-transaction-008.png)\n\n#### 要进行事务管理，我们需要两个东西：事务管理器和资源管理器\n- 资源管理器（Resource Manager），对于数据库，就是数据源\n- 事务管理器（Transaction Manager）\n*控制JTA事务，管理事务生命周期，并协调资源*\n*在JTA中，事务管理器抽象为TransactionManager，并通过底层事务服务（JTS）实现*\n*负责控制和管理实际资源（数据库或JMS队列）*\n\n### 分布式事务/XA事务\n- 分布式事务和单机事务的区别就是，单机事务是事务管理器管理一个资源，而分布式事务则是事务管理器管理多个数据资源.\n\n#### XA环境\n在同一个处理单元中，需要协调多个数据资源完成逻辑，并保证ACID准备，则需要XA事务保证\n\n#### XA接口\n![](/images/spring-transaction-009.png)\n\n- XA支持两阶段提交协议\n\n### 实例：\n- 使用spring boot + jta + atomikos实现分布式事务管理的代码例子\n- 资金在库（atomikos_one），红包在库（atomikos_two）. 资金账号1转10元到资金账号2；红包账号2转10元到红包账号1\n\n#### 表数据\n- capital_account\n\n![](/images/spring-transaction-010.png)\n\n- red_packet_account\n\n![](/images/spring-transaction-011.png)\n\n#### 程序代码\n\n- 配置2个数据源\n```\norder.datasource.url=jdbc:mysql://localhost:3306/atomikos_two\norder.datasource.username=root\norder.datasource.password=root\n\ncustomer.datasource.url=jdbc:mysql://localhost:3306/atomikos_one\ncustomer.datasource.username=root\ncustomer.datasource.password=root\n```\n\natomikos的maven依赖\n```\n    <dependency>\n        <groupId>com.atomikos</groupId>\n        <artifactId>transactions</artifactId>\n        <version>3.9.3</version>\n    </dependency>\n    <dependency>\n        <groupId>com.atomikos</groupId>\n        <artifactId>transactions-jta</artifactId>\n        <version>3.9.3</version>\n    </dependency>\n    <dependency>\n        <groupId>com.atomikos</groupId>\n        <artifactId>transactions-hibernate3</artifactId>\n        <version>3.9.3</version>\n        <exclusions>\n            <exclusion>\n                <artifactId>hibernate</artifactId>\n                <groupId>org.hibernate</groupId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n```\n\n**AtomikosJtaPlatform这个类指明了，Atomikos需要我们提供UserTransaction和TransactionManager的实现**\n```\npublic class AtomikosJtaPlatform extends AbstractJtaPlatform {\n    private static final long serialVersionUID = 1L;\n    static TransactionManager transactionManager;\n    static UserTransaction transaction;\n    @Override\n    protected TransactionManager locateTransactionManager() {\n        return transactionManager;\n    }\n    @Override\n    protected UserTransaction locateUserTransaction() {\n        return transaction;\n    }\n}\n```\n\n- transactionManager等配置\n```\n@Configuration\n@ComponentScan\n@EnableTransactionManagement\npublic class MainConfig {\n    @Bean\n    public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n    @Bean\n    public JpaVendorAdapter jpaVendorAdapter() {\n        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = new HibernateJpaVendorAdapter();\n        hibernateJpaVendorAdapter.setShowSql(true);\n        hibernateJpaVendorAdapter.setGenerateDdl(true);\n        hibernateJpaVendorAdapter.setDatabase(Database.MYSQL);\n        return hibernateJpaVendorAdapter;\n    }\n    @Bean(name = \"userTransaction\")\n    public UserTransaction userTransaction() throws Throwable {\n        UserTransactionImp userTransactionImp = new UserTransactionImp();\n        userTransactionImp.setTransactionTimeout(10000);\n        return userTransactionImp;\n    }\n    @Bean(name = \"atomikosTransactionManager\", initMethod = \"init\"\n    , destroyMethod = \"close\")\n    public TransactionManager atomikosTransactionManager() throws Throwable {\n        UserTransactionManager userTransactionManager = new UserTransactionManager();\n        userTransactionManager.setForceShutdown(false);\n        AtomikosJtaPlatform.transactionManager = userTransactionManager;\n        return userTransactionManager;\n    }\n    @Bean(name = \"transactionManager\")\n    @DependsOn({ \"userTransaction\", \"atomikosTransactionManager\" })\n    public PlatformTransactionManager transactionManager() throws Throwable {\n        UserTransaction userTransaction = userTransaction();\n        AtomikosJtaPlatform.transaction = userTransaction;\n        TransactionManager atomikosTransactionManager = atomikosTransactionManager();\n        return new JtaTransactionManager(userTransaction, atomikosTransactionManager);\n    }\n}\n```\n\n数据库1的数据源配置CustomerConfig\n```\n@Configuration\n@DependsOn(\"transactionManager\")\n@EnableJpaRepositories(basePackages = \"com.iyihua.sample.repository.customer\"\n, entityManagerFactoryRef = \"customerEntityManager\", transactionManagerRef = \"transactionManager\")\n@EnableConfigurationProperties(CustomerDatasourceProperties.class)\npublic class CustomerConfig {\n    @Autowired\n    private JpaVendorAdapter jpaVendorAdapter;\n    @Autowired\n    private CustomerDatasourceProperties customerDatasourceProperties;\n\n    @Primary\n    @Bean(name = \"customerDataSource\", initMethod = \"init\", destroyMethod = \"close\")\n    public DataSource customerDataSource() {\n        MysqlXADataSource mysqlXaDataSource = new MysqlXADataSource();\n        mysqlXaDataSource.setUrl(customerDatasourceProperties.getUrl());\n        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);\n        mysqlXaDataSource.setPassword(customerDatasourceProperties.getPassword());\n        mysqlXaDataSource.setUser(customerDatasourceProperties.getUsername());\n        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);\n        AtomikosDataSourceBean xaDataSource = new AtomikosDataSourceBean();\n        xaDataSource.setXaDataSource(mysqlXaDataSource);\n        xaDataSource.setUniqueResourceName(\"xads1\");\n        return xaDataSource;\n    }\n    @Primary\n    @Bean(name = \"customerEntityManager\")\n    @DependsOn(\"transactionManager\")\n    public LocalContainerEntityManagerFactoryBean customerEntityManager() throws Throwable {\n        HashMap<String, Object> properties = new HashMap<String, Object>();\n        properties.put(\"hibernate.transaction.jta.platform\", AtomikosJtaPlatform.class.getName());\n        properties.put(\"javax.persistence.transactionType\", \"JTA\");\n        LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();\n        entityManager.setJtaDataSource(customerDataSource());\n        entityManager.setJpaVendorAdapter(jpaVendorAdapter);\n        entityManager.setPackagesToScan(\"com.iyihua.sample.domain.customer\");\n        entityManager.setPersistenceUnitName(\"customerPersistenceUnit\");\n        entityManager.setJpaPropertyMap(properties);\n        return entityManager;\n    }\n}\n```\n\n数据库2的数据源配置OrderConfig\n```\n@Configuration\n@DependsOn(\"transactionManager\")\n@EnableJpaRepositories(basePackages = \"com.iyihua.sample.repository.order\"\n, entityManagerFactoryRef = \"orderEntityManager\", transactionManagerRef = \"transactionManager\")\n@EnableConfigurationProperties(OrderDatasourceProperties.class)\npublic class OrderConfig {\n    \n\n}\n```\n\n- 业务方法:资金在库（atomikos_one），红包在库（atomikos_two）资金账号1转10元到资金账号2；红包账号2转10元到红包账号1**\n```\n@Service\npublic class StoreServiceImpl implements StoreService {\n@Transactional()\n    public void transfer() {\n        CapitalAccount ca1 = capitalAccountRepository.findOne(1l);\n        CapitalAccount ca2 = capitalAccountRepository.findOne(2l);\n        RedPacketAccount rp1 = redPacketAccountRepository.findOne(1l);\n        RedPacketAccount rp2 = redPacketAccountRepository.findOne(2l);\n        BigDecimal capital = BigDecimal.TEN;\n        BigDecimal red = BigDecimal.TEN;\n        ca1.transferFrom(capital);\n        ca2.transferTo(capital);\n        capitalAccountRepository.save(ca1);\n        capitalAccountRepository.save(ca2);\n        rp2.transferFrom(red);\n        rp1.transferTo(red);\n        redPacketAccountRepository.save(rp1);\n        redPacketAccountRepository.save(rp2);\n    }\n}\n```\n\n### get and run demo：\nhttps://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample\n\n- git clone https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git\n- import db script in folder \"docs\"\n- import project into ide and run App.java or build project and run the jar\n- visit utl:http://localhost:8082/save to see saveTest\n\n","slug":"spring事务用法演进","published":1,"updated":"2016-09-06T15:49:04.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usv4002e00uul2y8xmsr","content":"<h1 id=\"Spring事务用法演进\"><a href=\"#Spring事务用法演进\" class=\"headerlink\" title=\"Spring事务用法演进\"></a>Spring事务用法演进</h1><ul>\n<li>内容</li>\n</ul>\n<p><img src=\"/images/spring-transaction-001.png\" alt=\"\"></p>\n<ul>\n<li>事务用法演进</li>\n</ul>\n<p><img src=\"/images/spring-transaction-002.png\" alt=\"\"></p>\n<h2 id=\"编程式事务管理\"><a href=\"#编程式事务管理\" class=\"headerlink\" title=\"编程式事务管理\"></a>编程式事务管理</h2><h3 id=\"基于底层-API-的编程式事务管理\"><a href=\"#基于底层-API-的编程式事务管理\" class=\"headerlink\" title=\"基于底层 API 的编程式事务管理\"></a>基于底层 API 的编程式事务管理</h3><ul>\n<li><p>配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;bankService&quot; class=&quot;footmark.spring.core.tx.programmatic.origin.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;txManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;txDefinition&quot;&gt;</span><br><span class=\"line\">        &lt;bean class=&quot;org.springframework.transaction.support.DefaultTransactionDefinition&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;propagationBehaviorName&quot; value=&quot;PROPAGATION_REQUIRED&quot;/&gt;</span><br><span class=\"line\">        &lt;/bean&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TransactionDefinition 类型的属性，它用于定义一个事务</p>\n</li>\n<li><p>PlatformTransactionManager 类型的属性，用于执行事务管理操作</p>\n</li>\n<li><p>程序代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BankServiceImpl implements BankService &#123;</span><br><span class=\"line\">    private BankDao bankDao;</span><br><span class=\"line\">    private TransactionDefinition txDefinition;</span><br><span class=\"line\">    private PlatformTransactionManager txManager;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    public boolean transfer(Long fromId， Long toId， double amount) &#123;</span><br><span class=\"line\">        TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">        boolean result = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">            txManager.commit(txStatus);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            result = false;</span><br><span class=\"line\">            txManager.rollback(txStatus);</span><br><span class=\"line\">            System.out.println(&quot;Transfer Error!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。</p>\n</li>\n</ul>\n<h3 id=\"基于TransactionTemplate的编程式事务管理\"><a href=\"#基于TransactionTemplate的编程式事务管理\" class=\"headerlink\" title=\"基于TransactionTemplate的编程式事务管理\"></a>基于TransactionTemplate的编程式事务管理</h3><ul>\n<li><p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;bankService&quot;</span><br><span class=\"line\">class=&quot;footmark.spring.core.tx.programmatic.template.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;transactionTemplate&quot; ref=&quot;transactionTemplate&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>程序示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BankServiceImpl implements BankService &#123;</span><br><span class=\"line\">    private BankDao bankDao;</span><br><span class=\"line\">    private TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    public boolean transfer(final Long fromId， final Long toId， final double amount) &#123;</span><br><span class=\"line\">        return (Boolean) transactionTemplate.execute(new TransactionCallback()&#123;</span><br><span class=\"line\">            public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                    status.setRollbackOnly();</span><br><span class=\"line\">                    result = false;</span><br><span class=\"line\">                    System.out.println(&quot;Transfer Error!&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在数据访问层非常常见的模板回调模式</p>\n</li>\n<li>以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码</li>\n</ul>\n<h2 id=\"声明式事务管理\"><a href=\"#声明式事务管理\" class=\"headerlink\" title=\"声明式事务管理\"></a>声明式事务管理</h2><ul>\n<li>不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式）</li>\n<li>声明式事务管理由Spring AOP实现</li>\n</ul>\n<h3 id=\"基于TransactionInterceptor的声明式事务管理\"><a href=\"#基于TransactionInterceptor的声明式事务管理\" class=\"headerlink\" title=\"基于TransactionInterceptor的声明式事务管理\"></a>基于TransactionInterceptor的声明式事务管理</h3><ul>\n<li><p>示例配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans...&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;bean id=&quot;transactionInterceptor&quot;</span><br><span class=\"line\">    class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class=\"line\">            &lt;props&gt;</span><br><span class=\"line\">                &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class=\"line\">            &lt;/props&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;bankServiceTarget&quot; class=&quot;footmark.spring.core.tx.declare.origin.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;bankService&quot;</span><br><span class=\"line\">    class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;target&quot; ref=&quot;bankServiceTarget&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;interceptorNames&quot;&gt;</span><br><span class=\"line\">            &lt;list&gt;</span><br><span class=\"line\">                &lt;idref bean=&quot;transactionInterceptor&quot;/&gt;</span><br><span class=\"line\">            &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TransactionInterceptor定义相关的事务规则，有两个主要的属性：transactionManager和transactionAttributes</p>\n</li>\n<li>transactionManager，用来指定一个事务管理器，并将具体事务相关的操作委托给它；</li>\n<li>transactionAttributes，Properties 类型，主要用来定义事务规则，该属性的每一个键值对中，键指定的是方法名，方法名可以使用通配符，而值就表示相应方法的所应用的事务属性。</li>\n<li>ProxyFactoryBean, 组装 target 和advice. 通过 ProxyFactoryBean 生成的代理类就是织入了事务管理逻辑后的目标类。</li>\n</ul>\n<h4 id=\"事务属性取值的书写规则：\"><a href=\"#事务属性取值的书写规则：\" class=\"headerlink\" title=\"事务属性取值的书写规则：\"></a>事务属性取值的书写规则：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传播行为 [，隔离级别] [，只读属性] [，超时属性] [不影响提交的异常] [，导致回滚的异常]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>传播行为是唯一必须设置的属性，其他都可以忽略，Spring为我们提供了合理的默认值</li>\n<li>传播行为的取值必须以“PROPAGATION_”开头，具体包括：PROPAGATION_MANDATORY、PROPAGATION_NESTED、PROPAGATION_NEVER、PROPAGATION_NOT_SUPPORTED、PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_SUPPORTS，共七种取值。</li>\n<li>隔离级别的取值必须以“ISOLATION_”开头，具体包括：ISOLATION_DEFAULT、ISOLATION_READ_COMMITTED、ISOLATION_READ_UNCOMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE，共五种取值。</li>\n<li>如果事务是只读的，那么我们可以指定只读属性，使用“readOnly”指定。否则我们不需要设置该属性。</li>\n<li>超时属性的取值必须以“TIMEOUT_”开头，后面跟一个int类型的值，表示超时时间，单位是秒。</li>\n<li>不影响提交的异常是指，即使事务中抛出了这些类型的异常，事务任然正常提交。必须在每一个异常的名字前面加上“+”。异常的名字可以是类名的一部分。比如“+RuntimeException”、“+tion”等等。</li>\n<li>导致回滚的异常是指，当事务中抛出这些类型的异常时，事务将回滚。必须在每一个异常的名字前面加上“-”。异常的名字可以是类名的全部或者部分，比如“-RuntimeException”、“-tion”等等。</li>\n<li>两个示例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;*Service&quot;&gt;</span><br><span class=\"line\">    PROPAGATION_REQUIRED，ISOLATION_READ_COMMITTED，TIMEOUT_20，+AbcException，+DefException，-HijException</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>针对所有方法名以 Service 结尾的方法，使用 PROPAGATION_REQUIRED 事务传播行为，事务的隔离级别是 ISOLATION_READ_COMMITTED，超时时间为20秒，当事务抛出 AbcException 或者 DefException 类型的异常，则仍然提交，当抛出 HijException 类型的异常时必须回滚事务。这里没有指定”readOnly”，表示事务不是只读的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;test&quot;&gt;PROPAGATION_REQUIRED，readOnly&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>\n<p>针对所有方法名为 test 的方法，使用 PROPAGATION_REQUIRED 事务传播行为，并且该事务是只读的。</p>\n<h3 id=\"基于TransactionProxyFactoryBean的声明式事务管理\"><a href=\"#基于TransactionProxyFactoryBean的声明式事务管理\" class=\"headerlink\" title=\"基于TransactionProxyFactoryBean的声明式事务管理\"></a>基于TransactionProxyFactoryBean的声明式事务管理</h3><ul>\n<li><p>示例配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans......&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;bean id=&quot;bankServiceTarget&quot;</span><br><span class=\"line\">    class=&quot;footmark.spring.core.tx.declare.classic.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;bankService&quot;</span><br><span class=\"line\">    class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;target&quot; ref=&quot;bankServiceTarget&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class=\"line\">            &lt;props&gt;</span><br><span class=\"line\">                &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class=\"line\">            &lt;/props&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显式为每一个业务类配置一个TransactionProxyFactoryBean的做法将使得代码显得过于刻板</p>\n</li>\n</ul>\n<h3 id=\"基于命名空间的声明式事务管理\"><a href=\"#基于命名空间的声明式事务管理\" class=\"headerlink\" title=\"基于命名空间的声明式事务管理\"></a>基于<tx>命名空间的声明式事务管理</tx></h3><ul>\n<li><p>示例配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans......&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;tx:advice id=&quot;bankAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class=\"line\">        &lt;tx:attributes&gt;</span><br><span class=\"line\">            &lt;tx:method name=&quot;transfer&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class=\"line\">        &lt;/tx:attributes&gt;</span><br><span class=\"line\">    &lt;/tx:advice&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;aop:config&gt;</span><br><span class=\"line\">        &lt;aop:pointcut id=&quot;bankPointcut&quot; expression=&quot;execution(* *.transfer(..))&quot;/&gt;</span><br><span class=\"line\">        &lt;aop:advisor advice-ref=&quot;bankAdvice&quot; pointcut-ref=&quot;bankPointcut&quot;/&gt;</span><br><span class=\"line\">    &lt;/aop:config&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果默认的事务属性就能满足要求，那么代码简化为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans......&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;tx:advice id=&quot;bankAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;aop:config&gt;</span><br><span class=\"line\">        &lt;aop:pointcut id=&quot;bankPointcut&quot; expression=&quot;execution(**.transfer(..))&quot;/&gt;</span><br><span class=\"line\">        &lt;aop:advisor advice-ref=&quot;bankAdvice&quot; pointcut-ref=&quot;bankPointcut&quot;/&gt;</span><br><span class=\"line\">    &lt;/aop:config&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用切点表达式，就不需要针对每一个业务类创建一个代理对象.</p>\n</li>\n</ul>\n<h3 id=\"基于注解-Transactional的声明式事务管理\"><a href=\"#基于注解-Transactional的声明式事务管理\" class=\"headerlink\" title=\"基于注解@Transactional的声明式事务管理\"></a>基于注解@Transactional的声明式事务管理</h3><ul>\n<li>@Transactional 可以作用于接口、接口方法、类以及类方法上</li>\n<li><p>当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>\n</li>\n<li><p>示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务管理器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><br><span class=\"line\">        p:dataSource-ref=&quot;dataSource&quot;&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- enables scanning for @Transactional annotations --&gt;</span><br><span class=\"line\">&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class=\"line\">public boolean transfer(Long fromId, Long toId, double amount) &#123;</span><br><span class=\"line\">    return bankDao.transfer(fromId, toId, amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。</p>\n</li>\n<li>@Transactional 注解应该只被应用到 public 方法上. 在protected、private或者默认可见性的方法上使用@Transactional 注解，将被忽略，也不会抛出任何异常。</li>\n</ul>\n<h2 id=\"事务属性\"><a href=\"#事务属性\" class=\"headerlink\" title=\"事务属性\"></a>事务属性</h2><h3 id=\"Required（需要）\"><a href=\"#Required（需要）\" class=\"headerlink\" title=\"Required（需要）\"></a>Required（需要）</h3><ul>\n<li>若事务上下文已存在，则使用，如果不存在，则为此方法开启一个新事务</li>\n</ul>\n<h3 id=\"Mandatory（强制必须）\"><a href=\"#Mandatory（强制必须）\" class=\"headerlink\" title=\"Mandatory（强制必须）\"></a>Mandatory（强制必须）</h3><ul>\n<li>强制事务上下文必须存在，若不存在，则抛出TransactionRequiredException异常</li>\n</ul>\n<h3 id=\"RequiresNew（需要新的）\"><a href=\"#RequiresNew（需要新的）\" class=\"headerlink\" title=\"RequiresNew（需要新的）\"></a>RequiresNew（需要新的）</h3><ul>\n<li>总是开启新事务，前一个事务若存在则会被挂起</li>\n<li>此属性在此场景是很有用：一个事务如果需要与其外围包裹事务相独立，不受其执行结果的影响，自行完成提交(比如记录日志)</li>\n</ul>\n<h3 id=\"Supports（支持）\"><a href=\"#Supports（支持）\" class=\"headerlink\" title=\"Supports（支持）\"></a>Supports（支持）</h3><ul>\n<li>告知容器，对象方法并不需要一个事务上下文，但当调用到这个方法而事务上下文恰巧存在时，则该方法会使用它</li>\n<li>可用于查询的方法当中，如果此查询是在一个正在进行的事务中完成的，对目标方法应用Supports属性会让容器使用当前事务上下文，参考数据库操作记录，从而将事务中作出的各种修改液包括到查询结果中</li>\n</ul>\n<h3 id=\"NotSupported（不支持）\"><a href=\"#NotSupported（不支持）\" class=\"headerlink\" title=\"NotSupported（不支持）\"></a>NotSupported（不支持）</h3><ul>\n<li>告知容器此方法不使用事务</li>\n<li>若一个事务已存在，容器会将事务暂停直至此方法结束</li>\n<li>此属性在方法逻辑中有排斥事务上下文代码存在时很有用，可以暂时屏蔽一些不需要或不能用事务的逻辑</li>\n</ul>\n<h3 id=\"Never（不用）\"><a href=\"#Never（不用）\" class=\"headerlink\" title=\"Never（不用）\"></a>Never（不用）</h3><ul>\n<li>告知容器不允许有事务上下文存在。若调用方法前事务存在，则抛出异常</li>\n</ul>\n<h3 id=\"PROPAGATION-NESTED\"><a href=\"#PROPAGATION-NESTED\" class=\"headerlink\" title=\"PROPAGATION_NESTED\"></a>PROPAGATION_NESTED</h3><ul>\n<li>告知spring进行事务嵌套，并采用Required属性</li>\n</ul>\n<h2 id=\"事务传播级别\"><a href=\"#事务传播级别\" class=\"headerlink\" title=\"事务传播级别\"></a>事务传播级别</h2><ul>\n<li>这些事务隔离级别设置需要依赖于底层数据库。底层数据库支持，这些设置才会生效</li>\n</ul>\n<p><img src=\"/images/spring-transaction-003.png\" alt=\"\"></p>\n<h3 id=\"TransactionReadUncommitted\"><a href=\"#TransactionReadUncommitted\" class=\"headerlink\" title=\"TransactionReadUncommitted\"></a>TransactionReadUncommitted</h3><ul>\n<li>允许事务读取其他事务在提交到数据库之前产生的未提交更改。</li>\n</ul>\n<p><img src=\"/images/spring-transaction-004.png\" alt=\"\"></p>\n<h3 id=\"TransactionReadCommitted\"><a href=\"#TransactionReadCommitted\" class=\"headerlink\" title=\"TransactionReadCommitted\"></a>TransactionReadCommitted</h3><ul>\n<li>允许多个事务访问同一份数据，但将未提交的数据对其他事务隐藏，直至数据提交</li>\n</ul>\n<p><img src=\"/images/spring-transaction-005.png\" alt=\"\"></p>\n<h3 id=\"TransactionRepeatableRead\"><a href=\"#TransactionRepeatableRead\" class=\"headerlink\" title=\"TransactionRepeatableRead\"></a>TransactionRepeatableRead</h3><ul>\n<li>保持了事务彼此隔绝。</li>\n<li>保证一旦在某一事务中服务了数据库的一个值集，在后续的每次查询操作中都读到同样的值（除非此事务拿到这些数据的读写锁，并自行更改了数据）</li>\n<li>在此级别下，一个事务如果要更改数据，而这一数据被其他事务读取时，此事务需要等待占用数据事务提交的操作（或直接返回失败）</li>\n</ul>\n<p><img src=\"/images/spring-transaction-006.png\" alt=\"\"></p>\n<h3 id=\"TransactionSerializable\"><a href=\"#TransactionSerializable\" class=\"headerlink\" title=\"TransactionSerializable\"></a>TransactionSerializable</h3><ul>\n<li>java支持的最高的事务隔离级别</li>\n<li>交错发生的事务被“堆迭”起来，以致同一时间点仅仅有一个事务具备访问目标数据的权力</li>\n<li>性能会受到很大影响，而数据一致性将会极大提高</li>\n</ul>\n<p><img src=\"/images/spring-transaction-007.png\" alt=\"\"></p>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><h3 id=\"JTA和JTS\"><a href=\"#JTA和JTS\" class=\"headerlink\" title=\"JTA和JTS\"></a>JTA和JTS</h3><h4 id=\"jta：java-transaction-api\"><a href=\"#jta：java-transaction-api\" class=\"headerlink\" title=\"jta：java transaction api\"></a>jta：java transaction api</h4><ul>\n<li>开发人员用于事务管理的接口</li>\n<li><p>UserTransaction接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin();</span><br><span class=\"line\">commit();</span><br><span class=\"line\">rollback();</span><br><span class=\"line\">getStatus();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TransactionManager接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">suspend();</span><br><span class=\"line\">resume();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"jts：java-transaction-service\"><a href=\"#jts：java-transaction-service\" class=\"headerlink\" title=\"jts：java transaction service\"></a>jts：java transaction service</h4><ul>\n<li>开源或商用的实现了jta的底层事务服务</li>\n</ul>\n<p><img src=\"/images/spring-transaction-008.png\" alt=\"\"></p>\n<h4 id=\"要进行事务管理，我们需要两个东西：事务管理器和资源管理器\"><a href=\"#要进行事务管理，我们需要两个东西：事务管理器和资源管理器\" class=\"headerlink\" title=\"要进行事务管理，我们需要两个东西：事务管理器和资源管理器\"></a>要进行事务管理，我们需要两个东西：事务管理器和资源管理器</h4><ul>\n<li>资源管理器（Resource Manager），对于数据库，就是数据源</li>\n<li>事务管理器（Transaction Manager）<br><em>控制JTA事务，管理事务生命周期，并协调资源</em><br><em>在JTA中，事务管理器抽象为TransactionManager，并通过底层事务服务（JTS）实现</em><br><em>负责控制和管理实际资源（数据库或JMS队列）</em></li>\n</ul>\n<h3 id=\"分布式事务-XA事务\"><a href=\"#分布式事务-XA事务\" class=\"headerlink\" title=\"分布式事务/XA事务\"></a>分布式事务/XA事务</h3><ul>\n<li>分布式事务和单机事务的区别就是，单机事务是事务管理器管理一个资源，而分布式事务则是事务管理器管理多个数据资源.</li>\n</ul>\n<h4 id=\"XA环境\"><a href=\"#XA环境\" class=\"headerlink\" title=\"XA环境\"></a>XA环境</h4><p>在同一个处理单元中，需要协调多个数据资源完成逻辑，并保证ACID准备，则需要XA事务保证</p>\n<h4 id=\"XA接口\"><a href=\"#XA接口\" class=\"headerlink\" title=\"XA接口\"></a>XA接口</h4><p><img src=\"/images/spring-transaction-009.png\" alt=\"\"></p>\n<ul>\n<li>XA支持两阶段提交协议</li>\n</ul>\n<h3 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><ul>\n<li>使用spring boot + jta + atomikos实现分布式事务管理的代码例子</li>\n<li>资金在库（atomikos_one），红包在库（atomikos_two）. 资金账号1转10元到资金账号2；红包账号2转10元到红包账号1</li>\n</ul>\n<h4 id=\"表数据\"><a href=\"#表数据\" class=\"headerlink\" title=\"表数据\"></a>表数据</h4><ul>\n<li>capital_account</li>\n</ul>\n<p><img src=\"/images/spring-transaction-010.png\" alt=\"\"></p>\n<ul>\n<li>red_packet_account</li>\n</ul>\n<p><img src=\"/images/spring-transaction-011.png\" alt=\"\"></p>\n<h4 id=\"程序代码\"><a href=\"#程序代码\" class=\"headerlink\" title=\"程序代码\"></a>程序代码</h4><ul>\n<li>配置2个数据源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order.datasource.url=jdbc:mysql://localhost:3306/atomikos_two</span><br><span class=\"line\">order.datasource.username=root</span><br><span class=\"line\">order.datasource.password=root</span><br><span class=\"line\"></span><br><span class=\"line\">customer.datasource.url=jdbc:mysql://localhost:3306/atomikos_one</span><br><span class=\"line\">customer.datasource.username=root</span><br><span class=\"line\">customer.datasource.password=root</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>atomikos的maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;transactions&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;transactions-jta&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;transactions-hibernate3&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hibernate&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;/exclusion&gt;</span><br><span class=\"line\">    &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AtomikosJtaPlatform这个类指明了，Atomikos需要我们提供UserTransaction和TransactionManager的实现</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AtomikosJtaPlatform extends AbstractJtaPlatform &#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 1L;</span><br><span class=\"line\">    static TransactionManager transactionManager;</span><br><span class=\"line\">    static UserTransaction transaction;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected TransactionManager locateTransactionManager() &#123;</span><br><span class=\"line\">        return transactionManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected UserTransaction locateUserTransaction() &#123;</span><br><span class=\"line\">        return transaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>transactionManager等配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ComponentScan</span><br><span class=\"line\">@EnableTransactionManagement</span><br><span class=\"line\">public class MainConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() &#123;</span><br><span class=\"line\">        return new PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JpaVendorAdapter jpaVendorAdapter() &#123;</span><br><span class=\"line\">        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = new HibernateJpaVendorAdapter();</span><br><span class=\"line\">        hibernateJpaVendorAdapter.setShowSql(true);</span><br><span class=\"line\">        hibernateJpaVendorAdapter.setGenerateDdl(true);</span><br><span class=\"line\">        hibernateJpaVendorAdapter.setDatabase(Database.MYSQL);</span><br><span class=\"line\">        return hibernateJpaVendorAdapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;userTransaction&quot;)</span><br><span class=\"line\">    public UserTransaction userTransaction() throws Throwable &#123;</span><br><span class=\"line\">        UserTransactionImp userTransactionImp = new UserTransactionImp();</span><br><span class=\"line\">        userTransactionImp.setTransactionTimeout(10000);</span><br><span class=\"line\">        return userTransactionImp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;atomikosTransactionManager&quot;, initMethod = &quot;init&quot;</span><br><span class=\"line\">    , destroyMethod = &quot;close&quot;)</span><br><span class=\"line\">    public TransactionManager atomikosTransactionManager() throws Throwable &#123;</span><br><span class=\"line\">        UserTransactionManager userTransactionManager = new UserTransactionManager();</span><br><span class=\"line\">        userTransactionManager.setForceShutdown(false);</span><br><span class=\"line\">        AtomikosJtaPlatform.transactionManager = userTransactionManager;</span><br><span class=\"line\">        return userTransactionManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;transactionManager&quot;)</span><br><span class=\"line\">    @DependsOn(&#123; &quot;userTransaction&quot;, &quot;atomikosTransactionManager&quot; &#125;)</span><br><span class=\"line\">    public PlatformTransactionManager transactionManager() throws Throwable &#123;</span><br><span class=\"line\">        UserTransaction userTransaction = userTransaction();</span><br><span class=\"line\">        AtomikosJtaPlatform.transaction = userTransaction;</span><br><span class=\"line\">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</span><br><span class=\"line\">        return new JtaTransactionManager(userTransaction, atomikosTransactionManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>数据库1的数据源配置CustomerConfig<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@DependsOn(&quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableJpaRepositories(basePackages = &quot;com.iyihua.sample.repository.customer&quot;</span><br><span class=\"line\">, entityManagerFactoryRef = &quot;customerEntityManager&quot;, transactionManagerRef = &quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableConfigurationProperties(CustomerDatasourceProperties.class)</span><br><span class=\"line\">public class CustomerConfig &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private JpaVendorAdapter jpaVendorAdapter;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private CustomerDatasourceProperties customerDatasourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Primary</span><br><span class=\"line\">    @Bean(name = &quot;customerDataSource&quot;, initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</span><br><span class=\"line\">    public DataSource customerDataSource() &#123;</span><br><span class=\"line\">        MysqlXADataSource mysqlXaDataSource = new MysqlXADataSource();</span><br><span class=\"line\">        mysqlXaDataSource.setUrl(customerDatasourceProperties.getUrl());</span><br><span class=\"line\">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);</span><br><span class=\"line\">        mysqlXaDataSource.setPassword(customerDatasourceProperties.getPassword());</span><br><span class=\"line\">        mysqlXaDataSource.setUser(customerDatasourceProperties.getUsername());</span><br><span class=\"line\">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);</span><br><span class=\"line\">        AtomikosDataSourceBean xaDataSource = new AtomikosDataSourceBean();</span><br><span class=\"line\">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class=\"line\">        xaDataSource.setUniqueResourceName(&quot;xads1&quot;);</span><br><span class=\"line\">        return xaDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Primary</span><br><span class=\"line\">    @Bean(name = &quot;customerEntityManager&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;transactionManager&quot;)</span><br><span class=\"line\">    public LocalContainerEntityManagerFactoryBean customerEntityManager() throws Throwable &#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; properties = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">        properties.put(&quot;hibernate.transaction.jta.platform&quot;, AtomikosJtaPlatform.class.getName());</span><br><span class=\"line\">        properties.put(&quot;javax.persistence.transactionType&quot;, &quot;JTA&quot;);</span><br><span class=\"line\">        LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();</span><br><span class=\"line\">        entityManager.setJtaDataSource(customerDataSource());</span><br><span class=\"line\">        entityManager.setJpaVendorAdapter(jpaVendorAdapter);</span><br><span class=\"line\">        entityManager.setPackagesToScan(&quot;com.iyihua.sample.domain.customer&quot;);</span><br><span class=\"line\">        entityManager.setPersistenceUnitName(&quot;customerPersistenceUnit&quot;);</span><br><span class=\"line\">        entityManager.setJpaPropertyMap(properties);</span><br><span class=\"line\">        return entityManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>数据库2的数据源配置OrderConfig<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@DependsOn(&quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableJpaRepositories(basePackages = &quot;com.iyihua.sample.repository.order&quot;</span><br><span class=\"line\">, entityManagerFactoryRef = &quot;orderEntityManager&quot;, transactionManagerRef = &quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableConfigurationProperties(OrderDatasourceProperties.class)</span><br><span class=\"line\">public class OrderConfig &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>业务方法:资金在库（atomikos_one），红包在库（atomikos_two）资金账号1转10元到资金账号2；红包账号2转10元到红包账号1**<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class StoreServiceImpl implements StoreService &#123;</span><br><span class=\"line\">@Transactional()</span><br><span class=\"line\">    public void transfer() &#123;</span><br><span class=\"line\">        CapitalAccount ca1 = capitalAccountRepository.findOne(1l);</span><br><span class=\"line\">        CapitalAccount ca2 = capitalAccountRepository.findOne(2l);</span><br><span class=\"line\">        RedPacketAccount rp1 = redPacketAccountRepository.findOne(1l);</span><br><span class=\"line\">        RedPacketAccount rp2 = redPacketAccountRepository.findOne(2l);</span><br><span class=\"line\">        BigDecimal capital = BigDecimal.TEN;</span><br><span class=\"line\">        BigDecimal red = BigDecimal.TEN;</span><br><span class=\"line\">        ca1.transferFrom(capital);</span><br><span class=\"line\">        ca2.transferTo(capital);</span><br><span class=\"line\">        capitalAccountRepository.save(ca1);</span><br><span class=\"line\">        capitalAccountRepository.save(ca2);</span><br><span class=\"line\">        rp2.transferFrom(red);</span><br><span class=\"line\">        rp1.transferTo(red);</span><br><span class=\"line\">        redPacketAccountRepository.save(rp1);</span><br><span class=\"line\">        redPacketAccountRepository.save(rp2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"get-and-run-demo：\"><a href=\"#get-and-run-demo：\" class=\"headerlink\" title=\"get and run demo：\"></a>get and run demo：</h3><p><a href=\"https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample</a></p>\n<ul>\n<li>git clone <a href=\"https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git</a></li>\n<li>import db script in folder “docs”</li>\n<li>import project into ide and run App.java or build project and run the jar</li>\n<li>visit utl:<a href=\"http://localhost:8082/save\">http://localhost:8082/save</a> to see saveTest</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Spring事务用法演进\"><a href=\"#Spring事务用法演进\" class=\"headerlink\" title=\"Spring事务用法演进\"></a>Spring事务用法演进</h1><ul>\n<li>内容</li>\n</ul>\n<p><img src=\"/images/spring-transaction-001.png\" alt=\"\"></p>\n<ul>\n<li>事务用法演进</li>\n</ul>\n<p><img src=\"/images/spring-transaction-002.png\" alt=\"\"></p>\n<h2 id=\"编程式事务管理\"><a href=\"#编程式事务管理\" class=\"headerlink\" title=\"编程式事务管理\"></a>编程式事务管理</h2><h3 id=\"基于底层-API-的编程式事务管理\"><a href=\"#基于底层-API-的编程式事务管理\" class=\"headerlink\" title=\"基于底层 API 的编程式事务管理\"></a>基于底层 API 的编程式事务管理</h3><ul>\n<li><p>配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;bankService&quot; class=&quot;footmark.spring.core.tx.programmatic.origin.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;txManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;txDefinition&quot;&gt;</span><br><span class=\"line\">        &lt;bean class=&quot;org.springframework.transaction.support.DefaultTransactionDefinition&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;propagationBehaviorName&quot; value=&quot;PROPAGATION_REQUIRED&quot;/&gt;</span><br><span class=\"line\">        &lt;/bean&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TransactionDefinition 类型的属性，它用于定义一个事务</p>\n</li>\n<li><p>PlatformTransactionManager 类型的属性，用于执行事务管理操作</p>\n</li>\n<li><p>程序代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BankServiceImpl implements BankService &#123;</span><br><span class=\"line\">    private BankDao bankDao;</span><br><span class=\"line\">    private TransactionDefinition txDefinition;</span><br><span class=\"line\">    private PlatformTransactionManager txManager;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    public boolean transfer(Long fromId， Long toId， double amount) &#123;</span><br><span class=\"line\">        TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">        boolean result = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">            txManager.commit(txStatus);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            result = false;</span><br><span class=\"line\">            txManager.rollback(txStatus);</span><br><span class=\"line\">            System.out.println(&quot;Transfer Error!&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。</p>\n</li>\n</ul>\n<h3 id=\"基于TransactionTemplate的编程式事务管理\"><a href=\"#基于TransactionTemplate的编程式事务管理\" class=\"headerlink\" title=\"基于TransactionTemplate的编程式事务管理\"></a>基于TransactionTemplate的编程式事务管理</h3><ul>\n<li><p>配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;bankService&quot;</span><br><span class=\"line\">class=&quot;footmark.spring.core.tx.programmatic.template.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;transactionTemplate&quot; ref=&quot;transactionTemplate&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>程序示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BankServiceImpl implements BankService &#123;</span><br><span class=\"line\">    private BankDao bankDao;</span><br><span class=\"line\">    private TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    public boolean transfer(final Long fromId， final Long toId， final double amount) &#123;</span><br><span class=\"line\">        return (Boolean) transactionTemplate.execute(new TransactionCallback()&#123;</span><br><span class=\"line\">            public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                    status.setRollbackOnly();</span><br><span class=\"line\">                    result = false;</span><br><span class=\"line\">                    System.out.println(&quot;Transfer Error!&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在数据访问层非常常见的模板回调模式</p>\n</li>\n<li>以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码</li>\n</ul>\n<h2 id=\"声明式事务管理\"><a href=\"#声明式事务管理\" class=\"headerlink\" title=\"声明式事务管理\"></a>声明式事务管理</h2><ul>\n<li>不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式）</li>\n<li>声明式事务管理由Spring AOP实现</li>\n</ul>\n<h3 id=\"基于TransactionInterceptor的声明式事务管理\"><a href=\"#基于TransactionInterceptor的声明式事务管理\" class=\"headerlink\" title=\"基于TransactionInterceptor的声明式事务管理\"></a>基于TransactionInterceptor的声明式事务管理</h3><ul>\n<li><p>示例配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans...&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;bean id=&quot;transactionInterceptor&quot;</span><br><span class=\"line\">    class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class=\"line\">            &lt;props&gt;</span><br><span class=\"line\">                &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class=\"line\">            &lt;/props&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;bankServiceTarget&quot; class=&quot;footmark.spring.core.tx.declare.origin.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;bankService&quot;</span><br><span class=\"line\">    class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;target&quot; ref=&quot;bankServiceTarget&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;interceptorNames&quot;&gt;</span><br><span class=\"line\">            &lt;list&gt;</span><br><span class=\"line\">                &lt;idref bean=&quot;transactionInterceptor&quot;/&gt;</span><br><span class=\"line\">            &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TransactionInterceptor定义相关的事务规则，有两个主要的属性：transactionManager和transactionAttributes</p>\n</li>\n<li>transactionManager，用来指定一个事务管理器，并将具体事务相关的操作委托给它；</li>\n<li>transactionAttributes，Properties 类型，主要用来定义事务规则，该属性的每一个键值对中，键指定的是方法名，方法名可以使用通配符，而值就表示相应方法的所应用的事务属性。</li>\n<li>ProxyFactoryBean, 组装 target 和advice. 通过 ProxyFactoryBean 生成的代理类就是织入了事务管理逻辑后的目标类。</li>\n</ul>\n<h4 id=\"事务属性取值的书写规则：\"><a href=\"#事务属性取值的书写规则：\" class=\"headerlink\" title=\"事务属性取值的书写规则：\"></a>事务属性取值的书写规则：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传播行为 [，隔离级别] [，只读属性] [，超时属性] [不影响提交的异常] [，导致回滚的异常]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>传播行为是唯一必须设置的属性，其他都可以忽略，Spring为我们提供了合理的默认值</li>\n<li>传播行为的取值必须以“PROPAGATION_”开头，具体包括：PROPAGATION_MANDATORY、PROPAGATION_NESTED、PROPAGATION_NEVER、PROPAGATION_NOT_SUPPORTED、PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_SUPPORTS，共七种取值。</li>\n<li>隔离级别的取值必须以“ISOLATION_”开头，具体包括：ISOLATION_DEFAULT、ISOLATION_READ_COMMITTED、ISOLATION_READ_UNCOMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE，共五种取值。</li>\n<li>如果事务是只读的，那么我们可以指定只读属性，使用“readOnly”指定。否则我们不需要设置该属性。</li>\n<li>超时属性的取值必须以“TIMEOUT_”开头，后面跟一个int类型的值，表示超时时间，单位是秒。</li>\n<li>不影响提交的异常是指，即使事务中抛出了这些类型的异常，事务任然正常提交。必须在每一个异常的名字前面加上“+”。异常的名字可以是类名的一部分。比如“+RuntimeException”、“+tion”等等。</li>\n<li>导致回滚的异常是指，当事务中抛出这些类型的异常时，事务将回滚。必须在每一个异常的名字前面加上“-”。异常的名字可以是类名的全部或者部分，比如“-RuntimeException”、“-tion”等等。</li>\n<li>两个示例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;*Service&quot;&gt;</span><br><span class=\"line\">    PROPAGATION_REQUIRED，ISOLATION_READ_COMMITTED，TIMEOUT_20，+AbcException，+DefException，-HijException</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>针对所有方法名以 Service 结尾的方法，使用 PROPAGATION_REQUIRED 事务传播行为，事务的隔离级别是 ISOLATION_READ_COMMITTED，超时时间为20秒，当事务抛出 AbcException 或者 DefException 类型的异常，则仍然提交，当抛出 HijException 类型的异常时必须回滚事务。这里没有指定”readOnly”，表示事务不是只读的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;test&quot;&gt;PROPAGATION_REQUIRED，readOnly&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>\n<p>针对所有方法名为 test 的方法，使用 PROPAGATION_REQUIRED 事务传播行为，并且该事务是只读的。</p>\n<h3 id=\"基于TransactionProxyFactoryBean的声明式事务管理\"><a href=\"#基于TransactionProxyFactoryBean的声明式事务管理\" class=\"headerlink\" title=\"基于TransactionProxyFactoryBean的声明式事务管理\"></a>基于TransactionProxyFactoryBean的声明式事务管理</h3><ul>\n<li><p>示例配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans......&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;bean id=&quot;bankServiceTarget&quot;</span><br><span class=\"line\">    class=&quot;footmark.spring.core.tx.declare.classic.BankServiceImpl&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;bankService&quot;</span><br><span class=\"line\">    class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;target&quot; ref=&quot;bankServiceTarget&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class=\"line\">            &lt;props&gt;</span><br><span class=\"line\">                &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class=\"line\">            &lt;/props&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显式为每一个业务类配置一个TransactionProxyFactoryBean的做法将使得代码显得过于刻板</p>\n</li>\n</ul>\n<h3 id=\"基于命名空间的声明式事务管理\"><a href=\"#基于命名空间的声明式事务管理\" class=\"headerlink\" title=\"基于命名空间的声明式事务管理\"></a>基于<tx>命名空间的声明式事务管理</h3><ul>\n<li><p>示例配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans......&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;tx:advice id=&quot;bankAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class=\"line\">        &lt;tx:attributes&gt;</span><br><span class=\"line\">            &lt;tx:method name=&quot;transfer&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class=\"line\">        &lt;/tx:attributes&gt;</span><br><span class=\"line\">    &lt;/tx:advice&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;aop:config&gt;</span><br><span class=\"line\">        &lt;aop:pointcut id=&quot;bankPointcut&quot; expression=&quot;execution(* *.transfer(..))&quot;/&gt;</span><br><span class=\"line\">        &lt;aop:advisor advice-ref=&quot;bankAdvice&quot; pointcut-ref=&quot;bankPointcut&quot;/&gt;</span><br><span class=\"line\">    &lt;/aop:config&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果默认的事务属性就能满足要求，那么代码简化为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans......&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    &lt;tx:advice id=&quot;bankAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;aop:config&gt;</span><br><span class=\"line\">        &lt;aop:pointcut id=&quot;bankPointcut&quot; expression=&quot;execution(**.transfer(..))&quot;/&gt;</span><br><span class=\"line\">        &lt;aop:advisor advice-ref=&quot;bankAdvice&quot; pointcut-ref=&quot;bankPointcut&quot;/&gt;</span><br><span class=\"line\">    &lt;/aop:config&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用切点表达式，就不需要针对每一个业务类创建一个代理对象.</p>\n</li>\n</ul>\n<h3 id=\"基于注解-Transactional的声明式事务管理\"><a href=\"#基于注解-Transactional的声明式事务管理\" class=\"headerlink\" title=\"基于注解@Transactional的声明式事务管理\"></a>基于注解@Transactional的声明式事务管理</h3><ul>\n<li>@Transactional 可以作用于接口、接口方法、类以及类方法上</li>\n<li><p>当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>\n</li>\n<li><p>示例配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务管理器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><br><span class=\"line\">        p:dataSource-ref=&quot;dataSource&quot;&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- enables scanning for @Transactional annotations --&gt;</span><br><span class=\"line\">&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class=\"line\">public boolean transfer(Long fromId, Long toId, double amount) &#123;</span><br><span class=\"line\">    return bankDao.transfer(fromId, toId, amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。</p>\n</li>\n<li>@Transactional 注解应该只被应用到 public 方法上. 在protected、private或者默认可见性的方法上使用@Transactional 注解，将被忽略，也不会抛出任何异常。</li>\n</ul>\n<h2 id=\"事务属性\"><a href=\"#事务属性\" class=\"headerlink\" title=\"事务属性\"></a>事务属性</h2><h3 id=\"Required（需要）\"><a href=\"#Required（需要）\" class=\"headerlink\" title=\"Required（需要）\"></a>Required（需要）</h3><ul>\n<li>若事务上下文已存在，则使用，如果不存在，则为此方法开启一个新事务</li>\n</ul>\n<h3 id=\"Mandatory（强制必须）\"><a href=\"#Mandatory（强制必须）\" class=\"headerlink\" title=\"Mandatory（强制必须）\"></a>Mandatory（强制必须）</h3><ul>\n<li>强制事务上下文必须存在，若不存在，则抛出TransactionRequiredException异常</li>\n</ul>\n<h3 id=\"RequiresNew（需要新的）\"><a href=\"#RequiresNew（需要新的）\" class=\"headerlink\" title=\"RequiresNew（需要新的）\"></a>RequiresNew（需要新的）</h3><ul>\n<li>总是开启新事务，前一个事务若存在则会被挂起</li>\n<li>此属性在此场景是很有用：一个事务如果需要与其外围包裹事务相独立，不受其执行结果的影响，自行完成提交(比如记录日志)</li>\n</ul>\n<h3 id=\"Supports（支持）\"><a href=\"#Supports（支持）\" class=\"headerlink\" title=\"Supports（支持）\"></a>Supports（支持）</h3><ul>\n<li>告知容器，对象方法并不需要一个事务上下文，但当调用到这个方法而事务上下文恰巧存在时，则该方法会使用它</li>\n<li>可用于查询的方法当中，如果此查询是在一个正在进行的事务中完成的，对目标方法应用Supports属性会让容器使用当前事务上下文，参考数据库操作记录，从而将事务中作出的各种修改液包括到查询结果中</li>\n</ul>\n<h3 id=\"NotSupported（不支持）\"><a href=\"#NotSupported（不支持）\" class=\"headerlink\" title=\"NotSupported（不支持）\"></a>NotSupported（不支持）</h3><ul>\n<li>告知容器此方法不使用事务</li>\n<li>若一个事务已存在，容器会将事务暂停直至此方法结束</li>\n<li>此属性在方法逻辑中有排斥事务上下文代码存在时很有用，可以暂时屏蔽一些不需要或不能用事务的逻辑</li>\n</ul>\n<h3 id=\"Never（不用）\"><a href=\"#Never（不用）\" class=\"headerlink\" title=\"Never（不用）\"></a>Never（不用）</h3><ul>\n<li>告知容器不允许有事务上下文存在。若调用方法前事务存在，则抛出异常</li>\n</ul>\n<h3 id=\"PROPAGATION-NESTED\"><a href=\"#PROPAGATION-NESTED\" class=\"headerlink\" title=\"PROPAGATION_NESTED\"></a>PROPAGATION_NESTED</h3><ul>\n<li>告知spring进行事务嵌套，并采用Required属性</li>\n</ul>\n<h2 id=\"事务传播级别\"><a href=\"#事务传播级别\" class=\"headerlink\" title=\"事务传播级别\"></a>事务传播级别</h2><ul>\n<li>这些事务隔离级别设置需要依赖于底层数据库。底层数据库支持，这些设置才会生效</li>\n</ul>\n<p><img src=\"/images/spring-transaction-003.png\" alt=\"\"></p>\n<h3 id=\"TransactionReadUncommitted\"><a href=\"#TransactionReadUncommitted\" class=\"headerlink\" title=\"TransactionReadUncommitted\"></a>TransactionReadUncommitted</h3><ul>\n<li>允许事务读取其他事务在提交到数据库之前产生的未提交更改。</li>\n</ul>\n<p><img src=\"/images/spring-transaction-004.png\" alt=\"\"></p>\n<h3 id=\"TransactionReadCommitted\"><a href=\"#TransactionReadCommitted\" class=\"headerlink\" title=\"TransactionReadCommitted\"></a>TransactionReadCommitted</h3><ul>\n<li>允许多个事务访问同一份数据，但将未提交的数据对其他事务隐藏，直至数据提交</li>\n</ul>\n<p><img src=\"/images/spring-transaction-005.png\" alt=\"\"></p>\n<h3 id=\"TransactionRepeatableRead\"><a href=\"#TransactionRepeatableRead\" class=\"headerlink\" title=\"TransactionRepeatableRead\"></a>TransactionRepeatableRead</h3><ul>\n<li>保持了事务彼此隔绝。</li>\n<li>保证一旦在某一事务中服务了数据库的一个值集，在后续的每次查询操作中都读到同样的值（除非此事务拿到这些数据的读写锁，并自行更改了数据）</li>\n<li>在此级别下，一个事务如果要更改数据，而这一数据被其他事务读取时，此事务需要等待占用数据事务提交的操作（或直接返回失败）</li>\n</ul>\n<p><img src=\"/images/spring-transaction-006.png\" alt=\"\"></p>\n<h3 id=\"TransactionSerializable\"><a href=\"#TransactionSerializable\" class=\"headerlink\" title=\"TransactionSerializable\"></a>TransactionSerializable</h3><ul>\n<li>java支持的最高的事务隔离级别</li>\n<li>交错发生的事务被“堆迭”起来，以致同一时间点仅仅有一个事务具备访问目标数据的权力</li>\n<li>性能会受到很大影响，而数据一致性将会极大提高</li>\n</ul>\n<p><img src=\"/images/spring-transaction-007.png\" alt=\"\"></p>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><h3 id=\"JTA和JTS\"><a href=\"#JTA和JTS\" class=\"headerlink\" title=\"JTA和JTS\"></a>JTA和JTS</h3><h4 id=\"jta：java-transaction-api\"><a href=\"#jta：java-transaction-api\" class=\"headerlink\" title=\"jta：java transaction api\"></a>jta：java transaction api</h4><ul>\n<li>开发人员用于事务管理的接口</li>\n<li><p>UserTransaction接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin();</span><br><span class=\"line\">commit();</span><br><span class=\"line\">rollback();</span><br><span class=\"line\">getStatus();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>TransactionManager接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">suspend();</span><br><span class=\"line\">resume();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"jts：java-transaction-service\"><a href=\"#jts：java-transaction-service\" class=\"headerlink\" title=\"jts：java transaction service\"></a>jts：java transaction service</h4><ul>\n<li>开源或商用的实现了jta的底层事务服务</li>\n</ul>\n<p><img src=\"/images/spring-transaction-008.png\" alt=\"\"></p>\n<h4 id=\"要进行事务管理，我们需要两个东西：事务管理器和资源管理器\"><a href=\"#要进行事务管理，我们需要两个东西：事务管理器和资源管理器\" class=\"headerlink\" title=\"要进行事务管理，我们需要两个东西：事务管理器和资源管理器\"></a>要进行事务管理，我们需要两个东西：事务管理器和资源管理器</h4><ul>\n<li>资源管理器（Resource Manager），对于数据库，就是数据源</li>\n<li>事务管理器（Transaction Manager）<br><em>控制JTA事务，管理事务生命周期，并协调资源</em><br><em>在JTA中，事务管理器抽象为TransactionManager，并通过底层事务服务（JTS）实现</em><br><em>负责控制和管理实际资源（数据库或JMS队列）</em></li>\n</ul>\n<h3 id=\"分布式事务-XA事务\"><a href=\"#分布式事务-XA事务\" class=\"headerlink\" title=\"分布式事务/XA事务\"></a>分布式事务/XA事务</h3><ul>\n<li>分布式事务和单机事务的区别就是，单机事务是事务管理器管理一个资源，而分布式事务则是事务管理器管理多个数据资源.</li>\n</ul>\n<h4 id=\"XA环境\"><a href=\"#XA环境\" class=\"headerlink\" title=\"XA环境\"></a>XA环境</h4><p>在同一个处理单元中，需要协调多个数据资源完成逻辑，并保证ACID准备，则需要XA事务保证</p>\n<h4 id=\"XA接口\"><a href=\"#XA接口\" class=\"headerlink\" title=\"XA接口\"></a>XA接口</h4><p><img src=\"/images/spring-transaction-009.png\" alt=\"\"></p>\n<ul>\n<li>XA支持两阶段提交协议</li>\n</ul>\n<h3 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><ul>\n<li>使用spring boot + jta + atomikos实现分布式事务管理的代码例子</li>\n<li>资金在库（atomikos_one），红包在库（atomikos_two）. 资金账号1转10元到资金账号2；红包账号2转10元到红包账号1</li>\n</ul>\n<h4 id=\"表数据\"><a href=\"#表数据\" class=\"headerlink\" title=\"表数据\"></a>表数据</h4><ul>\n<li>capital_account</li>\n</ul>\n<p><img src=\"/images/spring-transaction-010.png\" alt=\"\"></p>\n<ul>\n<li>red_packet_account</li>\n</ul>\n<p><img src=\"/images/spring-transaction-011.png\" alt=\"\"></p>\n<h4 id=\"程序代码\"><a href=\"#程序代码\" class=\"headerlink\" title=\"程序代码\"></a>程序代码</h4><ul>\n<li>配置2个数据源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order.datasource.url=jdbc:mysql://localhost:3306/atomikos_two</span><br><span class=\"line\">order.datasource.username=root</span><br><span class=\"line\">order.datasource.password=root</span><br><span class=\"line\"></span><br><span class=\"line\">customer.datasource.url=jdbc:mysql://localhost:3306/atomikos_one</span><br><span class=\"line\">customer.datasource.username=root</span><br><span class=\"line\">customer.datasource.password=root</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>atomikos的maven依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;transactions&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;transactions-jta&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;transactions-hibernate3&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;hibernate&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;/exclusion&gt;</span><br><span class=\"line\">    &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AtomikosJtaPlatform这个类指明了，Atomikos需要我们提供UserTransaction和TransactionManager的实现</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AtomikosJtaPlatform extends AbstractJtaPlatform &#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 1L;</span><br><span class=\"line\">    static TransactionManager transactionManager;</span><br><span class=\"line\">    static UserTransaction transaction;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected TransactionManager locateTransactionManager() &#123;</span><br><span class=\"line\">        return transactionManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected UserTransaction locateUserTransaction() &#123;</span><br><span class=\"line\">        return transaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>transactionManager等配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@ComponentScan</span><br><span class=\"line\">@EnableTransactionManagement</span><br><span class=\"line\">public class MainConfig &#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() &#123;</span><br><span class=\"line\">        return new PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JpaVendorAdapter jpaVendorAdapter() &#123;</span><br><span class=\"line\">        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = new HibernateJpaVendorAdapter();</span><br><span class=\"line\">        hibernateJpaVendorAdapter.setShowSql(true);</span><br><span class=\"line\">        hibernateJpaVendorAdapter.setGenerateDdl(true);</span><br><span class=\"line\">        hibernateJpaVendorAdapter.setDatabase(Database.MYSQL);</span><br><span class=\"line\">        return hibernateJpaVendorAdapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;userTransaction&quot;)</span><br><span class=\"line\">    public UserTransaction userTransaction() throws Throwable &#123;</span><br><span class=\"line\">        UserTransactionImp userTransactionImp = new UserTransactionImp();</span><br><span class=\"line\">        userTransactionImp.setTransactionTimeout(10000);</span><br><span class=\"line\">        return userTransactionImp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;atomikosTransactionManager&quot;, initMethod = &quot;init&quot;</span><br><span class=\"line\">    , destroyMethod = &quot;close&quot;)</span><br><span class=\"line\">    public TransactionManager atomikosTransactionManager() throws Throwable &#123;</span><br><span class=\"line\">        UserTransactionManager userTransactionManager = new UserTransactionManager();</span><br><span class=\"line\">        userTransactionManager.setForceShutdown(false);</span><br><span class=\"line\">        AtomikosJtaPlatform.transactionManager = userTransactionManager;</span><br><span class=\"line\">        return userTransactionManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Bean(name = &quot;transactionManager&quot;)</span><br><span class=\"line\">    @DependsOn(&#123; &quot;userTransaction&quot;, &quot;atomikosTransactionManager&quot; &#125;)</span><br><span class=\"line\">    public PlatformTransactionManager transactionManager() throws Throwable &#123;</span><br><span class=\"line\">        UserTransaction userTransaction = userTransaction();</span><br><span class=\"line\">        AtomikosJtaPlatform.transaction = userTransaction;</span><br><span class=\"line\">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</span><br><span class=\"line\">        return new JtaTransactionManager(userTransaction, atomikosTransactionManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>数据库1的数据源配置CustomerConfig<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@DependsOn(&quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableJpaRepositories(basePackages = &quot;com.iyihua.sample.repository.customer&quot;</span><br><span class=\"line\">, entityManagerFactoryRef = &quot;customerEntityManager&quot;, transactionManagerRef = &quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableConfigurationProperties(CustomerDatasourceProperties.class)</span><br><span class=\"line\">public class CustomerConfig &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private JpaVendorAdapter jpaVendorAdapter;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private CustomerDatasourceProperties customerDatasourceProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Primary</span><br><span class=\"line\">    @Bean(name = &quot;customerDataSource&quot;, initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</span><br><span class=\"line\">    public DataSource customerDataSource() &#123;</span><br><span class=\"line\">        MysqlXADataSource mysqlXaDataSource = new MysqlXADataSource();</span><br><span class=\"line\">        mysqlXaDataSource.setUrl(customerDatasourceProperties.getUrl());</span><br><span class=\"line\">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);</span><br><span class=\"line\">        mysqlXaDataSource.setPassword(customerDatasourceProperties.getPassword());</span><br><span class=\"line\">        mysqlXaDataSource.setUser(customerDatasourceProperties.getUsername());</span><br><span class=\"line\">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);</span><br><span class=\"line\">        AtomikosDataSourceBean xaDataSource = new AtomikosDataSourceBean();</span><br><span class=\"line\">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class=\"line\">        xaDataSource.setUniqueResourceName(&quot;xads1&quot;);</span><br><span class=\"line\">        return xaDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Primary</span><br><span class=\"line\">    @Bean(name = &quot;customerEntityManager&quot;)</span><br><span class=\"line\">    @DependsOn(&quot;transactionManager&quot;)</span><br><span class=\"line\">    public LocalContainerEntityManagerFactoryBean customerEntityManager() throws Throwable &#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; properties = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">        properties.put(&quot;hibernate.transaction.jta.platform&quot;, AtomikosJtaPlatform.class.getName());</span><br><span class=\"line\">        properties.put(&quot;javax.persistence.transactionType&quot;, &quot;JTA&quot;);</span><br><span class=\"line\">        LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();</span><br><span class=\"line\">        entityManager.setJtaDataSource(customerDataSource());</span><br><span class=\"line\">        entityManager.setJpaVendorAdapter(jpaVendorAdapter);</span><br><span class=\"line\">        entityManager.setPackagesToScan(&quot;com.iyihua.sample.domain.customer&quot;);</span><br><span class=\"line\">        entityManager.setPersistenceUnitName(&quot;customerPersistenceUnit&quot;);</span><br><span class=\"line\">        entityManager.setJpaPropertyMap(properties);</span><br><span class=\"line\">        return entityManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>数据库2的数据源配置OrderConfig<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@DependsOn(&quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableJpaRepositories(basePackages = &quot;com.iyihua.sample.repository.order&quot;</span><br><span class=\"line\">, entityManagerFactoryRef = &quot;orderEntityManager&quot;, transactionManagerRef = &quot;transactionManager&quot;)</span><br><span class=\"line\">@EnableConfigurationProperties(OrderDatasourceProperties.class)</span><br><span class=\"line\">public class OrderConfig &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>业务方法:资金在库（atomikos_one），红包在库（atomikos_two）资金账号1转10元到资金账号2；红包账号2转10元到红包账号1**<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class StoreServiceImpl implements StoreService &#123;</span><br><span class=\"line\">@Transactional()</span><br><span class=\"line\">    public void transfer() &#123;</span><br><span class=\"line\">        CapitalAccount ca1 = capitalAccountRepository.findOne(1l);</span><br><span class=\"line\">        CapitalAccount ca2 = capitalAccountRepository.findOne(2l);</span><br><span class=\"line\">        RedPacketAccount rp1 = redPacketAccountRepository.findOne(1l);</span><br><span class=\"line\">        RedPacketAccount rp2 = redPacketAccountRepository.findOne(2l);</span><br><span class=\"line\">        BigDecimal capital = BigDecimal.TEN;</span><br><span class=\"line\">        BigDecimal red = BigDecimal.TEN;</span><br><span class=\"line\">        ca1.transferFrom(capital);</span><br><span class=\"line\">        ca2.transferTo(capital);</span><br><span class=\"line\">        capitalAccountRepository.save(ca1);</span><br><span class=\"line\">        capitalAccountRepository.save(ca2);</span><br><span class=\"line\">        rp2.transferFrom(red);</span><br><span class=\"line\">        rp1.transferTo(red);</span><br><span class=\"line\">        redPacketAccountRepository.save(rp1);</span><br><span class=\"line\">        redPacketAccountRepository.save(rp2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"get-and-run-demo：\"><a href=\"#get-and-run-demo：\" class=\"headerlink\" title=\"get and run demo：\"></a>get and run demo：</h3><p><a href=\"https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample\">https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample</a></p>\n<ul>\n<li>git clone <a href=\"https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git\">https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git</a></li>\n<li>import db script in folder “docs”</li>\n<li>import project into ide and run App.java or build project and run the jar</li>\n<li>visit utl:<a href=\"http://localhost:8082/save\">http://localhost:8082/save</a> to see saveTest</li>\n</ul>\n","sticky":0},{"title":"为你的项目做合理的版本控制管理","date":"2016-04-07T15:32:15.000Z","_content":"\n### 一款经典的分支管理规范\n![](/images/version.png)\n\n### \n我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。\n\n1.\n最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。\n\n2.\n我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。\n\n3.\n当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。\n\n4.\n当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。\n\n5.\n当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。\n\n6.\n对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。","source":"_posts/为你的项目做合理的版本控制管理.md","raw":"---\ntitle: 为你的项目做合理的版本控制管理\ndate: 2016-04-07 23:32:15\ntags: [git,svn,版本控制,分支管理]\n---\n\n### 一款经典的分支管理规范\n![](/images/version.png)\n\n### \n我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。\n\n1.\n最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。\n\n2.\n我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。\n\n3.\n当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。\n\n4.\n当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。\n\n5.\n当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。\n\n6.\n对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。","slug":"为你的项目做合理的版本控制管理","published":1,"updated":"2016-04-07T15:43:41.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usv8002g00uuw1wwtgrn","content":"<h3 id=\"一款经典的分支管理规范\"><a href=\"#一款经典的分支管理规范\" class=\"headerlink\" title=\"一款经典的分支管理规范\"></a>一款经典的分支管理规范</h3><p><img src=\"/images/version.png\" alt=\"\"></p>\n<p>###<br>我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。</p>\n<p>1.<br>最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。</p>\n<p>2.<br>我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。</p>\n<p>3.<br>当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。</p>\n<p>4.<br>当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。</p>\n<p>5.<br>当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。</p>\n<p>6.<br>对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。</p>\n","excerpt":"","more":"<h3 id=\"一款经典的分支管理规范\"><a href=\"#一款经典的分支管理规范\" class=\"headerlink\" title=\"一款经典的分支管理规范\"></a>一款经典的分支管理规范</h3><p><img src=\"/images/version.png\" alt=\"\"></p>\n<p>###<br>我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。</p>\n<p>1.<br>最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。</p>\n<p>2.<br>我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。</p>\n<p>3.<br>当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。</p>\n<p>4.<br>当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。</p>\n<p>5.<br>当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。</p>\n<p>6.<br>对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。</p>\n","sticky":0},{"title":"springmvc rest api versioning","date":"2016-05-03T15:34:35.000Z","_content":"\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}\n```\n","source":"_posts/springmvc-rest-api-versioning.md","raw":"---\ntitle: springmvc rest api versioning\ndate: 2016-05-03 23:34:35\ntags: [rest,api,versioning,springmvc,java]\n---\n\nhttps://github.com/mindhaq/restapi-versioning-spring.git\nhttps://github.com/augusto/restVersioning.git\n\n这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。\n\n1. /api/v1/xxx\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiurl/{version}/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n2. /api/xxx\n在header中添加\"X-API-Version\":\"v1\"来进行版本请求的区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(value = \"/apiheader/hello\", method = GET, produces = APPLICATION_JSON_VALUE)\n    public Hello sayHelloWorldHeader(@RequestHeader(\"X-API-Version\") final ValidVersion version) {\n        return new Hello();\n    }\n```\n\n3. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller中的方法注解写法：\n```\n    @ResponseBody\n    @RequestMapping(\n        value = \"/apiaccept/hello\", method = GET,\n        produces = {\"application/vnd.company.app-v1+json\", \"application/vnd.company.app-v2+json\"}\n    )\n```\n\n4. /api/xxx\n在header中添加Accept: \"application/vnd.company.app-v1+json\"来进行版本区别\ncontroller写法：\n```\n@Controller\n@VersionedResource(media = \"application/vnd.app.resource\")\npublic class TestController {\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"1.0\", to = \"1.0\")\n    @ResponseBody\n    public Resource getResource_v1() {\n        return new Resource(\"1.0\");\n    }\n\n    @RequestMapping(value = {\"/resource\"}, method = RequestMethod.GET)\n    @VersionedResource(from = \"2.0\")\n    @ResponseBody\n    public Resource getResource_v2_onwards() {\n        return new Resource(\"2.0\");\n    }\n}\n```\n","slug":"springmvc-rest-api-versioning","published":1,"updated":"2016-05-03T15:37:38.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usvc002j00uudgubuhyq","content":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\" target=\"_blank\" rel=\"external\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\" target=\"_blank\" rel=\"external\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@VersionedResource(media = &quot;application/vnd.app.resource&quot;)</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;1.0&quot;, to = &quot;1.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v1() &#123;</span><br><span class=\"line\">        return new Resource(&quot;1.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;2.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v2_onwards() &#123;</span><br><span class=\"line\">        return new Resource(&quot;2.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<p><a href=\"https://github.com/mindhaq/restapi-versioning-spring.git\">https://github.com/mindhaq/restapi-versioning-spring.git</a><br><a href=\"https://github.com/augusto/restVersioning.git\">https://github.com/augusto/restVersioning.git</a></p>\n<p>这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。</p>\n<ol>\n<li><p>/api/v1/xxx<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiurl/&#123;version&#125;/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加”X-API-Version”:”v1”来进行版本请求的区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/apiheader/hello&quot;, method = GET, produces = APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public Hello sayHelloWorldHeader(@RequestHeader(&quot;X-API-Version&quot;) final ValidVersion version) &#123;</span><br><span class=\"line\">    return new Hello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller中的方法注解写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(</span><br><span class=\"line\">    value = &quot;/apiaccept/hello&quot;, method = GET,</span><br><span class=\"line\">    produces = &#123;&quot;application/vnd.company.app-v1+json&quot;, &quot;application/vnd.company.app-v2+json&quot;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/api/xxx<br>在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别<br>controller写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@VersionedResource(media = &quot;application/vnd.app.resource&quot;)</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;1.0&quot;, to = &quot;1.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v1() &#123;</span><br><span class=\"line\">        return new Resource(&quot;1.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &#123;&quot;/resource&quot;&#125;, method = RequestMethod.GET)</span><br><span class=\"line\">    @VersionedResource(from = &quot;2.0&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public Resource getResource_v2_onwards() &#123;</span><br><span class=\"line\">        return new Resource(&quot;2.0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","sticky":0},{"title":"使用Nginx作为简单的图片服务器","date":"2017-03-10T15:59:19.000Z","_content":"\n## 说明：\n- 为什么要用Nginx代理静态图片？\n\n图片服务器是我们经常要用到的，在开始的时候，当还没用上阿里云oss，并且觉得FastDFS略微重量级的时候，就可以使用Nginx作为简单的图片服务器。\n\n一下就是Nginx的conf配置文件例子：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n        location /images {\n            root   /data/icms;\n            add_header 'Access-Control-Allow-Origin' *;\n            index  index.html index.htm;\n            charset utf-8;\n        }\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n    }\n}\n```\n\n- 所有http://domain/image/xxx.png 的图片都会请求到服务器/data/icms/images内对应的图片。\n","source":"_posts/使用Nginx作为简单的图片服务器.md","raw":"---\ntitle: 使用Nginx作为简单的图片服务器\ndate: 2017-03-10 23:59:19\ntags: [ngnix, picture, server]\n---\n\n## 说明：\n- 为什么要用Nginx代理静态图片？\n\n图片服务器是我们经常要用到的，在开始的时候，当还没用上阿里云oss，并且觉得FastDFS略微重量级的时候，就可以使用Nginx作为简单的图片服务器。\n\n一下就是Nginx的conf配置文件例子：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n        location /images {\n            root   /data/icms;\n            add_header 'Access-Control-Allow-Origin' *;\n            index  index.html index.htm;\n            charset utf-8;\n        }\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n    }\n}\n```\n\n- 所有http://domain/image/xxx.png 的图片都会请求到服务器/data/icms/images内对应的图片。\n","slug":"使用Nginx作为简单的图片服务器","published":1,"updated":"2017-03-10T16:11:13.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usvf002k00uudpvf6kl6","content":"<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>为什么要用Nginx代理静态图片？</li>\n</ul>\n<p>图片服务器是我们经常要用到的，在开始的时候，当还没用上阿里云oss，并且觉得FastDFS略微重量级的时候，就可以使用Nginx作为简单的图片服务器。</p>\n<p>一下就是Nginx的conf配置文件例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location /images &#123;</span><br><span class=\"line\">            root   /data/icms;</span><br><span class=\"line\">            add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">            charset utf-8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>所有<a href=\"http://domain/image/xxx.png\" target=\"_blank\" rel=\"external\">http://domain/image/xxx.png</a> 的图片都会请求到服务器/data/icms/images内对应的图片。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>为什么要用Nginx代理静态图片？</li>\n</ul>\n<p>图片服务器是我们经常要用到的，在开始的时候，当还没用上阿里云oss，并且觉得FastDFS略微重量级的时候，就可以使用Nginx作为简单的图片服务器。</p>\n<p>一下就是Nginx的conf配置文件例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location /images &#123;</span><br><span class=\"line\">            root   /data/icms;</span><br><span class=\"line\">            add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">            charset utf-8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>所有<a href=\"http://domain/image/xxx.png\">http://domain/image/xxx.png</a> 的图片都会请求到服务器/data/icms/images内对应的图片。</li>\n</ul>\n","sticky":0},{"title":"使用hexo-deploy直接发布到github","date":"2015-12-31T09:08:52.000Z","_content":"\n本文说明如何使用hexo deploy直接提交到github发布文章。\n\n### 1.npm安装需要的东西\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-deployer-ftpsync --save\n\n\n### 2.修改配置文件_config.yml\ndeploy:\n  type: git\n  repository: https://github.com/YihuaWanglv/yihuawanglv.github.io.git\n  branch: master\n\n### 3.执行命令提交发布\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n\nover.\n\n\n### 参考：https://hexo.io/zh-cn/docs/deployment.html\n","source":"_posts/使用hexo-deploy直接发布到github.md","raw":"---\ntitle: 使用hexo-deploy直接发布到github\ndate: 2015-12-31 17:08:52\ntags: [hexo,deploy]\n---\n\n本文说明如何使用hexo deploy直接提交到github发布文章。\n\n### 1.npm安装需要的东西\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-deployer-ftpsync --save\n\n\n### 2.修改配置文件_config.yml\ndeploy:\n  type: git\n  repository: https://github.com/YihuaWanglv/yihuawanglv.github.io.git\n  branch: master\n\n### 3.执行命令提交发布\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n\nover.\n\n\n### 参考：https://hexo.io/zh-cn/docs/deployment.html\n","slug":"使用hexo-deploy直接发布到github","published":1,"updated":"2016-02-20T04:02:04.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usvp002m00uu2kt5cb77","content":"<p>本文说明如何使用hexo deploy直接提交到github发布文章。</p>\n<h3 id=\"1-npm安装需要的东西\"><a href=\"#1-npm安装需要的东西\" class=\"headerlink\" title=\"1.npm安装需要的东西\"></a>1.npm安装需要的东西</h3><p>$ npm install hexo-deployer-git –save<br>$ npm install hexo-deployer-heroku –save<br>$ npm install hexo-deployer-rsync –save<br>$ npm install hexo-deployer-openshift –save<br>$ npm install hexo-deployer-ftpsync –save</p>\n<h3 id=\"2-修改配置文件-config-yml\"><a href=\"#2-修改配置文件-config-yml\" class=\"headerlink\" title=\"2.修改配置文件_config.yml\"></a>2.修改配置文件_config.yml</h3><p>deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git</a><br>  branch: master</p>\n<h3 id=\"3-执行命令提交发布\"><a href=\"#3-执行命令提交发布\" class=\"headerlink\" title=\"3.执行命令提交发布\"></a>3.执行命令提交发布</h3><p>$ hexo clean<br>$ hexo generate<br>$ hexo deploy</p>\n<p>over.</p>\n<h3 id=\"参考：https-hexo-io-zh-cn-docs-deployment-html\"><a href=\"#参考：https-hexo-io-zh-cn-docs-deployment-html\" class=\"headerlink\" title=\"参考：https://hexo.io/zh-cn/docs/deployment.html\"></a>参考：<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/deployment.html</a></h3>","excerpt":"","more":"<p>本文说明如何使用hexo deploy直接提交到github发布文章。</p>\n<h3 id=\"1-npm安装需要的东西\"><a href=\"#1-npm安装需要的东西\" class=\"headerlink\" title=\"1.npm安装需要的东西\"></a>1.npm安装需要的东西</h3><p>$ npm install hexo-deployer-git –save<br>$ npm install hexo-deployer-heroku –save<br>$ npm install hexo-deployer-rsync –save<br>$ npm install hexo-deployer-openshift –save<br>$ npm install hexo-deployer-ftpsync –save</p>\n<h3 id=\"2-修改配置文件-config-yml\"><a href=\"#2-修改配置文件-config-yml\" class=\"headerlink\" title=\"2.修改配置文件_config.yml\"></a>2.修改配置文件_config.yml</h3><p>deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git</a><br>  branch: master</p>\n<h3 id=\"3-执行命令提交发布\"><a href=\"#3-执行命令提交发布\" class=\"headerlink\" title=\"3.执行命令提交发布\"></a>3.执行命令提交发布</h3><p>$ hexo clean<br>$ hexo generate<br>$ hexo deploy</p>\n<p>over.</p>\n<h3 id=\"参考：https-hexo-io-zh-cn-docs-deployment-html\"><a href=\"#参考：https-hexo-io-zh-cn-docs-deployment-html\" class=\"headerlink\" title=\"参考：https://hexo.io/zh-cn/docs/deployment.html\"></a>参考：<a href=\"https://hexo.io/zh-cn/docs/deployment.html\">https://hexo.io/zh-cn/docs/deployment.html</a></h3>","sticky":0},{"title":"事务管理-spring事务使用注意点、数据库事务的隔离级别与锁","date":"2018-02-25T02:43:01.000Z","_content":"\n# 1. spring事务@Transactional的注意点\n\n@Transactional注解可以标注在类和方法上，也可以标注在定义的接口和接口方法上。\n如果我们在接口上标注@Transactional注解，会留下这样的隐患：因为注解不能被继承，所以业务接口中标注的@Transactional注解不会被业务实现类继承。所以可能会出现不启动事务的情况。所以，spring建议我们将@Transaction注解在实现类上。\n在方法上的@Transactional注解会覆盖掉类上的@Transactional。\n\n注意：\n\n　　@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。\n\n　　虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。\n\n　　默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。\n\n\n\n\n\n# 2. 数据库事务中的隔离级别和锁\n\n数据库事务在后端开发中占非常重要的地位，如何确保数据读取的正确性、安全性也是我们需要研究的问题。\n\n## ACID\n\n首先总结一下数据库事务正确执行的四个要素（ACID）：\n\n原子性（Atomicity）：即事务是不可分割的最小工作单元，事务内的操作要么全做，要么全不做，不能只做一部分；\n一致性（Consistency）：在事务执行前数据库的数据处于正确的状态，而事务执行完成后数据库的数据还是处于正确的状态，即数据完整性约束没有被破坏；比如我们做银行转账的相关业务，A转账给B，要求A转的钱B一定要收到。如果A转了钱而B没有收到，那么数据库数据的一致性就得不到保障，在做高并发业务时要注意合理的设计。\n隔离性（Isolation）：并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性；\n持久性（Durability）：事务一旦执行成功，它对数据库的数据的改变必须是永久的，不会因各种异常导致数据不一致或丢失。\n事务隔离级别\n大部分数据库事务操作都是并发执行的，这就可能遇到下面的几种问题：\n\n丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。\n脏读（Dirty reads）：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。\n不可重复读（Non-repeatable reads）：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。\n幻读（Phantom reads）：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。\n注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。\n\n为了处理这几种问题，SQL定义了下面的4个等级的事务隔离级别：\n\n未提交读（READ UNCOMMITTED ）：最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读；\n提交读（READ COMMITTED）：一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不会出现丢失更新、脏读，但可能出现不可重复读、幻读；\n可重复读（REPEATABLE READ）：保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读；\n序列化（SERIALIZABLE）：最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读，但是效率最低。\n隔离级别越高，数据库事务并发执行性能越差，能处理的操作越少。所以一般地，推荐使用REPEATABLE READ级别保证数据的读一致性。对于幻读的问题，可以通过加锁来防止。\nMySQL支持这四种事务等级，默认事务隔离级别是REPEATABLE READ。Oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，所以Oracle数据库不支持脏读。Oracle数据库默认的事务隔离级别是READ COMMITTED。\n\n## 各种锁\n\n下面总结一下MySQL中的锁，有好几种分类。其它RDBMS也差不多是这样。\n\n### 首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。\n\n乐观锁，顾名思义就是非常乐观，非常相信真善美，每次去读数据都认为其它事务没有在写数据，所以就不上锁，快乐的读取数据，而只在提交数据的时候判断其它事务是否搞过这个数据了，如果搞过就rollback。乐观锁相当于一种检测冲突的手段，可通过为记录添加版本或添加时间戳来实现。\n\n悲观锁，对其它事务抱有保守的态度，每次去读数据都认为其它事务想要作祟，所以每次读数据的时候都会上锁，直到取出数据。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性，但随之而来的是各种开销。悲观锁相当于一种避免冲突的手段。\n选择标准：如果并发量不大，或数据冲突的后果不严重，则可以使用乐观锁；而如果并发量大或数据冲突后果比较严重（对用户不友好），那么就使用悲观锁。\n\n### 从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。\n理解：\n\n持有S锁的事务只读不可写。如果事务A对数据D加上S锁后，其它事务只能对D加上S锁而不能加X锁。\n持有X锁的事务可读可写。如果事务A对数据D加上X锁后，其它事务不能再对D加锁，直到A对D的锁解除。\n从锁的粒度角度，主要分为表级锁（Table Lock）和行级锁（Row Lock）。\n表级锁将整个表加锁，性能开销最小。用户可以同时进行读操作。当一个用户对表进行写操作时，用户可以获得一个写锁，写锁禁止其他的用户读写操作。写锁比读锁的优先级更高，即使有读操作已排在队列中，一个被申请的写锁仍可以排在所队列的前列。\n行级锁仅对指定的记录进行加锁，这样其它进程可以对同一个表中的其它记录进行读写操作。行级锁粒度最小，开销大，能够支持高并发，可能会出现死锁。\n\n### MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\n\n还有BDB引擎使用页级锁，即一次锁定一组记录，并发性介于行级锁和表级锁之间。\n\n### 三级锁协议\n\n三级加锁协议是为了保证正确的事务并发操作，事务在读、写数据库对象是需要遵循的加锁规则。\n\n一级封锁协议：事务T在修改数据R之前必须对它加X锁，直到事务结束方可释放。而若事务T只是读数据，不进行修改，则不需加锁，因此一级加锁协议下可能会出现脏读和不可重复读。\n二级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加S锁，直到读取完毕以后释放。二级加锁协议下可能会出现不可重复读。\n三级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加X锁，直到事务结束方可释放。三级加锁协议避免了脏读和不可重复读的问题。","source":"_posts/事务管理-spring事务使用注意点、数据库事务的隔离级别与锁.md","raw":"---\ntitle: 事务管理-spring事务使用注意点、数据库事务的隔离级别与锁\ndate: 2018-02-25 10:43:01\ntags: [java,spring事务,Transactional,数据库事务,锁]\n---\n\n# 1. spring事务@Transactional的注意点\n\n@Transactional注解可以标注在类和方法上，也可以标注在定义的接口和接口方法上。\n如果我们在接口上标注@Transactional注解，会留下这样的隐患：因为注解不能被继承，所以业务接口中标注的@Transactional注解不会被业务实现类继承。所以可能会出现不启动事务的情况。所以，spring建议我们将@Transaction注解在实现类上。\n在方法上的@Transactional注解会覆盖掉类上的@Transactional。\n\n注意：\n\n　　@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。\n\n　　虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。\n\n　　默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。\n\n\n\n\n\n# 2. 数据库事务中的隔离级别和锁\n\n数据库事务在后端开发中占非常重要的地位，如何确保数据读取的正确性、安全性也是我们需要研究的问题。\n\n## ACID\n\n首先总结一下数据库事务正确执行的四个要素（ACID）：\n\n原子性（Atomicity）：即事务是不可分割的最小工作单元，事务内的操作要么全做，要么全不做，不能只做一部分；\n一致性（Consistency）：在事务执行前数据库的数据处于正确的状态，而事务执行完成后数据库的数据还是处于正确的状态，即数据完整性约束没有被破坏；比如我们做银行转账的相关业务，A转账给B，要求A转的钱B一定要收到。如果A转了钱而B没有收到，那么数据库数据的一致性就得不到保障，在做高并发业务时要注意合理的设计。\n隔离性（Isolation）：并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性；\n持久性（Durability）：事务一旦执行成功，它对数据库的数据的改变必须是永久的，不会因各种异常导致数据不一致或丢失。\n事务隔离级别\n大部分数据库事务操作都是并发执行的，这就可能遇到下面的几种问题：\n\n丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。\n脏读（Dirty reads）：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。\n不可重复读（Non-repeatable reads）：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。\n幻读（Phantom reads）：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。\n注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。\n\n为了处理这几种问题，SQL定义了下面的4个等级的事务隔离级别：\n\n未提交读（READ UNCOMMITTED ）：最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读；\n提交读（READ COMMITTED）：一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不会出现丢失更新、脏读，但可能出现不可重复读、幻读；\n可重复读（REPEATABLE READ）：保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读；\n序列化（SERIALIZABLE）：最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读，但是效率最低。\n隔离级别越高，数据库事务并发执行性能越差，能处理的操作越少。所以一般地，推荐使用REPEATABLE READ级别保证数据的读一致性。对于幻读的问题，可以通过加锁来防止。\nMySQL支持这四种事务等级，默认事务隔离级别是REPEATABLE READ。Oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，所以Oracle数据库不支持脏读。Oracle数据库默认的事务隔离级别是READ COMMITTED。\n\n## 各种锁\n\n下面总结一下MySQL中的锁，有好几种分类。其它RDBMS也差不多是这样。\n\n### 首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。\n\n乐观锁，顾名思义就是非常乐观，非常相信真善美，每次去读数据都认为其它事务没有在写数据，所以就不上锁，快乐的读取数据，而只在提交数据的时候判断其它事务是否搞过这个数据了，如果搞过就rollback。乐观锁相当于一种检测冲突的手段，可通过为记录添加版本或添加时间戳来实现。\n\n悲观锁，对其它事务抱有保守的态度，每次去读数据都认为其它事务想要作祟，所以每次读数据的时候都会上锁，直到取出数据。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性，但随之而来的是各种开销。悲观锁相当于一种避免冲突的手段。\n选择标准：如果并发量不大，或数据冲突的后果不严重，则可以使用乐观锁；而如果并发量大或数据冲突后果比较严重（对用户不友好），那么就使用悲观锁。\n\n### 从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。\n理解：\n\n持有S锁的事务只读不可写。如果事务A对数据D加上S锁后，其它事务只能对D加上S锁而不能加X锁。\n持有X锁的事务可读可写。如果事务A对数据D加上X锁后，其它事务不能再对D加锁，直到A对D的锁解除。\n从锁的粒度角度，主要分为表级锁（Table Lock）和行级锁（Row Lock）。\n表级锁将整个表加锁，性能开销最小。用户可以同时进行读操作。当一个用户对表进行写操作时，用户可以获得一个写锁，写锁禁止其他的用户读写操作。写锁比读锁的优先级更高，即使有读操作已排在队列中，一个被申请的写锁仍可以排在所队列的前列。\n行级锁仅对指定的记录进行加锁，这样其它进程可以对同一个表中的其它记录进行读写操作。行级锁粒度最小，开销大，能够支持高并发，可能会出现死锁。\n\n### MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\n\n还有BDB引擎使用页级锁，即一次锁定一组记录，并发性介于行级锁和表级锁之间。\n\n### 三级锁协议\n\n三级加锁协议是为了保证正确的事务并发操作，事务在读、写数据库对象是需要遵循的加锁规则。\n\n一级封锁协议：事务T在修改数据R之前必须对它加X锁，直到事务结束方可释放。而若事务T只是读数据，不进行修改，则不需加锁，因此一级加锁协议下可能会出现脏读和不可重复读。\n二级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加S锁，直到读取完毕以后释放。二级加锁协议下可能会出现不可重复读。\n三级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加X锁，直到事务结束方可释放。三级加锁协议避免了脏读和不可重复读的问题。","slug":"事务管理-spring事务使用注意点、数据库事务的隔离级别与锁","published":1,"updated":"2018-09-08T17:00:02.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usvt002n00uu4bjxbt6g","content":"<h1 id=\"1-spring事务-Transactional的注意点\"><a href=\"#1-spring事务-Transactional的注意点\" class=\"headerlink\" title=\"1. spring事务@Transactional的注意点\"></a>1. spring事务@Transactional的注意点</h1><p>@Transactional注解可以标注在类和方法上，也可以标注在定义的接口和接口方法上。<br>如果我们在接口上标注@Transactional注解，会留下这样的隐患：因为注解不能被继承，所以业务接口中标注的@Transactional注解不会被业务实现类继承。所以可能会出现不启动事务的情况。所以，spring建议我们将@Transaction注解在实现类上。<br>在方法上的@Transactional注解会覆盖掉类上的@Transactional。</p>\n<p>注意：</p>\n<p>　　@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>\n<p>　　虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p>\n<p>　　默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。</p>\n<h1 id=\"2-数据库事务中的隔离级别和锁\"><a href=\"#2-数据库事务中的隔离级别和锁\" class=\"headerlink\" title=\"2. 数据库事务中的隔离级别和锁\"></a>2. 数据库事务中的隔离级别和锁</h1><p>数据库事务在后端开发中占非常重要的地位，如何确保数据读取的正确性、安全性也是我们需要研究的问题。</p>\n<h2 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h2><p>首先总结一下数据库事务正确执行的四个要素（ACID）：</p>\n<p>原子性（Atomicity）：即事务是不可分割的最小工作单元，事务内的操作要么全做，要么全不做，不能只做一部分；<br>一致性（Consistency）：在事务执行前数据库的数据处于正确的状态，而事务执行完成后数据库的数据还是处于正确的状态，即数据完整性约束没有被破坏；比如我们做银行转账的相关业务，A转账给B，要求A转的钱B一定要收到。如果A转了钱而B没有收到，那么数据库数据的一致性就得不到保障，在做高并发业务时要注意合理的设计。<br>隔离性（Isolation）：并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性；<br>持久性（Durability）：事务一旦执行成功，它对数据库的数据的改变必须是永久的，不会因各种异常导致数据不一致或丢失。<br>事务隔离级别<br>大部分数据库事务操作都是并发执行的，这就可能遇到下面的几种问题：</p>\n<p>丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。<br>脏读（Dirty reads）：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。<br>不可重复读（Non-repeatable reads）：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。<br>幻读（Phantom reads）：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。<br>注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。</p>\n<p>为了处理这几种问题，SQL定义了下面的4个等级的事务隔离级别：</p>\n<p>未提交读（READ UNCOMMITTED ）：最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读；<br>提交读（READ COMMITTED）：一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不会出现丢失更新、脏读，但可能出现不可重复读、幻读；<br>可重复读（REPEATABLE READ）：保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读；<br>序列化（SERIALIZABLE）：最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读，但是效率最低。<br>隔离级别越高，数据库事务并发执行性能越差，能处理的操作越少。所以一般地，推荐使用REPEATABLE READ级别保证数据的读一致性。对于幻读的问题，可以通过加锁来防止。<br>MySQL支持这四种事务等级，默认事务隔离级别是REPEATABLE READ。Oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，所以Oracle数据库不支持脏读。Oracle数据库默认的事务隔离级别是READ COMMITTED。</p>\n<h2 id=\"各种锁\"><a href=\"#各种锁\" class=\"headerlink\" title=\"各种锁\"></a>各种锁</h2><p>下面总结一下MySQL中的锁，有好几种分类。其它RDBMS也差不多是这样。</p>\n<h3 id=\"首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。\"><a href=\"#首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。\" class=\"headerlink\" title=\"首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。\"></a>首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。</h3><p>乐观锁，顾名思义就是非常乐观，非常相信真善美，每次去读数据都认为其它事务没有在写数据，所以就不上锁，快乐的读取数据，而只在提交数据的时候判断其它事务是否搞过这个数据了，如果搞过就rollback。乐观锁相当于一种检测冲突的手段，可通过为记录添加版本或添加时间戳来实现。</p>\n<p>悲观锁，对其它事务抱有保守的态度，每次去读数据都认为其它事务想要作祟，所以每次读数据的时候都会上锁，直到取出数据。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性，但随之而来的是各种开销。悲观锁相当于一种避免冲突的手段。<br>选择标准：如果并发量不大，或数据冲突的后果不严重，则可以使用乐观锁；而如果并发量大或数据冲突后果比较严重（对用户不友好），那么就使用悲观锁。</p>\n<h3 id=\"从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。\"><a href=\"#从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。\" class=\"headerlink\" title=\"从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。\"></a>从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。</h3><p>理解：</p>\n<p>持有S锁的事务只读不可写。如果事务A对数据D加上S锁后，其它事务只能对D加上S锁而不能加X锁。<br>持有X锁的事务可读可写。如果事务A对数据D加上X锁后，其它事务不能再对D加锁，直到A对D的锁解除。<br>从锁的粒度角度，主要分为表级锁（Table Lock）和行级锁（Row Lock）。<br>表级锁将整个表加锁，性能开销最小。用户可以同时进行读操作。当一个用户对表进行写操作时，用户可以获得一个写锁，写锁禁止其他的用户读写操作。写锁比读锁的优先级更高，即使有读操作已排在队列中，一个被申请的写锁仍可以排在所队列的前列。<br>行级锁仅对指定的记录进行加锁，这样其它进程可以对同一个表中的其它记录进行读写操作。行级锁粒度最小，开销大，能够支持高并发，可能会出现死锁。</p>\n<h3 id=\"MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\"><a href=\"#MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\" class=\"headerlink\" title=\"MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\"></a>MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。</h3><p>还有BDB引擎使用页级锁，即一次锁定一组记录，并发性介于行级锁和表级锁之间。</p>\n<h3 id=\"三级锁协议\"><a href=\"#三级锁协议\" class=\"headerlink\" title=\"三级锁协议\"></a>三级锁协议</h3><p>三级加锁协议是为了保证正确的事务并发操作，事务在读、写数据库对象是需要遵循的加锁规则。</p>\n<p>一级封锁协议：事务T在修改数据R之前必须对它加X锁，直到事务结束方可释放。而若事务T只是读数据，不进行修改，则不需加锁，因此一级加锁协议下可能会出现脏读和不可重复读。<br>二级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加S锁，直到读取完毕以后释放。二级加锁协议下可能会出现不可重复读。<br>三级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加X锁，直到事务结束方可释放。三级加锁协议避免了脏读和不可重复读的问题。</p>\n","excerpt":"","more":"<h1 id=\"1-spring事务-Transactional的注意点\"><a href=\"#1-spring事务-Transactional的注意点\" class=\"headerlink\" title=\"1. spring事务@Transactional的注意点\"></a>1. spring事务@Transactional的注意点</h1><p>@Transactional注解可以标注在类和方法上，也可以标注在定义的接口和接口方法上。<br>如果我们在接口上标注@Transactional注解，会留下这样的隐患：因为注解不能被继承，所以业务接口中标注的@Transactional注解不会被业务实现类继承。所以可能会出现不启动事务的情况。所以，spring建议我们将@Transaction注解在实现类上。<br>在方法上的@Transactional注解会覆盖掉类上的@Transactional。</p>\n<p>注意：</p>\n<p>　　@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>\n<p>　　虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p>\n<p>　　默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。</p>\n<h1 id=\"2-数据库事务中的隔离级别和锁\"><a href=\"#2-数据库事务中的隔离级别和锁\" class=\"headerlink\" title=\"2. 数据库事务中的隔离级别和锁\"></a>2. 数据库事务中的隔离级别和锁</h1><p>数据库事务在后端开发中占非常重要的地位，如何确保数据读取的正确性、安全性也是我们需要研究的问题。</p>\n<h2 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h2><p>首先总结一下数据库事务正确执行的四个要素（ACID）：</p>\n<p>原子性（Atomicity）：即事务是不可分割的最小工作单元，事务内的操作要么全做，要么全不做，不能只做一部分；<br>一致性（Consistency）：在事务执行前数据库的数据处于正确的状态，而事务执行完成后数据库的数据还是处于正确的状态，即数据完整性约束没有被破坏；比如我们做银行转账的相关业务，A转账给B，要求A转的钱B一定要收到。如果A转了钱而B没有收到，那么数据库数据的一致性就得不到保障，在做高并发业务时要注意合理的设计。<br>隔离性（Isolation）：并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性；<br>持久性（Durability）：事务一旦执行成功，它对数据库的数据的改变必须是永久的，不会因各种异常导致数据不一致或丢失。<br>事务隔离级别<br>大部分数据库事务操作都是并发执行的，这就可能遇到下面的几种问题：</p>\n<p>丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。<br>脏读（Dirty reads）：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。<br>不可重复读（Non-repeatable reads）：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。<br>幻读（Phantom reads）：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。<br>注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。</p>\n<p>为了处理这几种问题，SQL定义了下面的4个等级的事务隔离级别：</p>\n<p>未提交读（READ UNCOMMITTED ）：最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读；<br>提交读（READ COMMITTED）：一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不会出现丢失更新、脏读，但可能出现不可重复读、幻读；<br>可重复读（REPEATABLE READ）：保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读；<br>序列化（SERIALIZABLE）：最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读，但是效率最低。<br>隔离级别越高，数据库事务并发执行性能越差，能处理的操作越少。所以一般地，推荐使用REPEATABLE READ级别保证数据的读一致性。对于幻读的问题，可以通过加锁来防止。<br>MySQL支持这四种事务等级，默认事务隔离级别是REPEATABLE READ。Oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，所以Oracle数据库不支持脏读。Oracle数据库默认的事务隔离级别是READ COMMITTED。</p>\n<h2 id=\"各种锁\"><a href=\"#各种锁\" class=\"headerlink\" title=\"各种锁\"></a>各种锁</h2><p>下面总结一下MySQL中的锁，有好几种分类。其它RDBMS也差不多是这样。</p>\n<h3 id=\"首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。\"><a href=\"#首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。\" class=\"headerlink\" title=\"首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。\"></a>首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。</h3><p>乐观锁，顾名思义就是非常乐观，非常相信真善美，每次去读数据都认为其它事务没有在写数据，所以就不上锁，快乐的读取数据，而只在提交数据的时候判断其它事务是否搞过这个数据了，如果搞过就rollback。乐观锁相当于一种检测冲突的手段，可通过为记录添加版本或添加时间戳来实现。</p>\n<p>悲观锁，对其它事务抱有保守的态度，每次去读数据都认为其它事务想要作祟，所以每次读数据的时候都会上锁，直到取出数据。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性，但随之而来的是各种开销。悲观锁相当于一种避免冲突的手段。<br>选择标准：如果并发量不大，或数据冲突的后果不严重，则可以使用乐观锁；而如果并发量大或数据冲突后果比较严重（对用户不友好），那么就使用悲观锁。</p>\n<h3 id=\"从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。\"><a href=\"#从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。\" class=\"headerlink\" title=\"从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。\"></a>从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。</h3><p>理解：</p>\n<p>持有S锁的事务只读不可写。如果事务A对数据D加上S锁后，其它事务只能对D加上S锁而不能加X锁。<br>持有X锁的事务可读可写。如果事务A对数据D加上X锁后，其它事务不能再对D加锁，直到A对D的锁解除。<br>从锁的粒度角度，主要分为表级锁（Table Lock）和行级锁（Row Lock）。<br>表级锁将整个表加锁，性能开销最小。用户可以同时进行读操作。当一个用户对表进行写操作时，用户可以获得一个写锁，写锁禁止其他的用户读写操作。写锁比读锁的优先级更高，即使有读操作已排在队列中，一个被申请的写锁仍可以排在所队列的前列。<br>行级锁仅对指定的记录进行加锁，这样其它进程可以对同一个表中的其它记录进行读写操作。行级锁粒度最小，开销大，能够支持高并发，可能会出现死锁。</p>\n<h3 id=\"MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\"><a href=\"#MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\" class=\"headerlink\" title=\"MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。\"></a>MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。</h3><p>还有BDB引擎使用页级锁，即一次锁定一组记录，并发性介于行级锁和表级锁之间。</p>\n<h3 id=\"三级锁协议\"><a href=\"#三级锁协议\" class=\"headerlink\" title=\"三级锁协议\"></a>三级锁协议</h3><p>三级加锁协议是为了保证正确的事务并发操作，事务在读、写数据库对象是需要遵循的加锁规则。</p>\n<p>一级封锁协议：事务T在修改数据R之前必须对它加X锁，直到事务结束方可释放。而若事务T只是读数据，不进行修改，则不需加锁，因此一级加锁协议下可能会出现脏读和不可重复读。<br>二级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加S锁，直到读取完毕以后释放。二级加锁协议下可能会出现不可重复读。<br>三级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加X锁，直到事务结束方可释放。三级加锁协议避免了脏读和不可重复读的问题。</p>\n","sticky":0},{"title":"使用Jenkins配置Git和Maven的自动化构建Tomcat项目","date":"2016-05-30T14:50:38.000Z","_content":"\n\n### 0- 前置条件\n安装jdk和tomcat\n我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。\nJenkins服务器使用8080端口，mvc项目tomcat使用8081端口。\n\n### 1 - 部署Jenkins\n\n官网下载http://jenkins-ci.org/\n我下载的是最新的2.5版本\n下载得到一个jenkins.war的war包\n可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行\n我这里是放到tomcat，启动tomcat即可.\n启动后可以在http://localhost:8080/jenkins/，看到Jenkins已经在运行\n第一次进入，需要你输入一个key,会提示您在/root/.jenkins/...某个路径下找到\n进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.\n\n### 2 - 安装相关插件\n我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。\n这两个基本是默认安装好了的.\n\n### 3 - 安装git和maven\n\n安装git\n```\nyum install git\n```\n安装maven\n```\n1、官网找到最新版的安装包：\nhttp://maven.apache.org/download.cgi\n\n拷贝文件名为 *-bin.tar.gz 的链接地址；\n\n2、下载\n# wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz\n\n3、解压\n# tar xvf apache-maven-3.3.3-bin.tar.gz\n\n如果需要：移动到其他目录\n建立软连接：# ln -s apache-maven-3.3.3 maven\n\n4、配置环境变量\n# vi /etc/profile\nexport M2_HOME=/usr/local/apache-maven\nexport PATH=$PATH:$M2_HOME/bin\n\n# source /etc/profile\n\n5、验证是否安装成功\n# mvn -version\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)\nMaven home: /opt/app/maven\nJava version: 1.8.0_51, vendor: Oracle Corporation\nJava home: /usr/java/jdk1.8.0_51/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.10.0-229.el7.x86_64\", arch: \"amd64\", family: \"unix\"\n```\n\n### 4 - 配置jdk和maven路径等\n\n选择\"系统管理\" -> \"Global Tool Configuration\"\n在里面配置好jdk，maven的路径，只需要配置它们的根路径.\n\n### 5 - 创建任务，配置项目信息\n\n选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.\n![](/images/jenkins-001.png)\n进入项目配置.\n填写项目名称\n填写Repository URL\n我这里使用的是一个git上的一个建议springmvc项目\nhttps://github.com/bingyue/easy-springmvc-maven\n如果需要，也可以配置一下构建后发送邮件到您的邮箱\n![](/images/jenkins-002.png)\n\n### 6 - 配置构建成功后的动作，添加shell\n![](/images/jenkins-003.png)\n配置项目中的“Post Steps”，设置构建完成后的动作.\n这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。\n选择Run only if build succeeds or is unstable ，点击添加Execute Shell：\nshell脚本:\n```\n#!/bin/bash\n#copy file and restart tomcat\n\ntomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65\nproject=easy-springmvc-maven\nwar_name=easy-springmvc-maven.war\nwar_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target\nserver_port=8081\nfile_path=/root/.jenkins/workspace/jenkins-test/target\n\nnow=$(date +\"%Y%m%d%H%M%S\")\necho \"the shell execute time is ${now}\"\n\necho `lsof -n -P -t -i :${server_port}`\ntomcat_pid=`lsof -n -P -t -i :${server_port}`\necho \"the tomcat_pid is ${tomcat_pid}\"\n\nif [ \"${tomcat_pid}\" != \"\" ]; then\n   kill -9 $tomcat_pid\n   echo \"kill the server\"\nfi\n\necho \"rm ${tomcat_path}/webapps/${war_name}\"\nrm ${tomcat_path}/webapps/${war_name}\n\necho \"rm -rf ${tomcat_path}/webapps/${project}\"\nrm -rf ${tomcat_path}/webapps/${project}\n\ncd $file_path\nif [ -f ${war_name} ]; then\n   cp ${war_name} ${tomcat_path}/webapps\n   echo \"cp war to webapps finished\"\nelse\n   echo \"${war_name} unexists\"\nfi\n\ncd $tomcat_path/bin\necho \"run startup\"\nsudo ./startup.sh\necho \"server restarted\"\n```\n我这里是在/usr/local/tomcat/apache-tomcat-7.0.65\n这个路径下配置了另外一个tomcat来运行测试的web项目.\nshell脚本启动tomcat的命令\"./startup.sh\"，注意要使用sudo\n\n\n\n### 7 - 运行构建项目\n打开项目的主面板，直接点击绿色的运行任务构建按钮。\n\ndone!\n\n### 8 - 其他\n这个例子使用了同一台服务器部署Jenkins和实际项目。\n实际应用则常用法是Jenkins单独部署，\n所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。\n并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。\n","source":"_posts/使用Jenkins配置Git和Maven的自动化构建Tomcat项目.md","raw":"---\ntitle: 使用Jenkins配置Git和Maven的自动化构建Tomcat项目\ndate: 2016-05-30 22:50:38\ntags: [java, jenkins, 持续集成, git, 自动化构建]\n---\n\n\n### 0- 前置条件\n安装jdk和tomcat\n我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。\nJenkins服务器使用8080端口，mvc项目tomcat使用8081端口。\n\n### 1 - 部署Jenkins\n\n官网下载http://jenkins-ci.org/\n我下载的是最新的2.5版本\n下载得到一个jenkins.war的war包\n可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行\n我这里是放到tomcat，启动tomcat即可.\n启动后可以在http://localhost:8080/jenkins/，看到Jenkins已经在运行\n第一次进入，需要你输入一个key,会提示您在/root/.jenkins/...某个路径下找到\n进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.\n\n### 2 - 安装相关插件\n我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。\n这两个基本是默认安装好了的.\n\n### 3 - 安装git和maven\n\n安装git\n```\nyum install git\n```\n安装maven\n```\n1、官网找到最新版的安装包：\nhttp://maven.apache.org/download.cgi\n\n拷贝文件名为 *-bin.tar.gz 的链接地址；\n\n2、下载\n# wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz\n\n3、解压\n# tar xvf apache-maven-3.3.3-bin.tar.gz\n\n如果需要：移动到其他目录\n建立软连接：# ln -s apache-maven-3.3.3 maven\n\n4、配置环境变量\n# vi /etc/profile\nexport M2_HOME=/usr/local/apache-maven\nexport PATH=$PATH:$M2_HOME/bin\n\n# source /etc/profile\n\n5、验证是否安装成功\n# mvn -version\nApache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)\nMaven home: /opt/app/maven\nJava version: 1.8.0_51, vendor: Oracle Corporation\nJava home: /usr/java/jdk1.8.0_51/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.10.0-229.el7.x86_64\", arch: \"amd64\", family: \"unix\"\n```\n\n### 4 - 配置jdk和maven路径等\n\n选择\"系统管理\" -> \"Global Tool Configuration\"\n在里面配置好jdk，maven的路径，只需要配置它们的根路径.\n\n### 5 - 创建任务，配置项目信息\n\n选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.\n![](/images/jenkins-001.png)\n进入项目配置.\n填写项目名称\n填写Repository URL\n我这里使用的是一个git上的一个建议springmvc项目\nhttps://github.com/bingyue/easy-springmvc-maven\n如果需要，也可以配置一下构建后发送邮件到您的邮箱\n![](/images/jenkins-002.png)\n\n### 6 - 配置构建成功后的动作，添加shell\n![](/images/jenkins-003.png)\n配置项目中的“Post Steps”，设置构建完成后的动作.\n这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。\n选择Run only if build succeeds or is unstable ，点击添加Execute Shell：\nshell脚本:\n```\n#!/bin/bash\n#copy file and restart tomcat\n\ntomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65\nproject=easy-springmvc-maven\nwar_name=easy-springmvc-maven.war\nwar_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target\nserver_port=8081\nfile_path=/root/.jenkins/workspace/jenkins-test/target\n\nnow=$(date +\"%Y%m%d%H%M%S\")\necho \"the shell execute time is ${now}\"\n\necho `lsof -n -P -t -i :${server_port}`\ntomcat_pid=`lsof -n -P -t -i :${server_port}`\necho \"the tomcat_pid is ${tomcat_pid}\"\n\nif [ \"${tomcat_pid}\" != \"\" ]; then\n   kill -9 $tomcat_pid\n   echo \"kill the server\"\nfi\n\necho \"rm ${tomcat_path}/webapps/${war_name}\"\nrm ${tomcat_path}/webapps/${war_name}\n\necho \"rm -rf ${tomcat_path}/webapps/${project}\"\nrm -rf ${tomcat_path}/webapps/${project}\n\ncd $file_path\nif [ -f ${war_name} ]; then\n   cp ${war_name} ${tomcat_path}/webapps\n   echo \"cp war to webapps finished\"\nelse\n   echo \"${war_name} unexists\"\nfi\n\ncd $tomcat_path/bin\necho \"run startup\"\nsudo ./startup.sh\necho \"server restarted\"\n```\n我这里是在/usr/local/tomcat/apache-tomcat-7.0.65\n这个路径下配置了另外一个tomcat来运行测试的web项目.\nshell脚本启动tomcat的命令\"./startup.sh\"，注意要使用sudo\n\n\n\n### 7 - 运行构建项目\n打开项目的主面板，直接点击绿色的运行任务构建按钮。\n\ndone!\n\n### 8 - 其他\n这个例子使用了同一台服务器部署Jenkins和实际项目。\n实际应用则常用法是Jenkins单独部署，\n所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。\n并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。\n","slug":"使用Jenkins配置Git和Maven的自动化构建Tomcat项目","published":1,"updated":"2016-05-30T15:05:26.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usvy002p00uun9vj9nin","content":"<h3 id=\"0-前置条件\"><a href=\"#0-前置条件\" class=\"headerlink\" title=\"0- 前置条件\"></a>0- 前置条件</h3><p>安装jdk和tomcat<br>我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。<br>Jenkins服务器使用8080端口，mvc项目tomcat使用8081端口。</p>\n<h3 id=\"1-部署Jenkins\"><a href=\"#1-部署Jenkins\" class=\"headerlink\" title=\"1 - 部署Jenkins\"></a>1 - 部署Jenkins</h3><p>官网下载<a href=\"http://jenkins-ci.org/\" target=\"_blank\" rel=\"external\">http://jenkins-ci.org/</a><br>我下载的是最新的2.5版本<br>下载得到一个jenkins.war的war包<br>可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行<br>我这里是放到tomcat，启动tomcat即可.<br>启动后可以在<a href=\"http://localhost:8080/jenkins/，看到Jenkins已经在运行\">http://localhost:8080/jenkins/，看到Jenkins已经在运行</a><br>第一次进入，需要你输入一个key,会提示您在/root/.jenkins/…某个路径下找到<br>进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.</p>\n<h3 id=\"2-安装相关插件\"><a href=\"#2-安装相关插件\" class=\"headerlink\" title=\"2 - 安装相关插件\"></a>2 - 安装相关插件</h3><p>我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。<br>这两个基本是默认安装好了的.</p>\n<h3 id=\"3-安装git和maven\"><a href=\"#3-安装git和maven\" class=\"headerlink\" title=\"3 - 安装git和maven\"></a>3 - 安装git和maven</h3><p>安装git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure></p>\n<p>安装maven<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、官网找到最新版的安装包：</span><br><span class=\"line\">http://maven.apache.org/download.cgi</span><br><span class=\"line\"></span><br><span class=\"line\">拷贝文件名为 *-bin.tar.gz 的链接地址；</span><br><span class=\"line\"></span><br><span class=\"line\">2、下载</span><br><span class=\"line\"># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">3、解压</span><br><span class=\"line\"># tar xvf apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">如果需要：移动到其他目录</span><br><span class=\"line\">建立软连接：# ln -s apache-maven-3.3.3 maven</span><br><span class=\"line\"></span><br><span class=\"line\">4、配置环境变量</span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\">export M2_HOME=/usr/local/apache-maven</span><br><span class=\"line\">export PATH=$PATH:$M2_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">5、验证是否安装成功</span><br><span class=\"line\"># mvn -version</span><br><span class=\"line\">Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)</span><br><span class=\"line\">Maven home: /opt/app/maven</span><br><span class=\"line\">Java version: 1.8.0_51, vendor: Oracle Corporation</span><br><span class=\"line\">Java home: /usr/java/jdk1.8.0_51/jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;3.10.0-229.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-配置jdk和maven路径等\"><a href=\"#4-配置jdk和maven路径等\" class=\"headerlink\" title=\"4 - 配置jdk和maven路径等\"></a>4 - 配置jdk和maven路径等</h3><p>选择”系统管理” -&gt; “Global Tool Configuration”<br>在里面配置好jdk，maven的路径，只需要配置它们的根路径.</p>\n<h3 id=\"5-创建任务，配置项目信息\"><a href=\"#5-创建任务，配置项目信息\" class=\"headerlink\" title=\"5 - 创建任务，配置项目信息\"></a>5 - 创建任务，配置项目信息</h3><p>选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.<br><img src=\"/images/jenkins-001.png\" alt=\"\"><br>进入项目配置.<br>填写项目名称<br>填写Repository URL<br>我这里使用的是一个git上的一个建议springmvc项目<br><a href=\"https://github.com/bingyue/easy-springmvc-maven\" target=\"_blank\" rel=\"external\">https://github.com/bingyue/easy-springmvc-maven</a><br>如果需要，也可以配置一下构建后发送邮件到您的邮箱<br><img src=\"/images/jenkins-002.png\" alt=\"\"></p>\n<h3 id=\"6-配置构建成功后的动作，添加shell\"><a href=\"#6-配置构建成功后的动作，添加shell\" class=\"headerlink\" title=\"6 - 配置构建成功后的动作，添加shell\"></a>6 - 配置构建成功后的动作，添加shell</h3><p><img src=\"/images/jenkins-003.png\" alt=\"\"><br>配置项目中的“Post Steps”，设置构建完成后的动作.<br>这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。<br>选择Run only if build succeeds or is unstable ，点击添加Execute Shell：<br>shell脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#copy file and restart tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">tomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65</span><br><span class=\"line\">project=easy-springmvc-maven</span><br><span class=\"line\">war_name=easy-springmvc-maven.war</span><br><span class=\"line\">war_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target</span><br><span class=\"line\">server_port=8081</span><br><span class=\"line\">file_path=/root/.jenkins/workspace/jenkins-test/target</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date +&quot;%Y%m%d%H%M%S&quot;)</span><br><span class=\"line\">echo &quot;the shell execute time is $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">tomcat_pid=`lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">echo &quot;the tomcat_pid is $&#123;tomcat_pid&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$&#123;tomcat_pid&#125;&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">   kill -9 $tomcat_pid</span><br><span class=\"line\">   echo &quot;kill the server&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;&quot;</span><br><span class=\"line\">rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;&quot;</span><br><span class=\"line\">rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $file_path</span><br><span class=\"line\">if [ -f $&#123;war_name&#125; ]; then</span><br><span class=\"line\">   cp $&#123;war_name&#125; $&#123;tomcat_path&#125;/webapps</span><br><span class=\"line\">   echo &quot;cp war to webapps finished&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;war_name&#125; unexists&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path/bin</span><br><span class=\"line\">echo &quot;run startup&quot;</span><br><span class=\"line\">sudo ./startup.sh</span><br><span class=\"line\">echo &quot;server restarted&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我这里是在/usr/local/tomcat/apache-tomcat-7.0.65<br>这个路径下配置了另外一个tomcat来运行测试的web项目.<br>shell脚本启动tomcat的命令”./startup.sh”，注意要使用sudo</p>\n<h3 id=\"7-运行构建项目\"><a href=\"#7-运行构建项目\" class=\"headerlink\" title=\"7 - 运行构建项目\"></a>7 - 运行构建项目</h3><p>打开项目的主面板，直接点击绿色的运行任务构建按钮。</p>\n<p>done!</p>\n<h3 id=\"8-其他\"><a href=\"#8-其他\" class=\"headerlink\" title=\"8 - 其他\"></a>8 - 其他</h3><p>这个例子使用了同一台服务器部署Jenkins和实际项目。<br>实际应用则常用法是Jenkins单独部署，<br>所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。<br>并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。</p>\n","excerpt":"","more":"<h3 id=\"0-前置条件\"><a href=\"#0-前置条件\" class=\"headerlink\" title=\"0- 前置条件\"></a>0- 前置条件</h3><p>安装jdk和tomcat<br>我这里选择同一台服务器安装两个tomcat，一个tomcat作为Jenkins的容器，另外一个tomcat作为简单mvc项目的部署服务器。<br>Jenkins服务器使用8080端口，mvc项目tomcat使用8081端口。</p>\n<h3 id=\"1-部署Jenkins\"><a href=\"#1-部署Jenkins\" class=\"headerlink\" title=\"1 - 部署Jenkins\"></a>1 - 部署Jenkins</h3><p>官网下载<a href=\"http://jenkins-ci.org/\">http://jenkins-ci.org/</a><br>我下载的是最新的2.5版本<br>下载得到一个jenkins.war的war包<br>可以直接使用java -j jenkins.war运行，或者把war包放到tomcat运行<br>我这里是放到tomcat，启动tomcat即可.<br>启动后可以在<a href=\"http://localhost:8080/jenkins/，看到Jenkins已经在运行\">http://localhost:8080/jenkins/，看到Jenkins已经在运行</a><br>第一次进入，需要你输入一个key,会提示您在/root/.jenkins/…某个路径下找到<br>进入后会提示你安装一些插件，根据需要安装即可，或者直接安装它提供的一键建议安装.</p>\n<h3 id=\"2-安装相关插件\"><a href=\"#2-安装相关插件\" class=\"headerlink\" title=\"2 - 安装相关插件\"></a>2 - 安装相关插件</h3><p>我这里需要git plugin和maven plugin，可以在插件管理处搜索安装。<br>这两个基本是默认安装好了的.</p>\n<h3 id=\"3-安装git和maven\"><a href=\"#3-安装git和maven\" class=\"headerlink\" title=\"3 - 安装git和maven\"></a>3 - 安装git和maven</h3><p>安装git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure></p>\n<p>安装maven<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、官网找到最新版的安装包：</span><br><span class=\"line\">http://maven.apache.org/download.cgi</span><br><span class=\"line\"></span><br><span class=\"line\">拷贝文件名为 *-bin.tar.gz 的链接地址；</span><br><span class=\"line\"></span><br><span class=\"line\">2、下载</span><br><span class=\"line\"># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">3、解压</span><br><span class=\"line\"># tar xvf apache-maven-3.3.3-bin.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">如果需要：移动到其他目录</span><br><span class=\"line\">建立软连接：# ln -s apache-maven-3.3.3 maven</span><br><span class=\"line\"></span><br><span class=\"line\">4、配置环境变量</span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\">export M2_HOME=/usr/local/apache-maven</span><br><span class=\"line\">export PATH=$PATH:$M2_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">5、验证是否安装成功</span><br><span class=\"line\"># mvn -version</span><br><span class=\"line\">Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)</span><br><span class=\"line\">Maven home: /opt/app/maven</span><br><span class=\"line\">Java version: 1.8.0_51, vendor: Oracle Corporation</span><br><span class=\"line\">Java home: /usr/java/jdk1.8.0_51/jre</span><br><span class=\"line\">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;3.10.0-229.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-配置jdk和maven路径等\"><a href=\"#4-配置jdk和maven路径等\" class=\"headerlink\" title=\"4 - 配置jdk和maven路径等\"></a>4 - 配置jdk和maven路径等</h3><p>选择”系统管理” -&gt; “Global Tool Configuration”<br>在里面配置好jdk，maven的路径，只需要配置它们的根路径.</p>\n<h3 id=\"5-创建任务，配置项目信息\"><a href=\"#5-创建任务，配置项目信息\" class=\"headerlink\" title=\"5 - 创建任务，配置项目信息\"></a>5 - 创建任务，配置项目信息</h3><p>选择“新建”，填写项目任务名，并选择“构建一个maven项目”，保存.<br><img src=\"/images/jenkins-001.png\" alt=\"\"><br>进入项目配置.<br>填写项目名称<br>填写Repository URL<br>我这里使用的是一个git上的一个建议springmvc项目<br><a href=\"https://github.com/bingyue/easy-springmvc-maven\">https://github.com/bingyue/easy-springmvc-maven</a><br>如果需要，也可以配置一下构建后发送邮件到您的邮箱<br><img src=\"/images/jenkins-002.png\" alt=\"\"></p>\n<h3 id=\"6-配置构建成功后的动作，添加shell\"><a href=\"#6-配置构建成功后的动作，添加shell\" class=\"headerlink\" title=\"6 - 配置构建成功后的动作，添加shell\"></a>6 - 配置构建成功后的动作，添加shell</h3><p><img src=\"/images/jenkins-003.png\" alt=\"\"><br>配置项目中的“Post Steps”，设置构建完成后的动作.<br>这里我设置为将war包拷贝到Tomcat目录，删除项目原来的内容文件夹，并重启Tomcat。<br>选择Run only if build succeeds or is unstable ，点击添加Execute Shell：<br>shell脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#copy file and restart tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">tomcat_path=/usr/local/tomcat/apache-tomcat-7.0.65</span><br><span class=\"line\">project=easy-springmvc-maven</span><br><span class=\"line\">war_name=easy-springmvc-maven.war</span><br><span class=\"line\">war_path=http://192.168.1.119:8080/jenkins/job/jenkins-test/ws/target</span><br><span class=\"line\">server_port=8081</span><br><span class=\"line\">file_path=/root/.jenkins/workspace/jenkins-test/target</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date +&quot;%Y%m%d%H%M%S&quot;)</span><br><span class=\"line\">echo &quot;the shell execute time is $&#123;now&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">tomcat_pid=`lsof -n -P -t -i :$&#123;server_port&#125;`</span><br><span class=\"line\">echo &quot;the tomcat_pid is $&#123;tomcat_pid&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$&#123;tomcat_pid&#125;&quot; != &quot;&quot; ]; then</span><br><span class=\"line\">   kill -9 $tomcat_pid</span><br><span class=\"line\">   echo &quot;kill the server&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;&quot;</span><br><span class=\"line\">rm $&#123;tomcat_path&#125;/webapps/$&#123;war_name&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;&quot;</span><br><span class=\"line\">rm -rf $&#123;tomcat_path&#125;/webapps/$&#123;project&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cd $file_path</span><br><span class=\"line\">if [ -f $&#123;war_name&#125; ]; then</span><br><span class=\"line\">   cp $&#123;war_name&#125; $&#123;tomcat_path&#125;/webapps</span><br><span class=\"line\">   echo &quot;cp war to webapps finished&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;war_name&#125; unexists&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path/bin</span><br><span class=\"line\">echo &quot;run startup&quot;</span><br><span class=\"line\">sudo ./startup.sh</span><br><span class=\"line\">echo &quot;server restarted&quot;</span><br></pre></td></tr></table></figure></p>\n<p>我这里是在/usr/local/tomcat/apache-tomcat-7.0.65<br>这个路径下配置了另外一个tomcat来运行测试的web项目.<br>shell脚本启动tomcat的命令”./startup.sh”，注意要使用sudo</p>\n<h3 id=\"7-运行构建项目\"><a href=\"#7-运行构建项目\" class=\"headerlink\" title=\"7 - 运行构建项目\"></a>7 - 运行构建项目</h3><p>打开项目的主面板，直接点击绿色的运行任务构建按钮。</p>\n<p>done!</p>\n<h3 id=\"8-其他\"><a href=\"#8-其他\" class=\"headerlink\" title=\"8 - 其他\"></a>8 - 其他</h3><p>这个例子使用了同一台服务器部署Jenkins和实际项目。<br>实际应用则常用法是Jenkins单独部署，<br>所有别的要部署的项目，自己拥有服务器，为每个项目都创建Jenkins任务，在项目编译成功后，到Jenkins服务器下载编译好的部署包，然后依旧使用shell脚本完成这一切。<br>并且，可以为不同的部署环境配置不同的任务。一切都是可以定制的。</p>\n","sticky":0},{"title":"[使用spring-boot+spring-cloud一步步搭建微服务架构]一-开始一个spring-boot应用","date":"2016-07-11T12:24:25.000Z","_content":"\n## 一. 目标愿景\n\n**我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构**\n本系列demo项目githu地址：\nhttps://github.com/YihuaWanglv/lannisi\n\n### 1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\n\n之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。\n这个方案是比较流行的方案之一，但是有几点未达理想的地方：\n- 1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。\n- 2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。\n- 3) 服务提供者和消费者都需要使用xml文件配置，不优雅。\n\n### 2. 为什么使用Spring Cloud ？\n\nSpring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。\nSpring Cloud有什么特点？\n- 1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。\n- 2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。\n- 3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。\n\n### 3. 为什么使用spring boot？\n\n- 1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。\n- 2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。\n- 3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n\n## 二. 开始第一个springboot项目\n在一切开始之前，我们首先要知道如何开始一个springboot项目。\n\n### 1. 创建一个空的maven项目，pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2. 编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 3. 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\nhelloword项目也可参照：https://github.com/YihuaWanglv/lannisi 下的boot-sample-helloword项目。\nhttps://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword","source":"_posts/使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用.md","raw":"---\ntitle: '[使用spring-boot+spring-cloud一步步搭建微服务架构]一-开始一个spring-boot应用'\ndate: 2016-07-11 20:24:25\ntags: [java, spring boot, spring cloud, 微服务, 使用spring-boot+spring-cloud一步步搭建微服务架构]\n---\n\n## 一. 目标愿景\n\n**我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构**\n本系列demo项目githu地址：\nhttps://github.com/YihuaWanglv/lannisi\n\n### 1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\n\n之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。\n这个方案是比较流行的方案之一，但是有几点未达理想的地方：\n- 1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。\n- 2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。\n- 3) 服务提供者和消费者都需要使用xml文件配置，不优雅。\n\n### 2. 为什么使用Spring Cloud ？\n\nSpring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。\nSpring Cloud有什么特点？\n- 1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。\n- 2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。\n- 3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。\n\n### 3. 为什么使用spring boot？\n\n- 1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。\n- 2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。\n- 3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.\n\n\n## 二. 开始第一个springboot项目\n在一切开始之前，我们首先要知道如何开始一个springboot项目。\n\n### 1. 创建一个空的maven项目，pom.xml中添加maven依赖\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2. 编写项目启动入口App.java\n```\n@SpringBootApplication\npublic class App \n{\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\nok! done!\n这样就已经能直接使用spring boot了.\n启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。\n\n### 3. 再进一步，为应用引入spring mvc\n```\n@Controller\npublic class SampleController {\n\n    \n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        String data = \"\";\n        return \"Hello World!\";\n    }\n}\n```\n\n\n启动App.java，访问localhost:8080, 即可遇见“Hello World!”\n\nhelloword项目也可参照：https://github.com/YihuaWanglv/lannisi 下的boot-sample-helloword项目。\nhttps://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword","slug":"使用spring-boot-spring-cloud一步步搭建微服务架构-一-开始一个spring-boot应用","published":1,"updated":"2016-07-11T13:30:20.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usw1002q00uufobqo25q","content":"<h2 id=\"一-目标愿景\"><a href=\"#一-目标愿景\" class=\"headerlink\" title=\"一. 目标愿景\"></a>一. 目标愿景</h2><p><strong>我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构</strong><br>本系列demo项目githu地址：<br><a href=\"https://github.com/YihuaWanglv/lannisi\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/lannisi</a></p>\n<h3 id=\"1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"><a href=\"#1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\" class=\"headerlink\" title=\"1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"></a>1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？</h3><p>之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。<br>这个方案是比较流行的方案之一，但是有几点未达理想的地方：</p>\n<ul>\n<li>1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。</li>\n<li>2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。</li>\n<li>3) 服务提供者和消费者都需要使用xml文件配置，不优雅。</li>\n</ul>\n<h3 id=\"2-为什么使用Spring-Cloud-？\"><a href=\"#2-为什么使用Spring-Cloud-？\" class=\"headerlink\" title=\"2. 为什么使用Spring Cloud ？\"></a>2. 为什么使用Spring Cloud ？</h3><p>Spring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。<br>Spring Cloud有什么特点？</p>\n<ul>\n<li>1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。</li>\n<li>2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。</li>\n<li>3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。</li>\n</ul>\n<h3 id=\"3-为什么使用spring-boot？\"><a href=\"#3-为什么使用spring-boot？\" class=\"headerlink\" title=\"3. 为什么使用spring boot？\"></a>3. 为什么使用spring boot？</h3><ul>\n<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>\n<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>\n<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>\n</ul>\n<h2 id=\"二-开始第一个springboot项目\"><a href=\"#二-开始第一个springboot项目\" class=\"headerlink\" title=\"二. 开始第一个springboot项目\"></a>二. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>\n<h3 id=\"1-创建一个空的maven项目，pom-xml中添加maven依赖\"><a href=\"#1-创建一个空的maven项目，pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1. 创建一个空的maven项目，pom.xml中添加maven依赖\"></a>1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2. 编写项目启动入口App.java\"></a>2. 编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"3-再进一步，为应用引入spring-mvc\"><a href=\"#3-再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"3. 再进一步，为应用引入spring mvc\"></a>3. 再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n<p>helloword项目也可参照：<a href=\"https://github.com/YihuaWanglv/lannisi\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/lannisi</a> 下的boot-sample-helloword项目。<br><a href=\"https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword</a></p>\n","excerpt":"","more":"<h2 id=\"一-目标愿景\"><a href=\"#一-目标愿景\" class=\"headerlink\" title=\"一. 目标愿景\"></a>一. 目标愿景</h2><p><strong>我们的目标是：使用spring  boot + spring cloud一步步搭建微服务架构</strong><br>本系列demo项目githu地址：<br><a href=\"https://github.com/YihuaWanglv/lannisi\">https://github.com/YihuaWanglv/lannisi</a></p>\n<h3 id=\"1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"><a href=\"#1-都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\" class=\"headerlink\" title=\"1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？\"></a>1. 都说服务化，以前我们是怎么搭建soa服务的？之前的架构有什么未达理想？</h3><p>之前，一个比较流行的soa服务化方案是dubbo/dubbox+zookeeper，配上spring boot。<br>这个方案是比较流行的方案之一，但是有几点未达理想的地方：</p>\n<ul>\n<li>1) dubbo的性能并不如一些其他服务化开发工具，比如thrift和ice。</li>\n<li>2) dubbo是一个RPC的半完善解决方案，中规中矩，配套的软件基础设施不全。问题定位、熔断和监控方面的问题让人没有那么的放心。</li>\n<li>3) 服务提供者和消费者都需要使用xml文件配置，不优雅。</li>\n</ul>\n<h3 id=\"2-为什么使用Spring-Cloud-？\"><a href=\"#2-为什么使用Spring-Cloud-？\" class=\"headerlink\" title=\"2. 为什么使用Spring Cloud ？\"></a>2. 为什么使用Spring Cloud ？</h3><p>Spring Cloud 提供了一整套分布式服务开发的工具，带着一些问题，我们希望在spring could中寻找答案。<br>Spring Cloud有什么特点？</p>\n<ul>\n<li>1) 集成了springboot与docker，用起来很方便。配置中心，服务中心，服务，客户端等等组件开启，都非常的简单，往往只需几行代码。</li>\n<li>2) 提供了一整套分布式服务开发的工具，从边缘服务的Zuul，到服务发现Eureka ，再到hystrix 熔断机制，是一套完整的生态。特别是hystrix，提供了完整的熔断机制，可以很轻易的引入现有系统。</li>\n<li>3) Spring Cloud有一个不好的地方是，实际编码会有侵入性。</li>\n</ul>\n<h3 id=\"3-为什么使用spring-boot？\"><a href=\"#3-为什么使用spring-boot？\" class=\"headerlink\" title=\"3. 为什么使用spring boot？\"></a>3. 为什么使用spring boot？</h3><ul>\n<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>\n<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>\n<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>\n</ul>\n<h2 id=\"二-开始第一个springboot项目\"><a href=\"#二-开始第一个springboot项目\" class=\"headerlink\" title=\"二. 开始第一个springboot项目\"></a>二. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>\n<h3 id=\"1-创建一个空的maven项目，pom-xml中添加maven依赖\"><a href=\"#1-创建一个空的maven项目，pom-xml中添加maven依赖\" class=\"headerlink\" title=\"1. 创建一个空的maven项目，pom.xml中添加maven依赖\"></a>1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写项目启动入口App-java\"><a href=\"#2-编写项目启动入口App-java\" class=\"headerlink\" title=\"2. 编写项目启动入口App.java\"></a>2. 编写项目启动入口App.java</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(App.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>\n<h3 id=\"3-再进一步，为应用引入spring-mvc\"><a href=\"#3-再进一步，为应用引入spring-mvc\" class=\"headerlink\" title=\"3. 再进一步，为应用引入spring mvc\"></a>3. 再进一步，为应用引入spring mvc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SampleController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    String home() &#123;</span><br><span class=\"line\">        String data = &quot;&quot;;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>\n<p>helloword项目也可参照：<a href=\"https://github.com/YihuaWanglv/lannisi\">https://github.com/YihuaWanglv/lannisi</a> 下的boot-sample-helloword项目。<br><a href=\"https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword\">https://github.com/YihuaWanglv/lannisi/tree/master/boot-sample-helloword</a></p>\n","sticky":0},{"title":"关于java项目中如何读取配置文件","date":"2016-07-22T01:27:32.000Z","_content":"\n# 关于java项目中如何读取配置文件\n\n## - Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\nIf you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:\n```\n<context:property-placeholder\nlocation=\"classpath:dao.properties,\n          classpath:services.properties,\n          classpath:user.properties\"\nignore-unresolvable=\"true\"/>\n```\nor\n```\n    <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <list>\n                <value>classpath:dao.properties</value>\n                <value>classpath:services.properties</value>\n                <value>classpath:user.properties</value>\n            </list>\n        </property> \n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n    </bean>\n```\n\n## - Spring MVC : read file from src/main/resources\n```\nResource resource = new ClassPathResource(fileLocationInClasspath);\nInputStream resourceInputStream = resource.getInputStream();\n```\n\n## - How do I load a resource and use its contents as a string in Spring\n```\n<bean id=\"contents\" class=\"org.apache.commons.io.IOUtils\" factory-method=\"toString\">\n    <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n</bean>\n```\nThis solution requires Apache Commons IO.\n\nAnother solution, suggested by @Parvez, without Apache Commons IO dependency is\n```\n<bean id=\"contents\" class=\"java.lang.String\">\n    <constructor-arg>\n        <bean class=\"org.springframework.util.FileCopyUtils\" factory-method=\"copyToByteArray\">\n            <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n        </bean>     \n    </constructor-arg>\n</bean>\n```","source":"_posts/关于java项目中如何读取配置文件.md","raw":"---\ntitle: 关于java项目中如何读取配置文件\ndate: 2016-07-22 09:27:32\ntags: [java, spring, spring mvc, 读取配置文件, property file]\n---\n\n# 关于java项目中如何读取配置文件\n\n## - Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\nIf you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:\n```\n<context:property-placeholder\nlocation=\"classpath:dao.properties,\n          classpath:services.properties,\n          classpath:user.properties\"\nignore-unresolvable=\"true\"/>\n```\nor\n```\n    <bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n        <property name=\"locations\">\n            <list>\n                <value>classpath:dao.properties</value>\n                <value>classpath:services.properties</value>\n                <value>classpath:user.properties</value>\n            </list>\n        </property> \n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n    </bean>\n```\n\n## - Spring MVC : read file from src/main/resources\n```\nResource resource = new ClassPathResource(fileLocationInClasspath);\nInputStream resourceInputStream = resource.getInputStream();\n```\n\n## - How do I load a resource and use its contents as a string in Spring\n```\n<bean id=\"contents\" class=\"org.apache.commons.io.IOUtils\" factory-method=\"toString\">\n    <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n</bean>\n```\nThis solution requires Apache Commons IO.\n\nAnother solution, suggested by @Parvez, without Apache Commons IO dependency is\n```\n<bean id=\"contents\" class=\"java.lang.String\">\n    <constructor-arg>\n        <bean class=\"org.springframework.util.FileCopyUtils\" factory-method=\"copyToByteArray\">\n            <constructor-arg value=\"classpath:path/to/resource.txt\" type=\"java.io.InputStream\" />\n        </bean>     \n    </constructor-arg>\n</bean>\n```","slug":"关于java项目中如何读取配置文件","published":1,"updated":"2016-07-22T14:04:43.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usw4002r00uuf5gj2us6","content":"<h1 id=\"关于java项目中如何读取配置文件\"><a href=\"#关于java项目中如何读取配置文件\" class=\"headerlink\" title=\"关于java项目中如何读取配置文件\"></a>关于java项目中如何读取配置文件</h1><h2 id=\"Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\"><a href=\"#Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\" class=\"headerlink\" title=\"- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\"></a>- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules</h2><p>If you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder</span><br><span class=\"line\">location=&quot;classpath:dao.properties,</span><br><span class=\"line\">          classpath:services.properties,</span><br><span class=\"line\">          classpath:user.properties&quot;</span><br><span class=\"line\">ignore-unresolvable=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>or<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;propertyConfigurer&quot; class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;locations&quot;&gt;</span><br><span class=\"line\">        &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:dao.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:services.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:user.properties&lt;/value&gt;</span><br><span class=\"line\">        &lt;/list&gt;</span><br><span class=\"line\">    &lt;/property&gt; </span><br><span class=\"line\">    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Spring-MVC-read-file-from-src-main-resources\"><a href=\"#Spring-MVC-read-file-from-src-main-resources\" class=\"headerlink\" title=\"- Spring MVC : read file from src/main/resources\"></a>- Spring MVC : read file from src/main/resources</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resource resource = new ClassPathResource(fileLocationInClasspath);</span><br><span class=\"line\">InputStream resourceInputStream = resource.getInputStream();</span><br></pre></td></tr></table></figure>\n<h2 id=\"How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\"><a href=\"#How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\" class=\"headerlink\" title=\"- How do I load a resource and use its contents as a string in Spring\"></a>- How do I load a resource and use its contents as a string in Spring</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;org.apache.commons.io.IOUtils&quot; factory-method=&quot;toString&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>This solution requires Apache Commons IO.</p>\n<p>Another solution, suggested by @Parvez, without Apache Commons IO dependency is<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;java.lang.String&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg&gt;</span><br><span class=\"line\">        &lt;bean class=&quot;org.springframework.util.FileCopyUtils&quot; factory-method=&quot;copyToByteArray&quot;&gt;</span><br><span class=\"line\">            &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">        &lt;/bean&gt;     </span><br><span class=\"line\">    &lt;/constructor-arg&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"关于java项目中如何读取配置文件\"><a href=\"#关于java项目中如何读取配置文件\" class=\"headerlink\" title=\"关于java项目中如何读取配置文件\"></a>关于java项目中如何读取配置文件</h1><h2 id=\"Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\"><a href=\"#Using-multiple-property-files-via-PropertyPlaceholderConfigurer-in-multiple-projects-modules\" class=\"headerlink\" title=\"- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules\"></a>- Using multiple property files (via PropertyPlaceholderConfigurer) in multiple projects/modules</h2><p>If you ensure that every place holder, in each of the contexts involved, is ignoring unresolvable keys then both of these approaches work. For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder</span><br><span class=\"line\">location=&quot;classpath:dao.properties,</span><br><span class=\"line\">          classpath:services.properties,</span><br><span class=\"line\">          classpath:user.properties&quot;</span><br><span class=\"line\">ignore-unresolvable=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>or<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;propertyConfigurer&quot; class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;locations&quot;&gt;</span><br><span class=\"line\">        &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:dao.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:services.properties&lt;/value&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:user.properties&lt;/value&gt;</span><br><span class=\"line\">        &lt;/list&gt;</span><br><span class=\"line\">    &lt;/property&gt; </span><br><span class=\"line\">    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Spring-MVC-read-file-from-src-main-resources\"><a href=\"#Spring-MVC-read-file-from-src-main-resources\" class=\"headerlink\" title=\"- Spring MVC : read file from src/main/resources\"></a>- Spring MVC : read file from src/main/resources</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resource resource = new ClassPathResource(fileLocationInClasspath);</span><br><span class=\"line\">InputStream resourceInputStream = resource.getInputStream();</span><br></pre></td></tr></table></figure>\n<h2 id=\"How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\"><a href=\"#How-do-I-load-a-resource-and-use-its-contents-as-a-string-in-Spring\" class=\"headerlink\" title=\"- How do I load a resource and use its contents as a string in Spring\"></a>- How do I load a resource and use its contents as a string in Spring</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;org.apache.commons.io.IOUtils&quot; factory-method=&quot;toString&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>This solution requires Apache Commons IO.</p>\n<p>Another solution, suggested by @Parvez, without Apache Commons IO dependency is<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;contents&quot; class=&quot;java.lang.String&quot;&gt;</span><br><span class=\"line\">    &lt;constructor-arg&gt;</span><br><span class=\"line\">        &lt;bean class=&quot;org.springframework.util.FileCopyUtils&quot; factory-method=&quot;copyToByteArray&quot;&gt;</span><br><span class=\"line\">            &lt;constructor-arg value=&quot;classpath:path/to/resource.txt&quot; type=&quot;java.io.InputStream&quot; /&gt;</span><br><span class=\"line\">        &lt;/bean&gt;     </span><br><span class=\"line\">    &lt;/constructor-arg&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n","sticky":0},{"title":"使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository","date":"2017-03-10T14:00:02.000Z","_content":"\n\n# java-github-trending\n\n## what is this?\n[github-trending](https://github.com/trending) 展示了每天趋势较好的一些github项目。\njava-github-trending项目的目的就是每天定时拉取github-trending页面中感兴趣的语言的流行项目，并以日期为分组归档到markdown文件里面，最后提交到github的repository。\n\n- 我的项目github地址：[github-trending](https://github.com/YihuaWanglv/github-trending)\n\n## how to use?\n\n- @Before\n首先要有一个github账号，然后要准备一个运行应用的环境.\n\n### 在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.\n\n### git clone project\n```\ngit clone git@github.com:YihuaWanglv/github-trending.git\n```\n\n### maven package\n```\ncd github-trending\nmvn clean package\n```\n\n### move github-trending.jar to project root path\n\n### 将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar\n```\nchmod +x rungit.sh\nchmon +x github-trending.jar\nnohup java -jar github-trending.jar < /dev/null > /data/logs/github-trending.log 2>&1 &\n```\n\n## how it works?\n\nusing spring @Scheduled as daily task.\nusing Jsoup lib to get and parse page content\nuse java.io lib to create markdown file and append content to md file.\nuse java Runtime class to run a shell to commit and push to github.\n\ntips: 这个功能本身使用简单的java application，再配合linux的cron定时执行shell，即可更简单的做到，但由于一些原因，我使用spring boot来构建这个程序。\n","source":"_posts/使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository.md","raw":"---\ntitle: 使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository\ndate: 2017-03-10 22:00:02\ntags: [java,spring boot,github-trending,Runtime,github-repository]\n---\n\n\n# java-github-trending\n\n## what is this?\n[github-trending](https://github.com/trending) 展示了每天趋势较好的一些github项目。\njava-github-trending项目的目的就是每天定时拉取github-trending页面中感兴趣的语言的流行项目，并以日期为分组归档到markdown文件里面，最后提交到github的repository。\n\n- 我的项目github地址：[github-trending](https://github.com/YihuaWanglv/github-trending)\n\n## how to use?\n\n- @Before\n首先要有一个github账号，然后要准备一个运行应用的环境.\n\n### 在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.\n\n### git clone project\n```\ngit clone git@github.com:YihuaWanglv/github-trending.git\n```\n\n### maven package\n```\ncd github-trending\nmvn clean package\n```\n\n### move github-trending.jar to project root path\n\n### 将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar\n```\nchmod +x rungit.sh\nchmon +x github-trending.jar\nnohup java -jar github-trending.jar < /dev/null > /data/logs/github-trending.log 2>&1 &\n```\n\n## how it works?\n\nusing spring @Scheduled as daily task.\nusing Jsoup lib to get and parse page content\nuse java.io lib to create markdown file and append content to md file.\nuse java Runtime class to run a shell to commit and push to github.\n\ntips: 这个功能本身使用简单的java application，再配合linux的cron定时执行shell，即可更简单的做到，但由于一些原因，我使用spring boot来构建这个程序。\n","slug":"使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository","published":1,"updated":"2017-03-10T14:49:43.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usw8002t00uudxyxzg5k","content":"<h1 id=\"java-github-trending\"><a href=\"#java-github-trending\" class=\"headerlink\" title=\"java-github-trending\"></a>java-github-trending</h1><h2 id=\"what-is-this\"><a href=\"#what-is-this\" class=\"headerlink\" title=\"what is this?\"></a>what is this?</h2><p><a href=\"https://github.com/trending\" target=\"_blank\" rel=\"external\">github-trending</a> 展示了每天趋势较好的一些github项目。<br>java-github-trending项目的目的就是每天定时拉取github-trending页面中感兴趣的语言的流行项目，并以日期为分组归档到markdown文件里面，最后提交到github的repository。</p>\n<ul>\n<li>我的项目github地址：<a href=\"https://github.com/YihuaWanglv/github-trending\" target=\"_blank\" rel=\"external\">github-trending</a></li>\n</ul>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use?\"></a>how to use?</h2><ul>\n<li>@Before<br>首先要有一个github账号，然后要准备一个运行应用的环境.</li>\n</ul>\n<h3 id=\"在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中\"><a href=\"#在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中\" class=\"headerlink\" title=\"在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.\"></a>在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.</h3><h3 id=\"git-clone-project\"><a href=\"#git-clone-project\" class=\"headerlink\" title=\"git clone project\"></a>git clone project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:YihuaWanglv/github-trending.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"maven-package\"><a href=\"#maven-package\" class=\"headerlink\" title=\"maven package\"></a>maven package</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd github-trending</span><br><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n<h3 id=\"move-github-trending-jar-to-project-root-path\"><a href=\"#move-github-trending-jar-to-project-root-path\" class=\"headerlink\" title=\"move github-trending.jar to project root path\"></a>move github-trending.jar to project root path</h3><h3 id=\"将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar\"><a href=\"#将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar\" class=\"headerlink\" title=\"将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar\"></a>将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x rungit.sh</span><br><span class=\"line\">chmon +x github-trending.jar</span><br><span class=\"line\">nohup java -jar github-trending.jar &lt; /dev/null &gt; /data/logs/github-trending.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"how-it-works\"><a href=\"#how-it-works\" class=\"headerlink\" title=\"how it works?\"></a>how it works?</h2><p>using spring @Scheduled as daily task.<br>using Jsoup lib to get and parse page content<br>use java.io lib to create markdown file and append content to md file.<br>use java Runtime class to run a shell to commit and push to github.</p>\n<p>tips: 这个功能本身使用简单的java application，再配合linux的cron定时执行shell，即可更简单的做到，但由于一些原因，我使用spring boot来构建这个程序。</p>\n","excerpt":"","more":"<h1 id=\"java-github-trending\"><a href=\"#java-github-trending\" class=\"headerlink\" title=\"java-github-trending\"></a>java-github-trending</h1><h2 id=\"what-is-this\"><a href=\"#what-is-this\" class=\"headerlink\" title=\"what is this?\"></a>what is this?</h2><p><a href=\"https://github.com/trending\">github-trending</a> 展示了每天趋势较好的一些github项目。<br>java-github-trending项目的目的就是每天定时拉取github-trending页面中感兴趣的语言的流行项目，并以日期为分组归档到markdown文件里面，最后提交到github的repository。</p>\n<ul>\n<li>我的项目github地址：<a href=\"https://github.com/YihuaWanglv/github-trending\">github-trending</a></li>\n</ul>\n<h2 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use?\"></a>how to use?</h2><ul>\n<li>@Before<br>首先要有一个github账号，然后要准备一个运行应用的环境.</li>\n</ul>\n<h3 id=\"在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中\"><a href=\"#在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中\" class=\"headerlink\" title=\"在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.\"></a>在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.</h3><h3 id=\"git-clone-project\"><a href=\"#git-clone-project\" class=\"headerlink\" title=\"git clone project\"></a>git clone project</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:YihuaWanglv/github-trending.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"maven-package\"><a href=\"#maven-package\" class=\"headerlink\" title=\"maven package\"></a>maven package</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd github-trending</span><br><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n<h3 id=\"move-github-trending-jar-to-project-root-path\"><a href=\"#move-github-trending-jar-to-project-root-path\" class=\"headerlink\" title=\"move github-trending.jar to project root path\"></a>move github-trending.jar to project root path</h3><h3 id=\"将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar\"><a href=\"#将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar\" class=\"headerlink\" title=\"将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar\"></a>将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x rungit.sh</span><br><span class=\"line\">chmon +x github-trending.jar</span><br><span class=\"line\">nohup java -jar github-trending.jar &lt; /dev/null &gt; /data/logs/github-trending.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"how-it-works\"><a href=\"#how-it-works\" class=\"headerlink\" title=\"how it works?\"></a>how it works?</h2><p>using spring @Scheduled as daily task.<br>using Jsoup lib to get and parse page content<br>use java.io lib to create markdown file and append content to md file.<br>use java Runtime class to run a shell to commit and push to github.</p>\n<p>tips: 这个功能本身使用简单的java application，再配合linux的cron定时执行shell，即可更简单的做到，但由于一些原因，我使用spring boot来构建这个程序。</p>\n","sticky":0},{"title":"如何使用github-pages和hexo搭建简单blog","date":"2015-12-31T07:41:30.000Z","_content":"\n前言\n- github，写代码必备\n- hexo，一个很方便的静态blog生成系统\n- 还不太熟悉，暂时不放图片\n\n步骤\n### 1.首先得有一个github账号\n没有的得先上github创建一个\n### 2.创建一个repositories\n- Repository name的填写格式是xxx.github.io\n- xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）\n- 创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置\n- 使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog\n- 接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式\n- 最后，点击“Publish page”，你的页面就公布出来了。\n\n### 3.安装hexo\n- 首先安装git\n- 安装node\n- 安装npm\n- 安装hexo\nnpm install hexo-cli -g\nnpm install hexo --save\n\n- hexo初始化\n**根据自己需要创建一个hexo文件夹\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      ├── _drafts\n|      └── _posts\n└── themes\n\n- 安装Hexo插件\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n```\n\n- 本地查看效果\n执行hexo server命令启动，然后访问localhost:4000查看效果\n\n\n### 4.创建一篇文章\n- git shell进入之前创建的hexo文件夹，hexo new \"hello world\"创建一篇新的文章\n\n### 5.同步并发布\n- hexo g 生成静态文件\n- git clone https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\n- 复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内\n\n### 6.提交更改到github\n- git add *\n- git commit -m \"代码提交信息\"\n- git push origin master\n- 输入用户名密码\n\n这样再次访问你github上的blog地址，即可发现内容已更新\n\n### 7.使用hexo别的主题美化blog样式\n- 我这里选用的是简介美观的next主题\n- 在终端窗口下，定位到 Hexo 站点目录下\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n- 启用 NexT 主题\n克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。\n- 验证主题是否启用\n运行 hexo s --debug，并访问 http://localhost:4000，确保站点正确运行\n\n### 8.同步新的更改\n现在要把新的更改同步上github，重新执行步骤5和6即可。\n当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行","source":"_posts/如何使用github-pages和hexo搭建简单blog.md","raw":"---\ntitle: 如何使用github-pages和hexo搭建简单blog\ndate: 2015-12-31 15:41:30\ntags: [git,github pages,hexo,blog]\n---\n\n前言\n- github，写代码必备\n- hexo，一个很方便的静态blog生成系统\n- 还不太熟悉，暂时不放图片\n\n步骤\n### 1.首先得有一个github账号\n没有的得先上github创建一个\n### 2.创建一个repositories\n- Repository name的填写格式是xxx.github.io\n- xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）\n- 创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置\n- 使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog\n- 接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式\n- 最后，点击“Publish page”，你的页面就公布出来了。\n\n### 3.安装hexo\n- 首先安装git\n- 安装node\n- 安装npm\n- 安装hexo\nnpm install hexo-cli -g\nnpm install hexo --save\n\n- hexo初始化\n**根据自己需要创建一个hexo文件夹\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      ├── _drafts\n|      └── _posts\n└── themes\n\n- 安装Hexo插件\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n```\n\n- 本地查看效果\n执行hexo server命令启动，然后访问localhost:4000查看效果\n\n\n### 4.创建一篇文章\n- git shell进入之前创建的hexo文件夹，hexo new \"hello world\"创建一篇新的文章\n\n### 5.同步并发布\n- hexo g 生成静态文件\n- git clone https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\n- 复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内\n\n### 6.提交更改到github\n- git add *\n- git commit -m \"代码提交信息\"\n- git push origin master\n- 输入用户名密码\n\n这样再次访问你github上的blog地址，即可发现内容已更新\n\n### 7.使用hexo别的主题美化blog样式\n- 我这里选用的是简介美观的next主题\n- 在终端窗口下，定位到 Hexo 站点目录下\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n- 启用 NexT 主题\n克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。\n- 验证主题是否启用\n运行 hexo s --debug，并访问 http://localhost:4000，确保站点正确运行\n\n### 8.同步新的更改\n现在要把新的更改同步上github，重新执行步骤5和6即可。\n当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行","slug":"如何使用github-pages和hexo搭建简单blog","published":1,"updated":"2016-02-20T04:02:04.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uswa002u00uunk5dx59s","content":"<p>前言</p>\n<ul>\n<li>github，写代码必备</li>\n<li>hexo，一个很方便的静态blog生成系统</li>\n<li>还不太熟悉，暂时不放图片</li>\n</ul>\n<p>步骤</p>\n<h3 id=\"1-首先得有一个github账号\"><a href=\"#1-首先得有一个github账号\" class=\"headerlink\" title=\"1.首先得有一个github账号\"></a>1.首先得有一个github账号</h3><p>没有的得先上github创建一个</p>\n<h3 id=\"2-创建一个repositories\"><a href=\"#2-创建一个repositories\" class=\"headerlink\" title=\"2.创建一个repositories\"></a>2.创建一个repositories</h3><ul>\n<li>Repository name的填写格式是xxx.github.io</li>\n<li>xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）</li>\n<li>创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置</li>\n<li>使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog</li>\n<li>接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式</li>\n<li>最后，点击“Publish page”，你的页面就公布出来了。</li>\n</ul>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><ul>\n<li>首先安装git</li>\n<li>安装node</li>\n<li>安装npm</li>\n<li><p>安装hexo<br>npm install hexo-cli -g<br>npm install hexo –save</p>\n</li>\n<li><p>hexo初始化<br>**根据自己需要创建一个hexo文件夹<br>$ hexo init <folder><br>$ cd <folder><br>$ npm install<br>新建完成后，指定文件夹的目录如下<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── scripts<br>├── source<br>|      ├── _drafts<br>|      └── _posts<br>└── themes</folder></folder></p>\n</li>\n<li><p>安装Hexo插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地查看效果<br>执行hexo server命令启动，然后访问localhost:4000查看效果</p>\n</li>\n</ul>\n<h3 id=\"4-创建一篇文章\"><a href=\"#4-创建一篇文章\" class=\"headerlink\" title=\"4.创建一篇文章\"></a>4.创建一篇文章</h3><ul>\n<li>git shell进入之前创建的hexo文件夹，hexo new “hello world”创建一篇新的文章</li>\n</ul>\n<h3 id=\"5-同步并发布\"><a href=\"#5-同步并发布\" class=\"headerlink\" title=\"5.同步并发布\"></a>5.同步并发布</h3><ul>\n<li>hexo g 生成静态文件</li>\n<li>git clone <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\" target=\"_blank\" rel=\"external\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地</a></li>\n<li>复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内</li>\n</ul>\n<h3 id=\"6-提交更改到github\"><a href=\"#6-提交更改到github\" class=\"headerlink\" title=\"6.提交更改到github\"></a>6.提交更改到github</h3><ul>\n<li>git add *</li>\n<li>git commit -m “代码提交信息”</li>\n<li>git push origin master</li>\n<li>输入用户名密码</li>\n</ul>\n<p>这样再次访问你github上的blog地址，即可发现内容已更新</p>\n<h3 id=\"7-使用hexo别的主题美化blog样式\"><a href=\"#7-使用hexo别的主题美化blog样式\" class=\"headerlink\" title=\"7.使用hexo别的主题美化blog样式\"></a>7.使用hexo别的主题美化blog样式</h3><ul>\n<li>我这里选用的是简介美观的next主题</li>\n<li>在终端窗口下，定位到 Hexo 站点目录下<br>$ cd your-hexo-site<br>$ git clone <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>\n<li>启用 NexT 主题<br>克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。</li>\n<li>验证主题是否启用<br>运行 hexo s –debug，并访问 <a href=\"http://localhost:4000，确保站点正确运行\">http://localhost:4000，确保站点正确运行</a></li>\n</ul>\n<h3 id=\"8-同步新的更改\"><a href=\"#8-同步新的更改\" class=\"headerlink\" title=\"8.同步新的更改\"></a>8.同步新的更改</h3><p>现在要把新的更改同步上github，重新执行步骤5和6即可。<br>当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行</p>\n","excerpt":"","more":"<p>前言</p>\n<ul>\n<li>github，写代码必备</li>\n<li>hexo，一个很方便的静态blog生成系统</li>\n<li>还不太熟悉，暂时不放图片</li>\n</ul>\n<p>步骤</p>\n<h3 id=\"1-首先得有一个github账号\"><a href=\"#1-首先得有一个github账号\" class=\"headerlink\" title=\"1.首先得有一个github账号\"></a>1.首先得有一个github账号</h3><p>没有的得先上github创建一个</p>\n<h3 id=\"2-创建一个repositories\"><a href=\"#2-创建一个repositories\" class=\"headerlink\" title=\"2.创建一个repositories\"></a>2.创建一个repositories</h3><ul>\n<li>Repository name的填写格式是xxx.github.io</li>\n<li>xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）</li>\n<li>创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置</li>\n<li>使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog</li>\n<li>接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式</li>\n<li>最后，点击“Publish page”，你的页面就公布出来了。</li>\n</ul>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><ul>\n<li>首先安装git</li>\n<li>安装node</li>\n<li>安装npm</li>\n<li><p>安装hexo<br>npm install hexo-cli -g<br>npm install hexo –save</p>\n</li>\n<li><p>hexo初始化<br>**根据自己需要创建一个hexo文件夹<br>$ hexo init <folder><br>$ cd <folder><br>$ npm install<br>新建完成后，指定文件夹的目录如下<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── scripts<br>├── source<br>|      ├── _drafts<br>|      └── _posts<br>└── themes</p>\n</li>\n<li><p>安装Hexo插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地查看效果<br>执行hexo server命令启动，然后访问localhost:4000查看效果</p>\n</li>\n</ul>\n<h3 id=\"4-创建一篇文章\"><a href=\"#4-创建一篇文章\" class=\"headerlink\" title=\"4.创建一篇文章\"></a>4.创建一篇文章</h3><ul>\n<li>git shell进入之前创建的hexo文件夹，hexo new “hello world”创建一篇新的文章</li>\n</ul>\n<h3 id=\"5-同步并发布\"><a href=\"#5-同步并发布\" class=\"headerlink\" title=\"5.同步并发布\"></a>5.同步并发布</h3><ul>\n<li>hexo g 生成静态文件</li>\n<li>git clone <a href=\"https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地\">https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地</a></li>\n<li>复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内</li>\n</ul>\n<h3 id=\"6-提交更改到github\"><a href=\"#6-提交更改到github\" class=\"headerlink\" title=\"6.提交更改到github\"></a>6.提交更改到github</h3><ul>\n<li>git add *</li>\n<li>git commit -m “代码提交信息”</li>\n<li>git push origin master</li>\n<li>输入用户名密码</li>\n</ul>\n<p>这样再次访问你github上的blog地址，即可发现内容已更新</p>\n<h3 id=\"7-使用hexo别的主题美化blog样式\"><a href=\"#7-使用hexo别的主题美化blog样式\" class=\"headerlink\" title=\"7.使用hexo别的主题美化blog样式\"></a>7.使用hexo别的主题美化blog样式</h3><ul>\n<li>我这里选用的是简介美观的next主题</li>\n<li>在终端窗口下，定位到 Hexo 站点目录下<br>$ cd your-hexo-site<br>$ git clone <a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>\n<li>启用 NexT 主题<br>克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。</li>\n<li>验证主题是否启用<br>运行 hexo s –debug，并访问 <a href=\"http://localhost:4000，确保站点正确运行\">http://localhost:4000，确保站点正确运行</a></li>\n</ul>\n<h3 id=\"8-同步新的更改\"><a href=\"#8-同步新的更改\" class=\"headerlink\" title=\"8.同步新的更改\"></a>8.同步新的更改</h3><p>现在要把新的更改同步上github，重新执行步骤5和6即可。<br>当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行</p>\n","sticky":0},{"title":"多版本部署如何使用nginx根据url参数api_version值进行路由","date":"2016-07-26T10:53:07.000Z","_content":"\n\n\n\n## 目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数'api_version'来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\n\n\n## 实际测试场景：\ntomcat部署启动了2个实例：\n- 127.0.0.1:8080\n- 127.0.0.1:8081\n\n本地部署一个nginx服务器，对所有请求进行代理和路由。\n部署的nginx简单配置如下：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    gzip  on;\n    server {\n        listen       80;\n        location /client {\n            if ( $arg_api_version = '1.0.0' ){\n                proxy_pass http://localhost:8080;\n                break;\n            }\n            if ( $arg_api_version = '1.0.1' ){\n                proxy_pass http://localhost:8081;\n                break;\n            }\n            proxy_pass http://localhost:8080;\n        }\n        location / {\n             proxy_pass http://localhost:8080;\n        }\n    }\n}\n```\n\n预先配置好本地host，以便直接使用域名访问。\n```\n127.0.0.1 local.xxx.com\n```\n\n## 说明：\n- 1.“listen       80;”配置nginx监听80端口，接收所有请求。\n- 2.“location /client { ... }”部分将会匹配到所有以“/client”开头的请求\n- 3.“location /client { ... }”部分，通过$http_api_version获取到url中字段名为'api_version'的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass http://localhost:8080;”走8080实例。\n- 4.“location / { ... }” 部分将会匹配其余的所有请求，路由到“http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\n\n\n","source":"_posts/多版本部署如何使用nginx根据url参数api-version值进行路由.md","raw":"---\ntitle: 多版本部署如何使用nginx根据url参数api_version值进行路由\ndate: 2016-07-26 18:53:07\ntags: [冗余部署, nginx, api_version, 路由]\n---\n\n\n\n\n## 目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数'api_version'来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\n\n\n## 实际测试场景：\ntomcat部署启动了2个实例：\n- 127.0.0.1:8080\n- 127.0.0.1:8081\n\n本地部署一个nginx服务器，对所有请求进行代理和路由。\n部署的nginx简单配置如下：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    gzip  on;\n    server {\n        listen       80;\n        location /client {\n            if ( $arg_api_version = '1.0.0' ){\n                proxy_pass http://localhost:8080;\n                break;\n            }\n            if ( $arg_api_version = '1.0.1' ){\n                proxy_pass http://localhost:8081;\n                break;\n            }\n            proxy_pass http://localhost:8080;\n        }\n        location / {\n             proxy_pass http://localhost:8080;\n        }\n    }\n}\n```\n\n预先配置好本地host，以便直接使用域名访问。\n```\n127.0.0.1 local.xxx.com\n```\n\n## 说明：\n- 1.“listen       80;”配置nginx监听80端口，接收所有请求。\n- 2.“location /client { ... }”部分将会匹配到所有以“/client”开头的请求\n- 3.“location /client { ... }”部分，通过$http_api_version获取到url中字段名为'api_version'的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass http://localhost:8080;”走8080实例。\n- 4.“location / { ... }” 部分将会匹配其余的所有请求，路由到“http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\n\n\n","slug":"多版本部署如何使用nginx根据url参数api-version值进行路由","published":1,"updated":"2016-07-26T14:21:26.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uswg002w00uu89gn63ga","content":"<h2 id=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"><a href=\"#目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\" class=\"headerlink\" title=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"></a>目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。</h2><h2 id=\"实际测试场景：\"><a href=\"#实际测试场景：\" class=\"headerlink\" title=\"实际测试场景：\"></a>实际测试场景：</h2><p>tomcat部署启动了2个实例：</p>\n<ul>\n<li>127.0.0.1:8080</li>\n<li>127.0.0.1:8081</li>\n</ul>\n<p>本地部署一个nginx服务器，对所有请求进行代理和路由。<br>部署的nginx简单配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        location /client &#123;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.0&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8080;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.1&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8081;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>预先配置好本地host，以便直接使用域名访问。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 local.xxx.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>1.“listen       80;”配置nginx监听80端口，接收所有请求。</li>\n<li>2.“location /client { … }”部分将会匹配到所有以“/client”开头的请求</li>\n<li>3.“location /client { … }”部分，通过$http_api_version获取到url中字段名为’api_version’的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass <a href=\"http://localhost:8080;”走8080实例。\">http://localhost:8080;”走8080实例。</a></li>\n<li>4.“location / { … }” 部分将会匹配其余的所有请求，路由到“<a href=\"http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\">http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"><a href=\"#目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api-version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\" class=\"headerlink\" title=\"目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。\"></a>目标：实现多版本部署，并且使用nginx根据HTTP请求中的url参数’api_version’来进行请求的路由，将对应版本的请求分发到目标版本实例当中。</h2><h2 id=\"实际测试场景：\"><a href=\"#实际测试场景：\" class=\"headerlink\" title=\"实际测试场景：\"></a>实际测试场景：</h2><p>tomcat部署启动了2个实例：</p>\n<ul>\n<li>127.0.0.1:8080</li>\n<li>127.0.0.1:8081</li>\n</ul>\n<p>本地部署一个nginx服务器，对所有请求进行代理和路由。<br>部署的nginx简单配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        location /client &#123;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.0&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8080;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if ( $arg_api_version = &apos;1.0.1&apos; )&#123;</span><br><span class=\"line\">                proxy_pass http://localhost:8081;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>预先配置好本地host，以便直接使用域名访问。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 local.xxx.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>1.“listen       80;”配置nginx监听80端口，接收所有请求。</li>\n<li>2.“location /client { … }”部分将会匹配到所有以“/client”开头的请求</li>\n<li>3.“location /client { … }”部分，通过$http_api_version获取到url中字段名为’api_version’的参数值，用if判断版本值，做相应的路由。最后如果都没有匹配到，就会匹配最后一行“proxy_pass <a href=\"http://localhost:8080;”走8080实例。\">http://localhost:8080;”走8080实例。</a></li>\n<li>4.“location / { … }” 部分将会匹配其余的所有请求，路由到“<a href=\"http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。\">http://localhost:8080”。这样，除“/client”前缀开头的请求外，都会默认匹配到一个固定的实例。别的请求都不会受到多版本路由配置的影响。</a></li>\n</ul>\n","sticky":0},{"title":"在单服务器上安装部署FastDFS+Nginx","date":"2016-07-07T02:54:21.000Z","_content":"\n# 在单服务器上安装部署FastDFS+Nginx\n\n那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。\n这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）\n我部署的服务系版本是centos6.7\n\n## FastDFS安装配置\n\n### Tracker的安装及配置\n#### 1.安装编译器\n```\nyum install -y gcc gcc-c++\n```\n\n#### 2.下载安装libevent\n```\nwget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz\ntar xvzf libevent-2.0.22-stable.tar.gz\ncd libevent-2.0.22-stable\n./configure\nmake && make install\n```\n\n#### 3.下载安装fastDFS\n```\nwget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz\n（code.google.com已无法访问，可以自己手动下载再上传到服务器）\ntar -xvzf FastDFS_v4.06.tar.gz\ncd FastDFS\n./make.sh\n./make.sh install\n```\n安装成功后/usr/local/bin下会出现一系列fastDFS命令\n\n#### 4.配置tracker\n```\nvim /etc/fdfs/tracker.conf\n```\n修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n\n#### 5.启动tracker\n```\n/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n```\n\n### Storage配置 -> Storage1配置\n正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。\n我这里只部署一个storage一个tracker，并部署在同一个服务器\n\n#### 1~3：参考Tracker安装步骤\n\n#### 4.配置storage\n```\nvim /etc/fdfs/storage.conf\n```\n修改tracker_server=192.168.1.134:22122\n修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n例子：\n```\ngroup_name=group1\nbase_path=/home/yuqing/fastdfs\nstore_path0=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.server_port=8080      #web server的端口改成8080（与nginx 端口一致）\n```\n\n#### 5.启动storage\n```\n/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n```\n启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据\n\n### 安装nginx以及fastdfs-nginx-module模块\nnginx的rewrite模块和cache模块需要先安装pcre和openssl\n#### 安装pcre\n下载pcre\n```\ntar zxvf pcre-8.12.tar.gz\ncd pcre-8.12\n./configure\nmake\nmake install\n```\n\n#### 安装openssl\ncentos下解决办法:\n```\nyum -y install openssl openssl-devel\n```\n\n#### 安装nginx\n```\ncd /home/yihua\nwget http://nginx.org/download/nginx-0.8.55.tar.gz\ntar zxvf nginx-0.8.55.tar.gz\ncd nginx-0.8.55\n./configure --prefix=/opt/nginx --with-http_stub_status_module\nmake && make install\n```\n\n#### 安装fastdfs-nginx-module\n下载并上传fastdfs-nginx-module_v1.15.tar.gz\n```\ntar xzf fastdfs-nginx-module_v1.15.tar.gz\ncd /home/yihua/nginx-0.8.55 \n./configure --add-module=/home/yihua/fastdfs-nginx-module/src\nmake; make install\n```\n\n#### 配置nginx和fastdfs-nginx-module\n```\ncp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs\nvim /etc/fdfs/mod_fastdfs.conf\n```\n修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf\n一般只需改动以下几个参数即可：\n```\nbase_path=/home/yuqing/fastdfs      #保存日志目录\ntracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号\nstorage_server_port=23000            #storage 服务器的端口号\ngroup_name=group1                    #当前服务器的 group 名\nurl_have_group_name = true           #文件 url 中是否有 group 名\nstore_path_count=1                   #存储路径个数，需要和 store_path 个数匹配\nstore_path0=/home/yuqing/fastdfs    #存储路径\nhttp.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）\ngroup_count = 1                      #设置组的个数\n```\n然后在末尾添加分组信息，目前只有一个分组，就只写一个\n```\n[group1]\ngroup_name=group1\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/home/yuqing/fastdfs\n```\n\n建立 M00 至存储目录的符号连接\n```\nln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00\n```\n将 server 段中的 listen 端口号改为 8080：\n```\nvim /usr/local/nginx/conf/nginx.conf\nlisten       8080;\n```\n在 server 段中添加fastdfs的配置\n```\n        location /group1/M00 {\n               root   /home/yuqing/fastdfs/data;\n               ngx_fastdfs_module;\n        }\n```\n\n#### 准备nginx启动脚本\n编辑 /etc/init.d/nginx，如下内容:\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.1.4.7 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n# It has a lot of features, but it's not for everyone.\n# processname: nginx\n \n# pidfile: /usr/local/nginx/logs/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\n \nnginxd=/usr/local/nginx/sbin/nginx\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/usr/local/nginx/logs/nginx.pid\nnginx_lock=/var/lock/subsys/nginx\nRETVAL=0\nprog=\"nginx\"\n \n# Source function library.\n. /etc/rc.d/init.d/functions\n \n# Source networking configuration.\n. /etc/sysconfig/network\n \n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n \n# Start nginx daemons functions.\nstart() {\n    nginx_is_run=`ps -ef | egrep 'nginx:\\s*(worker|master)\\s*process' | wc -l`\n    if [ ${nginx_is_run} -gt 0 ];then\n        echo \"nginx already running....\"\n        exit 1\n    fi\n    echo -n $\"Starting $prog: \"\n    daemon $nginxd -c ${nginx_config}\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && touch ${nginx_lock}\n    return $RETVAL\n}\n \n# Stop nginx daemons functions.\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $nginxd\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && rm -f ${nginx_lock} ${nginx_pid}\n}\n \n# Reload nginx config file\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n \n# See how we were called.\ncase \"$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    reload)\n        reload\n        ;;\n    restart)\n          stop\n        start\n        ;;\n    status)\n        status $prog\n        RETVAL=$?\n        ;;\n    *)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\n```\n\nNginx启动提示找不到libpcre.so.1解决方法\n如果是32位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib\n```\n如果是64位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib64\n```\n\n### 启动nginx\n\n```\n# chmod u+x /etc/init.d/nginx\n# chkconfig --add nginx\n# chkconfig nginx on\n# service nginx start\n正在启动 nginx：                                           [确定]\n# service nginx status\nnginx (pid 26500) 正在运行...\n```\n查看nginx的日志 错误日志logs/error.log 看是否有问题\n\n### 其他\n#### 启动nginx，tracker和storage\n重启tracker：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n重启storage：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n启动nginx：\n/usr/local/nginx/sbin/nginx\n检查nginx状态：\n/usr/local/nginx/sbin/nginx -t\n重启nginx：\n/usr/local/nginx/sbin/nginx -s reload\n\n#### tracker运行\n直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。\n```\n[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker fdfs]# netstat -antp | grep trackerd\ntcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd \n[root@tracker fdfs]# \n```\n\n#### storage运行\n```\n# fdfs_storaged /etc/fdfs/storage.conf restart\n查看端口是否起来\n# netstat -antp | grep storage\ntcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged \n```\n也可以以下命令来监控服务器的状态\n```\n# fdfs_monitor /etc/fdfs/client.conf\n```\n看到ACTIVE,就说明已经成功注册到了tracker。\n\n#### 开机启动\n设置tracker开机自动启动\n```\n[root@tracker tracker]# echo \"/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\" >> /etc/rc.local\n[root@tracker tracker]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker tracker]# \n```\n\n设置storage开机启动\n```\n[root@server1 fdfs]# echo \"/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\" >> /etc/rc.local\n[root@server1 fdfs]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\n```\n\n\n### 使用client测试文件上传\n先配置一下client\nvi /etc/fdfs/client.conf\n保证一下配置：\n```\nbase_path=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.tracker_server_port=8080\n```\nvi test.txt\n\n/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt\n得到：\n```\nThis is FastDFS client test program v4.06\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/\nfor more detail.\n\n[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group:\n        server 1. group_name=, ip_addr=192.168.1.134, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.134, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\n[root@localhost yihua]# This is FastDFS client test program v4.06\n-bash: This: command not found\nCopyright (C) 2008, Happy Fish / YuQing\n\n```\n在浏览器打开http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\n可以看见你的文件。那么就成功了。\n\ndone.","source":"_posts/在单服务器上安装部署FastDFS-Nginx.md","raw":"---\ntitle: 在单服务器上安装部署FastDFS+Nginx\ndate: 2016-07-07 10:54:21\ntags: [linux, centos, FastDFS, Nginx, 图片服务器]\n---\n\n# 在单服务器上安装部署FastDFS+Nginx\n\n那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。\n这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）\n我部署的服务系版本是centos6.7\n\n## FastDFS安装配置\n\n### Tracker的安装及配置\n#### 1.安装编译器\n```\nyum install -y gcc gcc-c++\n```\n\n#### 2.下载安装libevent\n```\nwget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz\ntar xvzf libevent-2.0.22-stable.tar.gz\ncd libevent-2.0.22-stable\n./configure\nmake && make install\n```\n\n#### 3.下载安装fastDFS\n```\nwget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz\n（code.google.com已无法访问，可以自己手动下载再上传到服务器）\ntar -xvzf FastDFS_v4.06.tar.gz\ncd FastDFS\n./make.sh\n./make.sh install\n```\n安装成功后/usr/local/bin下会出现一系列fastDFS命令\n\n#### 4.配置tracker\n```\nvim /etc/fdfs/tracker.conf\n```\n修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n\n#### 5.启动tracker\n```\n/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n```\n\n### Storage配置 -> Storage1配置\n正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。\n我这里只部署一个storage一个tracker，并部署在同一个服务器\n\n#### 1~3：参考Tracker安装步骤\n\n#### 4.配置storage\n```\nvim /etc/fdfs/storage.conf\n```\n修改tracker_server=192.168.1.134:22122\n修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）\n例子：\n```\ngroup_name=group1\nbase_path=/home/yuqing/fastdfs\nstore_path0=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.server_port=8080      #web server的端口改成8080（与nginx 端口一致）\n```\n\n#### 5.启动storage\n```\n/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n```\n启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据\n\n### 安装nginx以及fastdfs-nginx-module模块\nnginx的rewrite模块和cache模块需要先安装pcre和openssl\n#### 安装pcre\n下载pcre\n```\ntar zxvf pcre-8.12.tar.gz\ncd pcre-8.12\n./configure\nmake\nmake install\n```\n\n#### 安装openssl\ncentos下解决办法:\n```\nyum -y install openssl openssl-devel\n```\n\n#### 安装nginx\n```\ncd /home/yihua\nwget http://nginx.org/download/nginx-0.8.55.tar.gz\ntar zxvf nginx-0.8.55.tar.gz\ncd nginx-0.8.55\n./configure --prefix=/opt/nginx --with-http_stub_status_module\nmake && make install\n```\n\n#### 安装fastdfs-nginx-module\n下载并上传fastdfs-nginx-module_v1.15.tar.gz\n```\ntar xzf fastdfs-nginx-module_v1.15.tar.gz\ncd /home/yihua/nginx-0.8.55 \n./configure --add-module=/home/yihua/fastdfs-nginx-module/src\nmake; make install\n```\n\n#### 配置nginx和fastdfs-nginx-module\n```\ncp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs\nvim /etc/fdfs/mod_fastdfs.conf\n```\n修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf\n一般只需改动以下几个参数即可：\n```\nbase_path=/home/yuqing/fastdfs      #保存日志目录\ntracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号\nstorage_server_port=23000            #storage 服务器的端口号\ngroup_name=group1                    #当前服务器的 group 名\nurl_have_group_name = true           #文件 url 中是否有 group 名\nstore_path_count=1                   #存储路径个数，需要和 store_path 个数匹配\nstore_path0=/home/yuqing/fastdfs    #存储路径\nhttp.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）\ngroup_count = 1                      #设置组的个数\n```\n然后在末尾添加分组信息，目前只有一个分组，就只写一个\n```\n[group1]\ngroup_name=group1\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/home/yuqing/fastdfs\n```\n\n建立 M00 至存储目录的符号连接\n```\nln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00\n```\n将 server 段中的 listen 端口号改为 8080：\n```\nvim /usr/local/nginx/conf/nginx.conf\nlisten       8080;\n```\n在 server 段中添加fastdfs的配置\n```\n        location /group1/M00 {\n               root   /home/yuqing/fastdfs/data;\n               ngx_fastdfs_module;\n        }\n```\n\n#### 准备nginx启动脚本\n编辑 /etc/init.d/nginx，如下内容:\n```\n#!/bin/bash\n# nginx Startup script for the Nginx HTTP Server\n# it is v.1.4.7 version.\n# chkconfig: - 85 15\n# description: Nginx is a high-performance web and proxy server.\n# It has a lot of features, but it's not for everyone.\n# processname: nginx\n \n# pidfile: /usr/local/nginx/logs/nginx.pid\n# config: /usr/local/nginx/conf/nginx.conf\n \nnginxd=/usr/local/nginx/sbin/nginx\nnginx_config=/usr/local/nginx/conf/nginx.conf\nnginx_pid=/usr/local/nginx/logs/nginx.pid\nnginx_lock=/var/lock/subsys/nginx\nRETVAL=0\nprog=\"nginx\"\n \n# Source function library.\n. /etc/rc.d/init.d/functions\n \n# Source networking configuration.\n. /etc/sysconfig/network\n \n# Check that networking is up.\n[ ${NETWORKING} = \"no\" ] && exit 0\n[ -x $nginxd ] || exit 0\n \n# Start nginx daemons functions.\nstart() {\n    nginx_is_run=`ps -ef | egrep 'nginx:\\s*(worker|master)\\s*process' | wc -l`\n    if [ ${nginx_is_run} -gt 0 ];then\n        echo \"nginx already running....\"\n        exit 1\n    fi\n    echo -n $\"Starting $prog: \"\n    daemon $nginxd -c ${nginx_config}\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && touch ${nginx_lock}\n    return $RETVAL\n}\n \n# Stop nginx daemons functions.\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $nginxd\n    RETVAL=$?\n    echo\n    [ $RETVAL = 0 ] && rm -f ${nginx_lock} ${nginx_pid}\n}\n \n# Reload nginx config file\nreload() {\n    echo -n $\"Reloading $prog: \"\n    #kill -HUP `cat ${nginx_pid}`\n    killproc $nginxd -HUP\n    RETVAL=$?\n    echo\n}\n \n# See how we were called.\ncase \"$1\" in\n    start)\n        start\n        ;;\n    stop)\n        stop\n        ;;\n    reload)\n        reload\n        ;;\n    restart)\n          stop\n        start\n        ;;\n    status)\n        status $prog\n        RETVAL=$?\n        ;;\n    *)\n        echo $\"Usage: $prog {start|stop|restart|reload|status|help}\"\n        exit 1\nesac\n```\n\nNginx启动提示找不到libpcre.so.1解决方法\n如果是32位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib\n```\n如果是64位系统\n```\nln -s /usr/local/lib/libpcre.so.1 /lib64\n```\n\n### 启动nginx\n\n```\n# chmod u+x /etc/init.d/nginx\n# chkconfig --add nginx\n# chkconfig nginx on\n# service nginx start\n正在启动 nginx：                                           [确定]\n# service nginx status\nnginx (pid 26500) 正在运行...\n```\n查看nginx的日志 错误日志logs/error.log 看是否有问题\n\n### 其他\n#### 启动nginx，tracker和storage\n重启tracker：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n重启storage：\n/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf\n启动nginx：\n/usr/local/nginx/sbin/nginx\n检查nginx状态：\n/usr/local/nginx/sbin/nginx -t\n重启nginx：\n/usr/local/nginx/sbin/nginx -s reload\n\n#### tracker运行\n直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。\n```\n[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker fdfs]# netstat -antp | grep trackerd\ntcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd \n[root@tracker fdfs]# \n```\n\n#### storage运行\n```\n# fdfs_storaged /etc/fdfs/storage.conf restart\n查看端口是否起来\n# netstat -antp | grep storage\ntcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged \n```\n也可以以下命令来监控服务器的状态\n```\n# fdfs_monitor /etc/fdfs/client.conf\n```\n看到ACTIVE,就说明已经成功注册到了tracker。\n\n#### 开机启动\n设置tracker开机自动启动\n```\n[root@tracker tracker]# echo \"/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\" >> /etc/rc.local\n[root@tracker tracker]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart\n[root@tracker tracker]# \n```\n\n设置storage开机启动\n```\n[root@server1 fdfs]# echo \"/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\" >> /etc/rc.local\n[root@server1 fdfs]# cat /etc/rc.local\n#!/bin/sh\n#\n# This script will be executed *after* all the other init scripts.\n# You can put your own initialization stuff in here if you don't\n# want to do the full Sys V style init stuff.\ntouch /var/lock/subsys/local\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart\n```\n\n\n### 使用client测试文件上传\n先配置一下client\nvi /etc/fdfs/client.conf\n保证一下配置：\n```\nbase_path=/home/yuqing/fastdfs\ntracker_server=192.168.1.134:22122\nhttp.tracker_server_port=8080\n```\nvi test.txt\n\n/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt\n得到：\n```\nThis is FastDFS client test program v4.06\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/\nfor more detail.\n\n[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group:\n        server 1. group_name=, ip_addr=192.168.1.134, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.134, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\nsource ip address: 192.168.1.134\nfile timestamp=2016-07-06 07:31:57\nfile size=7\nfile crc32=3651826635\nfile url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt\n[root@localhost yihua]# This is FastDFS client test program v4.06\n-bash: This: command not found\nCopyright (C) 2008, Happy Fish / YuQing\n\n```\n在浏览器打开http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\n可以看见你的文件。那么就成功了。\n\ndone.","slug":"在单服务器上安装部署FastDFS-Nginx","published":1,"updated":"2016-07-07T14:04:19.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uswl002x00uuf1mithjl","content":"<h1 id=\"在单服务器上安装部署FastDFS-Nginx\"><a href=\"#在单服务器上安装部署FastDFS-Nginx\" class=\"headerlink\" title=\"在单服务器上安装部署FastDFS+Nginx\"></a>在单服务器上安装部署FastDFS+Nginx</h1><p>那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。<br>这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）<br>我部署的服务系版本是centos6.7</p>\n<h2 id=\"FastDFS安装配置\"><a href=\"#FastDFS安装配置\" class=\"headerlink\" title=\"FastDFS安装配置\"></a>FastDFS安装配置</h2><h3 id=\"Tracker的安装及配置\"><a href=\"#Tracker的安装及配置\" class=\"headerlink\" title=\"Tracker的安装及配置\"></a>Tracker的安装及配置</h3><h4 id=\"1-安装编译器\"><a href=\"#1-安装编译器\" class=\"headerlink\" title=\"1.安装编译器\"></a>1.安装编译器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载安装libevent\"><a href=\"#2-下载安装libevent\" class=\"headerlink\" title=\"2.下载安装libevent\"></a>2.下载安装libevent</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">tar xvzf libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">cd libevent-2.0.22-stable</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载安装fastDFS\"><a href=\"#3-下载安装fastDFS\" class=\"headerlink\" title=\"3.下载安装fastDFS\"></a>3.下载安装fastDFS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz</span><br><span class=\"line\">（code.google.com已无法访问，可以自己手动下载再上传到服务器）</span><br><span class=\"line\">tar -xvzf FastDFS_v4.06.tar.gz</span><br><span class=\"line\">cd FastDFS</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n<p>安装成功后/usr/local/bin下会出现一系列fastDFS命令</p>\n<h4 id=\"4-配置tracker\"><a href=\"#4-配置tracker\" class=\"headerlink\" title=\"4.配置tracker\"></a>4.配置tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<p>修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）</p>\n<h4 id=\"5-启动tracker\"><a href=\"#5-启动tracker\" class=\"headerlink\" title=\"5.启动tracker\"></a>5.启动tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"Storage配置-gt-Storage1配置\"><a href=\"#Storage配置-gt-Storage1配置\" class=\"headerlink\" title=\"Storage配置 -&gt; Storage1配置\"></a>Storage配置 -&gt; Storage1配置</h3><p>正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。<br>我这里只部署一个storage一个tracker，并部署在同一个服务器</p>\n<h4 id=\"1-3：参考Tracker安装步骤\"><a href=\"#1-3：参考Tracker安装步骤\" class=\"headerlink\" title=\"1~3：参考Tracker安装步骤\"></a>1~3：参考Tracker安装步骤</h4><h4 id=\"4-配置storage\"><a href=\"#4-配置storage\" class=\"headerlink\" title=\"4.配置storage\"></a>4.配置storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>修改tracker_server=192.168.1.134:22122<br>修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_name=group1</span><br><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.server_port=8080      #web server的端口改成8080（与nginx 端口一致）</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-启动storage\"><a href=\"#5-启动storage\" class=\"headerlink\" title=\"5.启动storage\"></a>5.启动storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据</p>\n<h3 id=\"安装nginx以及fastdfs-nginx-module模块\"><a href=\"#安装nginx以及fastdfs-nginx-module模块\" class=\"headerlink\" title=\"安装nginx以及fastdfs-nginx-module模块\"></a>安装nginx以及fastdfs-nginx-module模块</h3><p>nginx的rewrite模块和cache模块需要先安装pcre和openssl</p>\n<h4 id=\"安装pcre\"><a href=\"#安装pcre\" class=\"headerlink\" title=\"安装pcre\"></a>安装pcre</h4><p>下载pcre<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf pcre-8.12.tar.gz</span><br><span class=\"line\">cd pcre-8.12</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装openssl\"><a href=\"#安装openssl\" class=\"headerlink\" title=\"安装openssl\"></a>安装openssl</h4><p>centos下解决办法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yihua</span><br><span class=\"line\">wget http://nginx.org/download/nginx-0.8.55.tar.gz</span><br><span class=\"line\">tar zxvf nginx-0.8.55.tar.gz</span><br><span class=\"line\">cd nginx-0.8.55</span><br><span class=\"line\">./configure --prefix=/opt/nginx --with-http_stub_status_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装fastdfs-nginx-module\"><a href=\"#安装fastdfs-nginx-module\" class=\"headerlink\" title=\"安装fastdfs-nginx-module\"></a>安装fastdfs-nginx-module</h4><p>下载并上传fastdfs-nginx-module_v1.15.tar.gz<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf fastdfs-nginx-module_v1.15.tar.gz</span><br><span class=\"line\">cd /home/yihua/nginx-0.8.55 </span><br><span class=\"line\">./configure --add-module=/home/yihua/fastdfs-nginx-module/src</span><br><span class=\"line\">make; make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置nginx和fastdfs-nginx-module\"><a href=\"#配置nginx和fastdfs-nginx-module\" class=\"headerlink\" title=\"配置nginx和fastdfs-nginx-module\"></a>配置nginx和fastdfs-nginx-module</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br><span class=\"line\">vim /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>\n<p>修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf<br>一般只需改动以下几个参数即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs      #保存日志目录</span><br><span class=\"line\">tracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号</span><br><span class=\"line\">storage_server_port=23000            #storage 服务器的端口号</span><br><span class=\"line\">group_name=group1                    #当前服务器的 group 名</span><br><span class=\"line\">url_have_group_name = true           #文件 url 中是否有 group 名</span><br><span class=\"line\">store_path_count=1                   #存储路径个数，需要和 store_path 个数匹配</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs    #存储路径</span><br><span class=\"line\">http.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）</span><br><span class=\"line\">group_count = 1                      #设置组的个数</span><br></pre></td></tr></table></figure></p>\n<p>然后在末尾添加分组信息，目前只有一个分组，就只写一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1]</span><br><span class=\"line\">group_name=group1</span><br><span class=\"line\">storage_server_port=23000</span><br><span class=\"line\">store_path_count=1</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br></pre></td></tr></table></figure></p>\n<p>建立 M00 至存储目录的符号连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00</span><br></pre></td></tr></table></figure></p>\n<p>将 server 段中的 listen 端口号改为 8080：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">listen       8080;</span><br></pre></td></tr></table></figure></p>\n<p>在 server 段中添加fastdfs的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /group1/M00 &#123;</span><br><span class=\"line\">       root   /home/yuqing/fastdfs/data;</span><br><span class=\"line\">       ngx_fastdfs_module;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"准备nginx启动脚本\"><a href=\"#准备nginx启动脚本\" class=\"headerlink\" title=\"准备nginx启动脚本\"></a>准备nginx启动脚本</h4><p>编辑 /etc/init.d/nginx，如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.1.4.7 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\"># It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"> </span><br><span class=\"line\"># pidfile: /usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"> </span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\">nginx_lock=/var/lock/subsys/nginx</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"> </span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"> </span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    nginx_is_run=`ps -ef | egrep &apos;nginx:\\s*(worker|master)\\s*process&apos; | wc -l`</span><br><span class=\"line\">    if [ $&#123;nginx_is_run&#125; -gt 0 ];then</span><br><span class=\"line\">        echo &quot;nginx already running....&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">    daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; touch $&#123;nginx_lock&#125;</span><br><span class=\"line\">    return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">    killproc $nginxd</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; rm -f $&#123;nginx_lock&#125; $&#123;nginx_pid&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Reload nginx config file</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">          stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<p>Nginx启动提示找不到libpcre.so.1解决方法<br>如果是32位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib</span><br></pre></td></tr></table></figure></p>\n<p>如果是64位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib64</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chmod u+x /etc/init.d/nginx</span><br><span class=\"line\"># chkconfig --add nginx</span><br><span class=\"line\"># chkconfig nginx on</span><br><span class=\"line\"># service nginx start</span><br><span class=\"line\">正在启动 nginx：                                           [确定]</span><br><span class=\"line\"># service nginx status</span><br><span class=\"line\">nginx (pid 26500) 正在运行...</span><br></pre></td></tr></table></figure>\n<p>查看nginx的日志 错误日志logs/error.log 看是否有问题</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"启动nginx，tracker和storage\"><a href=\"#启动nginx，tracker和storage\" class=\"headerlink\" title=\"启动nginx，tracker和storage\"></a>启动nginx，tracker和storage</h4><p>重启tracker：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf<br>重启storage：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf<br>启动nginx：<br>/usr/local/nginx/sbin/nginx<br>检查nginx状态：<br>/usr/local/nginx/sbin/nginx -t<br>重启nginx：<br>/usr/local/nginx/sbin/nginx -s reload</p>\n<h4 id=\"tracker运行\"><a href=\"#tracker运行\" class=\"headerlink\" title=\"tracker运行\"></a>tracker运行</h4><p>直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker fdfs]# netstat -antp | grep trackerd</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd </span><br><span class=\"line\">[root@tracker fdfs]#</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"storage运行\"><a href=\"#storage运行\" class=\"headerlink\" title=\"storage运行\"></a>storage运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_storaged /etc/fdfs/storage.conf restart</span><br><span class=\"line\">查看端口是否起来</span><br><span class=\"line\"># netstat -antp | grep storage</span><br><span class=\"line\">tcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged</span><br></pre></td></tr></table></figure>\n<p>也可以以下命令来监控服务器的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure></p>\n<p>看到ACTIVE,就说明已经成功注册到了tracker。</p>\n<h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4><p>设置tracker开机自动启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker tracker]# echo &quot;/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@tracker tracker]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker tracker]#</span><br></pre></td></tr></table></figure></p>\n<p>设置storage开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server1 fdfs]# echo &quot;/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@server1 fdfs]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用client测试文件上传\"><a href=\"#使用client测试文件上传\" class=\"headerlink\" title=\"使用client测试文件上传\"></a>使用client测试文件上传</h3><p>先配置一下client<br>vi /etc/fdfs/client.conf<br>保证一下配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.tracker_server_port=8080</span><br></pre></td></tr></table></figure></p>\n<p>vi test.txt</p>\n<p>/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt<br>得到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is FastDFS client test program v4.06</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br><span class=\"line\"></span><br><span class=\"line\">FastDFS may be copied only under the terms of the GNU General</span><br><span class=\"line\">Public License V3, which may be found in the FastDFS source kit.</span><br><span class=\"line\">Please visit the FastDFS Home Page http://www.csource.org/</span><br><span class=\"line\">for more detail.</span><br><span class=\"line\"></span><br><span class=\"line\">[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0</span><br><span class=\"line\"></span><br><span class=\"line\">tracker_query_storage_store_list_without_group:</span><br><span class=\"line\">        server 1. group_name=, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\"></span><br><span class=\"line\">group_name=group1, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\">storage_upload_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">storage_upload_slave_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">[root@localhost yihua]# This is FastDFS client test program v4.06</span><br><span class=\"line\">-bash: This: command not found</span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器打开<a href=\"http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\" target=\"_blank\" rel=\"external\">http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</a><br>可以看见你的文件。那么就成功了。</p>\n<p>done.</p>\n","excerpt":"","more":"<h1 id=\"在单服务器上安装部署FastDFS-Nginx\"><a href=\"#在单服务器上安装部署FastDFS-Nginx\" class=\"headerlink\" title=\"在单服务器上安装部署FastDFS+Nginx\"></a>在单服务器上安装部署FastDFS+Nginx</h1><p>那么多服务器和软件安装配置中，FastDFS算是比较复杂的一个了。<br>这个例子storage和tracker均部署在同一台服务器（ip：192.168.1.134）<br>我部署的服务系版本是centos6.7</p>\n<h2 id=\"FastDFS安装配置\"><a href=\"#FastDFS安装配置\" class=\"headerlink\" title=\"FastDFS安装配置\"></a>FastDFS安装配置</h2><h3 id=\"Tracker的安装及配置\"><a href=\"#Tracker的安装及配置\" class=\"headerlink\" title=\"Tracker的安装及配置\"></a>Tracker的安装及配置</h3><h4 id=\"1-安装编译器\"><a href=\"#1-安装编译器\" class=\"headerlink\" title=\"1.安装编译器\"></a>1.安装编译器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载安装libevent\"><a href=\"#2-下载安装libevent\" class=\"headerlink\" title=\"2.下载安装libevent\"></a>2.下载安装libevent</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sourceforge.net/projects/levent/files/libevent/libevent-2.0/libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">tar xvzf libevent-2.0.22-stable.tar.gz</span><br><span class=\"line\">cd libevent-2.0.22-stable</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-下载安装fastDFS\"><a href=\"#3-下载安装fastDFS\" class=\"headerlink\" title=\"3.下载安装fastDFS\"></a>3.下载安装fastDFS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://code.google.com/p/fastdfs/downloads/detail?name=FastDFS_v4.06.tar.gz</span><br><span class=\"line\">（code.google.com已无法访问，可以自己手动下载再上传到服务器）</span><br><span class=\"line\">tar -xvzf FastDFS_v4.06.tar.gz</span><br><span class=\"line\">cd FastDFS</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">./make.sh install</span><br></pre></td></tr></table></figure>\n<p>安装成功后/usr/local/bin下会出现一系列fastDFS命令</p>\n<h4 id=\"4-配置tracker\"><a href=\"#4-配置tracker\" class=\"headerlink\" title=\"4.配置tracker\"></a>4.配置tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<p>修改base_path以存储tracker信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）</p>\n<h4 id=\"5-启动tracker\"><a href=\"#5-启动tracker\" class=\"headerlink\" title=\"5.启动tracker\"></a>5.启动tracker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"Storage配置-gt-Storage1配置\"><a href=\"#Storage配置-gt-Storage1配置\" class=\"headerlink\" title=\"Storage配置 -&gt; Storage1配置\"></a>Storage配置 -&gt; Storage1配置</h3><p>正常情况下storage1部署一个服务器，storage2部署一个服务器，tracker部署一个服务器。<br>我这里只部署一个storage一个tracker，并部署在同一个服务器</p>\n<h4 id=\"1-3：参考Tracker安装步骤\"><a href=\"#1-3：参考Tracker安装步骤\" class=\"headerlink\" title=\"1~3：参考Tracker安装步骤\"></a>1~3：参考Tracker安装步骤</h4><h4 id=\"4-配置storage\"><a href=\"#4-配置storage\" class=\"headerlink\" title=\"4.配置storage\"></a>4.配置storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>修改tracker_server=192.168.1.134:22122<br>修改base_path以存储storage信息（这里不做修改，使用默认路径/home/yuqing/fastdfs，需要先行创建目录）<br>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_name=group1</span><br><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.server_port=8080      #web server的端口改成8080（与nginx 端口一致）</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-启动storage\"><a href=\"#5-启动storage\" class=\"headerlink\" title=\"5.启动storage\"></a>5.启动storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>\n<p>启动过程中，fastDFS会在base_path下的data目录中创建一系列文件夹，以存储数据</p>\n<h3 id=\"安装nginx以及fastdfs-nginx-module模块\"><a href=\"#安装nginx以及fastdfs-nginx-module模块\" class=\"headerlink\" title=\"安装nginx以及fastdfs-nginx-module模块\"></a>安装nginx以及fastdfs-nginx-module模块</h3><p>nginx的rewrite模块和cache模块需要先安装pcre和openssl</p>\n<h4 id=\"安装pcre\"><a href=\"#安装pcre\" class=\"headerlink\" title=\"安装pcre\"></a>安装pcre</h4><p>下载pcre<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf pcre-8.12.tar.gz</span><br><span class=\"line\">cd pcre-8.12</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装openssl\"><a href=\"#安装openssl\" class=\"headerlink\" title=\"安装openssl\"></a>安装openssl</h4><p>centos下解决办法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yihua</span><br><span class=\"line\">wget http://nginx.org/download/nginx-0.8.55.tar.gz</span><br><span class=\"line\">tar zxvf nginx-0.8.55.tar.gz</span><br><span class=\"line\">cd nginx-0.8.55</span><br><span class=\"line\">./configure --prefix=/opt/nginx --with-http_stub_status_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装fastdfs-nginx-module\"><a href=\"#安装fastdfs-nginx-module\" class=\"headerlink\" title=\"安装fastdfs-nginx-module\"></a>安装fastdfs-nginx-module</h4><p>下载并上传fastdfs-nginx-module_v1.15.tar.gz<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf fastdfs-nginx-module_v1.15.tar.gz</span><br><span class=\"line\">cd /home/yihua/nginx-0.8.55 </span><br><span class=\"line\">./configure --add-module=/home/yihua/fastdfs-nginx-module/src</span><br><span class=\"line\">make; make install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置nginx和fastdfs-nginx-module\"><a href=\"#配置nginx和fastdfs-nginx-module\" class=\"headerlink\" title=\"配置nginx和fastdfs-nginx-module\"></a>配置nginx和fastdfs-nginx-module</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /home/yihua/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br><span class=\"line\">vim /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>\n<p>修改 fastdfs的nginx模块的配置文件 mod_fastdfs.conf<br>一般只需改动以下几个参数即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs      #保存日志目录</span><br><span class=\"line\">tracker_server=192.168.1.134:22122    #tracker 服务器的 IP 地址以及端口号</span><br><span class=\"line\">storage_server_port=23000            #storage 服务器的端口号</span><br><span class=\"line\">group_name=group1                    #当前服务器的 group 名</span><br><span class=\"line\">url_have_group_name = true           #文件 url 中是否有 group 名</span><br><span class=\"line\">store_path_count=1                   #存储路径个数，需要和 store_path 个数匹配</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs    #存储路径</span><br><span class=\"line\">http.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）</span><br><span class=\"line\">group_count = 1                      #设置组的个数</span><br></pre></td></tr></table></figure></p>\n<p>然后在末尾添加分组信息，目前只有一个分组，就只写一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1]</span><br><span class=\"line\">group_name=group1</span><br><span class=\"line\">storage_server_port=23000</span><br><span class=\"line\">store_path_count=1</span><br><span class=\"line\">store_path0=/home/yuqing/fastdfs</span><br></pre></td></tr></table></figure></p>\n<p>建立 M00 至存储目录的符号连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /home/yuqing/fastdfs/data /home/yuqing/fastdfs/data/M00</span><br></pre></td></tr></table></figure></p>\n<p>将 server 段中的 listen 端口号改为 8080：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">listen       8080;</span><br></pre></td></tr></table></figure></p>\n<p>在 server 段中添加fastdfs的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /group1/M00 &#123;</span><br><span class=\"line\">       root   /home/yuqing/fastdfs/data;</span><br><span class=\"line\">       ngx_fastdfs_module;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"准备nginx启动脚本\"><a href=\"#准备nginx启动脚本\" class=\"headerlink\" title=\"准备nginx启动脚本\"></a>准备nginx启动脚本</h4><p>编辑 /etc/init.d/nginx，如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># nginx Startup script for the Nginx HTTP Server</span><br><span class=\"line\"># it is v.1.4.7 version.</span><br><span class=\"line\"># chkconfig: - 85 15</span><br><span class=\"line\"># description: Nginx is a high-performance web and proxy server.</span><br><span class=\"line\"># It has a lot of features, but it&apos;s not for everyone.</span><br><span class=\"line\"># processname: nginx</span><br><span class=\"line\"> </span><br><span class=\"line\"># pidfile: /usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\"> </span><br><span class=\"line\">nginxd=/usr/local/nginx/sbin/nginx</span><br><span class=\"line\">nginx_config=/usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">nginx_pid=/usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\">nginx_lock=/var/lock/subsys/nginx</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\">prog=&quot;nginx&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source networking configuration.</span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"> </span><br><span class=\"line\"># Check that networking is up.</span><br><span class=\"line\">[ $&#123;NETWORKING&#125; = &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class=\"line\">[ -x $nginxd ] || exit 0</span><br><span class=\"line\"> </span><br><span class=\"line\"># Start nginx daemons functions.</span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">    nginx_is_run=`ps -ef | egrep &apos;nginx:\\s*(worker|master)\\s*process&apos; | wc -l`</span><br><span class=\"line\">    if [ $&#123;nginx_is_run&#125; -gt 0 ];then</span><br><span class=\"line\">        echo &quot;nginx already running....&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">    daemon $nginxd -c $&#123;nginx_config&#125;</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; touch $&#123;nginx_lock&#125;</span><br><span class=\"line\">    return $RETVAL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Stop nginx daemons functions.</span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class=\"line\">    killproc $nginxd</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    [ $RETVAL = 0 ] &amp;&amp; rm -f $&#123;nginx_lock&#125; $&#123;nginx_pid&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># Reload nginx config file</span><br><span class=\"line\">reload() &#123;</span><br><span class=\"line\">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class=\"line\">    #kill -HUP `cat $&#123;nginx_pid&#125;`</span><br><span class=\"line\">    killproc $nginxd -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"># See how we were called.</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">          stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure></p>\n<p>Nginx启动提示找不到libpcre.so.1解决方法<br>如果是32位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib</span><br></pre></td></tr></table></figure></p>\n<p>如果是64位系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/lib/libpcre.so.1 /lib64</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># chmod u+x /etc/init.d/nginx</span><br><span class=\"line\"># chkconfig --add nginx</span><br><span class=\"line\"># chkconfig nginx on</span><br><span class=\"line\"># service nginx start</span><br><span class=\"line\">正在启动 nginx：                                           [确定]</span><br><span class=\"line\"># service nginx status</span><br><span class=\"line\">nginx (pid 26500) 正在运行...</span><br></pre></td></tr></table></figure>\n<p>查看nginx的日志 错误日志logs/error.log 看是否有问题</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"启动nginx，tracker和storage\"><a href=\"#启动nginx，tracker和storage\" class=\"headerlink\" title=\"启动nginx，tracker和storage\"></a>启动nginx，tracker和storage</h4><p>重启tracker：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_trackerd /etc/fdfs/tracker.conf<br>重启storage：<br>/usr/local/bin/restart.sh /usr/local/bin/fdfs_storaged /etc/fdfs/storage.conf<br>启动nginx：<br>/usr/local/nginx/sbin/nginx<br>检查nginx状态：<br>/usr/local/nginx/sbin/nginx -t<br>重启nginx：<br>/usr/local/nginx/sbin/nginx -s reload</p>\n<h4 id=\"tracker运行\"><a href=\"#tracker运行\" class=\"headerlink\" title=\"tracker运行\"></a>tracker运行</h4><p>直接使用 fdfs_trackerd 来启动tracker进程，然后使用netstat 查看端口是否起来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker fdfs]# fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker fdfs]# netstat -antp | grep trackerd</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22122               0.0.0.0:*                   LISTEN      14520/fdfs_trackerd </span><br><span class=\"line\">[root@tracker fdfs]#</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"storage运行\"><a href=\"#storage运行\" class=\"headerlink\" title=\"storage运行\"></a>storage运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_storaged /etc/fdfs/storage.conf restart</span><br><span class=\"line\">查看端口是否起来</span><br><span class=\"line\"># netstat -antp | grep storage</span><br><span class=\"line\">tcp        0      0 0.0.0.0:23000               0.0.0.0:*                   LISTEN      10316/fdfs_storaged</span><br></pre></td></tr></table></figure>\n<p>也可以以下命令来监控服务器的状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure></p>\n<p>看到ACTIVE,就说明已经成功注册到了tracker。</p>\n<h4 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h4><p>设置tracker开机自动启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@tracker tracker]# echo &quot;/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@tracker tracker]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class=\"line\">[root@tracker tracker]#</span><br></pre></td></tr></table></figure></p>\n<p>设置storage开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@server1 fdfs]# echo &quot;/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart&quot; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">[root@server1 fdfs]# cat /etc/rc.local</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script will be executed *after* all the other init scripts.</span><br><span class=\"line\"># You can put your own initialization stuff in here if you don&apos;t</span><br><span class=\"line\"># want to do the full Sys V style init stuff.</span><br><span class=\"line\">touch /var/lock/subsys/local</span><br><span class=\"line\">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用client测试文件上传\"><a href=\"#使用client测试文件上传\" class=\"headerlink\" title=\"使用client测试文件上传\"></a>使用client测试文件上传</h3><p>先配置一下client<br>vi /etc/fdfs/client.conf<br>保证一下配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_path=/home/yuqing/fastdfs</span><br><span class=\"line\">tracker_server=192.168.1.134:22122</span><br><span class=\"line\">http.tracker_server_port=8080</span><br></pre></td></tr></table></figure></p>\n<p>vi test.txt</p>\n<p>/usr/local/bin/fdfs_test /etc/fdfs/client.conf  upload  test.txt<br>得到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is FastDFS client test program v4.06</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br><span class=\"line\"></span><br><span class=\"line\">FastDFS may be copied only under the terms of the GNU General</span><br><span class=\"line\">Public License V3, which may be found in the FastDFS source kit.</span><br><span class=\"line\">Please visit the FastDFS Home Page http://www.csource.org/</span><br><span class=\"line\">for more detail.</span><br><span class=\"line\"></span><br><span class=\"line\">[2016-07-06 07:31:57] DEBUG - base_path=/home/yuqing/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0</span><br><span class=\"line\"></span><br><span class=\"line\">tracker_query_storage_store_list_without_group:</span><br><span class=\"line\">        server 1. group_name=, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\"></span><br><span class=\"line\">group_name=group1, ip_addr=192.168.1.134, port=23000</span><br><span class=\"line\">storage_upload_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</span><br><span class=\"line\">storage_upload_slave_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">source ip address: 192.168.1.134</span><br><span class=\"line\">file timestamp=2016-07-06 07:31:57</span><br><span class=\"line\">file size=7</span><br><span class=\"line\">file crc32=3651826635</span><br><span class=\"line\">file url: http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085_big.txt</span><br><span class=\"line\">[root@localhost yihua]# This is FastDFS client test program v4.06</span><br><span class=\"line\">-bash: This: command not found</span><br><span class=\"line\">Copyright (C) 2008, Happy Fish / YuQing</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器打开<a href=\"http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt\">http://192.168.1.134:8080/group1/M00/00/00/wKgBhld9Fl2ATSOYAAAAB9mqc8s085.txt</a><br>可以看见你的文件。那么就成功了。</p>\n<p>done.</p>\n","sticky":0},{"title":"文档写作与部署工具docsify","date":"2018-03-14T10:01:27.000Z","_content":"\n# docsify：一个文档展示与部署的工具\n\n基于md文档的写作，构建一个好看的文档展示样式，并启动服务提供访问。\n\n## 官网\n\nhttps://docsify.js.org\n\n## 快速开始\n\n推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。\n```\nnpm i docsify-cli -g\n```\n\n## 初始化项目\n\n如果想在项目的 ./docs 目录里写文档，直接通过 init 初始化项目。\n```\ndocsify init ./docs\n```\n\n## 开始写文档\n\n初始化成功后，可以看到 ./docs 目录下创建的几个文件\n```\nindex.html 入口文件\nREADME.md 会做为主页内容渲染\n.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件\n直接编辑 docs/README.md 就能更新网站内容，当然也可以写多个页面。\n```\n\n## 本地预览网站\n\n运行一个本地服务器通过 docsify serve 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问 http://localhost:3000 。\n```\ndocsify serve docs\n```\n\n## 多页文档\n\n如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 guide.md 文件，那么对应的路由就是 /#/guide。\n\n假设你的目录结构如下：\n```\n-| docs/\n  -| README.md\n  -| guide.md\n  -| zh-cn/\n    -| README.md\n    -| guide.md\n```\n\n那么对应的访问页面将是\n```\ndocs/README.md        => http://domain.com\ndocs/guide.md         => http://domain.com/guide\ndocs/zh-cn/README.md  => http://domain.com/zh-cn/\ndocs/zh-cn/guide.md   => http://domain.com/zh-cn/guide\n```\n","source":"_posts/文档写作与部署工具docsify.md","raw":"---\ntitle: 文档写作与部署工具docsify\ndate: 2018-03-14 18:01:27\ntags: [doc, docs, markdown, docsify]\n---\n\n# docsify：一个文档展示与部署的工具\n\n基于md文档的写作，构建一个好看的文档展示样式，并启动服务提供访问。\n\n## 官网\n\nhttps://docsify.js.org\n\n## 快速开始\n\n推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。\n```\nnpm i docsify-cli -g\n```\n\n## 初始化项目\n\n如果想在项目的 ./docs 目录里写文档，直接通过 init 初始化项目。\n```\ndocsify init ./docs\n```\n\n## 开始写文档\n\n初始化成功后，可以看到 ./docs 目录下创建的几个文件\n```\nindex.html 入口文件\nREADME.md 会做为主页内容渲染\n.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件\n直接编辑 docs/README.md 就能更新网站内容，当然也可以写多个页面。\n```\n\n## 本地预览网站\n\n运行一个本地服务器通过 docsify serve 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问 http://localhost:3000 。\n```\ndocsify serve docs\n```\n\n## 多页文档\n\n如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 guide.md 文件，那么对应的路由就是 /#/guide。\n\n假设你的目录结构如下：\n```\n-| docs/\n  -| README.md\n  -| guide.md\n  -| zh-cn/\n    -| README.md\n    -| guide.md\n```\n\n那么对应的访问页面将是\n```\ndocs/README.md        => http://domain.com\ndocs/guide.md         => http://domain.com/guide\ndocs/zh-cn/README.md  => http://domain.com/zh-cn/\ndocs/zh-cn/guide.md   => http://domain.com/zh-cn/guide\n```\n","slug":"文档写作与部署工具docsify","published":1,"updated":"2018-09-08T17:00:02.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4uswq002z00uu0kcmvrww","content":"<h1 id=\"docsify：一个文档展示与部署的工具\"><a href=\"#docsify：一个文档展示与部署的工具\" class=\"headerlink\" title=\"docsify：一个文档展示与部署的工具\"></a>docsify：一个文档展示与部署的工具</h1><p>基于md文档的写作，构建一个好看的文档展示样式，并启动服务提供访问。</p>\n<h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><p><a href=\"https://docsify.js.org\" target=\"_blank\" rel=\"external\">https://docsify.js.org</a></p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><p>推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i docsify-cli -g</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>如果想在项目的 ./docs 目录里写文档，直接通过 init 初始化项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docsify init ./docs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开始写文档\"><a href=\"#开始写文档\" class=\"headerlink\" title=\"开始写文档\"></a>开始写文档</h2><p>初始化成功后，可以看到 ./docs 目录下创建的几个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.html 入口文件</span><br><span class=\"line\">README.md 会做为主页内容渲染</span><br><span class=\"line\">.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件</span><br><span class=\"line\">直接编辑 docs/README.md 就能更新网站内容，当然也可以写多个页面。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地预览网站\"><a href=\"#本地预览网站\" class=\"headerlink\" title=\"本地预览网站\"></a>本地预览网站</h2><p>运行一个本地服务器通过 docsify serve 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问 <a href=\"http://localhost:3000\">http://localhost:3000</a> 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docsify serve docs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多页文档\"><a href=\"#多页文档\" class=\"headerlink\" title=\"多页文档\"></a>多页文档</h2><p>如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 guide.md 文件，那么对应的路由就是 /#/guide。</p>\n<p>假设你的目录结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-| docs/</span><br><span class=\"line\">  -| README.md</span><br><span class=\"line\">  -| guide.md</span><br><span class=\"line\">  -| zh-cn/</span><br><span class=\"line\">    -| README.md</span><br><span class=\"line\">    -| guide.md</span><br></pre></td></tr></table></figure></p>\n<p>那么对应的访问页面将是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docs/README.md        =&gt; http://domain.com</span><br><span class=\"line\">docs/guide.md         =&gt; http://domain.com/guide</span><br><span class=\"line\">docs/zh-cn/README.md  =&gt; http://domain.com/zh-cn/</span><br><span class=\"line\">docs/zh-cn/guide.md   =&gt; http://domain.com/zh-cn/guide</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"docsify：一个文档展示与部署的工具\"><a href=\"#docsify：一个文档展示与部署的工具\" class=\"headerlink\" title=\"docsify：一个文档展示与部署的工具\"></a>docsify：一个文档展示与部署的工具</h1><p>基于md文档的写作，构建一个好看的文档展示样式，并启动服务提供访问。</p>\n<h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><p><a href=\"https://docsify.js.org\">https://docsify.js.org</a></p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><p>推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i docsify-cli -g</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>如果想在项目的 ./docs 目录里写文档，直接通过 init 初始化项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docsify init ./docs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"开始写文档\"><a href=\"#开始写文档\" class=\"headerlink\" title=\"开始写文档\"></a>开始写文档</h2><p>初始化成功后，可以看到 ./docs 目录下创建的几个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.html 入口文件</span><br><span class=\"line\">README.md 会做为主页内容渲染</span><br><span class=\"line\">.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件</span><br><span class=\"line\">直接编辑 docs/README.md 就能更新网站内容，当然也可以写多个页面。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地预览网站\"><a href=\"#本地预览网站\" class=\"headerlink\" title=\"本地预览网站\"></a>本地预览网站</h2><p>运行一个本地服务器通过 docsify serve 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问 <a href=\"http://localhost:3000\">http://localhost:3000</a> 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docsify serve docs</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多页文档\"><a href=\"#多页文档\" class=\"headerlink\" title=\"多页文档\"></a>多页文档</h2><p>如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 guide.md 文件，那么对应的路由就是 /#/guide。</p>\n<p>假设你的目录结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-| docs/</span><br><span class=\"line\">  -| README.md</span><br><span class=\"line\">  -| guide.md</span><br><span class=\"line\">  -| zh-cn/</span><br><span class=\"line\">    -| README.md</span><br><span class=\"line\">    -| guide.md</span><br></pre></td></tr></table></figure></p>\n<p>那么对应的访问页面将是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docs/README.md        =&gt; http://domain.com</span><br><span class=\"line\">docs/guide.md         =&gt; http://domain.com/guide</span><br><span class=\"line\">docs/zh-cn/README.md  =&gt; http://domain.com/zh-cn/</span><br><span class=\"line\">docs/zh-cn/guide.md   =&gt; http://domain.com/zh-cn/guide</span><br></pre></td></tr></table></figure></p>\n","sticky":0},{"title":"系统分布式情况下最终一致性方案梳理","date":"2016-08-10T02:14:29.000Z","_content":"\n## 前言\n目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。\n\n\n## 基础理论相关\n说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。\n- ACID 特性\nA（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；\nC（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；\nI（隔离性）保证事务不受外部并发操作的独立环境执行；\nD（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；\n- CAP\nC（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；\nA（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；\nP（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体\n- BASE\nBA: Basic Availability 基本业务可用性；\nS: Soft state 柔性状态；\nE: Eventual consistency 最终一致性；\n\n\n## 最终一致性的几种做法\n![](/images/transaction-001.png)\n\n \n### 单数据库情况下的事务\n如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。\n\n### 基于事务型消息队列的最终一致性\n借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。\n\n### 基于消息队列+定时补偿机制的最终一致性\n前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。\n\n### 业务系统业务逻辑的commit/rollback机制\n这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。\n\n### 业务应用系统的幂等性控制\n为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。\n\n- 查询\n查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。\n\n- MVCC方案\n多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# >= 0 。\n\n- 单独的去重表\n如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。\n\n- 分布式锁\n还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。\n\n- 删除数据\n删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。\n\n- 插入数据的唯一索引\n插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。\n\n- API层面的幂等\n这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。\n\n- 状态机幂等\n在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。\n\n### 异步回调机制的引入\nA应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。\n\n### 类似double check机制的确认机制\n还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。\n\n\n## 总结\n上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。","source":"_posts/系统分布式情况下最终一致性方案梳理.md","raw":"---\ntitle: 系统分布式情况下最终一致性方案梳理\ndate: 2016-08-10 10:14:29\ntags:\n---\n\n## 前言\n目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。\n\n\n## 基础理论相关\n说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。\n- ACID 特性\nA（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；\nC（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；\nI（隔离性）保证事务不受外部并发操作的独立环境执行；\nD（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；\n- CAP\nC（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；\nA（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；\nP（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体\n- BASE\nBA: Basic Availability 基本业务可用性；\nS: Soft state 柔性状态；\nE: Eventual consistency 最终一致性；\n\n\n## 最终一致性的几种做法\n![](/images/transaction-001.png)\n\n \n### 单数据库情况下的事务\n如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。\n\n### 基于事务型消息队列的最终一致性\n借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。\n\n### 基于消息队列+定时补偿机制的最终一致性\n前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。\n\n### 业务系统业务逻辑的commit/rollback机制\n这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。\n\n### 业务应用系统的幂等性控制\n为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。\n\n- 查询\n查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。\n\n- MVCC方案\n多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# >= 0 。\n\n- 单独的去重表\n如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。\n\n- 分布式锁\n还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。\n\n- 删除数据\n删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。\n\n- 插入数据的唯一索引\n插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。\n\n- API层面的幂等\n这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。\n\n- 状态机幂等\n在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。\n\n### 异步回调机制的引入\nA应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。\n\n### 类似double check机制的确认机制\n还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。\n\n\n## 总结\n上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。","slug":"系统分布式情况下最终一致性方案梳理","published":1,"updated":"2016-08-10T15:15:57.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usws003000uu2alk2wpf","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。</p>\n<h2 id=\"基础理论相关\"><a href=\"#基础理论相关\" class=\"headerlink\" title=\"基础理论相关\"></a>基础理论相关</h2><p>说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。</p>\n<ul>\n<li>ACID 特性<br>A（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；<br>C（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；<br>I（隔离性）保证事务不受外部并发操作的独立环境执行；<br>D（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；</li>\n<li>CAP<br>C（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；<br>A（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；<br>P（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体</li>\n<li>BASE<br>BA: Basic Availability 基本业务可用性；<br>S: Soft state 柔性状态；<br>E: Eventual consistency 最终一致性；</li>\n</ul>\n<h2 id=\"最终一致性的几种做法\"><a href=\"#最终一致性的几种做法\" class=\"headerlink\" title=\"最终一致性的几种做法\"></a>最终一致性的几种做法</h2><p><img src=\"/images/transaction-001.png\" alt=\"\"></p>\n<h3 id=\"单数据库情况下的事务\"><a href=\"#单数据库情况下的事务\" class=\"headerlink\" title=\"单数据库情况下的事务\"></a>单数据库情况下的事务</h3><p>如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。</p>\n<h3 id=\"基于事务型消息队列的最终一致性\"><a href=\"#基于事务型消息队列的最终一致性\" class=\"headerlink\" title=\"基于事务型消息队列的最终一致性\"></a>基于事务型消息队列的最终一致性</h3><p>借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。</p>\n<h3 id=\"基于消息队列-定时补偿机制的最终一致性\"><a href=\"#基于消息队列-定时补偿机制的最终一致性\" class=\"headerlink\" title=\"基于消息队列+定时补偿机制的最终一致性\"></a>基于消息队列+定时补偿机制的最终一致性</h3><p>前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。</p>\n<h3 id=\"业务系统业务逻辑的commit-rollback机制\"><a href=\"#业务系统业务逻辑的commit-rollback机制\" class=\"headerlink\" title=\"业务系统业务逻辑的commit/rollback机制\"></a>业务系统业务逻辑的commit/rollback机制</h3><p>这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。</p>\n<h3 id=\"业务应用系统的幂等性控制\"><a href=\"#业务应用系统的幂等性控制\" class=\"headerlink\" title=\"业务应用系统的幂等性控制\"></a>业务应用系统的幂等性控制</h3><p>为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。</p>\n<ul>\n<li><p>查询<br>查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。</p>\n</li>\n<li><p>MVCC方案<br>多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# &gt;= 0 。</p>\n</li>\n<li><p>单独的去重表<br>如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。</p>\n</li>\n<li><p>分布式锁<br>还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。</p>\n</li>\n<li><p>删除数据<br>删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。</p>\n</li>\n<li><p>插入数据的唯一索引<br>插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。</p>\n</li>\n<li><p>API层面的幂等<br>这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。</p>\n</li>\n<li><p>状态机幂等<br>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。</p>\n</li>\n</ul>\n<h3 id=\"异步回调机制的引入\"><a href=\"#异步回调机制的引入\" class=\"headerlink\" title=\"异步回调机制的引入\"></a>异步回调机制的引入</h3><p>A应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。</p>\n<h3 id=\"类似double-check机制的确认机制\"><a href=\"#类似double-check机制的确认机制\" class=\"headerlink\" title=\"类似double check机制的确认机制\"></a>类似double check机制的确认机制</h3><p>还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前的应用系统，不管是企业级应用还是互联网应用，最终数据的一致性是每个应用系统都要面临的问题，随着分布式的逐渐普及，数据一致性更加艰难，但是也很难有银弹的解决方案，也并不是引入特定的中间件或者特定的开源框架能够解决的，更多的还是看业务场景，根据场景来给出解决方案。根据笔者最近几年的了解，总结了几个点，更多的应用系统在编码的时候，更加关注数据的一致性，这样系统才是健壮的。</p>\n<h2 id=\"基础理论相关\"><a href=\"#基础理论相关\" class=\"headerlink\" title=\"基础理论相关\"></a>基础理论相关</h2><p>说起事务，目前的几个理论，ACID事务特性，CAP分布式理论，以及BASE等，ACID在数据库事务中体现，CAP和BASE则是分布式事务的理论，结合业务系统，例如订单管理，例如仓储管理等，可以借鉴这些理论，从而解决问题。</p>\n<ul>\n<li>ACID 特性<br>A（原子性）事务的原子操作单元，对数据的修改，要么全部执行，要么全部不执行；<br>C（一致性）在事务开始和完成时，数据必须保持一致状态，相关的数据规则必须应用于事务的修改，以保证数据的完整性，事务结束时，所有的内部数据结构必须正确；<br>I（隔离性）保证事务不受外部并发操作的独立环境执行；<br>D（持久性）事务完成之后，对于数据的修改是永久的，即使系统出现故障也能够保持；</li>\n<li>CAP<br>C（一致性）一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致；<br>A（可用性）服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果；<br>P（分区容忍性）在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体</li>\n<li>BASE<br>BA: Basic Availability 基本业务可用性；<br>S: Soft state 柔性状态；<br>E: Eventual consistency 最终一致性；</li>\n</ul>\n<h2 id=\"最终一致性的几种做法\"><a href=\"#最终一致性的几种做法\" class=\"headerlink\" title=\"最终一致性的几种做法\"></a>最终一致性的几种做法</h2><p><img src=\"/images/transaction-001.png\" alt=\"\"></p>\n<h3 id=\"单数据库情况下的事务\"><a href=\"#单数据库情况下的事务\" class=\"headerlink\" title=\"单数据库情况下的事务\"></a>单数据库情况下的事务</h3><p>如果应用系统是单一的数据库，那么这个很好保证，利用数据库的事务特性来满足事务的一致性，这时候的一致性是强一致性的。对于java应用系统来讲，很少直接通过事务的start和commit以及rollback来硬编码，大多通过spring的事务模板或者声明式事务来保证。</p>\n<h3 id=\"基于事务型消息队列的最终一致性\"><a href=\"#基于事务型消息队列的最终一致性\" class=\"headerlink\" title=\"基于事务型消息队列的最终一致性\"></a>基于事务型消息队列的最终一致性</h3><p>借助消息队列，在处理业务逻辑的地方，发送消息，业务逻辑处理成功后，提交消息，确保消息是发送成功的，之后消息队列投递来进行处理，如果成功，则结束，如果没有成功，则重试，直到成功，不过仅仅适用业务逻辑中，第一阶段成功，第二阶段必须成功的场景。对应上图中的C流程。</p>\n<h3 id=\"基于消息队列-定时补偿机制的最终一致性\"><a href=\"#基于消息队列-定时补偿机制的最终一致性\" class=\"headerlink\" title=\"基于消息队列+定时补偿机制的最终一致性\"></a>基于消息队列+定时补偿机制的最终一致性</h3><p>前面部分和上面基于事务型消息的队列，不同的是，第二阶段重试的地方，不再是消息中间件自身的重试逻辑了，而是单独的补偿任务机制。其实在大多数的逻辑中，第二阶段失败的概率比较小，所以单独独立补偿任务表出来，可以更加清晰，能够比较明确的直到当前多少任务是失败的。对应上图的E流程。</p>\n<h3 id=\"业务系统业务逻辑的commit-rollback机制\"><a href=\"#业务系统业务逻辑的commit-rollback机制\" class=\"headerlink\" title=\"业务系统业务逻辑的commit/rollback机制\"></a>业务系统业务逻辑的commit/rollback机制</h3><p>这一点说的话确实不难，commit和rollback是数据库事务中的比较典型的概念，但是在系统分布式情况下，需要业务代码中实现这种，成功了commit，失败了rollback。</p>\n<h3 id=\"业务应用系统的幂等性控制\"><a href=\"#业务应用系统的幂等性控制\" class=\"headerlink\" title=\"业务应用系统的幂等性控制\"></a>业务应用系统的幂等性控制</h3><p>为啥要做幂等呢？ 原因很简单，在系统调用没有达到期望的结果后，会重试。那重试就会面临问题，重试之后不能给业务逻辑带来影响，例如创建订单，第一次调用超时了，但是调用的系统不知道超时了是成功了还是失败了，然后他就重试，但是实际上第一次调用订单创建是成功了的，这时候重试了，显然不能再创建订单了。</p>\n<ul>\n<li><p>查询<br>查询的API，可以说是天然的幂等性，因为你查询一次和查询两次，对于系统来讲，没有任何数据的变更，所以，查询一次和查询多次一样的。</p>\n</li>\n<li><p>MVCC方案<br>多版本并发控制，update with condition，更新带条件，这也是在系统设计的时候，合理的选择乐观锁，通过version或者其他条件，来做乐观锁，这样保证更新及时在并发的情况下，也不会有太大的问题。例如update tablexxx set name=#name#,version=version+1 where version=#version# ,或者是 update tablexxx set quality=quality-#subQuality# where quality-#subQuality# &gt;= 0 。</p>\n</li>\n<li><p>单独的去重表<br>如果涉及到的去重的地方特别多，例如ERP系统中有各种各样的业务单据，每一种业务单据都需要去重，这时候，可以单独搞一张去重表，在插入数据的时候，插入去重表，利用数据库的唯一索引特性，保证唯一的逻辑。</p>\n</li>\n<li><p>分布式锁<br>还是拿插入数据的例子，如果是分布是系统，构建唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。</p>\n</li>\n<li><p>删除数据<br>删除数据，仅仅第一次删除是真正的操作数据，第二次甚至第三次删除，直接返回成功，这样保证了幂等。</p>\n</li>\n<li><p>插入数据的唯一索引<br>插入数据的唯一性，可以通过业务主键来进行约束，例如一个特定的业务场景，三个字段肯定确定唯一性，那么，可以在数据库表添加唯一索引来进行标示。</p>\n</li>\n<li><p>API层面的幂等<br>这里有一个场景，API层面的幂等，例如提交数据，如何控制重复提交，这里可以在提交数据的form表单或者客户端软件，增加一个唯一标示，然后服务端，根据这个UUID来进行去重，这样就能比较好的做到API层面的唯一标示。</p>\n</li>\n<li><p>状态机幂等<br>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。</p>\n</li>\n</ul>\n<h3 id=\"异步回调机制的引入\"><a href=\"#异步回调机制的引入\" class=\"headerlink\" title=\"异步回调机制的引入\"></a>异步回调机制的引入</h3><p>A应用调用B，在同步调用的返回结果中，B返回成功给到A，一般情况下，这时候就结束了，其实在99.99%的情况是没问题的，但是有时候为了确保100%，记住最起码在系统设计中100%，这时候B系统再回调A一下，告诉A，你调用我的逻辑，确实成功了。其实这个逻辑，非常类似TCP协议中的三次握手。上图中的B流程。</p>\n<h3 id=\"类似double-check机制的确认机制\"><a href=\"#类似double-check机制的确认机制\" class=\"headerlink\" title=\"类似double check机制的确认机制\"></a>类似double check机制的确认机制</h3><p>还是上图中异步回调的过程，A在同步调用B，B返回成功了。这次调用结束了，但是A为了确保，在过一段时间，这个时间可以是几秒，也可以是每天定时处理，再调用B一次，查询一下之前的那次调用是否成功。例如A调用B更新订单状态，这时候成功了，延迟几秒后，A查询B，确认一下状态是否是自己刚刚期望的。上图中的D流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面的几点总结，更多的在业务系统中体现，在超复杂的系统中，数据的一致性，不是说简单的引入啥中间件能够解决的，更多的是根据业务场景，来灵活应对。</p>\n","sticky":0},{"title":"集群监控初步整理","date":"2016-03-11T01:53:20.000Z","_content":"\n### 集群监控初步整理\n\n![](/images/java-monitor.png)\n","source":"_posts/集群监控初步整理.md","raw":"---\ntitle: 集群监控初步整理\ndate: 2016-03-11 09:53:20\ntags: [java,监控,集群,monitor]\n---\n\n### 集群监控初步整理\n\n![](/images/java-monitor.png)\n","slug":"集群监控初步整理","published":1,"updated":"2016-03-12T04:09:16.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usww003200uu4gxamgbh","content":"<h3 id=\"集群监控初步整理\"><a href=\"#集群监控初步整理\" class=\"headerlink\" title=\"集群监控初步整理\"></a>集群监控初步整理</h3><p><img src=\"/images/java-monitor.png\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"集群监控初步整理\"><a href=\"#集群监控初步整理\" class=\"headerlink\" title=\"集群监控初步整理\"></a>集群监控初步整理</h3><p><img src=\"/images/java-monitor.png\" alt=\"\"></p>\n","sticky":0},{"title":"项目管理建议","date":"2016-07-01T11:14:00.000Z","_content":"\n\n# 对项目管理制度的一些看法和建议\n\n\n## 当前存在的问题\n\n1. 技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。\n\n2. 安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。\n\n3. 从业务到产品到开发到测试上线，这个流程还可以有优化的地方。\n\n\n\n## 分析和改进建议\n\n### 针对问题1。\n使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好\n\n\n\n### 针对问题2。\n程序界有一句话，“没有完美的模型，但有一些能用。”\n既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。\n**这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。**\n\n**这里推荐使用一个团队协作管理的工具：“Worktile”。**\nWorktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。\n例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。\n如此一个可视化简单的团队协作管理。\n当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。\n\n**各状态任务完成情况一览：**\n![](/images/project-002.jpg)\n**完成任务，推动到另一状态：**\n![](/images/project-003.png)\n**报表：**\n![](/images/project-004.jpg)\n**团队日历：每个时间点要完成的任务也会在此显示**\n![](/images/project-005.png)\n\n\n\n### 针对问题3.\n以门店收银机为例，发现存在一些流程上的问题。\n**首先，说接口，有两个问题。**\n一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。\n二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。\n既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。\nRAP对我们接口开发的帮助有：\n1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。\n2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。\n![](/images/project-001.jpg)\n\n**其次，说说测试和螺旋式开发。**\n测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。\n**这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。**如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。\n","source":"_posts/项目管理建议.md","raw":"---\ntitle: 项目管理建议\ndate: 2016-07-01 19:14:00\ntags: [manager, 项目管理, RAP, Worktile]\n---\n\n\n# 对项目管理制度的一些看法和建议\n\n\n## 当前存在的问题\n\n1. 技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。\n\n2. 安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。\n\n3. 从业务到产品到开发到测试上线，这个流程还可以有优化的地方。\n\n\n\n## 分析和改进建议\n\n### 针对问题1。\n使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好\n\n\n\n### 针对问题2。\n程序界有一句话，“没有完美的模型，但有一些能用。”\n既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。\n**这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。**\n\n**这里推荐使用一个团队协作管理的工具：“Worktile”。**\nWorktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。\n例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。\n如此一个可视化简单的团队协作管理。\n当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。\n\n**各状态任务完成情况一览：**\n![](/images/project-002.jpg)\n**完成任务，推动到另一状态：**\n![](/images/project-003.png)\n**报表：**\n![](/images/project-004.jpg)\n**团队日历：每个时间点要完成的任务也会在此显示**\n![](/images/project-005.png)\n\n\n\n### 针对问题3.\n以门店收银机为例，发现存在一些流程上的问题。\n**首先，说接口，有两个问题。**\n一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。\n二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。\n既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。\nRAP对我们接口开发的帮助有：\n1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。\n2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。\n![](/images/project-001.jpg)\n\n**其次，说说测试和螺旋式开发。**\n测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。\n**这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。**如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。\n","slug":"项目管理建议","published":1,"updated":"2016-07-07T14:04:19.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usx0003300uu1pkxf3l1","content":"<h1 id=\"对项目管理制度的一些看法和建议\"><a href=\"#对项目管理制度的一些看法和建议\" class=\"headerlink\" title=\"对项目管理制度的一些看法和建议\"></a>对项目管理制度的一些看法和建议</h1><h2 id=\"当前存在的问题\"><a href=\"#当前存在的问题\" class=\"headerlink\" title=\"当前存在的问题\"></a>当前存在的问题</h2><ol>\n<li><p>技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。</p>\n</li>\n<li><p>安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。</p>\n</li>\n<li><p>从业务到产品到开发到测试上线，这个流程还可以有优化的地方。</p>\n</li>\n</ol>\n<h2 id=\"分析和改进建议\"><a href=\"#分析和改进建议\" class=\"headerlink\" title=\"分析和改进建议\"></a>分析和改进建议</h2><h3 id=\"针对问题1。\"><a href=\"#针对问题1。\" class=\"headerlink\" title=\"针对问题1。\"></a>针对问题1。</h3><p>使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好</p>\n<h3 id=\"针对问题2。\"><a href=\"#针对问题2。\" class=\"headerlink\" title=\"针对问题2。\"></a>针对问题2。</h3><p>程序界有一句话，“没有完美的模型，但有一些能用。”<br>既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。<br><strong>这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。</strong></p>\n<p><strong>这里推荐使用一个团队协作管理的工具：“Worktile”。</strong><br>Worktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。<br>例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。<br>如此一个可视化简单的团队协作管理。<br>当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。</p>\n<p><strong>各状态任务完成情况一览：</strong><br><img src=\"/images/project-002.jpg\" alt=\"\"><br><strong>完成任务，推动到另一状态：</strong><br><img src=\"/images/project-003.png\" alt=\"\"><br><strong>报表：</strong><br><img src=\"/images/project-004.jpg\" alt=\"\"><br><strong>团队日历：每个时间点要完成的任务也会在此显示</strong><br><img src=\"/images/project-005.png\" alt=\"\"></p>\n<h3 id=\"针对问题3\"><a href=\"#针对问题3\" class=\"headerlink\" title=\"针对问题3.\"></a>针对问题3.</h3><p>以门店收银机为例，发现存在一些流程上的问题。<br><strong>首先，说接口，有两个问题。</strong><br>一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。<br>二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。<br>既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。<br>RAP对我们接口开发的帮助有：<br>1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。<br>2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。<br><img src=\"/images/project-001.jpg\" alt=\"\"></p>\n<p><strong>其次，说说测试和螺旋式开发。</strong><br>测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。<br><strong>这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。</strong>如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。</p>\n","excerpt":"","more":"<h1 id=\"对项目管理制度的一些看法和建议\"><a href=\"#对项目管理制度的一些看法和建议\" class=\"headerlink\" title=\"对项目管理制度的一些看法和建议\"></a>对项目管理制度的一些看法和建议</h1><h2 id=\"当前存在的问题\"><a href=\"#当前存在的问题\" class=\"headerlink\" title=\"当前存在的问题\"></a>当前存在的问题</h2><ol>\n<li><p>技术工程师反映，技术人员与业务隔离，技术人员难以熟悉第一手业务需求，对工程师开发出契合业务部分需求的产品造成一定的理解障碍。</p>\n</li>\n<li><p>安卓、iOS、H5、后端、测试等各部门分而治之，缺乏一个强而有力的统筹推进，虽然增加了项目经理角色，但目前这个角色只能在各部门之间协调，仍然难以有力推动各部门按时按量完成进度。</p>\n</li>\n<li><p>从业务到产品到开发到测试上线，这个流程还可以有优化的地方。</p>\n</li>\n</ol>\n<h2 id=\"分析和改进建议\"><a href=\"#分析和改进建议\" class=\"headerlink\" title=\"分析和改进建议\"></a>分析和改进建议</h2><h3 id=\"针对问题1。\"><a href=\"#针对问题1。\" class=\"headerlink\" title=\"针对问题1。\"></a>针对问题1。</h3><p>使用尝试让项目经理或者技术经理在产需求研和产品评审阶段就参与介入，能够一定程度的和业务部分做到沟通，让技术人员更熟悉业务。即使只是旁听也好</p>\n<h3 id=\"针对问题2。\"><a href=\"#针对问题2。\" class=\"headerlink\" title=\"针对问题2。\"></a>针对问题2。</h3><p>程序界有一句话，“没有完美的模型，但有一些能用。”<br>既然目前公司的情况是各部分分而治之，各施其职，那么可以考虑这样一个构思，产品对业务负责，提供产品的产出;测试则对产品负责，提供项目和模块完成情况；技术经理对项目经理负责，提供项目模块开发时间评估，以及开发产出；各开发工程师对技术经理负责，按时按量完成技术经理制定的模块开发计划。而项目经理则对项目的进度和协调负责，应该要有渠道能对接所有相关部门，跟进项目的进度，协调各方遇到的问题，并协助解决。<br><strong>这样，明确各部门应该对谁负责，各部门遇到项目开发相关问题，也就能明确的找到相应的人员，得到反馈，部门之间也能够相互推动。</strong></p>\n<p><strong>这里推荐使用一个团队协作管理的工具：“Worktile”。</strong><br>Worktile可以在一个看板中看到所有在做、已完成、在测试等等所有流程中的任务和完成情况。<br>例如，技术经理可以列出所有需要完成的模块和任务，为之分配负责人。负责人开发完成后，勾选完成，管理人员就可以拖动任务进入测试流程。<br>如此一个可视化简单的团队协作管理。<br>当然这个功能，像禅道也能部分实现。但是禅道的这个功能并不好用，从实践经验来说，使用的人积极性并不高。而Worktile这类工具如果推动成功，开发的管理效率将会得到提高。</p>\n<p><strong>各状态任务完成情况一览：</strong><br><img src=\"/images/project-002.jpg\" alt=\"\"><br><strong>完成任务，推动到另一状态：</strong><br><img src=\"/images/project-003.png\" alt=\"\"><br><strong>报表：</strong><br><img src=\"/images/project-004.jpg\" alt=\"\"><br><strong>团队日历：每个时间点要完成的任务也会在此显示</strong><br><img src=\"/images/project-005.png\" alt=\"\"></p>\n<h3 id=\"针对问题3\"><a href=\"#针对问题3\" class=\"headerlink\" title=\"针对问题3.\"></a>针对问题3.</h3><p>以门店收银机为例，发现存在一些流程上的问题。<br><strong>首先，说接口，有两个问题。</strong><br>一，客户端和服务端接口文档，用的是word文档沟通，各个人员直接相互传递，很可能导致相互之间接口文档不同步，也就会造成开发期间关于接口的一些扯皮。<br>二，虽然接口文档有了，但是客户端还是要等服务端出接口后，才能进行接口接入后的相关开发，这样前端的进度就要依赖于后端的产出。<br>既然有这样的问题，那么有没有改进办法呢？有的，这里推荐使用阿里开源的“RAP”接口管理工具进行接口管理。<br>RAP对我们接口开发的帮助有：<br>1）可视化结构化的接口编辑和管理。这样接口只有服务器上的一份，并且管理简单。<br>2）生成Mock数据、校验真实接口的正确性。有了Mock功能，前端可以在后端提供接口之前，利用rap提供的模拟接口数据，提前进行接口接入的开发，提高前端开发速度。最重要的是，前后端接口开发解耦。<br><img src=\"/images/project-001.jpg\" alt=\"\"></p>\n<p><strong>其次，说说测试和螺旋式开发。</strong><br>测试本身是一个发现细节的过程，有些问题测试到细节的地方，就会出现值得推敲和不断调试的情况。而我们项目留给测试的时间太少了。而前期，没完成之前，测试在等待开发，同时，最后所有模块大致完成才提测，又一股脑挤在后期测试和迭代，时间难免太紧，很容易导致进度延误。<br><strong>这里的建议是，开发应该在项目开始时就梳理出模块间的依赖情况，前后端协调好应该先开发哪些模块，只要有一个模块开发完成，就马上提测。</strong>如此让测试尽早介入测试，达到项目螺旋式迭代推荐的目的。同时，也能让测试的时间合理分配，避免延误。</p>\n","sticky":0},{"title":"使用RAP作为接口管理和调试的工具","date":"2016-07-08T06:06:27.000Z","_content":"\n## 一、为什么使用RAP？\n- 接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。\n比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。\n\n- 而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：\n1.可以按团队和项目结构化的管理接口文档。\n2.提供统一方便的接口定义方式。\n3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。\n4.校验后端提供的接口的数据格式和字段是否符合要求。\n\n**虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。**\n\n\n\n## 二、RAP安装部署\n### 1.下载RAP\n在RAP的github主页上下载最新版本war包\n\n### 2.环境准备\n需要tomcat和mysql\n\n### 3.部署\nRAP在tomcat中要使用ROOT的方式部署。\n- 把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war\n- 在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库\n- 启动tomcat\n- 访问http://localhost:8080/\n\n## 三、RAP的使用\n### 1.注册账号\nRAP自带账号管理和登陆功能，使用前先注册账号，登陆即可\n\n### 2.添加团队、项目产品线等。\n- 创建团队\n![](/images/rap-001.png)\n- 创建产品线\n![](/images/rap-002.png)\n![](/images/rap-003.png)\n\n### 3.分组和项目管理\n![](/images/rap-004.png)\n![](/images/rap-009.png)\n\n### 4.添加模块和页面\n![](/images/rap-005.png)\n\n### 5.添加接口\n![](/images/rap-006.png)\n\n### 6.为返回值字段设置自定义的mock数据\n![](/images/rap-007.png)\n我们可以为不同的字段自定义不同的mock数据，已适应实际需要。\n\n### 7.前端使用接口mock数据提前进行开发\n![](/images/rap-008.png)\n这个例子中的“项目根路径”：localhost:8080/mockjs/1\n就是这个mock服务的模拟服务路径\n前端访问：http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&activate_code=sdf&mac_address=sdf\n就是访问我们模拟的接口地址: /client/machine/activate","source":"_posts/使用RAP作为接口管理和调试的工具.md","raw":"---\ntitle: 使用RAP作为接口管理和调试的工具\ndate: 2016-07-08 14:06:27\ntags: [接口文档, RAP, mock]\n---\n\n## 一、为什么使用RAP？\n- 接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。\n比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。\n\n- 而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：\n1.可以按团队和项目结构化的管理接口文档。\n2.提供统一方便的接口定义方式。\n3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。\n4.校验后端提供的接口的数据格式和字段是否符合要求。\n\n**虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。**\n\n\n\n## 二、RAP安装部署\n### 1.下载RAP\n在RAP的github主页上下载最新版本war包\n\n### 2.环境准备\n需要tomcat和mysql\n\n### 3.部署\nRAP在tomcat中要使用ROOT的方式部署。\n- 把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war\n- 在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库\n- 启动tomcat\n- 访问http://localhost:8080/\n\n## 三、RAP的使用\n### 1.注册账号\nRAP自带账号管理和登陆功能，使用前先注册账号，登陆即可\n\n### 2.添加团队、项目产品线等。\n- 创建团队\n![](/images/rap-001.png)\n- 创建产品线\n![](/images/rap-002.png)\n![](/images/rap-003.png)\n\n### 3.分组和项目管理\n![](/images/rap-004.png)\n![](/images/rap-009.png)\n\n### 4.添加模块和页面\n![](/images/rap-005.png)\n\n### 5.添加接口\n![](/images/rap-006.png)\n\n### 6.为返回值字段设置自定义的mock数据\n![](/images/rap-007.png)\n我们可以为不同的字段自定义不同的mock数据，已适应实际需要。\n\n### 7.前端使用接口mock数据提前进行开发\n![](/images/rap-008.png)\n这个例子中的“项目根路径”：localhost:8080/mockjs/1\n就是这个mock服务的模拟服务路径\n前端访问：http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&activate_code=sdf&mac_address=sdf\n就是访问我们模拟的接口地址: /client/machine/activate","slug":"使用RAP作为接口管理和调试的工具","published":1,"updated":"2016-07-11T12:08:57.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usx4003400uugdu68fzl","content":"<h2 id=\"一、为什么使用RAP？\"><a href=\"#一、为什么使用RAP？\" class=\"headerlink\" title=\"一、为什么使用RAP？\"></a>一、为什么使用RAP？</h2><ul>\n<li><p>接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。<br>比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。</p>\n</li>\n<li><p>而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：<br>1.可以按团队和项目结构化的管理接口文档。<br>2.提供统一方便的接口定义方式。<br>3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。<br>4.校验后端提供的接口的数据格式和字段是否符合要求。</p>\n</li>\n</ul>\n<p><strong>虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。</strong></p>\n<h2 id=\"二、RAP安装部署\"><a href=\"#二、RAP安装部署\" class=\"headerlink\" title=\"二、RAP安装部署\"></a>二、RAP安装部署</h2><h3 id=\"1-下载RAP\"><a href=\"#1-下载RAP\" class=\"headerlink\" title=\"1.下载RAP\"></a>1.下载RAP</h3><p>在RAP的github主页上下载最新版本war包</p>\n<h3 id=\"2-环境准备\"><a href=\"#2-环境准备\" class=\"headerlink\" title=\"2.环境准备\"></a>2.环境准备</h3><p>需要tomcat和mysql</p>\n<h3 id=\"3-部署\"><a href=\"#3-部署\" class=\"headerlink\" title=\"3.部署\"></a>3.部署</h3><p>RAP在tomcat中要使用ROOT的方式部署。</p>\n<ul>\n<li>把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war</li>\n<li>在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库</li>\n<li>启动tomcat</li>\n<li>访问<a href=\"http://localhost:8080/\">http://localhost:8080/</a></li>\n</ul>\n<h2 id=\"三、RAP的使用\"><a href=\"#三、RAP的使用\" class=\"headerlink\" title=\"三、RAP的使用\"></a>三、RAP的使用</h2><h3 id=\"1-注册账号\"><a href=\"#1-注册账号\" class=\"headerlink\" title=\"1.注册账号\"></a>1.注册账号</h3><p>RAP自带账号管理和登陆功能，使用前先注册账号，登陆即可</p>\n<h3 id=\"2-添加团队、项目产品线等。\"><a href=\"#2-添加团队、项目产品线等。\" class=\"headerlink\" title=\"2.添加团队、项目产品线等。\"></a>2.添加团队、项目产品线等。</h3><ul>\n<li>创建团队<br><img src=\"/images/rap-001.png\" alt=\"\"></li>\n<li>创建产品线<br><img src=\"/images/rap-002.png\" alt=\"\"><br><img src=\"/images/rap-003.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"3-分组和项目管理\"><a href=\"#3-分组和项目管理\" class=\"headerlink\" title=\"3.分组和项目管理\"></a>3.分组和项目管理</h3><p><img src=\"/images/rap-004.png\" alt=\"\"><br><img src=\"/images/rap-009.png\" alt=\"\"></p>\n<h3 id=\"4-添加模块和页面\"><a href=\"#4-添加模块和页面\" class=\"headerlink\" title=\"4.添加模块和页面\"></a>4.添加模块和页面</h3><p><img src=\"/images/rap-005.png\" alt=\"\"></p>\n<h3 id=\"5-添加接口\"><a href=\"#5-添加接口\" class=\"headerlink\" title=\"5.添加接口\"></a>5.添加接口</h3><p><img src=\"/images/rap-006.png\" alt=\"\"></p>\n<h3 id=\"6-为返回值字段设置自定义的mock数据\"><a href=\"#6-为返回值字段设置自定义的mock数据\" class=\"headerlink\" title=\"6.为返回值字段设置自定义的mock数据\"></a>6.为返回值字段设置自定义的mock数据</h3><p><img src=\"/images/rap-007.png\" alt=\"\"><br>我们可以为不同的字段自定义不同的mock数据，已适应实际需要。</p>\n<h3 id=\"7-前端使用接口mock数据提前进行开发\"><a href=\"#7-前端使用接口mock数据提前进行开发\" class=\"headerlink\" title=\"7.前端使用接口mock数据提前进行开发\"></a>7.前端使用接口mock数据提前进行开发</h3><p><img src=\"/images/rap-008.png\" alt=\"\"><br>这个例子中的“项目根路径”：localhost:8080/mockjs/1<br>就是这个mock服务的模拟服务路径<br>前端访问：<a href=\"http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf\">http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf</a><br>就是访问我们模拟的接口地址: /client/machine/activate</p>\n","excerpt":"","more":"<h2 id=\"一、为什么使用RAP？\"><a href=\"#一、为什么使用RAP？\" class=\"headerlink\" title=\"一、为什么使用RAP？\"></a>一、为什么使用RAP？</h2><ul>\n<li><p>接口定义和管理，传统的方式是使用word文档。但word文档管理接口文档有不少问题。<br>比如，word文档在相互传递的过程中，可能会导致彼此文档版本不一致；word文档难以结构化的集中维护各项目的文档，而且编写麻烦；word文档的接口定义功能单一，仅仅提供文档功能。</p>\n</li>\n<li><p>而是用RAP作为接口文档定义管理的工具，则为我们提供了以下功能：<br>1.可以按团队和项目结构化的管理接口文档。<br>2.提供统一方便的接口定义方式。<br>3.为前端提供mock数据，以便在后端没有开发好后端接口前，提前根据接口进行开发。<br>4.校验后端提供的接口的数据格式和字段是否符合要求。</p>\n</li>\n</ul>\n<p><strong>虽然RAP在自动化测试方面功能还有欠缺，仍不失为接口管理一个十分方便的工具。</strong></p>\n<h2 id=\"二、RAP安装部署\"><a href=\"#二、RAP安装部署\" class=\"headerlink\" title=\"二、RAP安装部署\"></a>二、RAP安装部署</h2><h3 id=\"1-下载RAP\"><a href=\"#1-下载RAP\" class=\"headerlink\" title=\"1.下载RAP\"></a>1.下载RAP</h3><p>在RAP的github主页上下载最新版本war包</p>\n<h3 id=\"2-环境准备\"><a href=\"#2-环境准备\" class=\"headerlink\" title=\"2.环境准备\"></a>2.环境准备</h3><p>需要tomcat和mysql</p>\n<h3 id=\"3-部署\"><a href=\"#3-部署\" class=\"headerlink\" title=\"3.部署\"></a>3.部署</h3><p>RAP在tomcat中要使用ROOT的方式部署。</p>\n<ul>\n<li>把下载好的war包放入tomcat的webapps目录下，然后删除tomcat中webapps目录下原先的ROOT文件夹，重命名war包为ROOT.war</li>\n<li>在mysql中建立rap_db数据库，导入RAPgithub代码中提供的sql脚本初始化数据库</li>\n<li>启动tomcat</li>\n<li>访问<a href=\"http://localhost:8080/\">http://localhost:8080/</a></li>\n</ul>\n<h2 id=\"三、RAP的使用\"><a href=\"#三、RAP的使用\" class=\"headerlink\" title=\"三、RAP的使用\"></a>三、RAP的使用</h2><h3 id=\"1-注册账号\"><a href=\"#1-注册账号\" class=\"headerlink\" title=\"1.注册账号\"></a>1.注册账号</h3><p>RAP自带账号管理和登陆功能，使用前先注册账号，登陆即可</p>\n<h3 id=\"2-添加团队、项目产品线等。\"><a href=\"#2-添加团队、项目产品线等。\" class=\"headerlink\" title=\"2.添加团队、项目产品线等。\"></a>2.添加团队、项目产品线等。</h3><ul>\n<li>创建团队<br><img src=\"/images/rap-001.png\" alt=\"\"></li>\n<li>创建产品线<br><img src=\"/images/rap-002.png\" alt=\"\"><br><img src=\"/images/rap-003.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"3-分组和项目管理\"><a href=\"#3-分组和项目管理\" class=\"headerlink\" title=\"3.分组和项目管理\"></a>3.分组和项目管理</h3><p><img src=\"/images/rap-004.png\" alt=\"\"><br><img src=\"/images/rap-009.png\" alt=\"\"></p>\n<h3 id=\"4-添加模块和页面\"><a href=\"#4-添加模块和页面\" class=\"headerlink\" title=\"4.添加模块和页面\"></a>4.添加模块和页面</h3><p><img src=\"/images/rap-005.png\" alt=\"\"></p>\n<h3 id=\"5-添加接口\"><a href=\"#5-添加接口\" class=\"headerlink\" title=\"5.添加接口\"></a>5.添加接口</h3><p><img src=\"/images/rap-006.png\" alt=\"\"></p>\n<h3 id=\"6-为返回值字段设置自定义的mock数据\"><a href=\"#6-为返回值字段设置自定义的mock数据\" class=\"headerlink\" title=\"6.为返回值字段设置自定义的mock数据\"></a>6.为返回值字段设置自定义的mock数据</h3><p><img src=\"/images/rap-007.png\" alt=\"\"><br>我们可以为不同的字段自定义不同的mock数据，已适应实际需要。</p>\n<h3 id=\"7-前端使用接口mock数据提前进行开发\"><a href=\"#7-前端使用接口mock数据提前进行开发\" class=\"headerlink\" title=\"7.前端使用接口mock数据提前进行开发\"></a>7.前端使用接口mock数据提前进行开发</h3><p><img src=\"/images/rap-008.png\" alt=\"\"><br>这个例子中的“项目根路径”：localhost:8080/mockjs/1<br>就是这个mock服务的模拟服务路径<br>前端访问：<a href=\"http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf\">http://localhost:8080/mockjs/1/client/machine/activate?drive_id=sfd&amp;activate_code=sdf&amp;mac_address=sdf</a><br>就是访问我们模拟的接口地址: /client/machine/activate</p>\n","sticky":0},{"title":"动态报表模块设计","date":"2016-12-18T07:49:16.000Z","_content":"\n\n# 动态报表模块设计\n\n\n\n\n## 1.需求概述\n\n- 实现根据dba提供的sql语句，动态生成业务部门需要的报表展示页面\n\n\n## 2.页面原型\n\n### 1）报表展示和预览页面\n![](/images/ireport_design_ui_01.png)\n\n- 菜单栏，每个app代表一个应用，每个report代表一个具体报表\n- “添加报表”菜单，进入添加报表页面\n- 查询框，通过'ireports_report_setting'表的'query_column'动态生成\n- 报表table，通过'ireports_report_setting'表的'table_column_mapping'动态生成\n\n### 2）报表添加与设置页面\n![](/images/ireport_design_ui_02.png)\n\n- 查询类型有：\n```\n1, = (等于)\n2, > (大于)\n3, < (小于)\n4, >= (大于等于)\n5, <= (小于等于)\n6, time (时间区间)\n```\n\n\n## 3.模型设计\n\n### 1）数据库模型图\n![](/images/ireport_design_table.png)\n\n### 2）模型表说明\n\n- ireports_app(报表所属应用或模块)\n```\nCREATE TABLE `ireports_app` (\n  `aid` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) NOT NULL COMMENT '应用名称',\n  `status` tinyint(4) DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`aid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='报表所属应用或模块';\n```\n\n- ireports_report(报表记录表)\n```\nCREATE TABLE `ireports_report` (\n  `rid` int(11) NOT NULL AUTO_INCREMENT COMMENT '报表id',\n  `rsid` int(11) DEFAULT '0' COMMENT '报表详细设置id',\n  `report` varchar(50) NOT NULL COMMENT '报表名称',\n  `sql` text NOT NULL COMMENT '报表sql',\n  `type` tinyint(4) DEFAULT '0' COMMENT '报表类型',\n  `status` tinyint(4) DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`rid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='报表记录表';\n```\n\n- ireports_report_setting(报表详细设置表)\n```\nCREATE TABLE `ireports_report_setting` (\n  `rsid` int(11) NOT NULL AUTO_INCREMENT COMMENT '报表设置id',\n  `is_page` tinyint(1) DEFAULT '1' COMMENT '是否分页',\n  `table_column_mapping` longtext COMMENT '报表表头字段映射',\n  `query_column` text COMMENT '报表查询字段配置',\n  PRIMARY KEY (`rsid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='报表详细设置表';\n```\n\n- ireports_query_type(查询类型表)\n```\nCREATE TABLE `ireports_query_type` (\n  `qtid` int(11) NOT NULL AUTO_INCREMENT COMMENT '查询类型id',\n  `type` varchar(20) NOT NULL COMMENT '查询类型',\n  PRIMARY KEY (`qtid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='查询类型表';\n```\n\n\n## 4.技术实现\n\n### 1)报表数据来源与连接：2个方案\n- 只连接业务员库，每次当添加的报表需要数据时，从基础数据库中同步到业务员库\n- 业务员系统添加对基础数据库的连接，添加一个内测or公测的基础数据库\n\n### 2）数据连接层\n- 使用mybatis\n\n### 3)动态报表展示\n- 使用Freemarker + Jquery\n\n后台读取报表配置后，使用Freemarker模板生成页面框架与页面元素。\n\n页面载入后，使用Jquery异步请求报表数据，并展现。\n","source":"_posts/动态报表模块设计.md","raw":"---\ntitle: 动态报表模块设计\ndate: 2016-12-18 15:49:16\ntags:\n---\n\n\n# 动态报表模块设计\n\n\n\n\n## 1.需求概述\n\n- 实现根据dba提供的sql语句，动态生成业务部门需要的报表展示页面\n\n\n## 2.页面原型\n\n### 1）报表展示和预览页面\n![](/images/ireport_design_ui_01.png)\n\n- 菜单栏，每个app代表一个应用，每个report代表一个具体报表\n- “添加报表”菜单，进入添加报表页面\n- 查询框，通过'ireports_report_setting'表的'query_column'动态生成\n- 报表table，通过'ireports_report_setting'表的'table_column_mapping'动态生成\n\n### 2）报表添加与设置页面\n![](/images/ireport_design_ui_02.png)\n\n- 查询类型有：\n```\n1, = (等于)\n2, > (大于)\n3, < (小于)\n4, >= (大于等于)\n5, <= (小于等于)\n6, time (时间区间)\n```\n\n\n## 3.模型设计\n\n### 1）数据库模型图\n![](/images/ireport_design_table.png)\n\n### 2）模型表说明\n\n- ireports_app(报表所属应用或模块)\n```\nCREATE TABLE `ireports_app` (\n  `aid` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) NOT NULL COMMENT '应用名称',\n  `status` tinyint(4) DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`aid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='报表所属应用或模块';\n```\n\n- ireports_report(报表记录表)\n```\nCREATE TABLE `ireports_report` (\n  `rid` int(11) NOT NULL AUTO_INCREMENT COMMENT '报表id',\n  `rsid` int(11) DEFAULT '0' COMMENT '报表详细设置id',\n  `report` varchar(50) NOT NULL COMMENT '报表名称',\n  `sql` text NOT NULL COMMENT '报表sql',\n  `type` tinyint(4) DEFAULT '0' COMMENT '报表类型',\n  `status` tinyint(4) DEFAULT '0' COMMENT '状态',\n  PRIMARY KEY (`rid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='报表记录表';\n```\n\n- ireports_report_setting(报表详细设置表)\n```\nCREATE TABLE `ireports_report_setting` (\n  `rsid` int(11) NOT NULL AUTO_INCREMENT COMMENT '报表设置id',\n  `is_page` tinyint(1) DEFAULT '1' COMMENT '是否分页',\n  `table_column_mapping` longtext COMMENT '报表表头字段映射',\n  `query_column` text COMMENT '报表查询字段配置',\n  PRIMARY KEY (`rsid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='报表详细设置表';\n```\n\n- ireports_query_type(查询类型表)\n```\nCREATE TABLE `ireports_query_type` (\n  `qtid` int(11) NOT NULL AUTO_INCREMENT COMMENT '查询类型id',\n  `type` varchar(20) NOT NULL COMMENT '查询类型',\n  PRIMARY KEY (`qtid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='查询类型表';\n```\n\n\n## 4.技术实现\n\n### 1)报表数据来源与连接：2个方案\n- 只连接业务员库，每次当添加的报表需要数据时，从基础数据库中同步到业务员库\n- 业务员系统添加对基础数据库的连接，添加一个内测or公测的基础数据库\n\n### 2）数据连接层\n- 使用mybatis\n\n### 3)动态报表展示\n- 使用Freemarker + Jquery\n\n后台读取报表配置后，使用Freemarker模板生成页面框架与页面元素。\n\n页面载入后，使用Jquery异步请求报表数据，并展现。\n","slug":"动态报表模块设计","published":1,"updated":"2016-12-18T07:50:16.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usxa003700uui8clvrw6","content":"<h1 id=\"动态报表模块设计\"><a href=\"#动态报表模块设计\" class=\"headerlink\" title=\"动态报表模块设计\"></a>动态报表模块设计</h1><h2 id=\"1-需求概述\"><a href=\"#1-需求概述\" class=\"headerlink\" title=\"1.需求概述\"></a>1.需求概述</h2><ul>\n<li>实现根据dba提供的sql语句，动态生成业务部门需要的报表展示页面</li>\n</ul>\n<h2 id=\"2-页面原型\"><a href=\"#2-页面原型\" class=\"headerlink\" title=\"2.页面原型\"></a>2.页面原型</h2><h3 id=\"1）报表展示和预览页面\"><a href=\"#1）报表展示和预览页面\" class=\"headerlink\" title=\"1）报表展示和预览页面\"></a>1）报表展示和预览页面</h3><p><img src=\"/images/ireport_design_ui_01.png\" alt=\"\"></p>\n<ul>\n<li>菜单栏，每个app代表一个应用，每个report代表一个具体报表</li>\n<li>“添加报表”菜单，进入添加报表页面</li>\n<li>查询框，通过’ireports_report_setting’表的’query_column’动态生成</li>\n<li>报表table，通过’ireports_report_setting’表的’table_column_mapping’动态生成</li>\n</ul>\n<h3 id=\"2）报表添加与设置页面\"><a href=\"#2）报表添加与设置页面\" class=\"headerlink\" title=\"2）报表添加与设置页面\"></a>2）报表添加与设置页面</h3><p><img src=\"/images/ireport_design_ui_02.png\" alt=\"\"></p>\n<ul>\n<li>查询类型有：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1, = (等于)</span><br><span class=\"line\">2, &gt; (大于)</span><br><span class=\"line\">3, &lt; (小于)</span><br><span class=\"line\">4, &gt;= (大于等于)</span><br><span class=\"line\">5, &lt;= (小于等于)</span><br><span class=\"line\">6, time (时间区间)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-模型设计\"><a href=\"#3-模型设计\" class=\"headerlink\" title=\"3.模型设计\"></a>3.模型设计</h2><h3 id=\"1）数据库模型图\"><a href=\"#1）数据库模型图\" class=\"headerlink\" title=\"1）数据库模型图\"></a>1）数据库模型图</h3><p><img src=\"/images/ireport_design_table.png\" alt=\"\"></p>\n<h3 id=\"2）模型表说明\"><a href=\"#2）模型表说明\" class=\"headerlink\" title=\"2）模型表说明\"></a>2）模型表说明</h3><ul>\n<li><p>ireports_app(报表所属应用或模块)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_app` (</span><br><span class=\"line\">  `aid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `name` varchar(50) NOT NULL COMMENT &apos;应用名称&apos;,</span><br><span class=\"line\">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`aid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表所属应用或模块&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ireports_report(报表记录表)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_report` (</span><br><span class=\"line\">  `rid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表id&apos;,</span><br><span class=\"line\">  `rsid` int(11) DEFAULT &apos;0&apos; COMMENT &apos;报表详细设置id&apos;,</span><br><span class=\"line\">  `report` varchar(50) NOT NULL COMMENT &apos;报表名称&apos;,</span><br><span class=\"line\">  `sql` text NOT NULL COMMENT &apos;报表sql&apos;,</span><br><span class=\"line\">  `type` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;报表类型&apos;,</span><br><span class=\"line\">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`rid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表记录表&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ireports_report_setting(报表详细设置表)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_report_setting` (</span><br><span class=\"line\">  `rsid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表设置id&apos;,</span><br><span class=\"line\">  `is_page` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;是否分页&apos;,</span><br><span class=\"line\">  `table_column_mapping` longtext COMMENT &apos;报表表头字段映射&apos;,</span><br><span class=\"line\">  `query_column` text COMMENT &apos;报表查询字段配置&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`rsid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表详细设置表&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ireports_query_type(查询类型表)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_query_type` (</span><br><span class=\"line\">  `qtid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;查询类型id&apos;,</span><br><span class=\"line\">  `type` varchar(20) NOT NULL COMMENT &apos;查询类型&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`qtid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;查询类型表&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"4-技术实现\"><a href=\"#4-技术实现\" class=\"headerlink\" title=\"4.技术实现\"></a>4.技术实现</h2><h3 id=\"1-报表数据来源与连接：2个方案\"><a href=\"#1-报表数据来源与连接：2个方案\" class=\"headerlink\" title=\"1)报表数据来源与连接：2个方案\"></a>1)报表数据来源与连接：2个方案</h3><ul>\n<li>只连接业务员库，每次当添加的报表需要数据时，从基础数据库中同步到业务员库</li>\n<li>业务员系统添加对基础数据库的连接，添加一个内测or公测的基础数据库</li>\n</ul>\n<h3 id=\"2）数据连接层\"><a href=\"#2）数据连接层\" class=\"headerlink\" title=\"2）数据连接层\"></a>2）数据连接层</h3><ul>\n<li>使用mybatis</li>\n</ul>\n<h3 id=\"3-动态报表展示\"><a href=\"#3-动态报表展示\" class=\"headerlink\" title=\"3)动态报表展示\"></a>3)动态报表展示</h3><ul>\n<li>使用Freemarker + Jquery</li>\n</ul>\n<p>后台读取报表配置后，使用Freemarker模板生成页面框架与页面元素。</p>\n<p>页面载入后，使用Jquery异步请求报表数据，并展现。</p>\n","excerpt":"","more":"<h1 id=\"动态报表模块设计\"><a href=\"#动态报表模块设计\" class=\"headerlink\" title=\"动态报表模块设计\"></a>动态报表模块设计</h1><h2 id=\"1-需求概述\"><a href=\"#1-需求概述\" class=\"headerlink\" title=\"1.需求概述\"></a>1.需求概述</h2><ul>\n<li>实现根据dba提供的sql语句，动态生成业务部门需要的报表展示页面</li>\n</ul>\n<h2 id=\"2-页面原型\"><a href=\"#2-页面原型\" class=\"headerlink\" title=\"2.页面原型\"></a>2.页面原型</h2><h3 id=\"1）报表展示和预览页面\"><a href=\"#1）报表展示和预览页面\" class=\"headerlink\" title=\"1）报表展示和预览页面\"></a>1）报表展示和预览页面</h3><p><img src=\"/images/ireport_design_ui_01.png\" alt=\"\"></p>\n<ul>\n<li>菜单栏，每个app代表一个应用，每个report代表一个具体报表</li>\n<li>“添加报表”菜单，进入添加报表页面</li>\n<li>查询框，通过’ireports_report_setting’表的’query_column’动态生成</li>\n<li>报表table，通过’ireports_report_setting’表的’table_column_mapping’动态生成</li>\n</ul>\n<h3 id=\"2）报表添加与设置页面\"><a href=\"#2）报表添加与设置页面\" class=\"headerlink\" title=\"2）报表添加与设置页面\"></a>2）报表添加与设置页面</h3><p><img src=\"/images/ireport_design_ui_02.png\" alt=\"\"></p>\n<ul>\n<li>查询类型有：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1, = (等于)</span><br><span class=\"line\">2, &gt; (大于)</span><br><span class=\"line\">3, &lt; (小于)</span><br><span class=\"line\">4, &gt;= (大于等于)</span><br><span class=\"line\">5, &lt;= (小于等于)</span><br><span class=\"line\">6, time (时间区间)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-模型设计\"><a href=\"#3-模型设计\" class=\"headerlink\" title=\"3.模型设计\"></a>3.模型设计</h2><h3 id=\"1）数据库模型图\"><a href=\"#1）数据库模型图\" class=\"headerlink\" title=\"1）数据库模型图\"></a>1）数据库模型图</h3><p><img src=\"/images/ireport_design_table.png\" alt=\"\"></p>\n<h3 id=\"2）模型表说明\"><a href=\"#2）模型表说明\" class=\"headerlink\" title=\"2）模型表说明\"></a>2）模型表说明</h3><ul>\n<li><p>ireports_app(报表所属应用或模块)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_app` (</span><br><span class=\"line\">  `aid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `name` varchar(50) NOT NULL COMMENT &apos;应用名称&apos;,</span><br><span class=\"line\">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`aid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表所属应用或模块&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ireports_report(报表记录表)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_report` (</span><br><span class=\"line\">  `rid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表id&apos;,</span><br><span class=\"line\">  `rsid` int(11) DEFAULT &apos;0&apos; COMMENT &apos;报表详细设置id&apos;,</span><br><span class=\"line\">  `report` varchar(50) NOT NULL COMMENT &apos;报表名称&apos;,</span><br><span class=\"line\">  `sql` text NOT NULL COMMENT &apos;报表sql&apos;,</span><br><span class=\"line\">  `type` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;报表类型&apos;,</span><br><span class=\"line\">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`rid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表记录表&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ireports_report_setting(报表详细设置表)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_report_setting` (</span><br><span class=\"line\">  `rsid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表设置id&apos;,</span><br><span class=\"line\">  `is_page` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;是否分页&apos;,</span><br><span class=\"line\">  `table_column_mapping` longtext COMMENT &apos;报表表头字段映射&apos;,</span><br><span class=\"line\">  `query_column` text COMMENT &apos;报表查询字段配置&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`rsid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表详细设置表&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ireports_query_type(查询类型表)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `ireports_query_type` (</span><br><span class=\"line\">  `qtid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;查询类型id&apos;,</span><br><span class=\"line\">  `type` varchar(20) NOT NULL COMMENT &apos;查询类型&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`qtid`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;查询类型表&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"4-技术实现\"><a href=\"#4-技术实现\" class=\"headerlink\" title=\"4.技术实现\"></a>4.技术实现</h2><h3 id=\"1-报表数据来源与连接：2个方案\"><a href=\"#1-报表数据来源与连接：2个方案\" class=\"headerlink\" title=\"1)报表数据来源与连接：2个方案\"></a>1)报表数据来源与连接：2个方案</h3><ul>\n<li>只连接业务员库，每次当添加的报表需要数据时，从基础数据库中同步到业务员库</li>\n<li>业务员系统添加对基础数据库的连接，添加一个内测or公测的基础数据库</li>\n</ul>\n<h3 id=\"2）数据连接层\"><a href=\"#2）数据连接层\" class=\"headerlink\" title=\"2）数据连接层\"></a>2）数据连接层</h3><ul>\n<li>使用mybatis</li>\n</ul>\n<h3 id=\"3-动态报表展示\"><a href=\"#3-动态报表展示\" class=\"headerlink\" title=\"3)动态报表展示\"></a>3)动态报表展示</h3><ul>\n<li>使用Freemarker + Jquery</li>\n</ul>\n<p>后台读取报表配置后，使用Freemarker模板生成页面框架与页面元素。</p>\n<p>页面载入后，使用Jquery异步请求报表数据，并展现。</p>\n","sticky":0},{"title":"在linux下部署spring boot项目过程记录","date":"2016-03-21T09:52:34.000Z","_content":"\n\n\n# 在linux下部署spring boot项目过程记录\n\n\n\n## 说明\n本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用\n\n## 环境说明\nlinux版本：CentOs7\n配备的开发环境软件服务：\n    - mysql（centos下默认使用mariadb，也可以，两者兼容）\n    - jdk\n    - ftp\n    - redis\n\n### 1. linux下开放端口\n先把一些已知要用到的端口放开了，省的后面要用到的时候连不上\n由于centos7默认没有iptables服务，所以需要先安装\n首先暂停防火墙\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\nThen, install the iptables-services package:\n```\nyum install iptables-services\n```\nEnable the service at boot-time:\n```\nsystemctl enable iptables\n```\n\n配置要放开的端口\n```\niptables -I INPUT -p tcp --dport 80 -j ACCEPT\niptables -I INPUT -p tcp --dport 22 -j ACCEPT\niptables -I INPUT -p tcp --dport 3306 -j ACCEPT\niptables -I INPUT -p tcp --dport 8080 -j ACCEPT\niptables -I INPUT -p tcp --dport 21 -j ACCEPT\niptables -I INPUT -p tcp --dport 8081 -j ACCEPT\n```\n保存配置\n```\nservice iptables save\nor\n/usr/libexec/iptables/iptables.init save\n```\n\nManaging the service开启停止防火墙服务\n```\nsystemctl [stop|start|restart] iptables\n```\n\n\n### 2. linux下安装使用mysql\n一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel\n然而，在centos7下这样安装的时候，却发现mysql-server安装不上。\n原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。\n那么，centos7下安装mysql就有两种方式\n1）使用mariadb；\n2）卸载mariadb，安装mysql\n\n#### 方法1:使用mariadb\n```\nyum install mariadb-server mariadb\nsystemctl start mariadb\nmysql -u root -p\n```\n\n#### 方法2:安装mysql：\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n安装成功后重启mysql服务。\n```\n# service mysqld restart\n```\n初次安装mysql，root账户没有密码。\n```\n[root@yl-web yl]# mysql -u root\n```\n设置密码\n```\nmysql> set password for 'root'@'localhost' =password('password');\n```\n\n#### 实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\n记录如下：\n1）在进入mysql工具时，总是有错误提示:\n```\n# mysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n```\n解决：方法操作很简单，如下：\n```\n# /etc/init.d/mysql stop\n# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n# mysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n# /etc/init.d/mysqld restart\n# mysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n```\n\n2）MySQL服务在启动的时候，不能创建pid文件。\n\n在终端看一下该目录是否存在，果然，不存在。\n于是，创建了/var/run/mysqld/目录，重启MySQL服务\n```\n[root@spark01 ~]# mkdir -p /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。\n```\n[root@spark01 ~]# ls -ld /var/run/mysqld/\ndrwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/\n[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n\n\n### 3. linux下安装jdk\n一、卸载系统自带的openjdk\n1、查询系统内置的jdk，使用命令如下：\n```\nrpm -qa | grep java\n```\n此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。\n如下：\npython-javapackages-3.4.1-11.el7.noarch\njava-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\njava-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\njava-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\ntzdata-java-2015g-1.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\njava-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n\n2、进行卸载，使用命令如下：\n```\nrpm -e --nodeps jdk相关名称\n```\n依次卸载如下：\n```\nrpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps tzdata-java-2015g-1.el7.noarch\nrpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n```\n\n二、jdk安装\n1、下载jdk并上传到/usr/java目录\njdk7下载地址为：http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。\n\n2、解压安装\n进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)\n```\nrpm -ivh jdk-7u79-linux-x64.rpm\n```\n\n3、配置profile文件\n运行如下命令\n```\nvi /etc/profile\n```\n将如下内容添加到profile文件末尾并保持\n```\nexport JAVA_HOME=/usr/java/jdk1.7.0_79\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin \n```\n/usr/java/jdk1.7.0_79 指的是jdk的路径\n\n保存之后，运行如下命令使配置生效\n```\nsource /etc/profile\n```\n检查jdk是否安装成功，运行如下命令\n```\njava -version\n```\n\n\n### 4. linux下安装redis\n1）方法1：使用命令安装\n安装redis:\n```\nyum -y install redis\n```\n启动/停止/重启 Redis\n启动服务：\n```\nsystemctl start redis.service\n```\n停止服务：\n```\nsystemctl stop redis.service\n```\n重启服务：\n```\nsystemctl restart redis.service\n```\n检查状态：\n```\nsystemctl status redis.service\n```\n随系统启动服务：\n```\nsystemctl enable redis.service\n```\n\n2）方法二：编译安装\n下载安装编译:\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nmake install\n```\n设置配置文件路径:\n```\nmkdir -p /etc/redis && cp redis.conf /etc/redis\n```\n修改配置文件：\n```\nvim /etc/redis/redis.conf\n```\n修改为： daemonize yes\n启动Redis:\n```\n/usr/local/bin/redis-server /etc/redis/redis.conf\n```\n\n\n\n### 5. linux配置ftp服务\n在安装前查看是否已安装vsftpd\n```\n[root@localhost ~]# rpm -q vsftpd\nvsftpd-3.0.2-9.el7.x86_64\n```\n如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：\n```\n[root@localhost ~]# yum -y install vsftpd\n```\n查看一下vsftpd安装在哪：\n```\n[root@localhost ~]# whereis vsftpd\nvsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz\n```\n启动vsftpd服务：\n```\n[root@localhost ~]# systemctl start vsftpd.service\n```\n修改配置\n```\nvi /etc/vsftpd/vsftpd.conf\n```\n修改如下配置：\nanonymous_enable=NO\nchroot_local_user=YES\nallow_writeable_chroot=YES #加上这行解决了无法登陆的问题\n\n启动／重新启动ftp\n```\nservice vsftpd start\nservice vsftpd restart\n```\n设置开机启动ftp\n```\nchkconfig vsftpd on\n```\n配置用户\n```\n[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser\n[root@localhost ~]# passwd ftpuser\n[root@localhost ~]# 输入密码\n```\n把 /var/www/html 的所有权给ftpuser.root\n```\n[root@localhost ~]# chown -R ftpuser.root /var/www/html\n```\n\n\n### 6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\n#### 编译打包：\n方法1：使用maven-assembly-plugin插件\n```\n<plugin>\n    <artifactId>maven-assembly-plugin</artifactId> \n    <configuration> \n        <archive>\n            <manifest>\n                <mainClass>com.iyihua.itimes.App</mainClass></manifest> \n            </archive>\n        <descriptorRefs>\n            <descriptorRef> jar-with-dependencies </descriptorRef> \n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id> \n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution> \n    </executions>\n</plugin>\n```\n运行命令：mvn assembly:assembly\n或者命令：mvn package\n\n由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是\n```\nclass {}\n```\n解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。\n\n方法2：使用spring-boot-maven-plugin插件\n由于我的project是spring boot项目，所以可以使用此方法\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>com.iyihua.itimes.App</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n运行mvn package打jar包，done！\n\n#### 上传并启动\n连接sftp\nlcd 打开本地路径\ncd 进入服务器目标路径\nput xxx.jar 把目标jar包上传到服务器对应路径\njava -jar xxx.jar 启动java程序\n","source":"_posts/在linux下部署spring-boot项目过程记录.md","raw":"---\ntitle: 在linux下部署spring boot项目过程记录\ndate: 2016-03-21 17:52:34\ntags: [linux,centos,java,spring boot,部署]\n---\n\n\n\n# 在linux下部署spring boot项目过程记录\n\n\n\n## 说明\n本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用\n\n## 环境说明\nlinux版本：CentOs7\n配备的开发环境软件服务：\n    - mysql（centos下默认使用mariadb，也可以，两者兼容）\n    - jdk\n    - ftp\n    - redis\n\n### 1. linux下开放端口\n先把一些已知要用到的端口放开了，省的后面要用到的时候连不上\n由于centos7默认没有iptables服务，所以需要先安装\n首先暂停防火墙\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\nThen, install the iptables-services package:\n```\nyum install iptables-services\n```\nEnable the service at boot-time:\n```\nsystemctl enable iptables\n```\n\n配置要放开的端口\n```\niptables -I INPUT -p tcp --dport 80 -j ACCEPT\niptables -I INPUT -p tcp --dport 22 -j ACCEPT\niptables -I INPUT -p tcp --dport 3306 -j ACCEPT\niptables -I INPUT -p tcp --dport 8080 -j ACCEPT\niptables -I INPUT -p tcp --dport 21 -j ACCEPT\niptables -I INPUT -p tcp --dport 8081 -j ACCEPT\n```\n保存配置\n```\nservice iptables save\nor\n/usr/libexec/iptables/iptables.init save\n```\n\nManaging the service开启停止防火墙服务\n```\nsystemctl [stop|start|restart] iptables\n```\n\n\n### 2. linux下安装使用mysql\n一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel\n然而，在centos7下这样安装的时候，却发现mysql-server安装不上。\n原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。\n那么，centos7下安装mysql就有两种方式\n1）使用mariadb；\n2）卸载mariadb，安装mysql\n\n#### 方法1:使用mariadb\n```\nyum install mariadb-server mariadb\nsystemctl start mariadb\nmysql -u root -p\n```\n\n#### 方法2:安装mysql：\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n安装成功后重启mysql服务。\n```\n# service mysqld restart\n```\n初次安装mysql，root账户没有密码。\n```\n[root@yl-web yl]# mysql -u root\n```\n设置密码\n```\nmysql> set password for 'root'@'localhost' =password('password');\n```\n\n#### 实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\n记录如下：\n1）在进入mysql工具时，总是有错误提示:\n```\n# mysql -u root -p\nEnter password:\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)\n```\n解决：方法操作很简单，如下：\n```\n# /etc/init.d/mysql stop\n# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n# mysql -u root mysql\nmysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root' and host='root' or host='localhost';//把空的用户密码都修改成非空的密码就行了。\nmysql> FLUSH PRIVILEGES;\nmysql> quit\n# /etc/init.d/mysqld restart\n# mysql -uroot -p\nEnter password: <输入新设的密码newpassword>\n```\n\n2）MySQL服务在启动的时候，不能创建pid文件。\n\n在终端看一下该目录是否存在，果然，不存在。\n于是，创建了/var/run/mysqld/目录，重启MySQL服务\n```\n[root@spark01 ~]# mkdir -p /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。\n```\n[root@spark01 ~]# ls -ld /var/run/mysqld/\ndrwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/\n[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/\n[root@spark01 ~]# /etc/init.d/mysqld start\n```\n\n\n### 3. linux下安装jdk\n一、卸载系统自带的openjdk\n1、查询系统内置的jdk，使用命令如下：\n```\nrpm -qa | grep java\n```\n此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。\n如下：\npython-javapackages-3.4.1-11.el7.noarch\njava-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\njava-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\njava-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\ntzdata-java-2015g-1.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\njava-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n\n2、进行卸载，使用命令如下：\n```\nrpm -e --nodeps jdk相关名称\n```\n依次卸载如下：\n```\nrpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps tzdata-java-2015g-1.el7.noarch\nrpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\n```\n\n二、jdk安装\n1、下载jdk并上传到/usr/java目录\njdk7下载地址为：http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。\n\n2、解压安装\n进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)\n```\nrpm -ivh jdk-7u79-linux-x64.rpm\n```\n\n3、配置profile文件\n运行如下命令\n```\nvi /etc/profile\n```\n将如下内容添加到profile文件末尾并保持\n```\nexport JAVA_HOME=/usr/java/jdk1.7.0_79\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin \n```\n/usr/java/jdk1.7.0_79 指的是jdk的路径\n\n保存之后，运行如下命令使配置生效\n```\nsource /etc/profile\n```\n检查jdk是否安装成功，运行如下命令\n```\njava -version\n```\n\n\n### 4. linux下安装redis\n1）方法1：使用命令安装\n安装redis:\n```\nyum -y install redis\n```\n启动/停止/重启 Redis\n启动服务：\n```\nsystemctl start redis.service\n```\n停止服务：\n```\nsystemctl stop redis.service\n```\n重启服务：\n```\nsystemctl restart redis.service\n```\n检查状态：\n```\nsystemctl status redis.service\n```\n随系统启动服务：\n```\nsystemctl enable redis.service\n```\n\n2）方法二：编译安装\n下载安装编译:\n```\nwget http://download.redis.io/releases/redis-2.8.17.tar.gz\ntar xzf redis-2.8.17.tar.gz\ncd redis-2.8.17\nmake\nmake install\n```\n设置配置文件路径:\n```\nmkdir -p /etc/redis && cp redis.conf /etc/redis\n```\n修改配置文件：\n```\nvim /etc/redis/redis.conf\n```\n修改为： daemonize yes\n启动Redis:\n```\n/usr/local/bin/redis-server /etc/redis/redis.conf\n```\n\n\n\n### 5. linux配置ftp服务\n在安装前查看是否已安装vsftpd\n```\n[root@localhost ~]# rpm -q vsftpd\nvsftpd-3.0.2-9.el7.x86_64\n```\n如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：\n```\n[root@localhost ~]# yum -y install vsftpd\n```\n查看一下vsftpd安装在哪：\n```\n[root@localhost ~]# whereis vsftpd\nvsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz\n```\n启动vsftpd服务：\n```\n[root@localhost ~]# systemctl start vsftpd.service\n```\n修改配置\n```\nvi /etc/vsftpd/vsftpd.conf\n```\n修改如下配置：\nanonymous_enable=NO\nchroot_local_user=YES\nallow_writeable_chroot=YES #加上这行解决了无法登陆的问题\n\n启动／重新启动ftp\n```\nservice vsftpd start\nservice vsftpd restart\n```\n设置开机启动ftp\n```\nchkconfig vsftpd on\n```\n配置用户\n```\n[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser\n[root@localhost ~]# passwd ftpuser\n[root@localhost ~]# 输入密码\n```\n把 /var/www/html 的所有权给ftpuser.root\n```\n[root@localhost ~]# chown -R ftpuser.root /var/www/html\n```\n\n\n### 6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\n#### 编译打包：\n方法1：使用maven-assembly-plugin插件\n```\n<plugin>\n    <artifactId>maven-assembly-plugin</artifactId> \n    <configuration> \n        <archive>\n            <manifest>\n                <mainClass>com.iyihua.itimes.App</mainClass></manifest> \n            </archive>\n        <descriptorRefs>\n            <descriptorRef> jar-with-dependencies </descriptorRef> \n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id> \n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution> \n    </executions>\n</plugin>\n```\n运行命令：mvn assembly:assembly\n或者命令：mvn package\n\n由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是\n```\nclass {}\n```\n解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。\n\n方法2：使用spring-boot-maven-plugin插件\n由于我的project是spring boot项目，所以可以使用此方法\n```\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>com.iyihua.itimes.App</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n运行mvn package打jar包，done！\n\n#### 上传并启动\n连接sftp\nlcd 打开本地路径\ncd 进入服务器目标路径\nput xxx.jar 把目标jar包上传到服务器对应路径\njava -jar xxx.jar 启动java程序\n","slug":"在linux下部署spring-boot项目过程记录","published":1,"updated":"2016-04-07T15:28:36.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlv4usxe003900uuiti0j8lq","content":"<h1 id=\"在linux下部署spring-boot项目过程记录\"><a href=\"#在linux下部署spring-boot项目过程记录\" class=\"headerlink\" title=\"在linux下部署spring boot项目过程记录\"></a>在linux下部署spring boot项目过程记录</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用</p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>linux版本：CentOs7<br>配备的开发环境软件服务：</p>\n<pre><code>- mysql（centos下默认使用mariadb，也可以，两者兼容）\n- jdk\n- ftp\n- redis\n</code></pre><h3 id=\"1-linux下开放端口\"><a href=\"#1-linux下开放端口\" class=\"headerlink\" title=\"1. linux下开放端口\"></a>1. linux下开放端口</h3><p>先把一些已知要用到的端口放开了，省的后面要用到的时候连不上<br>由于centos7默认没有iptables服务，所以需要先安装<br>首先暂停防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>\n<p>Then, install the iptables-services package:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install iptables-services</span><br></pre></td></tr></table></figure></p>\n<p>Enable the service at boot-time:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables</span><br></pre></td></tr></table></figure></p>\n<p>配置要放开的端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8081 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>保存配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">or</span><br><span class=\"line\">/usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></p>\n<p>Managing the service开启停止防火墙服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl [stop|start|restart] iptables</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-linux下安装使用mysql\"><a href=\"#2-linux下安装使用mysql\" class=\"headerlink\" title=\"2. linux下安装使用mysql\"></a>2. linux下安装使用mysql</h3><p>一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel<br>然而，在centos7下这样安装的时候，却发现mysql-server安装不上。<br>原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。<br>那么，centos7下安装mysql就有两种方式<br>1）使用mariadb；<br>2）卸载mariadb，安装mysql</p>\n<h4 id=\"方法1-使用mariadb\"><a href=\"#方法1-使用mariadb\" class=\"headerlink\" title=\"方法1:使用mariadb\"></a>方法1:使用mariadb</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br><span class=\"line\">systemctl start mariadb</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2-安装mysql：\"><a href=\"#方法2-安装mysql：\" class=\"headerlink\" title=\"方法2:安装mysql：\"></a>方法2:安装mysql：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>安装成功后重启mysql服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld restart</span><br></pre></td></tr></table></figure></p>\n<p>初次安装mysql，root账户没有密码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@yl-web yl]# mysql -u root</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"><a href=\"#实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\" class=\"headerlink\" title=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"></a>实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。</h4><p>记录如下：<br>1）在进入mysql工具时，总是有错误提示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br></pre></td></tr></table></figure></p>\n<p>解决：方法操作很简单，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/init.d/mysql stop</span><br><span class=\"line\"># mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\"># mysql -u root mysql</span><br><span class=\"line\">mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos; and host=&apos;root&apos; or host=&apos;localhost&apos;;//把空的用户密码都修改成非空的密码就行了。</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">mysql&gt; quit</span><br><span class=\"line\"># /etc/init.d/mysqld restart</span><br><span class=\"line\"># mysql -uroot -p</span><br><span class=\"line\">Enter password: &lt;输入新设的密码newpassword&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2）MySQL服务在启动的时候，不能创建pid文件。</p>\n<p>在终端看一下该目录是否存在，果然，不存在。<br>于是，创建了/var/run/mysqld/目录，重启MySQL服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# mkdir -p /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<p>如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# ls -ld /var/run/mysqld/</span><br><span class=\"line\">drwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-linux下安装jdk\"><a href=\"#3-linux下安装jdk\" class=\"headerlink\" title=\"3. linux下安装jdk\"></a>3. linux下安装jdk</h3><p>一、卸载系统自带的openjdk<br>1、查询系统内置的jdk，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java</span><br></pre></td></tr></table></figure></p>\n<p>此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。<br>如下：<br>python-javapackages-3.4.1-11.el7.noarch<br>java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64<br>java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64<br>java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64<br>tzdata-java-2015g-1.el7.noarch<br>javapackages-tools-3.4.1-11.el7.noarch<br>java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</p>\n<p>2、进行卸载，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps jdk相关名称</span><br></pre></td></tr></table></figure></p>\n<p>依次卸载如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps tzdata-java-2015g-1.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>二、jdk安装<br>1、下载jdk并上传到/usr/java目录<br>jdk7下载地址为：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a> 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。</p>\n<p>2、解压安装<br>进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh jdk-7u79-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>3、配置profile文件<br>运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>将如下内容添加到profile文件末尾并保持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.7.0_79</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></p>\n<p>/usr/java/jdk1.7.0_79 指的是jdk的路径</p>\n<p>保存之后，运行如下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>检查jdk是否安装成功，运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-linux下安装redis\"><a href=\"#4-linux下安装redis\" class=\"headerlink\" title=\"4. linux下安装redis\"></a>4. linux下安装redis</h3><p>1）方法1：使用命令安装<br>安装redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install redis</span><br></pre></td></tr></table></figure></p>\n<p>启动/停止/重启 Redis<br>启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis.service</span><br></pre></td></tr></table></figure></p>\n<p>停止服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop redis.service</span><br></pre></td></tr></table></figure></p>\n<p>重启服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis.service</span><br></pre></td></tr></table></figure></p>\n<p>检查状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status redis.service</span><br></pre></td></tr></table></figure></p>\n<p>随系统启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable redis.service</span><br></pre></td></tr></table></figure></p>\n<p>2）方法二：编译安装<br>下载安装编译:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class=\"line\">tar xzf redis-2.8.17.tar.gz</span><br><span class=\"line\">cd redis-2.8.17</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<p>设置配置文件路径:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/redis &amp;&amp; cp redis.conf /etc/redis</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改为： daemonize yes<br>启动Redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-linux配置ftp服务\"><a href=\"#5-linux配置ftp服务\" class=\"headerlink\" title=\"5. linux配置ftp服务\"></a>5. linux配置ftp服务</h3><p>在安装前查看是否已安装vsftpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -q vsftpd</span><br><span class=\"line\">vsftpd-3.0.2-9.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum -y install vsftpd</span><br></pre></td></tr></table></figure></p>\n<p>查看一下vsftpd安装在哪：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# whereis vsftpd</span><br><span class=\"line\">vsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz</span><br></pre></td></tr></table></figure></p>\n<p>启动vsftpd服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改如下配置：<br>anonymous_enable=NO<br>chroot_local_user=YES<br>allow_writeable_chroot=YES #加上这行解决了无法登陆的问题</p>\n<p>启动／重新启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure></p>\n<p>设置开机启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig vsftpd on</span><br></pre></td></tr></table></figure></p>\n<p>配置用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser</span><br><span class=\"line\">[root@localhost ~]# passwd ftpuser</span><br><span class=\"line\">[root@localhost ~]# 输入密码</span><br></pre></td></tr></table></figure></p>\n<p>把 /var/www/html 的所有权给ftpuser.root<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# chown -R ftpuser.root /var/www/html</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\"><a href=\"#6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\" class=\"headerlink\" title=\"6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\"></a>6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动</h3><h4 id=\"编译打包：\"><a href=\"#编译打包：\" class=\"headerlink\" title=\"编译打包：\"></a>编译打包：</h4><p>方法1：使用maven-assembly-plugin插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;configuration&gt; </span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;&lt;/manifest&gt; </span><br><span class=\"line\">            &lt;/archive&gt;</span><br><span class=\"line\">        &lt;descriptorRefs&gt;</span><br><span class=\"line\">            &lt;descriptorRef&gt; jar-with-dependencies &lt;/descriptorRef&gt; </span><br><span class=\"line\">        &lt;/descriptorRefs&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;make-assembly&lt;/id&gt; </span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt; </span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行命令：mvn assembly:assembly<br>或者命令：mvn package</p>\n<p>由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。</p>\n<p>方法2：使用spring-boot-maven-plugin插件<br>由于我的project是spring boot项目，所以可以使用此方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/manifest&gt;</span><br><span class=\"line\">        &lt;/archive&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行mvn package打jar包，done！</p>\n<h4 id=\"上传并启动\"><a href=\"#上传并启动\" class=\"headerlink\" title=\"上传并启动\"></a>上传并启动</h4><p>连接sftp<br>lcd 打开本地路径<br>cd 进入服务器目标路径<br>put xxx.jar 把目标jar包上传到服务器对应路径<br>java -jar xxx.jar 启动java程序</p>\n","excerpt":"","more":"<h1 id=\"在linux下部署spring-boot项目过程记录\"><a href=\"#在linux下部署spring-boot项目过程记录\" class=\"headerlink\" title=\"在linux下部署spring boot项目过程记录\"></a>在linux下部署spring boot项目过程记录</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用</p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>linux版本：CentOs7<br>配备的开发环境软件服务：</p>\n<pre><code>- mysql（centos下默认使用mariadb，也可以，两者兼容）\n- jdk\n- ftp\n- redis\n</code></pre><h3 id=\"1-linux下开放端口\"><a href=\"#1-linux下开放端口\" class=\"headerlink\" title=\"1. linux下开放端口\"></a>1. linux下开放端口</h3><p>先把一些已知要用到的端口放开了，省的后面要用到的时候连不上<br>由于centos7默认没有iptables服务，所以需要先安装<br>首先暂停防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>\n<p>Then, install the iptables-services package:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install iptables-services</span><br></pre></td></tr></table></figure></p>\n<p>Enable the service at boot-time:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables</span><br></pre></td></tr></table></figure></p>\n<p>配置要放开的端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 8081 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<p>保存配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">or</span><br><span class=\"line\">/usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></p>\n<p>Managing the service开启停止防火墙服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl [stop|start|restart] iptables</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-linux下安装使用mysql\"><a href=\"#2-linux下安装使用mysql\" class=\"headerlink\" title=\"2. linux下安装使用mysql\"></a>2. linux下安装使用mysql</h3><p>一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel<br>然而，在centos7下这样安装的时候，却发现mysql-server安装不上。<br>原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。<br>那么，centos7下安装mysql就有两种方式<br>1）使用mariadb；<br>2）卸载mariadb，安装mysql</p>\n<h4 id=\"方法1-使用mariadb\"><a href=\"#方法1-使用mariadb\" class=\"headerlink\" title=\"方法1:使用mariadb\"></a>方法1:使用mariadb</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br><span class=\"line\">systemctl start mariadb</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2-安装mysql：\"><a href=\"#方法2-安装mysql：\" class=\"headerlink\" title=\"方法2:安装mysql：\"></a>方法2:安装mysql：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>安装成功后重启mysql服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld restart</span><br></pre></td></tr></table></figure></p>\n<p>初次安装mysql，root账户没有密码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@yl-web yl]# mysql -u root</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"><a href=\"#实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\" class=\"headerlink\" title=\"实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。\"></a>实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。</h4><p>记录如下：<br>1）在进入mysql工具时，总是有错误提示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br></pre></td></tr></table></figure></p>\n<p>解决：方法操作很简单，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/init.d/mysql stop</span><br><span class=\"line\"># mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\"># mysql -u root mysql</span><br><span class=\"line\">mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos; and host=&apos;root&apos; or host=&apos;localhost&apos;;//把空的用户密码都修改成非空的密码就行了。</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">mysql&gt; quit</span><br><span class=\"line\"># /etc/init.d/mysqld restart</span><br><span class=\"line\"># mysql -uroot -p</span><br><span class=\"line\">Enter password: &lt;输入新设的密码newpassword&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2）MySQL服务在启动的时候，不能创建pid文件。</p>\n<p>在终端看一下该目录是否存在，果然，不存在。<br>于是，创建了/var/run/mysqld/目录，重启MySQL服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# mkdir -p /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<p>如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@spark01 ~]# ls -ld /var/run/mysqld/</span><br><span class=\"line\">drwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/</span><br><span class=\"line\">[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-linux下安装jdk\"><a href=\"#3-linux下安装jdk\" class=\"headerlink\" title=\"3. linux下安装jdk\"></a>3. linux下安装jdk</h3><p>一、卸载系统自带的openjdk<br>1、查询系统内置的jdk，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java</span><br></pre></td></tr></table></figure></p>\n<p>此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。<br>如下：<br>python-javapackages-3.4.1-11.el7.noarch<br>java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64<br>java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64<br>java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64<br>tzdata-java-2015g-1.el7.noarch<br>javapackages-tools-3.4.1-11.el7.noarch<br>java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</p>\n<p>2、进行卸载，使用命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps jdk相关名称</span><br></pre></td></tr></table></figure></p>\n<p>依次卸载如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64</span><br><span class=\"line\">rpm -e --nodeps tzdata-java-2015g-1.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch</span><br><span class=\"line\">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>二、jdk安装<br>1、下载jdk并上传到/usr/java目录<br>jdk7下载地址为：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a> 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。</p>\n<p>2、解压安装<br>进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh jdk-7u79-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>3、配置profile文件<br>运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>将如下内容添加到profile文件末尾并保持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.7.0_79</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></p>\n<p>/usr/java/jdk1.7.0_79 指的是jdk的路径</p>\n<p>保存之后，运行如下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>检查jdk是否安装成功，运行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-linux下安装redis\"><a href=\"#4-linux下安装redis\" class=\"headerlink\" title=\"4. linux下安装redis\"></a>4. linux下安装redis</h3><p>1）方法1：使用命令安装<br>安装redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install redis</span><br></pre></td></tr></table></figure></p>\n<p>启动/停止/重启 Redis<br>启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis.service</span><br></pre></td></tr></table></figure></p>\n<p>停止服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop redis.service</span><br></pre></td></tr></table></figure></p>\n<p>重启服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis.service</span><br></pre></td></tr></table></figure></p>\n<p>检查状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status redis.service</span><br></pre></td></tr></table></figure></p>\n<p>随系统启动服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable redis.service</span><br></pre></td></tr></table></figure></p>\n<p>2）方法二：编译安装<br>下载安装编译:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class=\"line\">tar xzf redis-2.8.17.tar.gz</span><br><span class=\"line\">cd redis-2.8.17</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure></p>\n<p>设置配置文件路径:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/redis &amp;&amp; cp redis.conf /etc/redis</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改为： daemonize yes<br>启动Redis:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-linux配置ftp服务\"><a href=\"#5-linux配置ftp服务\" class=\"headerlink\" title=\"5. linux配置ftp服务\"></a>5. linux配置ftp服务</h3><p>在安装前查看是否已安装vsftpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -q vsftpd</span><br><span class=\"line\">vsftpd-3.0.2-9.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# yum -y install vsftpd</span><br></pre></td></tr></table></figure></p>\n<p>查看一下vsftpd安装在哪：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# whereis vsftpd</span><br><span class=\"line\">vsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz</span><br></pre></td></tr></table></figure></p>\n<p>启动vsftpd服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改如下配置：<br>anonymous_enable=NO<br>chroot_local_user=YES<br>allow_writeable_chroot=YES #加上这行解决了无法登陆的问题</p>\n<p>启动／重新启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd start</span><br><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure></p>\n<p>设置开机启动ftp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig vsftpd on</span><br></pre></td></tr></table></figure></p>\n<p>配置用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser</span><br><span class=\"line\">[root@localhost ~]# passwd ftpuser</span><br><span class=\"line\">[root@localhost ~]# 输入密码</span><br></pre></td></tr></table></figure></p>\n<p>把 /var/www/html 的所有权给ftpuser.root<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# chown -R ftpuser.root /var/www/html</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\"><a href=\"#6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动\" class=\"headerlink\" title=\"6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动\"></a>6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动</h3><h4 id=\"编译打包：\"><a href=\"#编译打包：\" class=\"headerlink\" title=\"编译打包：\"></a>编译打包：</h4><p>方法1：使用maven-assembly-plugin插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;configuration&gt; </span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;&lt;/manifest&gt; </span><br><span class=\"line\">            &lt;/archive&gt;</span><br><span class=\"line\">        &lt;descriptorRefs&gt;</span><br><span class=\"line\">            &lt;descriptorRef&gt; jar-with-dependencies &lt;/descriptorRef&gt; </span><br><span class=\"line\">        &lt;/descriptorRefs&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;make-assembly&lt;/id&gt; </span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt; </span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行命令：mvn assembly:assembly<br>或者命令：mvn package</p>\n<p>由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。</p>\n<p>方法2：使用spring-boot-maven-plugin插件<br>由于我的project是spring boot项目，所以可以使用此方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">                &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                &lt;mainClass&gt;com.iyihua.itimes.App&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/manifest&gt;</span><br><span class=\"line\">        &lt;/archive&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行mvn package打jar包，done！</p>\n<h4 id=\"上传并启动\"><a href=\"#上传并启动\" class=\"headerlink\" title=\"上传并启动\"></a>上传并启动</h4><p>连接sftp<br>lcd 打开本地路径<br>cd 进入服务器目标路径<br>put xxx.jar 把目标jar包上传到服务器对应路径<br>java -jar xxx.jar 启动java程序</p>\n","sticky":0}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjlv4uskr000000uup81azyij","tag_id":"cjlv4usm8000300uuncsx44lc","_id":"cjlv4usp0000f00uuocffiidr"},{"post_id":"cjlv4uskr000000uup81azyij","tag_id":"cjlv4usn4000600uubck2saxt","_id":"cjlv4usp5000h00uupy7mfh5w"},{"post_id":"cjlv4uskr000000uup81azyij","tag_id":"cjlv4uso5000a00uud3tbb771","_id":"cjlv4uspc000k00uuagbtckzv"},{"post_id":"cjlv4uslw000200uu4sabtmt2","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4usq9000r00uurl2w0vbq"},{"post_id":"cjlv4uslw000200uu4sabtmt2","tag_id":"cjlv4usp9000i00uue7opelwf","_id":"cjlv4usqd000t00uugqcc5pd1"},{"post_id":"cjlv4uslw000200uu4sabtmt2","tag_id":"cjlv4uspk000m00uu37jsf4qb","_id":"cjlv4usql000w00uuf80yqa4d"},{"post_id":"cjlv4usmf000400uun8b7rwhg","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4usrl001700uu5fhckke8"},{"post_id":"cjlv4usmf000400uun8b7rwhg","tag_id":"cjlv4usqg000v00uumu4ddm56","_id":"cjlv4usrr001900uunoupqge2"},{"post_id":"cjlv4usmf000400uun8b7rwhg","tag_id":"cjlv4usqr000z00uukjejikw1","_id":"cjlv4usry001c00uulelebv27"},{"post_id":"cjlv4usmf000400uun8b7rwhg","tag_id":"cjlv4usr0001200uug0vuuddc","_id":"cjlv4uss4001e00uuv5uew3f2"},{"post_id":"cjlv4usms000500uuobxgb997","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ust9001o00uuc1iomwbq"},{"post_id":"cjlv4usms000500uuobxgb997","tag_id":"cjlv4usrr001a00uuhqj2r90b","_id":"cjlv4ustd001q00uu29b1445h"},{"post_id":"cjlv4usms000500uuobxgb997","tag_id":"cjlv4uss8001g00uuyhkliusb","_id":"cjlv4ustj001t00uupghqa9xw"},{"post_id":"cjlv4usms000500uuobxgb997","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ustp001v00uu296ory5u"},{"post_id":"cjlv4usn5000700uudbk192o0","tag_id":"cjlv4ussw001m00uudggrfrlo","_id":"cjlv4usuw002800uukbcll4ve"},{"post_id":"cjlv4usn5000700uudbk192o0","tag_id":"cjlv4ustf001r00uu9gi5f1me","_id":"cjlv4usuz002a00uuppxxqnx1"},{"post_id":"cjlv4usn5000700uudbk192o0","tag_id":"cjlv4ustu001x00uuzlaxah7d","_id":"cjlv4usv4002d00uuyxekpruo"},{"post_id":"cjlv4usn5000700uudbk192o0","tag_id":"cjlv4usu9002000uuh6jgokgq","_id":"cjlv4usv7002f00uuv1nbz1xv"},{"post_id":"cjlv4usn5000700uudbk192o0","tag_id":"cjlv4usug002300uuy8jabyz5","_id":"cjlv4usvb002i00uuizk0t867"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4usut002600uueyekihbt","_id":"cjlv4usxa003600uumdgdqhta"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4usv3002c00uuaserh0mp","_id":"cjlv4usxe003800uuw8f9eel2"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4usva002h00uulw3cyr9e","_id":"cjlv4usxi003b00uu9sln8a4c"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4usvk002l00uue44aiybc","_id":"cjlv4usxj003c00uu0sf4s8xb"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4usvx002o00uurbhbesr2","_id":"cjlv4usy3003e00uu53cg7e94"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4usw6002s00uur7ytatj2","_id":"cjlv4usy4003f00uu527w255o"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4uswf002v00uui9pyj7xe","_id":"cjlv4usy5003h00uubh4j70jm"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4uswp002y00uu1uq8m80v","_id":"cjlv4usy5003i00uu21mf72dy"},{"post_id":"cjlv4usne000800uu21aumksd","tag_id":"cjlv4uswv003100uu7821ex5i","_id":"cjlv4usy6003k00uurfgvhtjp"},{"post_id":"cjlv4usni000900uu0rujxwki","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4usy9003m00uupij5he91"},{"post_id":"cjlv4usni000900uu0rujxwki","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4usyc003n00uug5ka6wio"},{"post_id":"cjlv4usni000900uu0rujxwki","tag_id":"cjlv4usy2003d00uuw440hmh0","_id":"cjlv4usyh003p00uu1zvgoejc"},{"post_id":"cjlv4usni000900uu0rujxwki","tag_id":"cjlv4usy4003g00uunsfew0p6","_id":"cjlv4usyh003q00uuvpxucoq9"},{"post_id":"cjlv4usni000900uu0rujxwki","tag_id":"cjlv4usy5003j00uuerxv73pw","_id":"cjlv4usyi003s00uuzndshk0n"},{"post_id":"cjlv4usoj000b00uuzrnlv28u","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4usyk003v00uupj6x5onr"},{"post_id":"cjlv4usoj000b00uuzrnlv28u","tag_id":"cjlv4usyg003o00uuokghve3q","_id":"cjlv4usyk003w00uume0p793c"},{"post_id":"cjlv4usoj000b00uuzrnlv28u","tag_id":"cjlv4usyh003r00uuaq7zczn4","_id":"cjlv4usyl003y00uuw0f124kb"},{"post_id":"cjlv4usoj000b00uuzrnlv28u","tag_id":"cjlv4usr0001200uug0vuuddc","_id":"cjlv4usym003z00uuy3lxyxxj"},{"post_id":"cjlv4usot000c00uuhqz7zt6j","tag_id":"cjlv4usyj003u00uu14wzdfhg","_id":"cjlv4usyp004300uucdsoizut"},{"post_id":"cjlv4usot000c00uuhqz7zt6j","tag_id":"cjlv4usyl003x00uu5ukxnkii","_id":"cjlv4usyp004400uuu8tybky5"},{"post_id":"cjlv4usot000c00uuhqz7zt6j","tag_id":"cjlv4usym004000uur0f593fx","_id":"cjlv4usyq004600uucmhjmx3c"},{"post_id":"cjlv4usot000c00uuhqz7zt6j","tag_id":"cjlv4usyn004100uuntz619o0","_id":"cjlv4usyq004700uudc3usca4"},{"post_id":"cjlv4usox000e00uuxt0jr3u8","tag_id":"cjlv4usyo004200uufhq6fm2y","_id":"cjlv4usyx004c00uunzsgrbox"},{"post_id":"cjlv4usox000e00uuxt0jr3u8","tag_id":"cjlv4usyp004500uucsjq5s4x","_id":"cjlv4usyy004d00uuzox2e3g0"},{"post_id":"cjlv4usox000e00uuxt0jr3u8","tag_id":"cjlv4usyq004800uuxm15gqn4","_id":"cjlv4usyz004f00uu0kqt8tg4"},{"post_id":"cjlv4usox000e00uuxt0jr3u8","tag_id":"cjlv4usyr004900uuaawwt7a7","_id":"cjlv4usz1004g00uuy3owc8qm"},{"post_id":"cjlv4usox000e00uuxt0jr3u8","tag_id":"cjlv4usys004a00uukares0xy","_id":"cjlv4usz2004i00uuunc6xjcl"},{"post_id":"cjlv4uspa000j00uuiby4zdsa","tag_id":"cjlv4usyt004b00uupon1mwi7","_id":"cjlv4usz3004k00uuutoh6cqh"},{"post_id":"cjlv4uspa000j00uuiby4zdsa","tag_id":"cjlv4usyy004e00uutcljcpis","_id":"cjlv4usz3004l00uufx67nnnr"},{"post_id":"cjlv4uspa000j00uuiby4zdsa","tag_id":"cjlv4usz1004h00uuqj0h024i","_id":"cjlv4usz5004n00uuq8zc6skx"},{"post_id":"cjlv4uspd000l00uuo1eo7e13","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4usz9004r00uuvm5biwaf"},{"post_id":"cjlv4uspd000l00uuo1eo7e13","tag_id":"cjlv4usz2004j00uucjvs3qog","_id":"cjlv4usza004s00uuj6la35am"},{"post_id":"cjlv4uspd000l00uuo1eo7e13","tag_id":"cjlv4usz4004m00uu6y12h0ic","_id":"cjlv4uszb004u00uuhlbc7fou"},{"post_id":"cjlv4uspd000l00uuo1eo7e13","tag_id":"cjlv4usz6004o00uufwisp3tm","_id":"cjlv4uszc004v00uuo4br9mva"},{"post_id":"cjlv4uspd000l00uuo1eo7e13","tag_id":"cjlv4usz7004p00uufqwkxxwk","_id":"cjlv4uszd004x00uu642ao94u"},{"post_id":"cjlv4uspm000n00uuxbq3j1py","tag_id":"cjlv4usyt004b00uupon1mwi7","_id":"cjlv4uszg005100uutdi5evil"},{"post_id":"cjlv4uspm000n00uuxbq3j1py","tag_id":"cjlv4usz1004h00uuqj0h024i","_id":"cjlv4uszh005200uulf23dw4v"},{"post_id":"cjlv4uspm000n00uuxbq3j1py","tag_id":"cjlv4uszc004w00uukn8bf7er","_id":"cjlv4uszi005400uuor6q2bhy"},{"post_id":"cjlv4uspm000n00uuxbq3j1py","tag_id":"cjlv4usze004y00uu222rg424","_id":"cjlv4uszj005500uuzfzp6tiz"},{"post_id":"cjlv4uspm000n00uuxbq3j1py","tag_id":"cjlv4uszf004z00uu4c0mi2bo","_id":"cjlv4uszk005700uuy3ck8ss8"},{"post_id":"cjlv4uspq000o00uul2492pfx","tag_id":"cjlv4uszg005000uugsc8fybt","_id":"cjlv4uszp005b00uut9s67vfr"},{"post_id":"cjlv4uspq000o00uul2492pfx","tag_id":"cjlv4uszh005300uudegz29k4","_id":"cjlv4uszq005c00uuz1yj4dw9"},{"post_id":"cjlv4uspq000o00uul2492pfx","tag_id":"cjlv4uszj005600uuy50h665u","_id":"cjlv4uszs005e00uu22v49an4"},{"post_id":"cjlv4uspq000o00uul2492pfx","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4uszs005f00uurbikxgag"},{"post_id":"cjlv4uspq000o00uul2492pfx","tag_id":"cjlv4uszl005900uudvvzx2gy","_id":"cjlv4uszt005h00uur7ezcigt"},{"post_id":"cjlv4uspu000p00uuz3nlkvuw","tag_id":"cjlv4uszh005300uudegz29k4","_id":"cjlv4uszw005k00uudfr15iw0"},{"post_id":"cjlv4uspu000p00uuz3nlkvuw","tag_id":"cjlv4uszg005000uugsc8fybt","_id":"cjlv4uszw005l00uuv2amaral"},{"post_id":"cjlv4uspu000p00uuz3nlkvuw","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4uszx005n00uu1bsvgqe9"},{"post_id":"cjlv4uspu000p00uuz3nlkvuw","tag_id":"cjlv4usyr004900uuaawwt7a7","_id":"cjlv4uszy005o00uuuzzzy7aj"},{"post_id":"cjlv4uspu000p00uuz3nlkvuw","tag_id":"cjlv4uszu005i00uuyoomk79i","_id":"cjlv4ut00005q00uuiq4l3bpj"},{"post_id":"cjlv4usqa000s00uucjlt53sw","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut00005r00uugpzjiekr"},{"post_id":"cjlv4usqa000s00uucjlt53sw","tag_id":"cjlv4uszv005j00uuqnsafd1v","_id":"cjlv4ut02005t00uuhk3ccd7n"},{"post_id":"cjlv4usqa000s00uucjlt53sw","tag_id":"cjlv4uszx005m00uuit9ivtlf","_id":"cjlv4ut02005u00uukgd2f75m"},{"post_id":"cjlv4usqe000u00uulatfhfv3","tag_id":"cjlv4uszz005p00uuuztf0gf1","_id":"cjlv4ut09005z00uu0jl447io"},{"post_id":"cjlv4usqe000u00uulatfhfv3","tag_id":"cjlv4ut01005s00uujisj6oue","_id":"cjlv4ut0a006000uu34a8pbry"},{"post_id":"cjlv4usqe000u00uulatfhfv3","tag_id":"cjlv4ut03005v00uug581osdj","_id":"cjlv4ut0d006200uub9qq8z8e"},{"post_id":"cjlv4usqe000u00uulatfhfv3","tag_id":"cjlv4ut05005w00uutsla6l9x","_id":"cjlv4ut0d006300uu3x2jm2f4"},{"post_id":"cjlv4usqe000u00uulatfhfv3","tag_id":"cjlv4ut06005x00uum13d4yyf","_id":"cjlv4ut0f006500uuylv1k6xn"},{"post_id":"cjlv4usql000x00uuevqfzjjv","tag_id":"cjlv4uszh005300uudegz29k4","_id":"cjlv4ut0n006800uu1b016dj1"},{"post_id":"cjlv4usql000x00uuevqfzjjv","tag_id":"cjlv4uszg005000uugsc8fybt","_id":"cjlv4ut0n006900uuvad11v6w"},{"post_id":"cjlv4usql000x00uuevqfzjjv","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut0p006b00uug6ou7cak"},{"post_id":"cjlv4usql000x00uuevqfzjjv","tag_id":"cjlv4usyr004900uuaawwt7a7","_id":"cjlv4ut0q006c00uuqaqu4exi"},{"post_id":"cjlv4usql000x00uuevqfzjjv","tag_id":"cjlv4uszu005i00uuyoomk79i","_id":"cjlv4ut0r006e00uuel9yqstr"},{"post_id":"cjlv4usqo000y00uufxf5uc23","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4ut0u006h00uu5vfgrnt4"},{"post_id":"cjlv4usqo000y00uufxf5uc23","tag_id":"cjlv4ut0o006a00uuyqhj35rc","_id":"cjlv4ut0u006i00uu0s44gzvt"},{"post_id":"cjlv4usqo000y00uufxf5uc23","tag_id":"cjlv4ut0q006d00uuja44iy01","_id":"cjlv4ut0w006k00uuvwxzexrp"},{"post_id":"cjlv4usqo000y00uufxf5uc23","tag_id":"cjlv4ut0r006f00uu76s654e1","_id":"cjlv4ut0x006l00uukqku09jq"},{"post_id":"cjlv4usqv001100uuctvseb3z","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut0z006o00uudxsjdnws"},{"post_id":"cjlv4usqv001100uuctvseb3z","tag_id":"cjlv4ut0s006g00uusc32b60t","_id":"cjlv4ut10006p00uu14ofcpmd"},{"post_id":"cjlv4usqv001100uuctvseb3z","tag_id":"cjlv4ut0v006j00uuxb31u469","_id":"cjlv4ut11006r00uu7l7w55fl"},{"post_id":"cjlv4usqv001100uuctvseb3z","tag_id":"cjlv4ut0x006m00uup0oorf7g","_id":"cjlv4ut11006s00uumyrqi6cm"},{"post_id":"cjlv4usr4001300uuqz2jfj4e","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4ut13006v00uug16rpyyk"},{"post_id":"cjlv4usr4001300uuqz2jfj4e","tag_id":"cjlv4ut10006q00uu8i6p66es","_id":"cjlv4ut14006w00uup8dx8fj7"},{"post_id":"cjlv4usr4001300uuqz2jfj4e","tag_id":"cjlv4ut11006t00uu43yfdd16","_id":"cjlv4ut15006y00uutzyikc45"},{"post_id":"cjlv4usr7001400uul3tljwrf","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut15006z00uulth7h9so"},{"post_id":"cjlv4usr7001400uul3tljwrf","tag_id":"cjlv4ut12006u00uua7pa2nkp","_id":"cjlv4ut17007100uuw5p6cd2s"},{"post_id":"cjlv4usrd001600uurpv3lqeu","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4ut17007200uum7xv8a7c"},{"post_id":"cjlv4usrm001800uuu57gw83p","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut1b007500uu9x8mqfu0"},{"post_id":"cjlv4usrm001800uuu57gw83p","tag_id":"cjlv4ut16007000uu3w8tg884","_id":"cjlv4ut1c007600uuzepredjj"},{"post_id":"cjlv4usrm001800uuu57gw83p","tag_id":"cjlv4ut18007300uutyk0fs23","_id":"cjlv4ut1d007800uu8efbid5n"},{"post_id":"cjlv4usrs001b00uugd18o4ir","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut1g007b00uu4ly5h3g7"},{"post_id":"cjlv4usrs001b00uugd18o4ir","tag_id":"cjlv4ut1a007400uumr0za5de","_id":"cjlv4ut1h007c00uuuwb0je1m"},{"post_id":"cjlv4usrs001b00uugd18o4ir","tag_id":"cjlv4ut1c007700uuktxkb1yj","_id":"cjlv4ut1i007e00uu66vm40cn"},{"post_id":"cjlv4usrs001b00uugd18o4ir","tag_id":"cjlv4ut1e007900uuj88d6iip","_id":"cjlv4ut1j007f00uufz5002tt"},{"post_id":"cjlv4usrz001d00uui6otrdqy","tag_id":"cjlv4uszh005300uudegz29k4","_id":"cjlv4ut1n007j00uupn2qcnc7"},{"post_id":"cjlv4usrz001d00uui6otrdqy","tag_id":"cjlv4uszg005000uugsc8fybt","_id":"cjlv4ut1o007k00uuj0cxmoo9"},{"post_id":"cjlv4usrz001d00uui6otrdqy","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut1p007m00uuyxco2daa"},{"post_id":"cjlv4usrz001d00uui6otrdqy","tag_id":"cjlv4usyr004900uuaawwt7a7","_id":"cjlv4ut1p007n00uu50kkkp6t"},{"post_id":"cjlv4usrz001d00uui6otrdqy","tag_id":"cjlv4uszu005i00uuyoomk79i","_id":"cjlv4ut1r007p00uu6xadxix3"},{"post_id":"cjlv4uss5001f00uu2f8sqi63","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut1t007r00uucrfcti37"},{"post_id":"cjlv4uss5001f00uu2f8sqi63","tag_id":"cjlv4ut1m007i00uu2na5hnfg","_id":"cjlv4ut1u007s00uuasn8278h"},{"post_id":"cjlv4uss5001f00uu2f8sqi63","tag_id":"cjlv4ut1o007l00uuvef4q8sk","_id":"cjlv4ut1v007u00uuy5c42e9v"},{"post_id":"cjlv4uss5001f00uu2f8sqi63","tag_id":"cjlv4ut1e007900uuj88d6iip","_id":"cjlv4ut1w007v00uuyd3fgtd9"},{"post_id":"cjlv4ussa001h00uukagvuayh","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut1x007x00uue1elg3mr"},{"post_id":"cjlv4ussa001h00uukagvuayh","tag_id":"cjlv4ut1s007q00uu5tkp5a7m","_id":"cjlv4ut1y007y00uu019cg8mg"},{"post_id":"cjlv4ussc001i00uugjgudgux","tag_id":"cjlv4ut1u007t00uufec7dw4a","_id":"cjlv4ut21008200uu2pggmyc1"},{"post_id":"cjlv4ussc001i00uugjgudgux","tag_id":"cjlv4ut1w007w00uu9z27zb3x","_id":"cjlv4ut22008300uufhd3l19e"},{"post_id":"cjlv4ussc001i00uugjgudgux","tag_id":"cjlv4ut1y007z00uu8vzl2g90","_id":"cjlv4ut23008500uuj4le2zju"},{"post_id":"cjlv4ussc001i00uugjgudgux","tag_id":"cjlv4ut1z008000uu25nvim32","_id":"cjlv4ut23008600uuphyczewb"},{"post_id":"cjlv4ussl001k00uumoq5us3y","tag_id":"cjlv4ut20008100uu5o2725si","_id":"cjlv4ut28008b00uuq85o4dgv"},{"post_id":"cjlv4ussl001k00uumoq5us3y","tag_id":"cjlv4usvx002o00uurbhbesr2","_id":"cjlv4ut29008c00uukt13m82i"},{"post_id":"cjlv4ussl001k00uumoq5us3y","tag_id":"cjlv4ut24008700uuxqlwvjfh","_id":"cjlv4ut2a008e00uuomowbpb4"},{"post_id":"cjlv4ussl001k00uumoq5us3y","tag_id":"cjlv4ut25008800uuhixl7z8h","_id":"cjlv4ut2c008f00uu6o7znei1"},{"post_id":"cjlv4ussl001k00uumoq5us3y","tag_id":"cjlv4ut26008900uuc74xvyv4","_id":"cjlv4ut2g008h00uu84778qos"},{"post_id":"cjlv4usss001l00uupse3sytr","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut2g008i00uuziu91vpg"},{"post_id":"cjlv4usss001l00uupse3sytr","tag_id":"cjlv4ut27008a00uume0ic109","_id":"cjlv4ut2h008k00uuebb1w8ij"},{"post_id":"cjlv4usss001l00uupse3sytr","tag_id":"cjlv4ut29008d00uuyu9aprg4","_id":"cjlv4ut2i008l00uu93j5rr2a"},{"post_id":"cjlv4ussx001n00uuy1cfuw58","tag_id":"cjlv4ut2d008g00uuuk9847vx","_id":"cjlv4ut2m008n00uusu722t9x"},{"post_id":"cjlv4ussx001n00uuy1cfuw58","tag_id":"cjlv4ut2h008j00uup55ci1fg","_id":"cjlv4ut2m008o00uu1q2a0yn2"},{"post_id":"cjlv4ustb001p00uu59pqwxj4","tag_id":"cjlv4ut20008100uu5o2725si","_id":"cjlv4ut2o008q00uuuo7du58h"},{"post_id":"cjlv4ustb001p00uu59pqwxj4","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut2p008r00uuvphq441r"},{"post_id":"cjlv4ustb001p00uu59pqwxj4","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut2q008t00uuvb309q3e"},{"post_id":"cjlv4ustg001s00uuq93kqf3t","tag_id":"cjlv4ut20008100uu5o2725si","_id":"cjlv4ut2y009000uuwi250zdd"},{"post_id":"cjlv4ustg001s00uuq93kqf3t","tag_id":"cjlv4ut2p008s00uu6couybq6","_id":"cjlv4ut2z009100uudah0l3te"},{"post_id":"cjlv4ustg001s00uuq93kqf3t","tag_id":"cjlv4ut2r008u00uu765oy77k","_id":"cjlv4ut31009300uupoqfsptg"},{"post_id":"cjlv4ustg001s00uuq93kqf3t","tag_id":"cjlv4ut24008700uuxqlwvjfh","_id":"cjlv4ut31009400uua7qse98s"},{"post_id":"cjlv4ustg001s00uuq93kqf3t","tag_id":"cjlv4ut2t008w00uutysldvws","_id":"cjlv4ut33009600uuqyu3len4"},{"post_id":"cjlv4ustg001s00uuq93kqf3t","tag_id":"cjlv4ut2u008x00uule6a58s5","_id":"cjlv4ut33009700uua4h2ypav"},{"post_id":"cjlv4ustg001s00uuq93kqf3t","tag_id":"cjlv4usvx002o00uurbhbesr2","_id":"cjlv4ut35009900uuotsxh0uv"},{"post_id":"cjlv4ustl001u00uu8f4l3h2z","tag_id":"cjlv4ut20008100uu5o2725si","_id":"cjlv4ut3a009c00uu1bmznaqd"},{"post_id":"cjlv4ustl001u00uu8f4l3h2z","tag_id":"cjlv4ut2z009200uuv0696gwo","_id":"cjlv4ut3a009d00uuqc1kumxq"},{"post_id":"cjlv4ustl001u00uu8f4l3h2z","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut3c009f00uu6f2rmvyl"},{"post_id":"cjlv4ustl001u00uu8f4l3h2z","tag_id":"cjlv4ut32009500uujton3tjc","_id":"cjlv4ut3c009g00uu8rt812ug"},{"post_id":"cjlv4ustl001u00uu8f4l3h2z","tag_id":"cjlv4ut34009800uubxywq1n2","_id":"cjlv4ut3h009i00uu9169r0ao"},{"post_id":"cjlv4ustl001u00uu8f4l3h2z","tag_id":"cjlv4ut36009a00uuoxe1kebe","_id":"cjlv4ut3i009j00uukm1o6l0q"},{"post_id":"cjlv4ustq001w00uuhhc7rpu3","tag_id":"cjlv4ut20008100uu5o2725si","_id":"cjlv4ut3m009l00uu5i8ycl1n"},{"post_id":"cjlv4ustq001w00uuhhc7rpu3","tag_id":"cjlv4ut36009a00uuoxe1kebe","_id":"cjlv4ut3n009m00uu1er4surz"},{"post_id":"cjlv4ustq001w00uuhhc7rpu3","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut3p009o00uu7f8pqp29"},{"post_id":"cjlv4ustq001w00uuhhc7rpu3","tag_id":"cjlv4ut3c009h00uu41dovoq4","_id":"cjlv4ut3p009p00uu4pfvcfxl"},{"post_id":"cjlv4ustv001y00uugiul5c2m","tag_id":"cjlv4ut20008100uu5o2725si","_id":"cjlv4ut3v009u00uuq69stde2"},{"post_id":"cjlv4ustv001y00uugiul5c2m","tag_id":"cjlv4ut3n009n00uuoqde3efa","_id":"cjlv4ut3w009v00uugk79dy7k"},{"post_id":"cjlv4ustv001y00uugiul5c2m","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4ut3y009x00uuwkrf74f9"},{"post_id":"cjlv4ustv001y00uugiul5c2m","tag_id":"cjlv4ut3r009r00uuhyc92o1g","_id":"cjlv4ut3y009y00uuckjwug3b"},{"post_id":"cjlv4ustv001y00uugiul5c2m","tag_id":"cjlv4ut36009a00uuoxe1kebe","_id":"cjlv4ut4100a000uu5h9eggx8"},{"post_id":"cjlv4usu4001z00uuv4m0quhu","tag_id":"cjlv4ut3u009t00uuiw3badj7","_id":"cjlv4ut4400a200uu4zfytgla"},{"post_id":"cjlv4usu4001z00uuv4m0quhu","tag_id":"cjlv4ut3x009w00uufwwnnok6","_id":"cjlv4ut4400a300uutyq3oixb"},{"post_id":"cjlv4usu4001z00uuv4m0quhu","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut4600a500uu5r5de5ja"},{"post_id":"cjlv4usu4001z00uuv4m0quhu","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut4600a600uunjope4bb"},{"post_id":"cjlv4usu4001z00uuv4m0quhu","tag_id":"cjlv4ut3z009z00uurqrizm4d","_id":"cjlv4ut4700a800uudawy2ygg"},{"post_id":"cjlv4usua002100uu3wkz5fl0","tag_id":"cjlv4ut4100a100uu08l0o2lo","_id":"cjlv4ut4b00ab00uuh53zn4hu"},{"post_id":"cjlv4usua002100uu3wkz5fl0","tag_id":"cjlv4ut4500a400uuh6ucevpv","_id":"cjlv4ut4b00ac00uu2zqq2zqn"},{"post_id":"cjlv4usua002100uu3wkz5fl0","tag_id":"cjlv4ut3z009z00uurqrizm4d","_id":"cjlv4ut4c00ae00uu5usc3m1b"},{"post_id":"cjlv4usua002100uu3wkz5fl0","tag_id":"cjlv4ut4800a900uuu4wd37ga","_id":"cjlv4ut4d00af00uutlj583tz"},{"post_id":"cjlv4usud002200uuoqpld5g8","tag_id":"cjlv4ut4900aa00uunlpy0780","_id":"cjlv4ut4e00ah00uuw5twwpp3"},{"post_id":"cjlv4usud002200uuoqpld5g8","tag_id":"cjlv4ut4c00ad00uu9w9a2qzx","_id":"cjlv4ut4f00ai00uugsima05g"},{"post_id":"cjlv4usuh002400uuaio9e70a","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut4k00an00uupxx6h254"},{"post_id":"cjlv4usuh002400uuaio9e70a","tag_id":"cjlv4usyt004b00uupon1mwi7","_id":"cjlv4ut4k00ao00uufs2vivwn"},{"post_id":"cjlv4usuh002400uuaio9e70a","tag_id":"cjlv4uszc004w00uukn8bf7er","_id":"cjlv4ut4m00aq00uu78xn7yb0"},{"post_id":"cjlv4usuh002400uuaio9e70a","tag_id":"cjlv4ut4g00ak00uum086fy94","_id":"cjlv4ut4n00ar00uuxm8oaqv4"},{"post_id":"cjlv4usuh002400uuaio9e70a","tag_id":"cjlv4ut4h00al00uu0tyc8983","_id":"cjlv4ut4o00at00uuwxuw4cta"},{"post_id":"cjlv4usup002500uu1t6z63j0","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut4o00au00uuiv6ais1f"},{"post_id":"cjlv4usup002500uu1t6z63j0","tag_id":"cjlv4ut4i00am00uuu2byr0ep","_id":"cjlv4ut4q00aw00uueqpz3nk7"},{"post_id":"cjlv4usup002500uu1t6z63j0","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut4q00ax00uugsh9q7mc"},{"post_id":"cjlv4usuu002700uucyqei3xn","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut4t00az00uuwbtxgn5c"},{"post_id":"cjlv4usuu002700uucyqei3xn","tag_id":"cjlv4ut4l00ap00uuhqn8ltjv","_id":"cjlv4ut4t00b000uu72fyzjie"},{"post_id":"cjlv4usuu002700uucyqei3xn","tag_id":"cjlv4ut4n00as00uuzqa533f9","_id":"cjlv4ut4v00b200uu28k2wwec"},{"post_id":"cjlv4usuu002700uucyqei3xn","tag_id":"cjlv4ut1e007900uuj88d6iip","_id":"cjlv4ut4w00b300uu7rd00qhw"},{"post_id":"cjlv4usux002900uukj82ogvu","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut4z00b600uuxib9vyh1"},{"post_id":"cjlv4usux002900uukj82ogvu","tag_id":"cjlv4ut4r00ay00uuwlg01053","_id":"cjlv4ut5000b700uuto7i4q11"},{"post_id":"cjlv4usux002900uukj82ogvu","tag_id":"cjlv4ut4u00b100uu4t3sdy0y","_id":"cjlv4ut5100b900uuyd0ez1yb"},{"post_id":"cjlv4usux002900uukj82ogvu","tag_id":"cjlv4ut4w00b400uu8xovqz3s","_id":"cjlv4ut5200ba00uuct0xiya4"},{"post_id":"cjlv4usv0002b00uusbaujnr4","tag_id":"cjlv4ut4x00b500uudzemxsxe","_id":"cjlv4ut5400bc00uuv2vr61x5"},{"post_id":"cjlv4usv0002b00uusbaujnr4","tag_id":"cjlv4ut5000b800uus42b0h0w","_id":"cjlv4ut5400bd00uu2myjrntq"},{"post_id":"cjlv4usv4002e00uul2y8xmsr","tag_id":"cjlv4ut4l00ap00uuhqn8ltjv","_id":"cjlv4ut5c00bi00uu0gu123oo"},{"post_id":"cjlv4usv4002e00uul2y8xmsr","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut5c00bj00uuw6nt6zyr"},{"post_id":"cjlv4usv4002e00uul2y8xmsr","tag_id":"cjlv4ut5400be00uuwzerk4f7","_id":"cjlv4ut5e00bl00uuuptaok06"},{"post_id":"cjlv4usv4002e00uul2y8xmsr","tag_id":"cjlv4ut5600bf00uujcbjn6gv","_id":"cjlv4ut5e00bm00uufh1jtdc9"},{"post_id":"cjlv4usv4002e00uul2y8xmsr","tag_id":"cjlv4usyl003x00uu5ukxnkii","_id":"cjlv4ut5g00bo00uu3ckksfp0"},{"post_id":"cjlv4usv8002g00uuw1wwtgrn","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4ut5j00br00uus7g9ypn2"},{"post_id":"cjlv4usv8002g00uuw1wwtgrn","tag_id":"cjlv4ut5d00bk00uurn5wqycs","_id":"cjlv4ut5j00bs00uuv8j4pz51"},{"post_id":"cjlv4usv8002g00uuw1wwtgrn","tag_id":"cjlv4ut0q006d00uuja44iy01","_id":"cjlv4ut5l00bu00uu0pywaz5z"},{"post_id":"cjlv4usv8002g00uuw1wwtgrn","tag_id":"cjlv4ut0r006f00uu76s654e1","_id":"cjlv4ut5l00bv00uulkf1rnwy"},{"post_id":"cjlv4usvc002j00uudgubuhyq","tag_id":"cjlv4ut5h00bq00uuxmyfqitv","_id":"cjlv4ut5r00bz00uuereou0h0"},{"post_id":"cjlv4usvc002j00uudgubuhyq","tag_id":"cjlv4ut5k00bt00uui5zhc97w","_id":"cjlv4ut5s00c000uuakjzhrlb"},{"post_id":"cjlv4usvc002j00uudgubuhyq","tag_id":"cjlv4ut5m00bw00uupizlmx5r","_id":"cjlv4ut5t00c200uu6cmhqgq2"},{"post_id":"cjlv4usvc002j00uudgubuhyq","tag_id":"cjlv4ut5n00bx00uupql0g81o","_id":"cjlv4ut5u00c300uurt0ud6f1"},{"post_id":"cjlv4usvc002j00uudgubuhyq","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut5v00c500uud2jzmjne"},{"post_id":"cjlv4usvf002k00uudpvf6kl6","tag_id":"cjlv4ut5o00by00uuj9s8kest","_id":"cjlv4ut6000c700uurtikcmv0"},{"post_id":"cjlv4usvf002k00uudpvf6kl6","tag_id":"cjlv4ut5s00c100uuslzp4k98","_id":"cjlv4ut6200c800uuxz3maw78"},{"post_id":"cjlv4usvf002k00uudpvf6kl6","tag_id":"cjlv4ut5u00c400uulzgo9f2k","_id":"cjlv4ut6400ca00uujjcchnkw"},{"post_id":"cjlv4usvp002m00uu2kt5cb77","tag_id":"cjlv4uszz005p00uuuztf0gf1","_id":"cjlv4ut6600cc00uuk43lyonu"},{"post_id":"cjlv4usvp002m00uu2kt5cb77","tag_id":"cjlv4ut6300c900uuskdhp085","_id":"cjlv4ut6700cd00uuju5f9jhd"},{"post_id":"cjlv4usvt002n00uu4bjxbt6g","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut6d00ci00uu9v1tuc98"},{"post_id":"cjlv4usvt002n00uu4bjxbt6g","tag_id":"cjlv4ut6500cb00uub53ond9q","_id":"cjlv4ut6d00cj00uu9hzxa3ad"},{"post_id":"cjlv4usvt002n00uu4bjxbt6g","tag_id":"cjlv4ut6700ce00uudmfxuxur","_id":"cjlv4ut6f00cl00uumrw926qo"},{"post_id":"cjlv4usvt002n00uu4bjxbt6g","tag_id":"cjlv4ut6800cf00uu4no6vuys","_id":"cjlv4ut6f00cm00uuulkuh4ri"},{"post_id":"cjlv4usvt002n00uu4bjxbt6g","tag_id":"cjlv4ut6a00cg00uuzbq37t2n","_id":"cjlv4ut6g00co00uuuosc0bjn"},{"post_id":"cjlv4usvy002p00uun9vj9nin","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut6l00cr00uuhzqq7sjx"},{"post_id":"cjlv4usvy002p00uun9vj9nin","tag_id":"cjlv4ut2z009200uuv0696gwo","_id":"cjlv4ut6m00cs00uumao403vd"},{"post_id":"cjlv4usvy002p00uun9vj9nin","tag_id":"cjlv4ut6d00ck00uuoqiby8i7","_id":"cjlv4ut6n00cu00uuzhex053k"},{"post_id":"cjlv4usvy002p00uun9vj9nin","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4ut6o00cv00uuq3lt8bky"},{"post_id":"cjlv4usvy002p00uun9vj9nin","tag_id":"cjlv4ut6h00cp00uub17l8pgc","_id":"cjlv4ut6q00cx00uusqw6h7yq"},{"post_id":"cjlv4usw1002q00uufobqo25q","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut6t00cz00uugpy0u9rm"},{"post_id":"cjlv4usw1002q00uufobqo25q","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut6u00d000uuvzkdtyy1"},{"post_id":"cjlv4usw1002q00uufobqo25q","tag_id":"cjlv4ut6i00cq00uuom72cvuf","_id":"cjlv4ut6w00d200uu13oxbkwn"},{"post_id":"cjlv4usw1002q00uufobqo25q","tag_id":"cjlv4ut24008700uuxqlwvjfh","_id":"cjlv4ut6x00d300uunmqczglc"},{"post_id":"cjlv4usw1002q00uufobqo25q","tag_id":"cjlv4ut6o00cw00uusozik655","_id":"cjlv4ut6z00d500uu4ze4ilwc"},{"post_id":"cjlv4usw4002r00uuf5gj2us6","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut7300d800uuh2l2n2c0"},{"post_id":"cjlv4usw4002r00uuf5gj2us6","tag_id":"cjlv4ut4l00ap00uuhqn8ltjv","_id":"cjlv4ut7400d900uu15azk8w1"},{"post_id":"cjlv4usw4002r00uuf5gj2us6","tag_id":"cjlv4uszx005m00uuit9ivtlf","_id":"cjlv4ut7500db00uux0bvmbfg"},{"post_id":"cjlv4usw4002r00uuf5gj2us6","tag_id":"cjlv4ut6x00d400uujvwqtayb","_id":"cjlv4ut7500dc00uuodz80abp"},{"post_id":"cjlv4usw4002r00uuf5gj2us6","tag_id":"cjlv4ut6z00d600uuq3d3g2c7","_id":"cjlv4ut7700de00uu71pwmqt2"},{"post_id":"cjlv4usw8002t00uudxyxzg5k","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut7900dg00uuhr1qka9g"},{"post_id":"cjlv4usw8002t00uudxyxzg5k","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut7a00dh00uu1dsyx8tq"},{"post_id":"cjlv4usw8002t00uudxyxzg5k","tag_id":"cjlv4ut7000d700uu31ne4xin","_id":"cjlv4ut7b00dj00uu5zv4atzt"},{"post_id":"cjlv4usw8002t00uudxyxzg5k","tag_id":"cjlv4ut7400da00uuvekdfuig","_id":"cjlv4ut7b00dk00uum8if5b6u"},{"post_id":"cjlv4usw8002t00uudxyxzg5k","tag_id":"cjlv4ut7600dd00uu4os1a7ph","_id":"cjlv4ut7d00dm00uukl89u70n"},{"post_id":"cjlv4uswa002u00uunk5dx59s","tag_id":"cjlv4uszk005800uubkymgjzw","_id":"cjlv4ut7i00dp00uul1x286ki"},{"post_id":"cjlv4uswa002u00uunk5dx59s","tag_id":"cjlv4ut7a00di00uucb4p7rb3","_id":"cjlv4ut7j00dq00uu3c4d7f5l"},{"post_id":"cjlv4uswa002u00uunk5dx59s","tag_id":"cjlv4uszz005p00uuuztf0gf1","_id":"cjlv4ut7u00ds00uudwf0gyy7"},{"post_id":"cjlv4uswa002u00uunk5dx59s","tag_id":"cjlv4ut01005s00uujisj6oue","_id":"cjlv4ut7v00dt00uuruxl4582"},{"post_id":"cjlv4uswg002w00uu89gn63ga","tag_id":"cjlv4ut7f00do00uuig6nlduf","_id":"cjlv4ut8000dx00uurddjfvxb"},{"post_id":"cjlv4uswg002w00uu89gn63ga","tag_id":"cjlv4uswp002y00uu1uq8m80v","_id":"cjlv4ut8100dy00uuqq1pofnf"},{"post_id":"cjlv4uswg002w00uu89gn63ga","tag_id":"cjlv4ut7v00du00uu3a0ns74a","_id":"cjlv4ut8300e000uurlaan4fe"},{"post_id":"cjlv4uswg002w00uu89gn63ga","tag_id":"cjlv4ut7x00dv00uux1hxvalg","_id":"cjlv4ut8300e100uuon0em9ua"},{"post_id":"cjlv4uswl002x00uuf1mithjl","tag_id":"cjlv4ut3z009z00uurqrizm4d","_id":"cjlv4ut8800e600uugvsbdw7b"},{"post_id":"cjlv4uswl002x00uuf1mithjl","tag_id":"cjlv4ut8100dz00uufdn2q35w","_id":"cjlv4ut8800e700uuzxi1x3c6"},{"post_id":"cjlv4uswl002x00uuf1mithjl","tag_id":"cjlv4ut8400e200uu9o4wnwh2","_id":"cjlv4ut8900e900uuwrthvvxq"},{"post_id":"cjlv4uswl002x00uuf1mithjl","tag_id":"cjlv4ut8500e300uu2y45nm3e","_id":"cjlv4ut8900ea00uuuz6fmizx"},{"post_id":"cjlv4uswl002x00uuf1mithjl","tag_id":"cjlv4ut8600e400uu4vdzxnhp","_id":"cjlv4ut8b00ec00uudj4s87ij"},{"post_id":"cjlv4uswq002z00uu0kcmvrww","tag_id":"cjlv4ut8600e500uu73yhyj1v","_id":"cjlv4ut8g00ef00uugsp9hcuj"},{"post_id":"cjlv4uswq002z00uu0kcmvrww","tag_id":"cjlv4ut8900e800uuz2w765sp","_id":"cjlv4ut8g00eg00uudbpmnp77"},{"post_id":"cjlv4uswq002z00uu0kcmvrww","tag_id":"cjlv4ut8a00eb00uuryz6rfbq","_id":"cjlv4ut8i00ei00uujt0teslx"},{"post_id":"cjlv4uswq002z00uu0kcmvrww","tag_id":"cjlv4ut8c00ed00uuimw8se7k","_id":"cjlv4ut8i00ej00uu9z0p4ltj"},{"post_id":"cjlv4usww003200uu4gxamgbh","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut8m00em00uuqmoo0evo"},{"post_id":"cjlv4usww003200uu4gxamgbh","tag_id":"cjlv4ut8d00ee00uuyzmfn93r","_id":"cjlv4ut8n00en00uut2as9ee5"},{"post_id":"cjlv4usww003200uu4gxamgbh","tag_id":"cjlv4ut8h00eh00uux58vo3pn","_id":"cjlv4ut8q00ep00uut02pc9us"},{"post_id":"cjlv4usww003200uu4gxamgbh","tag_id":"cjlv4ut8i00ek00uu0612sm12","_id":"cjlv4ut8q00eq00uudcn7pntm"},{"post_id":"cjlv4usx0003300uu1pkxf3l1","tag_id":"cjlv4ut8k00el00uum0b2bd1h","_id":"cjlv4ut8u00eu00uuelf4lhbh"},{"post_id":"cjlv4usx0003300uu1pkxf3l1","tag_id":"cjlv4ut8o00eo00uu3eu03ksl","_id":"cjlv4ut8v00ev00uufq7t4s13"},{"post_id":"cjlv4usx0003300uu1pkxf3l1","tag_id":"cjlv4ut8q00er00uu98c0fw8j","_id":"cjlv4ut8w00ex00uu9itj7l9j"},{"post_id":"cjlv4usx0003300uu1pkxf3l1","tag_id":"cjlv4ut8s00es00uuotmrsr5d","_id":"cjlv4ut8x00ey00uug8z01p5t"},{"post_id":"cjlv4usx4003400uugdu68fzl","tag_id":"cjlv4ut8t00et00uu99twr6c2","_id":"cjlv4ut9100f100uu1rpnr4sn"},{"post_id":"cjlv4usx4003400uugdu68fzl","tag_id":"cjlv4ut8q00er00uu98c0fw8j","_id":"cjlv4ut9100f200uu9la5zso8"},{"post_id":"cjlv4usx4003400uugdu68fzl","tag_id":"cjlv4ut8x00ez00uufsq3kk8c","_id":"cjlv4ut9300f400uuwi46g274"},{"post_id":"cjlv4usxe003900uuiti0j8lq","tag_id":"cjlv4ut3z009z00uurqrizm4d","_id":"cjlv4ut9700f600uuvshfdqtm"},{"post_id":"cjlv4usxe003900uuiti0j8lq","tag_id":"cjlv4ut8100dz00uufdn2q35w","_id":"cjlv4ut9800f700uuk09ms80k"},{"post_id":"cjlv4usxe003900uuiti0j8lq","tag_id":"cjlv4usov000d00uubbszx7er","_id":"cjlv4ut9800f800uutz5kh6n0"},{"post_id":"cjlv4usxe003900uuiti0j8lq","tag_id":"cjlv4ussi001j00uuwhqjhle2","_id":"cjlv4ut9900f900uu14706ozc"},{"post_id":"cjlv4usxe003900uuiti0j8lq","tag_id":"cjlv4ut9400f500uuctwtphut","_id":"cjlv4ut9900fa00uubg6soqrx"}],"Tag":[{"name":"Emacs","_id":"cjlv4usm8000300uuncsx44lc"},{"name":"指南","_id":"cjlv4usn4000600uubck2saxt"},{"name":"编辑器","_id":"cjlv4uso5000a00uud3tbb771"},{"name":"java","_id":"cjlv4usov000d00uubbszx7er"},{"name":"synchronize","_id":"cjlv4usp9000i00uue7opelwf"},{"name":"ArrayList","_id":"cjlv4uspk000m00uu37jsf4qb"},{"name":"int","_id":"cjlv4usqg000v00uumu4ddm56"},{"name":"Integer","_id":"cjlv4usqr000z00uukjejikw1"},{"name":"j2se","_id":"cjlv4usr0001200uug0vuuddc"},{"name":"error","_id":"cjlv4usrr001a00uuhqj2r90b"},{"name":"tomcat","_id":"cjlv4uss8001g00uuyhkliusb"},{"name":"spring boot","_id":"cjlv4ussi001j00uuwhqjhle2"},{"name":"html","_id":"cjlv4ussw001m00uudggrfrlo"},{"name":"reactjs","_id":"cjlv4ustf001r00uu9gi5f1me"},{"name":"node","_id":"cjlv4ustu001x00uuzlaxah7d"},{"name":"npm","_id":"cjlv4usu9002000uuh6jgokgq"},{"name":"静态网站","_id":"cjlv4usug002300uuy8jabyz5"},{"name":"ELK","_id":"cjlv4usut002600uueyekihbt"},{"name":"elasticsearch","_id":"cjlv4usv3002c00uuaserh0mp"},{"name":"es","_id":"cjlv4usva002h00uulw3cyr9e"},{"name":"kafka","_id":"cjlv4usvk002l00uue44aiybc"},{"name":"zookeeper","_id":"cjlv4usvx002o00uurbhbesr2"},{"name":"kibana","_id":"cjlv4usw6002s00uur7ytatj2"},{"name":"logstash","_id":"cjlv4uswf002v00uui9pyj7xe"},{"name":"nginx","_id":"cjlv4uswp002y00uu1uq8m80v"},{"name":"log","_id":"cjlv4uswv003100uu7821ex5i"},{"name":"junit","_id":"cjlv4usy2003d00uuw440hmh0"},{"name":"测试， spring mvc","_id":"cjlv4usy4003g00uunsfew0p6"},{"name":"Springboot应用中如何针对springmvc的controller写单元测试","_id":"cjlv4usy5003j00uuerxv73pw"},{"name":"array","_id":"cjlv4usyg003o00uuokghve3q"},{"name":"print","_id":"cjlv4usyh003r00uuaq7zczn4"},{"name":"SOA","_id":"cjlv4usyj003u00uu14wzdfhg"},{"name":"分布式事务","_id":"cjlv4usyl003x00uu5ukxnkii"},{"name":"柔性事务","_id":"cjlv4usym004000uur0f593fx"},{"name":"消息事务","_id":"cjlv4usyn004100uuntz619o0"},{"name":"react","_id":"cjlv4usyo004200uufhq6fm2y"},{"name":"react-native","_id":"cjlv4usyp004500uucsjq5s4x"},{"name":"nodejs","_id":"cjlv4usyq004800uuxm15gqn4"},{"name":"android","_id":"cjlv4usyr004900uuaawwt7a7"},{"name":"windows","_id":"cjlv4usys004a00uukares0xy"},{"name":"mysql","_id":"cjlv4usyt004b00uupon1mwi7"},{"name":"install","_id":"cjlv4usyy004e00uutcljcpis"},{"name":"database","_id":"cjlv4usz1004h00uuqj0h024i"},{"name":"guava","_id":"cjlv4usz2004j00uucjvs3qog"},{"name":"transform objects","_id":"cjlv4usz4004m00uu6y12h0ic"},{"name":"convert","_id":"cjlv4usz6004o00uufwisp3tm"},{"name":"对象转换","_id":"cjlv4usz7004p00uufqwkxxwk"},{"name":"数据库","_id":"cjlv4uszc004w00uukn8bf7er"},{"name":"主从同步","_id":"cjlv4usze004y00uu222rg424"},{"name":"master-slave","_id":"cjlv4uszf004z00uu4c0mi2bo"},{"name":"dev","_id":"cjlv4uszg005000uugsc8fybt"},{"name":"collect","_id":"cjlv4uszh005300uudegz29k4"},{"name":"post","_id":"cjlv4uszj005600uuy50h665u"},{"name":"git","_id":"cjlv4uszk005800uubkymgjzw"},{"name":"resouce","_id":"cjlv4uszl005900uudvvzx2gy"},{"name":"collect-of-dev","_id":"cjlv4uszu005i00uuyoomk79i"},{"name":"api_verion","_id":"cjlv4uszv005j00uuqnsafd1v"},{"name":"spring mvc","_id":"cjlv4uszx005m00uuit9ivtlf"},{"name":"hexo","_id":"cjlv4uszz005p00uuuztf0gf1"},{"name":"blog","_id":"cjlv4ut01005s00uujisj6oue"},{"name":"自动发布","_id":"cjlv4ut03005v00uug581osdj"},{"name":"自动部署","_id":"cjlv4ut05005w00uutsla6l9x"},{"name":"云服务","_id":"cjlv4ut06005x00uum13d4yyf"},{"name":"branch","_id":"cjlv4ut0o006a00uuyqhj35rc"},{"name":"版本控制","_id":"cjlv4ut0q006d00uuja44iy01"},{"name":"分支管理","_id":"cjlv4ut0r006f00uu76s654e1"},{"name":"设计模式","_id":"cjlv4ut0s006g00uusc32b60t"},{"name":"Builder","_id":"cjlv4ut0v006j00uuxb31u469"},{"name":"design pattern","_id":"cjlv4ut0x006m00uup0oorf7g"},{"name":"github","_id":"cjlv4ut10006q00uu8i6p66es"},{"name":"使用方法","_id":"cjlv4ut11006t00uu43yfdd16"},{"name":"static关键字","_id":"cjlv4ut12006u00uua7pa2nkp"},{"name":"patten","_id":"cjlv4ut16007000uu3w8tg884"},{"name":"coding","_id":"cjlv4ut18007300uutyk0fs23"},{"name":"io","_id":"cjlv4ut1a007400uumr0za5de"},{"name":"整理","_id":"cjlv4ut1c007700uuktxkb1yj"},{"name":"思维导图","_id":"cjlv4ut1e007900uuj88d6iip"},{"name":"web","_id":"cjlv4ut1m007i00uu2na5hnfg"},{"name":"java web","_id":"cjlv4ut1o007l00uuvef4q8sk"},{"name":"enum","_id":"cjlv4ut1s007q00uu5tkp5a7m"},{"name":"Test","_id":"cjlv4ut1u007t00uufec7dw4a"},{"name":"测试","_id":"cjlv4ut1w007w00uu9z27zb3x"},{"name":"单元测试","_id":"cjlv4ut1y007z00uu8vzl2g90"},{"name":"自动化测试","_id":"cjlv4ut1z008000uu25nvim32"},{"name":"microservices","_id":"cjlv4ut20008100uu5o2725si"},{"name":"微服务","_id":"cjlv4ut24008700uuxqlwvjfh"},{"name":"服务注册","_id":"cjlv4ut25008800uuhixl7z8h"},{"name":"服务发现","_id":"cjlv4ut26008900uuc74xvyv4"},{"name":"并发","_id":"cjlv4ut27008a00uume0ic109"},{"name":"多线程","_id":"cjlv4ut29008d00uuyu9aprg4"},{"name":"jquery","_id":"cjlv4ut2d008g00uuuk9847vx"},{"name":"validate","_id":"cjlv4ut2h008j00uup55ci1fg"},{"name":"Node.js","_id":"cjlv4ut2p008s00uu6couybq6"},{"name":"Express","_id":"cjlv4ut2r008u00uu765oy77k"},{"name":"api网关","_id":"cjlv4ut2t008w00uutysldvws"},{"name":"api-gateway","_id":"cjlv4ut2u008x00uule6a58s5"},{"name":"jenkins","_id":"cjlv4ut2z009200uuv0696gwo"},{"name":"自动化","_id":"cjlv4ut32009500uujton3tjc"},{"name":"构建","_id":"cjlv4ut34009800uubxywq1n2"},{"name":"docker","_id":"cjlv4ut36009a00uuoxe1kebe"},{"name":"centos7","_id":"cjlv4ut3c009h00uu41dovoq4"},{"name":"gitlab","_id":"cjlv4ut3n009n00uuoqde3efa"},{"name":"代码仓库","_id":"cjlv4ut3r009r00uuhyc92o1g"},{"name":"shell","_id":"cjlv4ut3u009t00uuiw3badj7"},{"name":"sh","_id":"cjlv4ut3x009w00uufwwnnok6"},{"name":"linux","_id":"cjlv4ut3z009z00uurqrizm4d"},{"name":"mosquitto","_id":"cjlv4ut4100a100uu08l0o2lo"},{"name":"mqtt","_id":"cjlv4ut4500a400uuh6ucevpv"},{"name":"服务器配置","_id":"cjlv4ut4800a900uuu4wd37ga"},{"name":"springboot","_id":"cjlv4ut4900aa00uunlpy0780"},{"name":"itime","_id":"cjlv4ut4c00ad00uu9w9a2qzx"},{"name":"spring data jpa","_id":"cjlv4ut4g00ak00uum086fy94"},{"name":"mybatis","_id":"cjlv4ut4h00al00uu0tyc8983"},{"name":"shiro","_id":"cjlv4ut4i00am00uuu2byr0ep"},{"name":"spring","_id":"cjlv4ut4l00ap00uuhqn8ltjv"},{"name":"aop","_id":"cjlv4ut4n00as00uuzqa533f9"},{"name":"spring cache","_id":"cjlv4ut4r00ay00uuwlg01053"},{"name":"redis","_id":"cjlv4ut4u00b100uu4t3sdy0y"},{"name":"注解","_id":"cjlv4ut4w00b400uu8xovqz3s"},{"name":"支付宝","_id":"cjlv4ut4x00b500uudzemxsxe"},{"name":"架构","_id":"cjlv4ut5000b800uus42b0h0w"},{"name":"transaction","_id":"cjlv4ut5400be00uuwzerk4f7"},{"name":"事务","_id":"cjlv4ut5600bf00uujcbjn6gv"},{"name":"svn","_id":"cjlv4ut5d00bk00uurn5wqycs"},{"name":"rest","_id":"cjlv4ut5h00bq00uuxmyfqitv"},{"name":"api","_id":"cjlv4ut5k00bt00uui5zhc97w"},{"name":"versioning","_id":"cjlv4ut5m00bw00uupizlmx5r"},{"name":"springmvc","_id":"cjlv4ut5n00bx00uupql0g81o"},{"name":"ngnix","_id":"cjlv4ut5o00by00uuj9s8kest"},{"name":"picture","_id":"cjlv4ut5s00c100uuslzp4k98"},{"name":"server","_id":"cjlv4ut5u00c400uulzgo9f2k"},{"name":"deploy","_id":"cjlv4ut6300c900uuskdhp085"},{"name":"spring事务","_id":"cjlv4ut6500cb00uub53ond9q"},{"name":"Transactional","_id":"cjlv4ut6700ce00uudmfxuxur"},{"name":"数据库事务","_id":"cjlv4ut6800cf00uu4no6vuys"},{"name":"锁","_id":"cjlv4ut6a00cg00uuzbq37t2n"},{"name":"持续集成","_id":"cjlv4ut6d00ck00uuoqiby8i7"},{"name":"自动化构建","_id":"cjlv4ut6h00cp00uub17l8pgc"},{"name":"spring cloud","_id":"cjlv4ut6i00cq00uuom72cvuf"},{"name":"使用spring-boot+spring-cloud一步步搭建微服务架构","_id":"cjlv4ut6o00cw00uusozik655"},{"name":"读取配置文件","_id":"cjlv4ut6x00d400uujvwqtayb"},{"name":"property file","_id":"cjlv4ut6z00d600uuq3d3g2c7"},{"name":"github-trending","_id":"cjlv4ut7000d700uu31ne4xin"},{"name":"Runtime","_id":"cjlv4ut7400da00uuvekdfuig"},{"name":"github-repository","_id":"cjlv4ut7600dd00uu4os1a7ph"},{"name":"github pages","_id":"cjlv4ut7a00di00uucb4p7rb3"},{"name":"冗余部署","_id":"cjlv4ut7f00do00uuig6nlduf"},{"name":"api_version","_id":"cjlv4ut7v00du00uu3a0ns74a"},{"name":"路由","_id":"cjlv4ut7x00dv00uux1hxvalg"},{"name":"centos","_id":"cjlv4ut8100dz00uufdn2q35w"},{"name":"FastDFS","_id":"cjlv4ut8400e200uu9o4wnwh2"},{"name":"Nginx","_id":"cjlv4ut8500e300uu2y45nm3e"},{"name":"图片服务器","_id":"cjlv4ut8600e400uu4vdzxnhp"},{"name":"doc","_id":"cjlv4ut8600e500uu73yhyj1v"},{"name":"docs","_id":"cjlv4ut8900e800uuz2w765sp"},{"name":"markdown","_id":"cjlv4ut8a00eb00uuryz6rfbq"},{"name":"docsify","_id":"cjlv4ut8c00ed00uuimw8se7k"},{"name":"监控","_id":"cjlv4ut8d00ee00uuyzmfn93r"},{"name":"集群","_id":"cjlv4ut8h00eh00uux58vo3pn"},{"name":"monitor","_id":"cjlv4ut8i00ek00uu0612sm12"},{"name":"manager","_id":"cjlv4ut8k00el00uum0b2bd1h"},{"name":"项目管理","_id":"cjlv4ut8o00eo00uu3eu03ksl"},{"name":"RAP","_id":"cjlv4ut8q00er00uu98c0fw8j"},{"name":"Worktile","_id":"cjlv4ut8s00es00uuotmrsr5d"},{"name":"接口文档","_id":"cjlv4ut8t00et00uu99twr6c2"},{"name":"mock","_id":"cjlv4ut8x00ez00uufsq3kk8c"},{"name":"部署","_id":"cjlv4ut9400f500uuctwtphut"}]}}