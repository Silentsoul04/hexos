<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iyihua]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-21T09:59:38.499Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Wanglv Yihua]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在linux下部署spring boot项目过程记录]]></title>
    <link href="http://yoursite.com/2016/03/21/%E5%9C%A8linux%E4%B8%8B%E9%83%A8%E7%BD%B2spring-boot%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/03/21/在linux下部署spring-boot项目过程记录/</id>
    <published>2016-03-21T09:52:34.000Z</published>
    <updated>2016-03-21T09:59:38.499Z</updated>
    <content type="html"><![CDATA[<h1 id="u5728linux_u4E0B_u90E8_u7F72spring_boot_u9879_u76EE_u8FC7_u7A0B_u8BB0_u5F55"><a href="#u5728linux_u4E0B_u90E8_u7F72spring_boot_u9879_u76EE_u8FC7_u7A0B_u8BB0_u5F55" class="headerlink" title="在linux下部署spring boot项目过程记录"></a>在linux下部署spring boot项目过程记录</h1><h2 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h2><p>本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用</p>
<h2 id="u73AF_u5883_u8BF4_u660E"><a href="#u73AF_u5883_u8BF4_u660E" class="headerlink" title="环境说明"></a>环境说明</h2><p>linux版本：CentOs7<br>配备的开发环境软件服务：</p>
<pre><code>- mysql（centos下默认使用mariadb，也可以，两者兼容）
- jdk
- ftp
- redis
</code></pre><h3 id="1-_linux_u4E0B_u5F00_u653E_u7AEF_u53E3"><a href="#1-_linux_u4E0B_u5F00_u653E_u7AEF_u53E3" class="headerlink" title="1. linux下开放端口"></a>1. linux下开放端口</h3><p>先把一些已知要用到的端口放开了，省的后面要用到的时候连不上<br>由于centos7默认没有iptables服务，所以需要先安装<br>首先暂停防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld&#10;systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>
<p>Then, install the iptables-services package:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure></p>
<p>Enable the service at boot-time:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable iptables</span><br></pre></td></tr></table></figure></p>
<p>配置要放开的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT&#10;iptables -I INPUT -p tcp --dport 22 -j ACCEPT&#10;iptables -I INPUT -p tcp --dport 3306 -j ACCEPT&#10;iptables -I INPUT -p tcp --dport 8080 -j ACCEPT&#10;iptables -I INPUT -p tcp --dport 21 -j ACCEPT&#10;iptables -I INPUT -p tcp --dport 8081 -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>保存配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save&#10;or&#10;/usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></p>
<p>Managing the service开启停止防火墙服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl [stop|start|restart] iptables</span><br></pre></td></tr></table></figure></p>
<h3 id="2-_linux_u4E0B_u5B89_u88C5_u4F7F_u7528mysql"><a href="#2-_linux_u4E0B_u5B89_u88C5_u4F7F_u7528mysql" class="headerlink" title="2. linux下安装使用mysql"></a>2. linux下安装使用mysql</h3><p>一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel<br>然而，在centos7下这样安装的时候，却发现mysql-server安装不上。<br>原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。<br>那么，centos7下安装mysql就有两种方式<br>1）使用mariadb；<br>2）卸载mariadb，安装mysql</p>
<h4 id="u65B9_u6CD51_3A_u4F7F_u7528mariadb"><a href="#u65B9_u6CD51_3A_u4F7F_u7528mariadb" class="headerlink" title="方法1:使用mariadb"></a>方法1:使用mariadb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb-server mariadb&#10;systemctl start mariadb&#10;mysql -u root -p</span><br></pre></td></tr></table></figure>
<h4 id="u65B9_u6CD52_3A_u5B89_u88C5mysql_uFF1A"><a href="#u65B9_u6CD52_3A_u5B89_u88C5mysql_uFF1A" class="headerlink" title="方法2:安装mysql："></a>方法2:安装mysql：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm&#10;# rpm -ivh mysql-community-release-el7-5.noarch.rpm&#10;# yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<p>安装成功后重启mysql服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service mysqld restart</span><br></pre></td></tr></table></figure></p>
<p>初次安装mysql，root账户没有密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# mysql -u root</span><br></pre></td></tr></table></figure></p>
<p>设置密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; set password for &#39;root&#39;@&#39;localhost&#39; =password(&#39;password&#39;);</span><br></pre></td></tr></table></figure></p>
<h4 id="u5B9E_u8DF5_u7ED3_u8BBA_uFF1A_u5982_u679C_u4E0D_u4ECB_u610F_u4F7F_u7528mariadb_u7684_u8BDD_uFF0C_u5C31_u4E0D_u7528_u6298_u817E_u5B89_u88C5mysql_u4E86_uFF0C_u56E0_u4E3A_u6211_u5728_u5B9E_u9645_u4F7F_u7528_u65B9_u6CD52_u5B89_u88C5MySQL_u7684_u8FC7_u7A0B_u4E2D_uFF0C_u9047_u5230_u4E0D_u5C11_u9700_u8981_u6298_u817E_u7684_u95EE_u9898_u3002"><a href="#u5B9E_u8DF5_u7ED3_u8BBA_uFF1A_u5982_u679C_u4E0D_u4ECB_u610F_u4F7F_u7528mariadb_u7684_u8BDD_uFF0C_u5C31_u4E0D_u7528_u6298_u817E_u5B89_u88C5mysql_u4E86_uFF0C_u56E0_u4E3A_u6211_u5728_u5B9E_u9645_u4F7F_u7528_u65B9_u6CD52_u5B89_u88C5MySQL_u7684_u8FC7_u7A0B_u4E2D_uFF0C_u9047_u5230_u4E0D_u5C11_u9700_u8981_u6298_u817E_u7684_u95EE_u9898_u3002" class="headerlink" title="实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。"></a>实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。</h4><p>记录如下：<br>1）在进入mysql工具时，总是有错误提示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root -p&#10;Enter password:&#10;ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)</span><br></pre></td></tr></table></figure></p>
<p>解决：方法操作很简单，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/mysql stop&#10;# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &#38;&#10;# mysql -u root mysql&#10;mysql&#62; UPDATE user SET Password=PASSWORD(&#39;newpassword&#39;) where USER=&#39;root&#39; and host=&#39;root&#39; or host=&#39;localhost&#39;;//&#25226;&#31354;&#30340;&#29992;&#25143;&#23494;&#30721;&#37117;&#20462;&#25913;&#25104;&#38750;&#31354;&#30340;&#23494;&#30721;&#23601;&#34892;&#20102;&#12290;&#10;mysql&#62; FLUSH PRIVILEGES;&#10;mysql&#62; quit&#10;# /etc/init.d/mysqld restart&#10;# mysql -uroot -p&#10;Enter password: &#60;&#36755;&#20837;&#26032;&#35774;&#30340;&#23494;&#30721;newpassword&#62;</span><br></pre></td></tr></table></figure></p>
<p>2）MySQL服务在启动的时候，不能创建pid文件。</p>
<p>在终端看一下该目录是否存在，果然，不存在。<br>于是，创建了/var/run/mysqld/目录，重启MySQL服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark01 ~]# mkdir -p /var/run/mysqld/&#10;[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>
<p>如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark01 ~]# ls -ld /var/run/mysqld/&#10;drwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/&#10;[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/&#10;[root@spark01 ~]# /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure></p>
<h3 id="3-_linux_u4E0B_u5B89_u88C5jdk"><a href="#3-_linux_u4E0B_u5B89_u88C5jdk" class="headerlink" title="3. linux下安装jdk"></a>3. linux下安装jdk</h3><p>一、卸载系统自带的openjdk<br>1、查询系统内置的jdk，使用命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure></p>
<p>此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。<br>如下：<br>python-javapackages-3.4.1-11.el7.noarch<br>java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64<br>java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64<br>java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64<br>tzdata-java-2015g-1.el7.noarch<br>javapackages-tools-3.4.1-11.el7.noarch<br>java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</p>
<p>2、进行卸载，使用命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps jdk&#30456;&#20851;&#21517;&#31216;</span><br></pre></td></tr></table></figure></p>
<p>依次卸载如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch&#10;rpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64&#10;rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64&#10;rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64&#10;rpm -e --nodeps tzdata-java-2015g-1.el7.noarch&#10;rpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch&#10;rpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</span><br></pre></td></tr></table></figure></p>
<p>二、jdk安装<br>1、下载jdk并上传到/usr/java目录<br>jdk7下载地址为：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a> 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。</p>
<p>2、解压安装<br>进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-7u79-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>
<p>3、配置profile文件<br>运行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>将如下内容添加到profile文件末尾并保持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.7.0_79&#10;export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></p>
<p>/usr/java/jdk1.7.0_79 指的是jdk的路径</p>
<p>保存之后，运行如下命令使配置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>检查jdk是否安装成功，运行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></p>
<h3 id="4-_linux_u4E0B_u5B89_u88C5redis"><a href="#4-_linux_u4E0B_u5B89_u88C5redis" class="headerlink" title="4. linux下安装redis"></a>4. linux下安装redis</h3><p>1）方法1：使用命令安装<br>安装redis:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install redis</span><br></pre></td></tr></table></figure></p>
<p>启动/停止/重启 Redis<br>启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis.service</span><br></pre></td></tr></table></figure></p>
<p>停止服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop redis.service</span><br></pre></td></tr></table></figure></p>
<p>重启服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart redis.service</span><br></pre></td></tr></table></figure></p>
<p>检查状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status redis.service</span><br></pre></td></tr></table></figure></p>
<p>随系统启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis.service</span><br></pre></td></tr></table></figure></p>
<p>2）方法二：编译安装<br>下载安装编译:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz&#10;tar xzf redis-2.8.17.tar.gz&#10;cd redis-2.8.17&#10;make&#10;make install</span><br></pre></td></tr></table></figure></p>
<p>设置配置文件路径:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/redis &#38;&#38; cp redis.conf /etc/redis</span><br></pre></td></tr></table></figure></p>
<p>修改配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>
<p>修改为： daemonize yes<br>启动Redis:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></p>
<h3 id="5-_linux_u914D_u7F6Eftp_u670D_u52A1"><a href="#5-_linux_u914D_u7F6Eftp_u670D_u52A1" class="headerlink" title="5. linux配置ftp服务"></a>5. linux配置ftp服务</h3><p>在安装前查看是否已安装vsftpd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -q vsftpd&#10;vsftpd-3.0.2-9.el7.x86_64</span><br></pre></td></tr></table></figure></p>
<p>如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install vsftpd</span><br></pre></td></tr></table></figure></p>
<p>查看一下vsftpd安装在哪：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# whereis vsftpd&#10;vsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz</span><br></pre></td></tr></table></figure></p>
<p>启动vsftpd服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></p>
<p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p>
<p>修改如下配置：<br>anonymous_enable=NO<br>chroot_local_user=YES<br>allow_writeable_chroot=YES #加上这行解决了无法登陆的问题</p>
<p>启动／重新启动ftp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd start&#10;service vsftpd restart</span><br></pre></td></tr></table></figure></p>
<p>设置开机启动ftp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig vsftpd on</span><br></pre></td></tr></table></figure></p>
<p>配置用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser&#10;[root@localhost ~]# passwd ftpuser&#10;[root@localhost ~]# &#36755;&#20837;&#23494;&#30721;</span><br></pre></td></tr></table></figure></p>
<p>把 /var/www/html 的所有权给ftpuser.root<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# chown -R ftpuser.root /var/www/html</span><br></pre></td></tr></table></figure></p>
<h3 id="6-__u9644_uFF1A_u4F7F_u7528maven_u628Ajava_project_u6253_u6210_u5305_u542B_u4F9D_u8D56_u5305_u7684jar_u5305_uFF0C_u4E0A_u4F20_u5230_u670D_u52A1_u5668_uFF0C_u5E76_u542F_u52A8"><a href="#6-__u9644_uFF1A_u4F7F_u7528maven_u628Ajava_project_u6253_u6210_u5305_u542B_u4F9D_u8D56_u5305_u7684jar_u5305_uFF0C_u4E0A_u4F20_u5230_u670D_u52A1_u5668_uFF0C_u5E76_u542F_u52A8" class="headerlink" title="6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动"></a>6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动</h3><h4 id="u7F16_u8BD1_u6253_u5305_uFF1A"><a href="#u7F16_u8BD1_u6253_u5305_uFF1A" class="headerlink" title="编译打包："></a>编译打包：</h4><p>方法1：使用maven-assembly-plugin插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;plugin&#62;&#10;    &#60;artifactId&#62;maven-assembly-plugin&#60;/artifactId&#62; &#10;    &#60;configuration&#62; &#10;        &#60;archive&#62;&#10;            &#60;manifest&#62;&#10;                &#60;mainClass&#62;com.iyihua.itimes.App&#60;/mainClass&#62;&#60;/manifest&#62; &#10;            &#60;/archive&#62;&#10;        &#60;descriptorRefs&#62;&#10;            &#60;descriptorRef&#62; jar-with-dependencies &#60;/descriptorRef&#62; &#10;        &#60;/descriptorRefs&#62;&#10;    &#60;/configuration&#62;&#10;    &#60;executions&#62;&#10;        &#60;execution&#62;&#10;            &#60;id&#62;make-assembly&#60;/id&#62; &#10;            &#60;phase&#62;package&#60;/phase&#62;&#10;            &#60;goals&#62;&#10;                &#60;goal&#62;single&#60;/goal&#62;&#10;            &#60;/goals&#62;&#10;        &#60;/execution&#62; &#10;    &#60;/executions&#62;&#10;&#60;/plugin&#62;</span><br></pre></td></tr></table></figure></p>
<p>运行命令：mvn assembly:assembly<br>或者命令：mvn package</p>
<p>由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。</p>
<p>方法2：使用spring-boot-maven-plugin插件<br>由于我的project是spring boot项目，所以可以使用此方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;plugin&#62;&#10;    &#60;groupId&#62;org.springframework.boot&#60;/groupId&#62;&#10;    &#60;artifactId&#62;spring-boot-maven-plugin&#60;/artifactId&#62;&#10;    &#60;executions&#62;&#10;        &#60;execution&#62;&#10;            &#60;goals&#62;&#10;                &#60;goal&#62;repackage&#60;/goal&#62;&#10;            &#60;/goals&#62;&#10;        &#60;/execution&#62;&#10;    &#60;/executions&#62;&#10;&#60;/plugin&#62;&#10;&#60;plugin&#62;&#10;    &#60;groupId&#62;org.apache.maven.plugins&#60;/groupId&#62;&#10;    &#60;artifactId&#62;maven-jar-plugin&#60;/artifactId&#62;&#10;    &#60;configuration&#62;&#10;        &#60;archive&#62;&#10;            &#60;manifest&#62;&#10;                &#60;addClasspath&#62;true&#60;/addClasspath&#62;&#10;                &#60;mainClass&#62;com.iyihua.itimes.App&#60;/mainClass&#62;&#10;            &#60;/manifest&#62;&#10;        &#60;/archive&#62;&#10;    &#60;/configuration&#62;&#10;&#60;/plugin&#62;</span><br></pre></td></tr></table></figure></p>
<p>运行mvn package打jar包，done！</p>
<h4 id="u4E0A_u4F20_u5E76_u542F_u52A8"><a href="#u4E0A_u4F20_u5E76_u542F_u52A8" class="headerlink" title="上传并启动"></a>上传并启动</h4><p>连接sftp<br>lcd 打开本地路径<br>cd 进入服务器目标路径<br>put xxx.jar 把目标jar包上传到服务器对应路径<br>java -jar xxx.jar 启动java程序</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5728linux_u4E0B_u90E8_u7F72spring_boot_u9879_u76EE_u8FC7_u7A0B_u8BB0_u5F55"><a href="#u5728linux_u4E0B_u90E8_u7F72spring_boot_u9879]]>
    </summary>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[集群监控初步整理]]></title>
    <link href="http://yoursite.com/2016/03/11/%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E5%88%9D%E6%AD%A5%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/03/11/集群监控初步整理/</id>
    <published>2016-03-11T01:53:20.000Z</published>
    <updated>2016-03-11T01:58:00.513Z</updated>
    <content type="html"><![CDATA[<h3 id="u96C6_u7FA4_u76D1_u63A7_u521D_u6B65_u6574_u7406"><a href="#u96C6_u7FA4_u76D1_u63A7_u521D_u6B65_u6574_u7406" class="headerlink" title="集群监控初步整理"></a>集群监控初步整理</h3><p><img src="/images/java-monitor.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u96C6_u7FA4_u76D1_u63A7_u521D_u6B65_u6574_u7406"><a href="#u96C6_u7FA4_u76D1_u63A7_u521D_u6B65_u6574_u7406" class="headerlink" title]]>
    </summary>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="monitor" scheme="http://yoursite.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="集群" scheme="http://yoursite.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring aop 知识体系整理]]></title>
    <link href="http://yoursite.com/2016/02/20/spring-aop-%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/02/20/spring-aop-知识体系整理/</id>
    <published>2016-02-20T04:48:30.000Z</published>
    <updated>2016-03-11T01:50:38.925Z</updated>
    <content type="html"><![CDATA[<p>spring aop 整理<br>参考：<br>     1.<a href="https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/</a><br>     2.<a href="http://blog.csdn.net/dreamrealised/article/details/12885739" target="_blank" rel="external">http://blog.csdn.net/dreamrealised/article/details/12885739</a><br>思维导图：<br>     <a href="http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2" target="_blank" rel="external">http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2</a></p>
<p><img src="/images/java-spring-aop.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>spring aop 整理<br>参考：<br>     1.<a href="https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/" target="_blank" rel="external">h]]>
    </summary>
    
      <category term="aop" scheme="http://yoursite.com/tags/aop/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java-io体系整理]]></title>
    <link href="http://yoursite.com/2016/02/20/java-io%E4%BD%93%E7%B3%BB%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/02/20/java-io体系整理/</id>
    <published>2016-02-20T04:20:38.000Z</published>
    <updated>2016-03-11T01:50:38.925Z</updated>
    <content type="html"><![CDATA[<h3 id="java_io_u4F53_u7CFB_u4F7F_u7528_u6574_u7406"><a href="#java_io_u4F53_u7CFB_u4F7F_u7528_u6574_u7406" class="headerlink" title="java io体系使用整理"></a>java io体系使用整理</h3><ul>
<li>来源：<a href="http://www.importnew.com/17714.html" target="_blank" rel="external">http://www.importnew.com/17714.html</a></li>
<li>思维导图：<a href="http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f" target="_blank" rel="external">http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f</a></li>
</ul>
<p><img src="/images/java+io.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="java_io_u4F53_u7CFB_u4F7F_u7528_u6574_u7406"><a href="#java_io_u4F53_u7CFB_u4F7F_u7528_u6574_u7406" class="headerlink" title="java i]]>
    </summary>
    
      <category term="io" scheme="http://yoursite.com/tags/io/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="整理" scheme="http://yoursite.com/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[java]从代码中去除if-else]]></title>
    <link href="http://yoursite.com/2016/02/02/java-%E4%BB%8E%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%8E%BB%E9%99%A4if-else/"/>
    <id>http://yoursite.com/2016/02/02/java-从代码中去除if-else/</id>
    <published>2016-02-02T08:09:30.000Z</published>
    <updated>2016-02-02T09:36:46.259Z</updated>
    <content type="html"><![CDATA[<p>有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？</p>
<p>首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。</p>
<p>当判断到确实需要优化if else，方法有很多，总结如下。</p>
<ol>
<li>使用map.</li>
<li>使用枚举.</li>
<li>多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。<br>当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。</li>
</ol>
<p>下面举例。<br>要优化的原if else语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int code;&#10;if(&#34;Name&#34;.equals(str))&#10;    code = 0;&#10;else if(&#34;Age&#34;.equals(str))&#10;    code = 1;&#10;else if(&#34;Address&#34;.equals(str))&#10;    code = 2;</span><br></pre></td></tr></table></figure></p>
<h2 id="u4F7F_u7528map_u4F18_u5316"><a href="#u4F7F_u7528map_u4F18_u5316" class="headerlink" title="使用map优化"></a>使用map优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final static Map map = new HashMap();  &#10;static &#123;  &#10;    map.put(&#34;Name&#34;, 0);  &#10;    map.put(&#34;Age&#34;, 1);&#10;    map.put(&#34;Address&#34;, 2);  &#10;&#125;&#10;&#10;int code = map.get(type);</span><br></pre></td></tr></table></figure>
<h2 id="u4F7F_u7528_u679A_u4E3E_u4F18_u5316"><a href="#u4F7F_u7528_u679A_u4E3E_u4F18_u5316" class="headerlink" title="使用枚举优化"></a>使用枚举优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public enum Codes &#123;&#10;    Name(0), Age(1), Address(2);&#10;    public int code;&#10;    Codes(int code)&#123;&#10;        this.code = code;&#10;    &#125;&#10;&#125;&#10;&#10;int code = Codes.valueOf(str).code;</span><br></pre></td></tr></table></figure>
<h2 id="u4F7F_u7528_u591A_u6001_u4F18_u5316"><a href="#u4F7F_u7528_u591A_u6001_u4F18_u5316" class="headerlink" title="使用多态优化"></a>使用多态优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ICode iCode = (ICode)Class.forName(&#34;com.xxx.&#34; + str).newInstance();&#10;&#10;int code = iCode.getCode();</span><br></pre></td></tr></table></figure>
<h2 id="u201C_u8D23_u4EFB_u94FE_u201D_u5982_u4F55_u4F18_u5316if_else_uFF1F"><a href="#u201C_u8D23_u4EFB_u94FE_u201D_u5982_u4F55_u4F18_u5316if_else_uFF1F" class="headerlink" title="“责任链”如何优化if else？"></a>“责任链”如何优化if else？</h2><p>首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。</p>
<p>好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。</p>
<p>现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。</p>
<p>好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。</p>
<p>现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。</p>
<p>到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）</p>
<p>最后，我们为了交流方便，把这种组合方式称为“责任链”。</p>
<h2 id="u4F7F_u7528_u72B6_u6001_u6A21_u5F0F_u4F18_u5316if_else"><a href="#u4F7F_u7528_u72B6_u6001_u6A21_u5F0F_u4F18_u5316if_else" class="headerlink" title="使用状态模式优化if else"></a>使用状态模式优化if else</h2><p>参考：<a href="http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html" target="_blank" rel="external">http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？</p>
<p>首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比]]>
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/tags/coding/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="patten" scheme="http://yoursite.com/tags/patten/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[springboot][items][项目使用实践]springboot get started]]></title>
    <link href="http://yoursite.com/2016/02/01/springboot-items-%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5-springboot-get-started/"/>
    <id>http://yoursite.com/2016/02/01/springboot-items-项目使用实践-springboot-get-started/</id>
    <published>2016-02-01T09:10:18.000Z</published>
    <updated>2016-02-01T09:35:44.585Z</updated>
    <content type="html"><![CDATA[<p>往后将通过一个时间记录web app项目，实践并记录spring boot的使用<br>为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。</p>
<h3 id="1-pom-xml_u4E2D_u6DFB_u52A0maven_u4F9D_u8D56"><a href="#1-pom-xml_u4E2D_u6DFB_u52A0maven_u4F9D_u8D56" class="headerlink" title="1.pom.xml中添加maven依赖"></a>1.pom.xml中添加maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;dependencies&#62;&#10;    &#60;dependency&#62;&#10;        &#60;groupId&#62;org.springframework.boot&#60;/groupId&#62;&#10;        &#60;artifactId&#62;spring-boot-starter&#60;/artifactId&#62;&#10;    &#60;/dependency&#62;&#10;    &#60;dependency&#62;&#10;        &#60;groupId&#62;org.springframework.boot&#60;/groupId&#62;&#10;        &#60;artifactId&#62;spring-boot-starter-web&#60;/artifactId&#62;&#10;    &#60;/dependency&#62;&#10;&#60;/dependencies&#62;</span><br></pre></td></tr></table></figure>
<h3 id="2-_u7F16_u5199_u9879_u76EE_u542F_u52A8_u5165_u53E3App-java"><a href="#2-_u7F16_u5199_u9879_u76EE_u542F_u52A8_u5165_u53E3App-java" class="headerlink" title="2.编写项目启动入口App.java"></a>2.编写项目启动入口App.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication&#10;public class App &#10;&#123;&#10;    public static void main(String[] args) throws Exception &#123;&#10;        SpringApplication.run(App.class, args);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>
<h3 id="u518D_u8FDB_u4E00_u6B65_uFF0C_u4E3A_u5E94_u7528_u5F15_u5165spring_mvc"><a href="#u518D_u8FDB_u4E00_u6B65_uFF0C_u4E3A_u5E94_u7528_u5F15_u5165spring_mvc" class="headerlink" title="再进一步，为应用引入spring mvc"></a>再进一步，为应用引入spring mvc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Controller&#10;public class SampleController &#123;&#10;&#10;    &#10;    @RequestMapping(&#34;/&#34;)&#10;    @ResponseBody&#10;    String home() &#123;&#10;        String data = &#34;&#34;;&#10;        return &#34;Hello World!&#34;;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>往后将通过一个时间记录web app项目，实践并记录spring boot的使用<br>为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。</p>
<h3 id="1-pom-xml_u4E2D_u6DFB_u52A0maven_u4F9D_u]]>
    </summary>
    
      <category term="itime" scheme="http://yoursite.com/tags/itime/"/>
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jquery-validate常用用法总结]]></title>
    <link href="http://yoursite.com/2016/01/04/jquery-validate%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/01/04/jquery-validate常用用法总结/</id>
    <published>2016-01-04T09:05:28.000Z</published>
    <updated>2016-01-04T09:26:28.054Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>juqry validate中，如何对使用ajax提交的方式进行校验？<br>有两种方式<br> 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。<br> 2)使用valid方法，监听form的submit事件，当$(‘#form’).valid()返回true的时候再提交。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//&#36890;&#36807;&#30417;&#21548;form&#30340;submit&#20107;&#20214;&#65292;&#23545;form&#36827;&#34892;ajax&#25552;&#20132;&#12290;&#10; $(&#39;#formId&#39;).submit(function() &#123;&#10;     if (!$(&#34;#formId&#34;).valid()) &#10;         return false;&#10;     $(this).omAjaxSubmit(&#123;&#125;);&#10;     return false; //&#27492;&#22788;&#24517;&#39035;&#36820;&#22238;false&#65292;&#38459;&#27490;&#24120;&#35268;&#30340;form&#25552;&#20132;&#10; &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>juqry validate中，如何对校验错误的提示信息位置和样式进行更改？<br> 1）js代码：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;  &#10;    $(&#34;#form1&#34;).validate(&#123;  &#10;        errorPlacement: function (error, element) &#123;  &#10;            error.appendTo(element.parent(&#34;td&#34;));  &#10;        &#125;,  &#10;        rules:&#123;              &#10;        &#125;  &#10;    &#125;);  &#10;    $(&#34;[name$=&#39;.sign&#39;]&#34;).each(function()&#123;  &#10;        $(this).rules(&#34;add&#34;,&#123;required:true,messages:&#123;required:&#34;&#33267;&#23569;&#36873;&#25321;&#19968;&#20010;&#36873;&#39033;&#34;&#125;&#125;);  &#10;    &#125;);  &#10;&#125;);</span><br></pre></td></tr></table></figure>
<p> 2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;style&#62;  &#10;label.error &#123;   &#10;    color:Red;   &#10;    font-size:13px;   &#10;    margin-left:5px;   &#10;    padding-left:16px;   &#10;&#125;   &#10;&#60;/style&#62;</span><br></pre></td></tr></table></figure>
<p> 3) 校验时机，可以自定义在js中想要的时候去校验</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;.selector&#39;).click(function() &#123;&#10;    if ($(&#34;selector of you form&#34;).valid()) &#123;&#10;        alert(&#39;in&#39;);&#10;    &#125; else &#123;&#10;        alert(&#39;out&#39;);&#10;    &#125;&#10;&#125;);&#10;$(&#34;selector of you form&#34;).validate(&#123;&#10;    rules: &#123;&#10;        receiveDayFrom: &#123;&#10;            required: true&#10;        &#125;&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure>
<p> 4) 例子：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#34;#form&#34;).validate(&#123;&#10;    rules: &#123;&#10;        name: &#123;&#10;            required: true&#10;        &#125;,&#10;        firstname: &#123;&#10;            required: true&#10;        &#125;&#10;    &#125;,&#10;    messages: &#123;&#10;        name: &#123;&#10;            required: &#34;Enter name&#34;&#10;        &#125;,&#10;        firstname: &#123;&#10;            required: &#34;Enter firstname&#34;&#10;        &#125;&#10;    &#125;,&#10;    errorPlacement: function ($error, $element) &#123;&#10;        var name = $element.attr(&#34;name&#34;);&#10;        $(&#34;#error&#34; + name).append($error);&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure>
<pre><code>or:
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#34;#form&#34;).validate(&#123;&#10;    errorLabelContainer: &#34;#errors&#34;,&#10;    rules: &#123;&#10;        name: &#123;&#10;            required: true&#10;        &#125;,&#10;        firstname: &#123;&#10;            required: true&#10;        &#125;&#10;    &#125;,&#10;    messages: &#123;&#10;        name: &#123;&#10;            required: &#34;Enter name&#34;&#10;        &#125;,&#10;        firstname: &#123;&#10;            required: &#34;Enter firstname&#34;&#10;        &#125;&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何添加自定义的校验？</p>
</li>
</ol>
<ul>
<li><p>添加一个方法</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// &#23383;&#31526;&#39564;&#35777;&#65292;&#21482;&#33021;&#21253;&#21547;&#33521;&#25991;&#12289;&#25968;&#23383;&#12289;&#19979;&#21010;&#32447;&#31561;&#23383;&#31526;&#12290;    &#10;jQuery.validator.addMethod(&#34;nameStringCheck&#34;, function(value, element) &#123;   &#10;     return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); &#10;&#125;, &#34;&#21482;&#33021;&#21253;&#21547;&#33521;&#25991;&#12289;&#25968;&#23383;&#12289;&#19979;&#21010;&#32447;&#31561;&#23383;&#31526;&#34;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在validate配置中使用新加的方法</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;#form selector&#39;).validate(&#123;&#10;    rules: &#123;&#10;        username: &#123;&#10;            required: true,&#10;            nameStringCheck: true&#10;        &#125;&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>如何使用ajax请求进行远程校验</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.validator.addMethod(&#34;checkUnique&#34;, function(value, element) &#123;&#10;    return validateUsernameByAjax(value, element.name, &#39;ajax&#35831;&#27714;&#22320;&#22336;&#39;);&#10;&#125;, &#34;&#27492;&#36755;&#20837;&#30340;&#20540;&#19981;&#21487;&#29992;&#34;);</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**&#10; * &#21516;&#27493;&#20570;&#29992;&#25143;&#21517;&#25110;&#37038;&#31665;&#30340;&#35831;&#27714;&#65292;&#26816;&#26597;&#21040;&#19981;&#21487;&#29992;&#65292;&#21017;&#36820;&#22238;false&#65292;&#21542;&#21017;&#36820;&#22238;true&#10; */&#10;function validateUsernameByAjax(value, fieldname, url) &#123;&#10;    var _request = url + &#34;?&#34;+fieldname+&#34;=&#34;+value;&#10;    var deferred = $.Deferred();//&#21019;&#24314;&#19968;&#20010;&#24310;&#36831;&#23545;&#35937;&#10;    $.ajax(&#123;&#10;        url:_request,&#10;        async:false,//&#35201;&#25351;&#23450;&#19981;&#33021;&#24322;&#27493;,&#24517;&#39035;&#31561;&#24453;&#21518;&#21488;&#26381;&#21153;&#26657;&#39564;&#23436;&#25104;&#20877;&#25191;&#34892;&#21518;&#32493;&#20195;&#30721;&#10;        dataType:&#34;json&#34;,&#10;        success:function(data) &#123;&#10;            if (data.status === &#34;error&#34; || data.status === &#34;fail&#34;) &#123;&#10;                deferred.reject();&#10;            &#125; else&#123;&#10;                deferred.resolve();  &#10;            &#125;&#10;        &#125;&#10;    &#125;);&#10;    //deferred.state()&#26377;3&#20010;&#29366;&#24577;:pending:&#36824;&#26410;&#32467;&#26463;,rejected:&#22833;&#36133;,resolved:&#25104;&#21151;&#10;    return deferred.state() == &#34;resolved&#34; ? true : false;&#10;&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;#form selector&#39;).validate(&#123;&#10;    rules: &#123;&#10;        username: &#123;&#10;            checkUnique: true&#10;        &#125;&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>juqry validate中，如何对使用ajax提交的方式进行校验？<br>有两种方式<br> 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用aja]]>
    </summary>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="validate" scheme="http://yoursite.com/tags/validate/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[git]git常用-把本地项目提交到github]]></title>
    <link href="http://yoursite.com/2015/12/31/git-git%E5%B8%B8%E7%94%A8-%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0github/"/>
    <id>http://yoursite.com/2015/12/31/git-git常用-把本地项目提交到github/</id>
    <published>2015-12-31T10:04:12.000Z</published>
    <updated>2016-01-04T02:49:35.200Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_u628A_u672C_u5730_u9879_u76EE_u63D0_u4EA4_u5230github"><a href="#1-_u628A_u672C_u5730_u9879_u76EE_u63D0_u4EA4_u5230github" class="headerlink" title="1.把本地项目提交到github"></a>1.把本地项目提交到github</h3><p>touch README.md //新建说明文件<br>git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录<br>git add . //添加当前目录中的所有文件到索引<br>git commit -m “first commit” //提交到本地源码库，并附加提交注释<br>git remote add origin <a href="https://github.com/chape/test.git" target="_blank" rel="external">https://github.com/chape/test.git</a> //添加到远程项目，别名为origin<br>git push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交</p>
<h3 id="2-_u5982_u679C_u6709error_3A_failed_to_push_some_refs_to__u2018https_3A//github-com/YihuaWanglv/myhexo-git_u2018"><a href="#2-_u5982_u679C_u6709error_3A_failed_to_push_some_refs_to__u2018https_3A//github-com/YihuaWanglv/myhexo-git_u2018" class="headerlink" title="2.如果有error: failed to push some refs to ‘https://github.com/YihuaWanglv/myhexo.git‘"></a>2.如果有error: failed to push some refs to ‘<a href="https://github.com/YihuaWanglv/myhexo.git" target="_blank" rel="external">https://github.com/YihuaWanglv/myhexo.git</a>‘</h3><p>有如下几种解决方法：</p>
<p>1.使用强制push的方法：<br>$ git push -u origin master -f<br>这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。<br>2.push前先将远程repository修改pull下来<br>$ git pull origin master<br>$ git push -u origin master<br>3.若不想merge远程和本地修改，可以先创建新的分支：<br>$ git branch [name]<br>然后push<br>$ git push -u origin [name]</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_u628A_u672C_u5730_u9879_u76EE_u63D0_u4EA4_u5230github"><a href="#1-_u628A_u672C_u5730_u9879_u76EE_u63D0_u4EA4_u5230github" class=]]>
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用hexo-deploy直接发布到github]]></title>
    <link href="http://yoursite.com/2015/12/31/%E4%BD%BF%E7%94%A8hexo-deploy%E7%9B%B4%E6%8E%A5%E5%8F%91%E5%B8%83%E5%88%B0github/"/>
    <id>http://yoursite.com/2015/12/31/使用hexo-deploy直接发布到github/</id>
    <published>2015-12-31T09:08:52.000Z</published>
    <updated>2016-01-04T07:29:03.686Z</updated>
    <content type="html"><![CDATA[<p>本文说明如何使用hexo deploy直接提交到github发布文章。</p>
<h3 id="1-npm_u5B89_u88C5_u9700_u8981_u7684_u4E1C_u897F"><a href="#1-npm_u5B89_u88C5_u9700_u8981_u7684_u4E1C_u897F" class="headerlink" title="1.npm安装需要的东西"></a>1.npm安装需要的东西</h3><p>$ npm install hexo-deployer-git –save<br>$ npm install hexo-deployer-heroku –save<br>$ npm install hexo-deployer-rsync –save<br>$ npm install hexo-deployer-openshift –save<br>$ npm install hexo-deployer-ftpsync –save</p>
<h3 id="2-_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6_config-yml"><a href="#2-_u4FEE_u6539_u914D_u7F6E_u6587_u4EF6_config-yml" class="headerlink" title="2.修改配置文件_config.yml"></a>2.修改配置文件_config.yml</h3><p>deploy:<br>  type: git<br>  repository: <a href="https://github.com/YihuaWanglv/yihuawanglv.github.io.git" target="_blank" rel="external">https://github.com/YihuaWanglv/yihuawanglv.github.io.git</a><br>  branch: master</p>
<h3 id="3-_u6267_u884C_u547D_u4EE4_u63D0_u4EA4_u53D1_u5E03"><a href="#3-_u6267_u884C_u547D_u4EE4_u63D0_u4EA4_u53D1_u5E03" class="headerlink" title="3.执行命令提交发布"></a>3.执行命令提交发布</h3><p>$ hexo clean<br>$ hexo generate<br>$ hexo deploy</p>
<p>over.</p>
<h3 id="u53C2_u8003_uFF1Ahttps_3A//hexo-io/zh-cn/docs/deployment-html"><a href="#u53C2_u8003_uFF1Ahttps_3A//hexo-io/zh-cn/docs/deployment-html" class="headerlink" title="参考：https://hexo.io/zh-cn/docs/deployment.html"></a>参考：<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/deployment.html</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<p>本文说明如何使用hexo deploy直接提交到github发布文章。</p>
<h3 id="1-npm_u5B89_u88C5_u9700_u8981_u7684_u4E1C_u897F"><a href="#1-npm_u5B89_u88C5_u9700_u8981_]]>
    </summary>
    
      <category term="deploy" scheme="http://yoursite.com/tags/deploy/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用github-pages和hexo搭建简单blog]]></title>
    <link href="http://yoursite.com/2015/12/31/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github-pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95blog/"/>
    <id>http://yoursite.com/2015/12/31/如何使用github-pages和hexo搭建简单blog/</id>
    <published>2015-12-31T07:41:30.000Z</published>
    <updated>2016-01-04T07:30:49.471Z</updated>
    <content type="html"><![CDATA[<p>前言</p>
<ul>
<li>github，写代码必备</li>
<li>hexo，一个很方便的静态blog生成系统</li>
<li>还不太熟悉，暂时不放图片</li>
</ul>
<p>步骤</p>
<h3 id="1-_u9996_u5148_u5F97_u6709_u4E00_u4E2Agithub_u8D26_u53F7"><a href="#1-_u9996_u5148_u5F97_u6709_u4E00_u4E2Agithub_u8D26_u53F7" class="headerlink" title="1.首先得有一个github账号"></a>1.首先得有一个github账号</h3><p>没有的得先上github创建一个</p>
<h3 id="2-_u521B_u5EFA_u4E00_u4E2Arepositories"><a href="#2-_u521B_u5EFA_u4E00_u4E2Arepositories" class="headerlink" title="2.创建一个repositories"></a>2.创建一个repositories</h3><ul>
<li>Repository name的填写格式是xxx.github.io</li>
<li>xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）</li>
<li>创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置</li>
<li>使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog</li>
<li>接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式</li>
<li>最后，点击“Publish page”，你的页面就公布出来了。</li>
</ul>
<h3 id="3-_u5B89_u88C5hexo"><a href="#3-_u5B89_u88C5hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h3><ul>
<li>首先安装git</li>
<li>安装node</li>
<li>安装npm</li>
<li><p>安装hexo<br>npm install hexo-cli -g<br>npm install hexo –save</p>
</li>
<li><p>hexo初始化<br>**根据自己需要创建一个hexo文件夹<br>$ hexo init <folder><br>$ cd <folder><br>$ npm install<br>新建完成后，指定文件夹的目录如下<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── scripts<br>├── source<br>|      ├── _drafts<br>|      └── _posts<br>└── themes</folder></folder></p>
</li>
<li><p>安装Hexo插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save&#10;npm install hexo-generator-archive --save&#10;npm install hexo-generator-category --save&#10;npm install hexo-generator-tag --save&#10;npm install hexo-server --save&#10;npm install hexo-deployer-git --save&#10;npm install hexo-deployer-heroku --save&#10;npm install hexo-deployer-rsync --save&#10;npm install hexo-deployer-openshift --save&#10;npm install hexo-renderer-marked@0.2 --save&#10;npm install hexo-renderer-stylus@0.2 --save&#10;npm install hexo-generator-feed@1 --save&#10;npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地查看效果<br>执行hexo server命令启动，然后访问localhost:4000查看效果</p>
</li>
</ul>
<h3 id="4-_u521B_u5EFA_u4E00_u7BC7_u6587_u7AE0"><a href="#4-_u521B_u5EFA_u4E00_u7BC7_u6587_u7AE0" class="headerlink" title="4.创建一篇文章"></a>4.创建一篇文章</h3><ul>
<li>git shell进入之前创建的hexo文件夹，hexo new “hello world”创建一篇新的文章</li>
</ul>
<h3 id="5-_u540C_u6B65_u5E76_u53D1_u5E03"><a href="#5-_u540C_u6B65_u5E76_u53D1_u5E03" class="headerlink" title="5.同步并发布"></a>5.同步并发布</h3><ul>
<li>hexo g 生成静态文件</li>
<li>git clone <a href="https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地" target="_blank" rel="external">https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地</a></li>
<li>复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内</li>
</ul>
<h3 id="6-_u63D0_u4EA4_u66F4_u6539_u5230github"><a href="#6-_u63D0_u4EA4_u66F4_u6539_u5230github" class="headerlink" title="6.提交更改到github"></a>6.提交更改到github</h3><ul>
<li>git add *</li>
<li>git commit -m “代码提交信息”</li>
<li>git push origin master</li>
<li>输入用户名密码</li>
</ul>
<p>这样再次访问你github上的blog地址，即可发现内容已更新</p>
<h3 id="7-_u4F7F_u7528hexo_u522B_u7684_u4E3B_u9898_u7F8E_u5316blog_u6837_u5F0F"><a href="#7-_u4F7F_u7528hexo_u522B_u7684_u4E3B_u9898_u7F8E_u5316blog_u6837_u5F0F" class="headerlink" title="7.使用hexo别的主题美化blog样式"></a>7.使用hexo别的主题美化blog样式</h3><ul>
<li>我这里选用的是简介美观的next主题</li>
<li>在终端窗口下，定位到 Hexo 站点目录下<br>$ cd your-hexo-site<br>$ git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>
<li>启用 NexT 主题<br>克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。</li>
<li>验证主题是否启用<br>运行 hexo s –debug，并访问 <a href="http://localhost:4000，确保站点正确运行" target="_blank" rel="external">http://localhost:4000，确保站点正确运行</a></li>
</ul>
<h3 id="8-_u540C_u6B65_u65B0_u7684_u66F4_u6539"><a href="#8-_u540C_u6B65_u65B0_u7684_u66F4_u6539" class="headerlink" title="8.同步新的更改"></a>8.同步新的更改</h3><p>现在要把新的更改同步上github，重新执行步骤5和6即可。<br>当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前言</p>
<ul>
<li>github，写代码必备</li>
<li>hexo，一个很方便的静态blog生成系统</li>
<li>还不太熟悉，暂时不放图片</li>
</ul>
<p>步骤</p>
<h3 id="1-_u9996_u5148_u5F97_u6709]]>
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github pages" scheme="http://yoursite.com/tags/github-pages/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/12/31/hello-world/"/>
    <id>http://yoursite.com/2015/12/31/hello-world/</id>
    <published>2015-12-31T07:25:50.504Z</published>
    <updated>2015-12-31T07:25:50.504Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
