<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iyihua</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2018-02-25T06:22:05.159Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>Wanglv Yihua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaError-The-temporary-upload-location-[/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT]-is-not-valid</title>
    <link href="http://localhost:4000/2018/02/25/JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid/"/>
    <id>http://localhost:4000/2018/02/25/JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid/</id>
    <published>2018-02-25T06:13:44.000Z</published>
    <updated>2018-02-25T06:22:05.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot内置Tomcat缓存文件目录被意外删除导致异常"><a href="#SpringBoot内置Tomcat缓存文件目录被意外删除导致异常" class="headerlink" title="SpringBoot内置Tomcat缓存文件目录被意外删除导致异常"></a>SpringBoot内置Tomcat缓存文件目录被意外删除导致异常</h1><p>在项目中，一般会将文件临时保存到缓存目录</p>
<p>当时使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File.createTempFile(&quot;tmp&quot;, ext,</span><br><span class="line">                        (File) request.getServletContext().getAttribute(ServletContext.TEMPDIR))</span><br></pre></td></tr></table></figure></p>
<p>创建临时文件时，项目一直运行正常，然而有一次报异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: </span><br><span class="line">    The temporary upload location [/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT] is not valid</span><br></pre></td></tr></table></figure>
<p>检查文件目录，文件确实不在，检查代码，也未发现问题。实在不知道原因，只有重启了服务器，问题也就不再出现。</p>
<p>今天偶然查看官方文档，发现问题所在，也提供了解决方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is</span><br><span class="line">used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch</span><br><span class="line">while your application is running leading to failures. To avoid this, you may want to customize </span><br><span class="line">your tmpwatch configuration so that tomcat.* directories are not deleted, or configure</span><br><span class="line">server.tomcat.basedir so that embedded Tomcat uses a different location</span><br></pre></td></tr></table></figure></p>
<p>前往目录 /etc/cron.daily/ 中，修改 tmpwatch 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">flags=-umc</span><br><span class="line">/usr/sbin/tmpwatch &quot;$flags&quot; -x /tmp/.X11-unix -x /tmp/.XIM-unix \</span><br><span class="line">        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \</span><br><span class="line">        -X &apos;/tmp/hsperfdata_*&apos; 10d /tmp \</span><br><span class="line">        -X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br><span class="line">/usr/sbin/tmpwatch &quot;$flags&quot; 30d /var/tmp</span><br><span class="line">for d in /var/&#123;cache/man,catman&#125;/&#123;cat?,X11R6/cat?,local/cat?&#125;; do</span><br><span class="line">    if [ -d &quot;$d&quot; ]; then</span><br><span class="line">        /usr/sbin/tmpwatch &quot;$flags&quot; -f 30d &quot;$d&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>可以看到添加了一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot内置Tomcat缓存文件目录被意外删除导致异常&quot;&gt;&lt;a href=&quot;#SpringBoot内置Tomcat缓存文件目录被意外删除导致异常&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot内置Tomcat缓存文件目录被意
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="error" scheme="http://localhost:4000/tags/error/"/>
    
      <category term="tomcat" scheme="http://localhost:4000/tags/tomcat/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>mosquitto使用记录与服务器调试</title>
    <link href="http://localhost:4000/2018/02/25/mosquitto%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B0%83%E8%AF%95/"/>
    <id>http://localhost:4000/2018/02/25/mosquitto使用记录与服务器调试/</id>
    <published>2018-02-25T03:14:27.000Z</published>
    <updated>2018-02-25T03:18:54.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mosquitto使用记录："><a href="#mosquitto使用记录：" class="headerlink" title="mosquitto使用记录："></a>mosquitto使用记录：</h1><h2 id="mqtt："><a href="#mqtt：" class="headerlink" title="mqtt："></a>mqtt：</h2><h3 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/mosquitto.conf</span><br></pre></td></tr></table></figure>
<h3 id="加-d表示后台运行："><a href="#加-d表示后台运行：" class="headerlink" title="加-d表示后台运行："></a>加-d表示后台运行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/mosquitto.conf -d</span><br></pre></td></tr></table></figure>
<h3 id="sub一个主题："><a href="#sub一个主题：" class="headerlink" title="sub一个主题："></a>sub一个主题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_sub -h localhost -t test -d</span><br></pre></td></tr></table></figure>
<h3 id="pub一个消息到主题："><a href="#pub一个消息到主题：" class="headerlink" title="pub一个消息到主题："></a>pub一个消息到主题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_pub -h localhost -m &quot;中文 的mqtt&quot; -t test -d</span><br></pre></td></tr></table></figure>
<h3 id="重启：找到线程，kill"><a href="#重启：找到线程，kill" class="headerlink" title="重启：找到线程，kill"></a>重启：找到线程，kill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -A | grep mosquitto</span><br><span class="line">kill -9 xxx</span><br></pre></td></tr></table></figure>
<h2 id="linux最大连接数设置"><a href="#linux最大连接数设置" class="headerlink" title="linux最大连接数设置"></a>linux最大连接数设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n20000 -s512</span><br><span class="line"></span><br><span class="line">ulimit -f unlimited</span><br><span class="line">ulimit -t unlimited</span><br><span class="line">ulimit -v unlimited</span><br><span class="line">ulimit -n 1048576</span><br><span class="line">ulimit -m unlimited</span><br><span class="line">ulimit -u 1048576</span><br></pre></td></tr></table></figure>
<p>Till now I have achieved 74K concurrent connections on a broker. I have configured the ulimit of broker server by editing sysctl.conf and limit.conf file.</p>
<ul>
<li>vi /etc/sysctl.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 10000000 </span><br><span class="line">fs.nr_open = 10000000</span><br><span class="line">net.ipv4.tcp_mem = 786432 1697152 1945728</span><br><span class="line">net.ipv4.tcp_rmem = 4096 4096 16777216</span><br><span class="line">net.ipv4.tcp_wmem = 4096 4096 16777216</span><br><span class="line">net.ipv4.ip_local_port_range = 1000 65535</span><br></pre></td></tr></table></figure>
<ul>
<li>vi /etc/security/limits.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 10000000</span><br><span class="line">* hard nofile 10000000</span><br><span class="line">root soft nofile 10000000</span><br><span class="line">root hard nofile 10000000</span><br></pre></td></tr></table></figure>
<p>After this reboot your system.</p>
<h2 id="mqtt启动后，需要开放对应端口的，则处理如下"><a href="#mqtt启动后，需要开放对应端口的，则处理如下" class="headerlink" title="mqtt启动后，需要开放对应端口的，则处理如下"></a>mqtt启动后，需要开放对应端口的，则处理如下</h2><p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>
<p>1、直接关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure>
<p>2、设置 iptables service</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install iptables-services</span><br></pre></td></tr></table></figure>
<p>如果要修改防火墙配置，如增加防火墙端口3306<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p>
<p>增加规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>保存退出后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart iptables.service #重启防火墙使配置生效</span><br><span class="line"></span><br><span class="line">systemctl enable iptables.service #设置防火墙开机启动</span><br></pre></td></tr></table></figure></p>
<p>最后重启系统使设置生效即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mosquitto使用记录：&quot;&gt;&lt;a href=&quot;#mosquitto使用记录：&quot; class=&quot;headerlink&quot; title=&quot;mosquitto使用记录：&quot;&gt;&lt;/a&gt;mosquitto使用记录：&lt;/h1&gt;&lt;h2 id=&quot;mqtt：&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="linux" scheme="http://localhost:4000/tags/linux/"/>
    
      <category term="mosquitto" scheme="http://localhost:4000/tags/mosquitto/"/>
    
      <category term="mqtt" scheme="http://localhost:4000/tags/mqtt/"/>
    
      <category term="服务器配置" scheme="http://localhost:4000/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>事务管理-spring事务使用注意点、数据库事务的隔离级别与锁</title>
    <link href="http://localhost:4000/2018/02/25/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86-spring%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E7%82%B9%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81/"/>
    <id>http://localhost:4000/2018/02/25/事务管理-spring事务使用注意点、数据库事务的隔离级别与锁/</id>
    <published>2018-02-25T02:43:01.000Z</published>
    <updated>2018-02-25T02:47:02.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-spring事务-Transactional的注意点"><a href="#1-spring事务-Transactional的注意点" class="headerlink" title="1. spring事务@Transactional的注意点"></a>1. spring事务@Transactional的注意点</h1><p>@Transactional注解可以标注在类和方法上，也可以标注在定义的接口和接口方法上。<br>如果我们在接口上标注@Transactional注解，会留下这样的隐患：因为注解不能被继承，所以业务接口中标注的@Transactional注解不会被业务实现类继承。所以可能会出现不启动事务的情况。所以，spring建议我们将@Transaction注解在实现类上。<br>在方法上的@Transactional注解会覆盖掉类上的@Transactional。</p>
<p>注意：</p>
<p>　　@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>
<p>　　虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p>
<p>　　默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。</p>
<h1 id="2-数据库事务中的隔离级别和锁"><a href="#2-数据库事务中的隔离级别和锁" class="headerlink" title="2. 数据库事务中的隔离级别和锁"></a>2. 数据库事务中的隔离级别和锁</h1><p>数据库事务在后端开发中占非常重要的地位，如何确保数据读取的正确性、安全性也是我们需要研究的问题。</p>
<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>首先总结一下数据库事务正确执行的四个要素（ACID）：</p>
<p>原子性（Atomicity）：即事务是不可分割的最小工作单元，事务内的操作要么全做，要么全不做，不能只做一部分；<br>一致性（Consistency）：在事务执行前数据库的数据处于正确的状态，而事务执行完成后数据库的数据还是处于正确的状态，即数据完整性约束没有被破坏；比如我们做银行转账的相关业务，A转账给B，要求A转的钱B一定要收到。如果A转了钱而B没有收到，那么数据库数据的一致性就得不到保障，在做高并发业务时要注意合理的设计。<br>隔离性（Isolation）：并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性；<br>持久性（Durability）：事务一旦执行成功，它对数据库的数据的改变必须是永久的，不会因各种异常导致数据不一致或丢失。<br>事务隔离级别<br>大部分数据库事务操作都是并发执行的，这就可能遇到下面的几种问题：</p>
<p>丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。<br>脏读（Dirty reads）：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。<br>不可重复读（Non-repeatable reads）：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。<br>幻读（Phantom reads）：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。<br>注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。</p>
<p>为了处理这几种问题，SQL定义了下面的4个等级的事务隔离级别：</p>
<p>未提交读（READ UNCOMMITTED ）：最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读；<br>提交读（READ COMMITTED）：一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不会出现丢失更新、脏读，但可能出现不可重复读、幻读；<br>可重复读（REPEATABLE READ）：保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读；<br>序列化（SERIALIZABLE）：最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读，但是效率最低。<br>隔离级别越高，数据库事务并发执行性能越差，能处理的操作越少。所以一般地，推荐使用REPEATABLE READ级别保证数据的读一致性。对于幻读的问题，可以通过加锁来防止。<br>MySQL支持这四种事务等级，默认事务隔离级别是REPEATABLE READ。Oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，所以Oracle数据库不支持脏读。Oracle数据库默认的事务隔离级别是READ COMMITTED。</p>
<h2 id="各种锁"><a href="#各种锁" class="headerlink" title="各种锁"></a>各种锁</h2><p>下面总结一下MySQL中的锁，有好几种分类。其它RDBMS也差不多是这样。</p>
<h3 id="首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。"><a href="#首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。" class="headerlink" title="首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。"></a>首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。</h3><p>乐观锁，顾名思义就是非常乐观，非常相信真善美，每次去读数据都认为其它事务没有在写数据，所以就不上锁，快乐的读取数据，而只在提交数据的时候判断其它事务是否搞过这个数据了，如果搞过就rollback。乐观锁相当于一种检测冲突的手段，可通过为记录添加版本或添加时间戳来实现。</p>
<p>悲观锁，对其它事务抱有保守的态度，每次去读数据都认为其它事务想要作祟，所以每次读数据的时候都会上锁，直到取出数据。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性，但随之而来的是各种开销。悲观锁相当于一种避免冲突的手段。<br>选择标准：如果并发量不大，或数据冲突的后果不严重，则可以使用乐观锁；而如果并发量大或数据冲突后果比较严重（对用户不友好），那么就使用悲观锁。</p>
<h3 id="从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。"><a href="#从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。" class="headerlink" title="从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。"></a>从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。</h3><p>理解：</p>
<p>持有S锁的事务只读不可写。如果事务A对数据D加上S锁后，其它事务只能对D加上S锁而不能加X锁。<br>持有X锁的事务可读可写。如果事务A对数据D加上X锁后，其它事务不能再对D加锁，直到A对D的锁解除。<br>从锁的粒度角度，主要分为表级锁（Table Lock）和行级锁（Row Lock）。<br>表级锁将整个表加锁，性能开销最小。用户可以同时进行读操作。当一个用户对表进行写操作时，用户可以获得一个写锁，写锁禁止其他的用户读写操作。写锁比读锁的优先级更高，即使有读操作已排在队列中，一个被申请的写锁仍可以排在所队列的前列。<br>行级锁仅对指定的记录进行加锁，这样其它进程可以对同一个表中的其它记录进行读写操作。行级锁粒度最小，开销大，能够支持高并发，可能会出现死锁。</p>
<h3 id="MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。"><a href="#MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。" class="headerlink" title="MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。"></a>MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。</h3><p>还有BDB引擎使用页级锁，即一次锁定一组记录，并发性介于行级锁和表级锁之间。</p>
<h3 id="三级锁协议"><a href="#三级锁协议" class="headerlink" title="三级锁协议"></a>三级锁协议</h3><p>三级加锁协议是为了保证正确的事务并发操作，事务在读、写数据库对象是需要遵循的加锁规则。</p>
<p>一级封锁协议：事务T在修改数据R之前必须对它加X锁，直到事务结束方可释放。而若事务T只是读数据，不进行修改，则不需加锁，因此一级加锁协议下可能会出现脏读和不可重复读。<br>二级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加S锁，直到读取完毕以后释放。二级加锁协议下可能会出现不可重复读。<br>三级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加X锁，直到事务结束方可释放。三级加锁协议避免了脏读和不可重复读的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-spring事务-Transactional的注意点&quot;&gt;&lt;a href=&quot;#1-spring事务-Transactional的注意点&quot; class=&quot;headerlink&quot; title=&quot;1. spring事务@Transactional的注意点&quot;&gt;&lt;/a&gt;1
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring事务" scheme="http://localhost:4000/tags/spring%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="Transactional" scheme="http://localhost:4000/tags/Transactional/"/>
    
      <category term="数据库事务" scheme="http://localhost:4000/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="锁" scheme="http://localhost:4000/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://localhost:4000/2018/02/07/hello-world/"/>
    <id>http://localhost:4000/2018/02/07/hello-world/</id>
    <published>2018-02-07T08:54:40.651Z</published>
    <updated>2018-02-07T08:54:40.652Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java并发学习(一)</title>
    <link href="http://localhost:4000/2017/09/06/java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://localhost:4000/2017/09/06/java并发学习-一/</id>
    <published>2017-09-06T15:33:27.000Z</published>
    <updated>2018-02-07T08:54:40.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h1><p>进程，是运行在自己地址空间内的自包容程序。</p>
<p>而java并发系统，会共享内存和IO这样的资源，因此需要协调不同线程驱动的任务之间对资源的使用。</p>
<p>线程机制是在执行程序表示的单一进程中创建任务。这样的好处是操作系统的透明性。</p>
<p>java线程机制，抢占式，调度机会周期性地中断程序，将上下文切换到另一个线程。</p>
<p>线程在设计上的好处是，简化了设计，同时具有松散耦合。</p>
<h1 id="2-基本线程机制"><a href="#2-基本线程机制" class="headerlink" title="2. 基本线程机制"></a>2. 基本线程机制</h1><p>一个线程是进程内的一个单一的顺序控制流，单进程可以同时拥有多个并发任务，其底层是切分CPU时间。</p>
<ul>
<li><p>定义任务： 继承Runnable，实现run方法。</p>
</li>
<li><p>yield()线程让步。</p>
</li>
<li><p>Thread类</p>
</li>
<li><p>使用Executor，可以管理一部任务的执行，而无需显式管理线程生命周期，是启动线程的优选方法。</p>
</li>
<li><p>ExecutorService：</p>
</li>
</ul>
<p>CachedThreadPool</p>
<p>FixedThreadPool：定义好有限的线程集，一次性预先执行代价高昂的线程分配，需要线程时从线程池中获取，省去了创建线程的开销。</p>
<p>SingleThreadPool：同时只有一条线程，顺序执行，序列化任务队列，可以省去贡献资源上的同步</p>
<ul>
<li><p>返回值，Callable接口，call()方法，Future对象，get()和isDone()方法。</p>
</li>
<li><p>休眠：sleep()</p>
</li>
<li><p>如果必须控制任务执行的顺序，最好的方式就是使用同步控制。</p>
</li>
<li><p>优先级：getPriority(),setPriority(),set优先级是在run的开头部分设置，由于不同系统的有限级别难以一一适配，所以，调整优先级最好是只用这3种：MAX_PRIORITY,NORM_PRIORITY,MIN_PRIORITY</p>
</li>
<li><p>让步：yield(),</p>
</li>
<li><p>后台线程：<br>当所有非后台线程结束时，程序终止，并且杀死所有后台线程。<br>setDeamon(true);<br>通过编写定制的ThreadFactory可以定制由Executor创建的线程的属性（后台、优先、名称）</p>
</li>
</ul>
<p>一个后台线程创建的任何线程，会自动设置为后台线程。<br>非后台的Executor通常是一种更好的方式，它控制所有任务可以同时被关闭。</p>
<ul>
<li><p>实现Runnable接口和使用Thread类的区别在于，使用接口，你可以继承另一个不同的类。</p>
</li>
<li><p>join(),在某个线程上调用，表示加入到某个线程，等待这个线程结束后，才开始执行。<br>可使用interrupt()中断。</p>
</li>
<li><p>interrupt()时会抛出异常，然后就清除了interrupt的标记，这时调用isInterrupted()检查时就会是false。</p>
</li>
<li><p>捕获异常：<br>main主体放到try-catch语句中没有作用。</p>
</li>
</ul>
<p>Thread.UncaughtExceptionHandler接口，允许你在每个Thread对象上都附上一个异常处理器。</p>
<p>Thread.UncaughtExceptionHandler.uncaughtExcetion()会在线程因未捕获的异常而临近死亡时被调用。</p>
<p>使用方法：</p>
<p>1，可以创建一个新的ThreadFactory，在每个新建的Thread对象上附上一个Thread.UncaughtExceptionHandler，然后将这个ThreadFactory传递给Executors创建新的ExecutorService。</p>
<p>2，如果知道要在代码中处处使用相同的异常处理，那么可以简单的在Thread类中设置一个静态域，并将这个处理器设置为默认的未捕获异常处理器。它只有在不存在线程专有的未捕获异常处理器时才被调用。</p>
<h1 id="3-共享受限资源"><a href="#3-共享受限资源" class="headerlink" title="3. 共享受限资源"></a>3. 共享受限资源</h1><ul>
<li><p>本质：基本上所有并发模式在解决线程冲突问题的时候，都是采用序列化访问共享资源的方案。</p>
</li>
<li><p>互斥量。<br>对于某个特定对象而言，其所有synchronized方法共享同一个锁，可防止多个任务同时访问被编码为对象内存。</p>
</li>
</ul>
<p>synchronized static方法可以在类的范围内防止对static数据的并发访问。</p>
<ul>
<li><p>Brian同步规则：如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。</p>
</li>
<li><p>重点：如果一个类中有超过一个方法在处理临界数据，那么必须同步所有相关方法。每个访问临界共享资源的方法都必须被同步，否则它们就不会正确工作。</p>
</li>
<li><p>使用显式的Lock对象：ReentrantLock</p>
</li>
</ul>
<p>Lock的好处是可以在finally子句中维护抛出异常后的清理，同时具有更细粒度的控制力。</p>
<ul>
<li><p>平时用synchronized，需要特殊情况时使用Lock。</p>
</li>
<li><p>原子性：原子性可以用于除long和double之外的所有基本类型之上的“简单操作”。<br>为什么long和double不行？因为jvm可以将64位的读取和写入当做两个分离的32位操作来执行，这就产生了读写两个操作之间发生上下文切换的可能。</p>
</li>
<li><p>volitle，用于定义变量，提供原子性。它提供了变量在内存中的可视性，即更改会刷新到内存中，可以让别的线程看到。</p>
</li>
<li><p>一般还是使用synchronized，只有在类中只有一个可变的域时，volitile才是安全的。</p>
</li>
<li><p>原子类：<br>Atomic<br>可以一定程度的去除一些别的同步方法，但同步锁通常更安全。</p>
</li>
<li><p>如何把一个不是线程安全的类变成线程安全？<br>可以创造一个对象的Manager类，Manager类持有该对象，并控制对它的一切访问，唯一的public方法是get()对象的方法，并且是synchronized的。</p>
</li>
<li><p>线程本地存储：ThreadLocal<br>根除线程间变量共享，线程隔离。</p>
</li>
</ul>
<h1 id="4-终结任务"><a href="#4-终结任务" class="headerlink" title="4. 终结任务"></a>4. 终结任务</h1><ul>
<li><p>cancle(),isCancled()</p>
</li>
<li><p>在阻塞时终结：</p>
</li>
</ul>
<p>进入阻塞几种方式：</p>
<p>1，sleep</p>
<p>2，wait</p>
<p>3，等待某个输入输出完成</p>
<p>4，视图获得对象锁而还没有获取到</p>
<ul>
<li><p>中断：interrupt()</p>
</li>
<li><p>安全离开线程run方法的方式：</p>
</li>
</ul>
<p>1，calcled标志，cancle()</p>
<p>2，interrupt()</p>
<p>3，Executor.shotdownNow()</p>
<p>4，Executor,submit(),Future,cancle()</p>
<ul>
<li><p>中断时要注意I/O的关闭等底层资源的关闭，因为不能中断正在试图获取synchronized锁或者I/O操作的线程。</p>
</li>
<li><p>一个任务应该能够调用在同一个对象中的其他synchronized方法，而这个任务已经持有锁了。</p>
</li>
<li><p>interrupt()，可以中断被互斥锁所阻塞的调用，并且，interrupt()只能在任务处于阻塞时有效。</p>
</li>
<li><p>清除中断状态：如果不清除，那么它可能会提醒你2次。</p>
</li>
<li><p>清理策略：try-finally子句</p>
</li>
</ul>
<h1 id="5-线程间协作"><a href="#5-线程间协作" class="headerlink" title="5. 线程间协作"></a>5. 线程间协作</h1><ul>
<li><p>wait(),notifyAll()</p>
</li>
<li><p>关键：wait()会释放锁，而sleep()和yield()则不会</p>
</li>
<li><p>要点：</p>
</li>
</ul>
<p>1，wait(),notifyAll()，notify()是基于类Object的，而不是属于Thread的一部分。而且，只能在同步控制方法或同步控制块里调用wait(),notifyAll()，notify()。</p>
<p>2，必须用一个检查感兴趣的条件的while循环包围wait()，也即是说，不满足我条件，我就继续等的意思。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-进程和线程&quot;&gt;&lt;a href=&quot;#1-进程和线程&quot; class=&quot;headerlink&quot; title=&quot;1. 进程和线程&quot;&gt;&lt;/a&gt;1. 进程和线程&lt;/h1&gt;&lt;p&gt;进程，是运行在自己地址空间内的自包容程序。&lt;/p&gt;
&lt;p&gt;而java并发系统，会共享内存和IO这
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="并发" scheme="http://localhost:4000/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://localhost:4000/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]01-Spring boot开发微服务</title>
    <link href="http://localhost:4000/2017/03/29/microservices-01-Spring-boot%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>http://localhost:4000/2017/03/29/microservices-01-Spring-boot开发微服务/</id>
    <published>2017-03-29T13:33:23.000Z</published>
    <updated>2018-02-07T08:54:40.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-boot开发微服务"><a href="#Spring-boot开发微服务" class="headerlink" title="Spring boot开发微服务"></a>Spring boot开发微服务</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-为什么使用spring-boot？"><a href="#1-为什么使用spring-boot？" class="headerlink" title="1. 为什么使用spring boot？"></a>1. 为什么使用spring boot？</h2><ul>
<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>
<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>
<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>
</ul>
<h2 id="2-开始第一个springboot项目"><a href="#2-开始第一个springboot项目" class="headerlink" title="2. 开始第一个springboot项目"></a>2. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>
<h3 id="2-1-创建一个空的maven项目，pom-xml中添加maven依赖"><a href="#2-1-创建一个空的maven项目，pom-xml中添加maven依赖" class="headerlink" title="2.1. 创建一个空的maven项目，pom.xml中添加maven依赖"></a>2.1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-编写项目启动入口App-java"><a href="#2-2-编写项目启动入口App-java" class="headerlink" title="2.2. 编写项目启动入口App.java"></a>2.2. 编写项目启动入口App.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class App </span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>
<h3 id="2-3-再进一步，为应用引入spring-mvc"><a href="#2-3-再进一步，为应用引入spring-mvc" class="headerlink" title="2.3. 再进一步，为应用引入spring mvc"></a>2.3. 再进一步，为应用引入spring mvc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class SampleController &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    String home() &#123;</span><br><span class="line">        String data = &quot;&quot;;</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-boot开发微服务&quot;&gt;&lt;a href=&quot;#Spring-boot开发微服务&quot; class=&quot;headerlink&quot; title=&quot;Spring boot开发微服务&quot;&gt;&lt;/a&gt;Spring boot开发微服务&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;github项目
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]06-Jenkins执行自动化的构建</title>
    <link href="http://localhost:4000/2017/03/29/microservices-06-Jenkins%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <id>http://localhost:4000/2017/03/29/microservices-06-Jenkins执行自动化的构建/</id>
    <published>2017-03-29T13:01:58.000Z</published>
    <updated>2018-02-07T08:54:40.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-06-Jenkins执行自动化的构建"><a href="#microservices-06-Jenkins执行自动化的构建" class="headerlink" title="[microservices]06-Jenkins执行自动化的构建"></a>[microservices]06-Jenkins执行自动化的构建</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-Jenkins安装运行"><a href="#1-Jenkins安装运行" class="headerlink" title="1. Jenkins安装运行"></a>1. Jenkins安装运行</h2><h3 id="1-1-docker方式安装运行"><a href="#1-1-docker方式安装运行" class="headerlink" title="1.1 docker方式安装运行"></a>1.1 docker方式安装运行</h3><p>docker拉取镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkinsci/jenkings</span><br></pre></td></tr></table></figure></p>
<p>启动容器的方式运行jenkins：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -u root -m 500m -p 8080:8080 -v ~/jenkins:/var/jenkins_home --name jenkins jenkinsci/jenkins</span><br></pre></td></tr></table></figure></p>
<p>后台查看jenkins日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f jenkins</span><br></pre></td></tr></table></figure></p>
<p>会看到一条解锁jenkins的key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock jenkins:c1bbf6aaa7aa4bd99cfcc0fb4a56ec83</span><br></pre></td></tr></table></figure></p>
<p>访问：<a href="http://localhost:8080，首次访问，需要输入key">http://localhost:8080，首次访问，需要输入key</a><br>复制unlock jenkins key，输入，完成.</p>
<p>后面就是安装插件，可以根据自己需要安装，也可以安装jenkins建议的插件.</p>
<h3 id="1-2-war包方式部署运行"><a href="#1-2-war包方式部署运行" class="headerlink" title="1.2 war包方式部署运行"></a>1.2 war包方式部署运行</h3><p>jenkins官网，下载最新稳定版本jenkins的war包.</p>
<p>放进准备好的tomcat的webapps下，启动tomcat即可运行。</p>
<h3 id="1-3-Centos的yum安装"><a href="#1-3-Centos的yum安装" class="headerlink" title="1.3 Centos的yum安装"></a>1.3 Centos的yum安装</h3><p>设置yum源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br></pre></td></tr></table></figure></p>
<p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure></p>
<p>修改端口和用户(可选，如果有需要修改端口和运行jenkins用户的需要，可以修改):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure></p>
<p>启动jenkins：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure></p>
<p>设置开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig jenkins on</span><br></pre></td></tr></table></figure></p>
<h2 id="2-jenkins必要设置"><a href="#2-jenkins必要设置" class="headerlink" title="2. jenkins必要设置"></a>2. jenkins必要设置</h2><p>基本上安装后第一次运行按照jenkins建议的插件，基本够用。有特殊需要再添加。</p>
<p>要使用git，需要安装git相关插件。</p>
<p>新版本jenkins不再默认设置maven，有需要maven功能的，可以在设置的工具管理页面配置一个maven。</p>
<h2 id="3-Jenkins搭建持续集成系统"><a href="#3-Jenkins搭建持续集成系统" class="headerlink" title="3. Jenkins搭建持续集成系统"></a>3. Jenkins搭建持续集成系统</h2><p>这个步骤的目标是实现使用jenkins进行项目构建：从代码仓库gitlab/github/svn等拉源代码，通过maven进行编译打包，最后将构建成功输出的程序包进行归档。</p>
<h3 id="3-1-创建构建任务"><a href="#3-1-创建构建任务" class="headerlink" title="3.1 创建构建任务"></a>3.1 创建构建任务</h3><p>创建一个新任务，填任务名称，选择构建什么项目<br><img src="/images/microservice-jenkins-01.png" alt=""></p>
<p>配置git仓库。如果需要账号密码认证，填上。<br><img src="/images/microservice-jenkins-02.png" alt=""></p>
<p>添加一个构建步骤：<br><img src="/images/microservice-jenkins-03.png" alt=""></p>
<p>选择maven targets的选项：<br><img src="/images/microservice-jenkins-04.png" alt=""></p>
<p>添加一个构建后步骤，将jar包归档<br><img src="/images/microservice-jenkins-05.png" alt=""></p>
<p>输入框中输入需要存档的文件：<br><img src="/images/microservice-jenkins-06.png" alt=""></p>
<h3 id="3-2-手工构建"><a href="#3-2-手工构建" class="headerlink" title="3.2 手工构建"></a>3.2 手工构建</h3><p><img src="/images/microservice-jenkins-07.png" alt=""></p>
<h3 id="3-3-实现自动执行构建"><a href="#3-3-实现自动执行构建" class="headerlink" title="3.3 实现自动执行构建"></a>3.3 实现自动执行构建</h3><p>我们希望代码提交到git后，自动触发构建。</p>
<p>构建触发器，选择“Poll SCM”：<br><img src="/images/microservice-jenkins-08.png" alt=""></p>
<p>输入“H/10 <em> </em> <em> </em>”。表示有最新代码提交后，等10分钟就会触发自动构建<br><img src="/images/microservice-jenkins-09.png" alt=""></p>
<h2 id="4-使用jenkins实现自动化发布"><a href="#4-使用jenkins实现自动化发布" class="headerlink" title="4. 使用jenkins实现自动化发布"></a>4. 使用jenkins实现自动化发布</h2><h3 id="4-1-自动发布jar包"><a href="#4-1-自动发布jar包" class="headerlink" title="4.1 自动发布jar包"></a>4.1 自动发布jar包</h3><p><img src="/images/microservice-jenkins-10.png" alt=""></p>
<p>在输入框中输入shell命令来运行项目：<br><img src="/images/microservice-jenkins-11.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar $WORKSPACE/xxx/target/xxx.jar --server.port=10800</span><br></pre></td></tr></table></figure></p>
<p>仅仅是这样还不够，需要考虑正在运行中的应用的关闭、后台启动、生产环境如何部署发布等众多细节，继续完善的话，是一条路。另一条路是使用docker。</p>
<h3 id="4-2-自动发布Docker容器"><a href="#4-2-自动发布Docker容器" class="headerlink" title="4.2 自动发布Docker容器"></a>4.2 自动发布Docker容器</h3><p>使用docker容器发布项目，我们要达到的目标是：<br>1）开发人员将代码同步到git仓库，随后触发jenkins自动构建<br>2）jenkins调用maven进行构建，生成jar包。<br>3）根据当前构建过程，生成一个docker镜像，将其推送至局域网内的docker registry中，供生产环境随时获取并发布。<br>4）根据生成的docker镜像，运行一个docker容器（若当前存在该镜像，则先移除该镜像）</p>
<p>前2步在前面的步骤已实现，以下将完成后两步：</p>
<p>在构建后步骤中选择shell脚本，在脚本框中输入具体的docker镜像构建和推送：<br><img src="/images/microservice-jenkins-12.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">API_NAME=&quot;spring-boot-docker&quot;</span><br><span class="line">API_VERSION=&quot;1.0.0&quot;</span><br><span class="line">API_PORT=8101</span><br><span class="line">IMAGE_NAME=&quot;127.0.0.1:5000/com.iyihua/$API_NAME:$BUILD_NUMBER&quot;</span><br><span class="line">CONTAINER_NAME=$API_NAME-$API_VERSION</span><br><span class="line"></span><br><span class="line">cd $WORKSPACE/target</span><br><span class="line">cp classes/Dockerfile .</span><br><span class="line"></span><br><span class="line">docker build -t $IMAGE_NAME .</span><br><span class="line"></span><br><span class="line">docker push $IMAGE_NAME</span><br><span class="line"></span><br><span class="line">cid=$(docker ps | grep &quot;$CONTAINER_NAME&quot; | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">if [ &quot;$cid&quot; != &quot;&quot; ]; then</span><br><span class="line">  docker rm -f $cid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker run -d -p $API_PORT:$API_PORT --name $CONTAINER_NAME $IMAGE_NAME</span><br><span class="line"></span><br><span class="line">rm -f Dockerfile</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-06-Jenkins执行自动化的构建&quot;&gt;&lt;a href=&quot;#microservices-06-Jenkins执行自动化的构建&quot; class=&quot;headerlink&quot; title=&quot;[microservices]06-Jenkins执行自
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="docker" scheme="http://localhost:4000/tags/docker/"/>
    
      <category term="jenkins" scheme="http://localhost:4000/tags/jenkins/"/>
    
      <category term="自动化" scheme="http://localhost:4000/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="构建" scheme="http://localhost:4000/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]05-Gitlab作为代码仓库</title>
    <link href="http://localhost:4000/2017/03/29/microservices-05-Gitlab%E4%BD%9C%E4%B8%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/"/>
    <id>http://localhost:4000/2017/03/29/microservices-05-Gitlab作为代码仓库/</id>
    <published>2017-03-29T13:01:26.000Z</published>
    <updated>2018-02-07T08:54:40.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-05-Gitlab作为代码仓库"><a href="#microservices-05-Gitlab作为代码仓库" class="headerlink" title="[microservices]05-Gitlab作为代码仓库"></a>[microservices]05-Gitlab作为代码仓库</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-Gitlab的Docker安装"><a href="#1-Gitlab的Docker安装" class="headerlink" title="1. Gitlab的Docker安装"></a>1. Gitlab的Docker安装</h2><p>gitlab安装的过程稍微麻烦，但如果使用docker安装的话，就会非常简单。</p>
<p>下载镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>
<p>下载镜像，并启动容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -m 512m -h gitlab.iyihua.com -p 22:22 -p 80:80 -v ~/gitlab/etc:/etc/gitlab -v ~/gitlab/log:/var/log/gitlab -v ~/gitlab/opt:/var/opt/gitlab --name gitlab gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>
<p>说明：<br>(1) -h， 设置gitlab访问域名<br>(2) -p， 指定映射端口，22表示ssh端口,80表示http端口，<br>(3) -m， 指定目录映射<br>(4) -v， 指定分配多少内存来运行容器</p>
<p>启动后，访问首页gitlab.iyihua.com，会定向到修改管理员密码页面，修改完管理员密码后，会重定向到登陆页面。</p>
<h2 id="2-git使用"><a href="#2-git使用" class="headerlink" title="2. git使用"></a>2. git使用</h2><p>gitlab安装好后，和github的使用并无二致。</p>
<p>git本地使用需要设置好git全局设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>
<p>如果要用ssh拉取和提交代码，需要设置好ssh公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;admin@example.com&quot;</span><br><span class="line"></span><br><span class="line">#可通过以下命令查看ssh key：</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">把得到的key进入gitlab ssh密钥管理界面，输入这个ssh key.</span><br></pre></td></tr></table></figure></p>
<h2 id="3-more"><a href="#3-more" class="headerlink" title="3. more"></a>3. more</h2><p>gitlab运行需要的资源比较多，一个800m的虚拟机用docker跑gitlab比较吃力，经常会出现页面502.建议最低内存是1G。</p>
<p>如果仅仅是个人使用，可以直接使用github代替，或者使用GOGS代替.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-05-Gitlab作为代码仓库&quot;&gt;&lt;a href=&quot;#microservices-05-Gitlab作为代码仓库&quot; class=&quot;headerlink&quot; title=&quot;[microservices]05-Gitlab作为代码仓库&quot;&gt;&lt;/
    
    </summary>
    
    
      <category term="git" scheme="http://localhost:4000/tags/git/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="docker" scheme="http://localhost:4000/tags/docker/"/>
    
      <category term="gitlab" scheme="http://localhost:4000/tags/gitlab/"/>
    
      <category term="代码仓库" scheme="http://localhost:4000/tags/%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]04-Docker作为服务运行容器</title>
    <link href="http://localhost:4000/2017/03/29/microservices-04-Docker%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8/"/>
    <id>http://localhost:4000/2017/03/29/microservices-04-Docker作为服务运行容器/</id>
    <published>2017-03-29T13:01:01.000Z</published>
    <updated>2018-02-07T08:54:40.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-04-Docker作为服务运行容器"><a href="#microservices-04-Docker作为服务运行容器" class="headerlink" title="[microservices]04-Docker作为服务运行容器"></a>[microservices]04-Docker作为服务运行容器</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-docker运行环境"><a href="#1-docker运行环境" class="headerlink" title="1. docker运行环境"></a>1. docker运行环境</h2><h3 id="1-1-操作系统选择"><a href="#1-1-操作系统选择" class="headerlink" title="1.1 操作系统选择"></a>1.1 操作系统选择</h3><p>对于linux系统，Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求.<br>这里选用centos7系统作为docker的运行环境.</p>
<p>在windows系统下，可以使用vm虚拟机虚拟centos7，运行docker.</p>
<h3 id="1-2-linux操作系统配置"><a href="#1-2-linux操作系统配置" class="headerlink" title="1.2 linux操作系统配置"></a>1.2 linux操作系统配置</h3><h4 id="1-2-1-防火墙"><a href="#1-2-1-防火墙" class="headerlink" title="1.2.1 防火墙"></a>1.2.1 防火墙</h4><p>centos7使用firewall作为防火墙，docker向外提供服务，需要开通必要端口。<br>firewall开放端口命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#开放8080端口</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">#重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>
<p>当然，如果习惯于iptables防火墙，也可以关闭firewall，启用iptables防火墙：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#1、关闭firewall：</span><br><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line">#查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br><span class="line">firewall-cmd --state </span><br><span class="line"></span><br><span class="line">#2、iptables防火墙（这里iptables已经安装，下面进行配置）</span><br><span class="line">$ vi /etc/sysconfig/iptables #编辑防火墙配置文件</span><br><span class="line"></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT[0:0]</span><br><span class="line">:OUTPUT ACCEPT[0:0]</span><br><span class="line">-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -jACCEPT</span><br><span class="line">-A INPUT -i lo -jACCEPT</span><br><span class="line">-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT</span><br><span class="line">-A INPUT -j REJECT--reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -jREJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br><span class="line">:wq! #保存退出</span><br></pre></td></tr></table></figure></p>
<h2 id="2-安装并启动docker"><a href="#2-安装并启动docker" class="headerlink" title="2. 安装并启动docker"></a>2. 安装并启动docker</h2><p>从2017-03-01起，新版的docker分为了CE和EE两个版本，CE是社区版，EE是企业版. 我们这里使用CE版即可.</p>
<h3 id="2-1-安装docker-ce"><a href="#2-1-安装docker-ce" class="headerlink" title="2.1 安装docker-ce"></a>2.1 安装docker-ce</h3><h4 id="2-1-1-Set-up-the-repository"><a href="#2-1-1-Set-up-the-repository" class="headerlink" title="2.1.1. Set up the repository"></a>2.1.1. Set up the repository</h4><p>Set up the Docker CE repository on CentOS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure></p>
<h4 id="2-1-2-Get-Docker-CE"><a href="#2-1-2-Get-Docker-CE" class="headerlink" title="2.1.2. Get Docker CE"></a>2.1.2. Get Docker CE</h4><p>Install the latest version of Docker CE on CentOS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure></p>
<p>Start Docker:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></p>
<p>docker开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  enable docker.service</span><br></pre></td></tr></table></figure></p>
<h4 id="2-1-3-Test-your-Docker-CE-installation"><a href="#2-1-3-Test-your-Docker-CE-installation" class="headerlink" title="2.1.3. Test your Docker CE installation"></a>2.1.3. Test your Docker CE installation</h4><p>Test your installation:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></p>
<h3 id="2-2-添加镜像加速"><a href="#2-2-添加镜像加速" class="headerlink" title="2.2 添加镜像加速"></a>2.2 添加镜像加速</h3><p>假如你有阿里云账号，可配置镜像加速<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p>
<p>添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>“<a href="https://xxxxxxxx.mirror.aliyuncs.com" target="_blank" rel="external">https://xxxxxxxx.mirror.aliyuncs.com</a>“<br>是你的专属镜像加速地址，可以在阿里云管理页面找到.</p>
<p>重启docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p>
<h2 id="3-docker镜像操作和docker容器运行使用"><a href="#3-docker镜像操作和docker容器运行使用" class="headerlink" title="3. docker镜像操作和docker容器运行使用"></a>3. docker镜像操作和docker容器运行使用</h2><h3 id="3-1-拉取镜像，并启动容器"><a href="#3-1-拉取镜像，并启动容器" class="headerlink" title="3.1 拉取镜像，并启动容器"></a>3.1 拉取镜像，并启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前有什么镜像</span><br><span class="line">docker images</span><br><span class="line"># 拉取centos系统镜像</span><br><span class="line">docker pull centos</span><br><span class="line"># 启动刚刚拉取的镜像</span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="3-2-运行docker容器时的一些常用命令和选项"><a href="#3-2-运行docker容器时的一些常用命令和选项" class="headerlink" title="3.2 运行docker容器时的一些常用命令和选项"></a>3.2 运行docker容器时的一些常用命令和选项</h3><ul>
<li><p>列出当前运行中的容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要列出所有状态（包括已停止）的容器，添加-a参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入运行中的容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>将宿主机上的磁盘挂载到容器中，也即“目录映射”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>“-v /home/software:/mnt/software”表示将容器的/mnt/software目录挂载到宿主机的/home/software目录.</p>
<h2 id="4-手工制作java镜像"><a href="#4-手工制作java镜像" class="headerlink" title="4. 手工制作java镜像"></a>4. 手工制作java镜像</h2><h3 id="4-1-上传java-rpm安装包到-home-software目录"><a href="#4-1-上传java-rpm安装包到-home-software目录" class="headerlink" title="4.1 上传java rpm安装包到/home/software目录"></a>4.1 上传java rpm安装包到/home/software目录</h3><p>这里使用已下载好的java8 64位安装包：jdk-8u65-linux-x64.rpm</p>
<h3 id="4-2-启动容器"><a href="#4-2-启动容器" class="headerlink" title="4.2 启动容器"></a>4.2 启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="4-3-运行安装包"><a href="#4-3-运行安装包" class="headerlink" title="4.3 运行安装包"></a>4.3 运行安装包</h3><p>/mnt/software映射到宿主机的/home/software，说明容器内的/mnt/software已有jdk-8u65-linux-x64.rpm文件，直接rpm运行安装java8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/software</span><br><span class="line">rpm -ivh jdk-8u65-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>
<h3 id="4-4-查看是否安装成功"><a href="#4-4-查看是否安装成功" class="headerlink" title="4.4 查看是否安装成功"></a>4.4 查看是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h3 id="4-5-提交镜像"><a href="#4-5-提交镜像" class="headerlink" title="4.5 提交镜像"></a>4.5 提交镜像</h3><p>再打开一个终端，查看当前运行的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                                COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">3443c1097867        127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0   &quot;/bin/sh -c &apos;java ...&quot;   6 days ago          Up 6 days           0.0.0.0:18101-&gt;8101/tcp   objective_shannon</span><br></pre></td></tr></table></figure></p>
<p>获取容器id(3443c1097867)，提交镜像<br>docker commit 3443c1097867 iyihua/java</p>
<h3 id="4-6-验证镜像"><a href="#4-6-验证镜像" class="headerlink" title="4.6 验证镜像"></a>4.6 验证镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -rm iyihua/java java -version</span><br></pre></td></tr></table></figure>
<p>“-rm”参数表示不想保留容器，运行结束后即删除退出</p>
<h2 id="5-使用Dockerfile构建镜像"><a href="#5-使用Dockerfile构建镜像" class="headerlink" title="5. 使用Dockerfile构建镜像"></a>5. 使用Dockerfile构建镜像</h2><p>Dockerfile就是把手工构建镜像的过程写成一段自动执行的脚本，最终生成镜像。</p>
<h3 id="5-1-Dockerfile构建java镜像"><a href="#5-1-Dockerfile构建java镜像" class="headerlink" title="5.1 Dockerfile构建java镜像"></a>5.1 Dockerfile构建java镜像</h3><p>也就是把之前手工构建的java镜像的步骤放到脚本里，脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class="line">ADD jdk-8u65-linux-x64.rpm /usr/local</span><br><span class="line">RUN rpm -ivh /usr/local/jdk-8u65-linux-x64.rpm</span><br><span class="line">CMD java -version</span><br></pre></td></tr></table></figure></p>
<p>这个Dockerfile顺利运行要求Dockerfile所在宿主机目录含有一个准备好的java安装包jdk-8u65-linux-x64.rpm。</p>
<ul>
<li>如果构建的镜像与之前构建过的镜像的仓库名、标签名相同，之前的镜像的仓库名和标签名就会更新为<none>. 我们可以使用docker tag命令来修改镜像仓库名和标签名。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 3443c1097867 iyihua/java:1.0.0</span><br></pre></td></tr></table></figure>
</none></li>
</ul>
<h2 id="6-使用Docker-Registry管理镜像"><a href="#6-使用Docker-Registry管理镜像" class="headerlink" title="6. 使用Docker Registry管理镜像"></a>6. 使用Docker Registry管理镜像</h2><p>我们默认就是从Docker Hub下载公共镜像。官方的Docker Hub也为我们提供了一个私有仓库，可以让内部人员通过这个仓库上传下载内部镜像，不过免费用户只能创建一个私有仓库。</p>
<p>不过，我们可以通过Docker Registry开源项目，在内部搭建一个私有镜像注册中心。</p>
<h3 id="6-1-注册登录Docker-Hub"><a href="#6-1-注册登录Docker-Hub" class="headerlink" title="6.1 注册登录Docker Hub"></a>6.1 注册登录Docker Hub</h3><p>通过浏览器注册登录Docker Hub，手动创建一个私有仓库。</p>
<p>然后我们就可以通过客户端login并push镜像到仓库。</p>
<p>登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure></p>
<p>推送镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push iyihua/java</span><br></pre></td></tr></table></figure></p>
<h3 id="6-2-搭建Docker-Registry"><a href="#6-2-搭建Docker-Registry" class="headerlink" title="6.2 搭建Docker Registry"></a>6.2 搭建Docker Registry</h3><h4 id="6-2-1-启动"><a href="#6-2-1-启动" class="headerlink" title="6.2.1 启动"></a>6.2.1 启动</h4><p>通过docker本身的镜像，就可以简单的在本地搭建起Docker Registry：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry \</span><br><span class="line">  -v `pwd`/data:/var/lib/registry \</span><br><span class="line">  registry:2</span><br></pre></td></tr></table></figure></p>
<p>这样就会在127.0.0.1:5000的地址启动起Docker Registry服务.</p>
<ul>
<li>参数说明：<br>  （1）-d表示后台运行<br>  （2）-p是宿主机与容器的端口映射<br>  （3）-v是宿主机与容器的目录映射，也即目录挂载</li>
</ul>
<h4 id="6-2-2-重命名镜像标签"><a href="#6-2-2-重命名镜像标签" class="headerlink" title="6.2.2 重命名镜像标签"></a>6.2.2 重命名镜像标签</h4><p>docker push默认的镜像中心是Docker Hub，没有指明目标地址的镜像，其完整的镜像名称是“docker.io/iyihua/java”.<br>如果我们打算将iyihua/java推送到本地的Docker Registry，则需要将镜像名称修改为127.0.0.1:5000/iyihua/java.</p>
<p>使用docker tag命令更名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 3443c1097867 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>
<p>使用docker push命令推送：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>
<h2 id="7-Spring-Boot与Docker整合"><a href="#7-Spring-Boot与Docker整合" class="headerlink" title="7. Spring Boot与Docker整合"></a>7. Spring Boot与Docker整合</h2><p>Spring Boot与Docker整合的目标是构建spring boot应用程序时可同时生成Docker镜像，并将此镜像推送至Docker Registry，整个构建过程依然使用maven来完成</p>
<p>现在假定已有一个普通spring boot应用spring-boot-docker.</p>
<h3 id="7-1-为spring-boot程序添加Dockerfile"><a href="#7-1-为spring-boot程序添加Dockerfile" class="headerlink" title="7.1 为spring boot程序添加Dockerfile"></a>7.1 为spring boot程序添加Dockerfile</h3><p>在resources目录下添加Dockerfile：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM java</span><br><span class="line">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class="line">ADD spring-boot-docker-1.0.0.jar app.jar</span><br><span class="line">EXPOSE 8101</span><br><span class="line">CMD java -jar app.jar</span><br></pre></td></tr></table></figure></p>
<h3 id="7-2-使用maven构建Dockerfile"><a href="#7-2-使用maven构建Dockerfile" class="headerlink" title="7.2 使用maven构建Dockerfile"></a>7.2 使用maven构建Dockerfile</h3><p>在pom文件中添加docker相关插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.4.10&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;docker.registry&#125;/$&#123;project.groupId&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;$&#123;project.build.outputDirectory&#125;&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;!-- &lt;targetPath&gt;/&lt;/targetPath&gt; --&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>
<p>需要添加的属性配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;docker.registry&gt;127.0.0.1:5000&lt;/docker.registry&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="7-3-构建并推送"><a href="#7-3-构建并推送" class="headerlink" title="7.3 构建并推送"></a>7.3 构建并推送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn docker:build docker:push</span><br></pre></td></tr></table></figure>
<h3 id="7-4-docker容器启动应用"><a href="#7-4-docker容器启动应用" class="headerlink" title="7.4 docker容器启动应用"></a>7.4 docker容器启动应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 18101:8101 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure>
<ul>
<li>p参数指明宿主机和容器的端口映射</li>
<li>d参数指明要后台运行</li>
</ul>
<h3 id="7-5-调整docker容器内存"><a href="#7-5-调整docker容器内存" class="headerlink" title="7.5 调整docker容器内存"></a>7.5 调整docker容器内存</h3><p>查看docker容器运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure></p>
<p>运行应用时调整内存限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 18101:8101 -m 512m 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>m参数指明内存调整为多少</p>
</li>
<li><p>demo代码可以在这里获取：<br><a href="https://github.com/YihuaWanglv/spring-boot-docker" target="_blank" rel="external">spring-boot-docker sample项目</a></p>
</li>
</ul>
<p>或者：<br><a href="https://github.com/YihuaWanglv/microservices/tree/master/services/spring-boot-docker" target="_blank" rel="external">microservices/spring-boot-docker</a></p>
<h2 id="附：常见问题："><a href="#附：常见问题：" class="headerlink" title="附：常见问题："></a>附：常见问题：</h2><h3 id="1-docker-iptables-failed-no-chain-target-match-by-that-name"><a href="#1-docker-iptables-failed-no-chain-target-match-by-that-name" class="headerlink" title="(1)docker iptables failed no chain/target/match by that name"></a>(1)docker iptables failed no chain/target/match by that name</h3><p>重启docker即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p>
<h3 id="2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”"><a href="#2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”" class="headerlink" title="(2)当docker run centos，出现：centos exec user process caused “permission denied”"></a>(2)当docker run centos，出现：centos exec user process caused “permission denied”</h3><p>需要加一个参数：–privileged</p>
<p>结果命令变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged -i -t centos /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">大约在0.6版，privileged被引入docker。</span><br><span class="line">使用该参数，container内的root拥有真正的root权限。</span><br><span class="line">否则，container内的root只是外部的一个普通用户权限。</span><br><span class="line">privileged启动的容器，可以看到很多host上的设备，并且可以执行mount。</span><br><span class="line">甚至允许你在docker容器中启动docker容器。</span><br></pre></td></tr></table></figure></p>
<p>建议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果总是需要privileged才能正常运行docker，那么可能你安装的docker可能有问题，建议重新安装最新的docker-ce，将不再需要privileged参数.</span><br></pre></td></tr></table></figure></p>
<h3 id="3-docker-build-cannot-allocate-memory"><a href="#3-docker-build-cannot-allocate-memory" class="headerlink" title="(3)docker build cannot allocate memory"></a>(3)docker build cannot allocate memory</h3><p>这个问题的终极解决办法，还是重启docker，或者重启服务器；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-04-Docker作为服务运行容器&quot;&gt;&lt;a href=&quot;#microservices-04-Docker作为服务运行容器&quot; class=&quot;headerlink&quot; title=&quot;[microservices]04-Docker作为服务运行
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="docker" scheme="http://localhost:4000/tags/docker/"/>
    
      <category term="centos7" scheme="http://localhost:4000/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]03-Zookeeper注册发现服务</title>
    <link href="http://localhost:4000/2017/03/29/microservices-03-Zookeeper%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0%E6%9C%8D%E5%8A%A1/"/>
    <id>http://localhost:4000/2017/03/29/microservices-03-Zookeeper注册发现服务/</id>
    <published>2017-03-29T13:00:37.000Z</published>
    <updated>2018-02-07T08:54:40.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-03-Zookeeper注册发现服务"><a href="#microservices-03-Zookeeper注册发现服务" class="headerlink" title="[microservices]03-Zookeeper注册发现服务"></a>[microservices]03-Zookeeper注册发现服务</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-zookeeper原理介绍"><a href="#1-zookeeper原理介绍" class="headerlink" title="1. zookeeper原理介绍"></a>1. zookeeper原理介绍</h2><ul>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="external">分布式服务框架 Zookeeper – 管理分布式环境中的数据</a></li>
</ul>
<h2 id="2-基础微服务简单架构与demo说明"><a href="#2-基础微服务简单架构与demo说明" class="headerlink" title="2. 基础微服务简单架构与demo说明"></a>2. 基础微服务简单架构与demo说明</h2><p><img src="/images/framework-microservices.png" alt=""></p>
<ul>
<li>api-gateway实例：dispatcher(/microservices/api-gateway/dispatcher)</li>
<li>web-client实例：web-client(/microservices/apps/web-client)</li>
<li><p>api-service实例：api-demo(/microservices/services/api-demo)</p>
</li>
<li><p>zookeeper：注册中心</p>
</li>
<li>spring boot应用api-demo，作为一个service微服务实例，依赖一个服务注册组件service-registry(/microservices/services/service-registry)，实现服务向zookeeper注册。启动api-demo即可向外提供服务并注册到zookeeper。</li>
<li>Nodejs应用dispatcher，作为api网关，它使用一个node-zookeeper-client组件，连接zookeeper，根据client传递过来的service名称，发现服务，并转发请求到目标服务中。</li>
<li>web-client，即是前端web客户端，它只向api网关dispatcher发送请求，并且在请求的header中传递Service-Name字段，指明要请求的服务名称.</li>
</ul>
<h2 id="3-运行demo"><a href="#3-运行demo" class="headerlink" title="3. 运行demo"></a>3. 运行demo</h2><h3 id="3-1-bin-zkServer-sh-start启动zookeeper"><a href="#3-1-bin-zkServer-sh-start启动zookeeper" class="headerlink" title="3.1 bin/zkServer.sh start启动zookeeper"></a>3.1 bin/zkServer.sh start启动zookeeper</h3><p>没有zookeeper请先下载：<a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="external">http://zookeeper.apache.org/releases.html</a></p>
<h3 id="3-2-打包运行api-demo"><a href="#3-2-打包运行api-demo" class="headerlink" title="3.2 打包运行api-demo"></a>3.2 打包运行api-demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../microservices/services/api-demo</span><br><span class="line">mvn clean package</span><br><span class="line">java -jar api-demo-1.0.0.jar</span><br></pre></td></tr></table></figure>
<p>或者直接导入项目，运行ApiDemoApplication启动.</p>
<h3 id="3-3-运行api网关dispatcher"><a href="#3-3-运行api网关dispatcher" class="headerlink" title="3.3 运行api网关dispatcher"></a>3.3 运行api网关dispatcher</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../microservices/api-gateway/dispatcher</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>如果想每次更改代码后即刻生效，可使用supervisor模块启动应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install supervisor -g</span><br><span class="line">supervisor app.js</span><br></pre></td></tr></table></figure></p>
<p>如果需要Node应用在发生异常停止时能够重新启动，可使用forever模块启动应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install forever -g</span><br><span class="line">forever app.js</span><br></pre></td></tr></table></figure></p>
<p>forever app.js表示在前台启动，想要后台启动，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever start app.js</span><br></pre></td></tr></table></figure></p>
<h3 id="3-4-运行web-client，访问首页，进行服务请求"><a href="#3-4-运行web-client，访问首页，进行服务请求" class="headerlink" title="3.4 运行web-client，访问首页，进行服务请求."></a>3.4 运行web-client，访问首页，进行服务请求.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../microservices/api-gateway/dispatcher</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:9001/">http://localhost:9001/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-03-Zookeeper注册发现服务&quot;&gt;&lt;a href=&quot;#microservices-03-Zookeeper注册发现服务&quot; class=&quot;headerlink&quot; title=&quot;[microservices]03-Zookeeper注
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://localhost:4000/tags/zookeeper/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="微服务" scheme="http://localhost:4000/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="服务注册" scheme="http://localhost:4000/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
    
      <category term="服务发现" scheme="http://localhost:4000/tags/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]02-Nodejs&amp;Express作为微服务api网关</title>
    <link href="http://localhost:4000/2017/03/29/microservices-02-Nodejs-Express%E4%BD%9C%E4%B8%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1api%E7%BD%91%E5%85%B3/"/>
    <id>http://localhost:4000/2017/03/29/microservices-02-Nodejs-Express作为微服务api网关/</id>
    <published>2017-03-29T12:54:07.000Z</published>
    <updated>2018-02-07T08:54:40.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-02-Nodejs-amp-Express作为微服务api网关"><a href="#microservices-02-Nodejs-amp-Express作为微服务api网关" class="headerlink" title="[microservices]02-Nodejs&amp;Express作为微服务api网关"></a>[microservices]02-Nodejs&amp;Express作为微服务api网关</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-安装Node、NPM和Express"><a href="#1-安装Node、NPM和Express" class="headerlink" title="1. 安装Node、NPM和Express"></a>1. 安装Node、NPM和Express</h2><p>安装Nodejs后，npm会一起安装，然后npm install express安装Express.</p>
<h2 id="2-使用Express框架开发web应用"><a href="#2-使用Express框架开发web应用" class="headerlink" title="2. 使用Express框架开发web应用"></a>2. 使用Express框架开发web应用</h2><p>express使用例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var port = 1234;</span><br><span class="line">var app = express();</span><br><span class="line">app.use(express.static(&apos;.&apos;));</span><br><span class="line">app.listen(port, function()&#123;</span><br><span class="line">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>express进行简易路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/hello&apos;, function(req, res)&#123;</span><br><span class="line">    res.send(&apos;Hello&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="3-搭建Nodejs集群环境"><a href="#3-搭建Nodejs集群环境" class="headerlink" title="3. 搭建Nodejs集群环境"></a>3. 搭建Nodejs集群环境</h2><p>利用服务器的多核CPU，让每个CPU都运行一个Node.js进程，例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var cluster = require(&apos;cluster&apos;);  </span><br><span class="line">var express = require(&apos;express&apos;);  </span><br><span class="line">var numCPUs = require(&apos;os&apos;).cpus().length;</span><br><span class="line"></span><br><span class="line">if (cluster.isMaster) &#123;  </span><br><span class="line">    for (var i = 0; i &lt; numCPUs; i++) &#123;</span><br><span class="line">        // Create a worker</span><br><span class="line">        cluster.fork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // Workers share the TCP connection in this server</span><br><span class="line">    var app = express();</span><br><span class="line"></span><br><span class="line">    app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">        res.send(&apos;Hello World!&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // All workers use this port</span><br><span class="line">    app.listen(8080);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-使用Node-js实现反向代理，作为统一服务网关"><a href="#4-使用Node-js实现反向代理，作为统一服务网关" class="headerlink" title="4. 使用Node.js实现反向代理，作为统一服务网关"></a>4. 使用Node.js实现反向代理，作为统一服务网关</h2><p>使用Node作为api网关，原理是利用Node的http-proxy模块来启动代理服务器，实现反向代理。<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var httpProxy = require(&apos;http-proxy&apos;);</span><br><span class="line">var PORT = 3000;</span><br><span class="line"></span><br><span class="line">var proxy = httpProxy.createProxyServer();</span><br><span class="line">proxy.on(&apos;error&apos;, function(err, req, res)&#123;</span><br><span class="line">    res.end();//当代理的请求发生错误时，输出空白的相应数据</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var app = http.createServer(function(req, res) &#123;</span><br><span class="line">    proxy.web(req, res, &#123;</span><br><span class="line">        target: &apos;http://localhost:8080&apos; //代理的目标地址</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(PORT, function()&#123;</span><br><span class="line">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>下一步，就是服务的注册和发现，Nodejs网关将需要增加服务发现的功能</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-02-Nodejs-amp-Express作为微服务api网关&quot;&gt;&lt;a href=&quot;#microservices-02-Nodejs-amp-Express作为微服务api网关&quot; class=&quot;headerlink&quot; title=&quot;[m
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://localhost:4000/tags/zookeeper/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="Node.js" scheme="http://localhost:4000/tags/Node-js/"/>
    
      <category term="Express" scheme="http://localhost:4000/tags/Express/"/>
    
      <category term="微服务" scheme="http://localhost:4000/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="api网关" scheme="http://localhost:4000/tags/api%E7%BD%91%E5%85%B3/"/>
    
      <category term="api-gateway" scheme="http://localhost:4000/tags/api-gateway/"/>
    
  </entry>
  
  <entry>
    <title>shell-从svn更新代码maven打包后部署的一个简单脚本</title>
    <link href="http://localhost:4000/2017/03/11/shell-%E4%BB%8Esvn%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81maven%E6%89%93%E5%8C%85%E5%90%8E%E9%83%A8%E7%BD%B2%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%84%9A%E6%9C%AC/"/>
    <id>http://localhost:4000/2017/03/11/shell-从svn更新代码maven打包后部署的一个简单脚本/</id>
    <published>2017-03-11T07:48:45.000Z</published>
    <updated>2018-02-07T08:54:40.661Z</updated>
    
    <content type="html"><![CDATA[<p>shell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#build icms app</span><br><span class="line">path_src=/home/src/trunk/icms</span><br><span class="line">path_target=$&#123;path_src&#125;/target</span><br><span class="line">path_app=/home/app</span><br><span class="line">path_log=/data/logs/icms</span><br><span class="line">file_app=icms-1.4.1.RELEASE.jar</span><br><span class="line">url_app=localhost:8091</span><br><span class="line"></span><br><span class="line">cd /home/src/trunk/icms</span><br><span class="line">svn update</span><br><span class="line">mvn clean package -P pro -Dmaven.test.skip=true</span><br><span class="line"></span><br><span class="line">if [ -f $&#123;path_target&#125;/$&#123;file_app&#125; ]; then</span><br><span class="line">        echo &quot;build success, now begin to deploy...&quot;</span><br><span class="line">        curl -X POST $&#123;url_app&#125;/shutdown</span><br><span class="line">        yes | cp -rf $&#123;path_target&#125;/$&#123;file_app&#125; $&#123;path_app&#125;/</span><br><span class="line">        chmod +x $&#123;path_app&#125;/$&#123;file_app&#125;</span><br><span class="line">        nohup java -jar $&#123;path_app&#125;/$&#123;file_app&#125; &lt; /dev/null &gt; $&#123;path_log&#125;/icms.log 2&gt;&amp;1 &amp;</span><br><span class="line">else</span><br><span class="line">        echo &quot;build failed!&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;build process finish.&quot;</span><br></pre></td></tr></table></figure>
<p>脚本中的“curl -X POST ${url_app}/shutdown”这里是因为使用了spring boot的优雅关闭应用，需要在应用添加maven依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后在配置文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">endpoints.shutdown.enabled=true</span><br><span class="line">endpoints.shutdown.sensitive=false</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
      <category term="shell" scheme="http://localhost:4000/tags/shell/"/>
    
      <category term="sh" scheme="http://localhost:4000/tags/sh/"/>
    
      <category term="linux" scheme="http://localhost:4000/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>git如何使用-记一些常用的git使用方法</title>
    <link href="http://localhost:4000/2017/03/11/git%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-%E8%AE%B0%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://localhost:4000/2017/03/11/git如何使用-记一些常用的git使用方法/</id>
    <published>2017-03-11T07:47:31.000Z</published>
    <updated>2018-02-07T08:54:40.651Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>git如何提交修改到远程仓库？</p>
<ul>
<li>$ git commit –m “desc..”  //对你更新或修改了哪些内容做一个描述</li>
<li>$ git remote add origin <a href="https://github.com/YihuaWanglv/post.git" target="_blank" rel="external">https://github.com/YihuaWanglv/post.git</a><br>//如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。</li>
<li>$ git push -u origin master  //将本地的项目提交到远程仓库中</li>
</ul>
</li>
<li><p>如果你是第一次想把github上面的项目克隆到本地或者要克隆别人的项目到地。</p>
<ul>
<li>$ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。</li>
</ul>
</li>
<li><p>假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？</p>
<ul>
<li>$ git fetch origin    //取得远程更新，这里可以看做是准备要取了</li>
<li>$ git merge origin/master  //把更新的内容合并到本地分支/master</li>
</ul>
</li>
<li><p>添加和提交</p>
<ul>
<li>git add *</li>
<li>git commit -m “代码提交信息”</li>
<li>git push origin master</li>
<li>输入用户名密码</li>
<li>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</li>
<li>git remote add origin <server></server></li>
</ul>
</li>
<li>重装系统后，git项目如何恢复？<ul>
<li>本地先进入原项目路径，git clone [path of project], 连接上</li>
<li>然后告诉git全局配置你是谁，输入你的邮箱和名称</li>
<li>git config –global user.email “you@example.com”</li>
<li>git config –global user.name “Your Name”</li>
<li>然后该干嘛干嘛</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;git如何提交修改到远程仓库？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ git commit –m “desc..”  //对你更新或修改了哪些内容做一个描述&lt;/li&gt;
&lt;li&gt;$ git remote add origin &lt;a href=&quot;https://git
    
    </summary>
    
    
      <category term="git" scheme="http://localhost:4000/tags/git/"/>
    
      <category term="github" scheme="http://localhost:4000/tags/github/"/>
    
      <category term="使用方法" scheme="http://localhost:4000/tags/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx作为简单的图片服务器</title>
    <link href="http://localhost:4000/2017/03/10/%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://localhost:4000/2017/03/10/使用Nginx作为简单的图片服务器/</id>
    <published>2017-03-10T15:59:19.000Z</published>
    <updated>2018-02-07T08:54:40.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ul>
<li>为什么要用Nginx代理静态图片？</li>
</ul>
<p>图片服务器是我们经常要用到的，在开始的时候，当还没用上阿里云oss，并且觉得FastDFS略微重量级的时候，就可以使用Nginx作为简单的图片服务器。</p>
<p>一下就是Nginx的conf配置文件例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location /images &#123;</span><br><span class="line">            root   /data/icms;</span><br><span class="line">            add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            charset utf-8;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>所有<a href="http://domain/image/xxx.png" target="_blank" rel="external">http://domain/image/xxx.png</a> 的图片都会请求到服务器/data/icms/images内对应的图片。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么要用Nginx代理静态图片？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图片服务器是我们经常要用到的，在开始的时候，当还没用上阿
    
    </summary>
    
    
      <category term="ngnix" scheme="http://localhost:4000/tags/ngnix/"/>
    
      <category term="picture" scheme="http://localhost:4000/tags/picture/"/>
    
      <category term="server" scheme="http://localhost:4000/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository</title>
    <link href="http://localhost:4000/2017/03/10/%E4%BD%BF%E7%94%A8java%E6%94%B6%E9%9B%86github-trending%E9%A1%B5%E9%9D%A2%E4%B8%AD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%B0%E5%8A%A8%E6%80%81%E5%B9%B6%E5%BD%92%E6%A1%A3%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84repository/"/>
    <id>http://localhost:4000/2017/03/10/使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository/</id>
    <published>2017-03-10T14:00:02.000Z</published>
    <updated>2018-02-07T08:54:40.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-github-trending"><a href="#java-github-trending" class="headerlink" title="java-github-trending"></a>java-github-trending</h1><h2 id="what-is-this"><a href="#what-is-this" class="headerlink" title="what is this?"></a>what is this?</h2><p><a href="https://github.com/trending" target="_blank" rel="external">github-trending</a> 展示了每天趋势较好的一些github项目。<br>java-github-trending项目的目的就是每天定时拉取github-trending页面中感兴趣的语言的流行项目，并以日期为分组归档到markdown文件里面，最后提交到github的repository。</p>
<ul>
<li>我的项目github地址：<a href="https://github.com/YihuaWanglv/github-trending" target="_blank" rel="external">github-trending</a></li>
</ul>
<h2 id="how-to-use"><a href="#how-to-use" class="headerlink" title="how to use?"></a>how to use?</h2><ul>
<li>@Before<br>首先要有一个github账号，然后要准备一个运行应用的环境.</li>
</ul>
<h3 id="在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中"><a href="#在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中" class="headerlink" title="在你的运行环境中生成一个ssh key， 然后保存到github的key列表中."></a>在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.</h3><h3 id="git-clone-project"><a href="#git-clone-project" class="headerlink" title="git clone project"></a>git clone project</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:YihuaWanglv/github-trending.git</span><br></pre></td></tr></table></figure>
<h3 id="maven-package"><a href="#maven-package" class="headerlink" title="maven package"></a>maven package</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd github-trending</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<h3 id="move-github-trending-jar-to-project-root-path"><a href="#move-github-trending-jar-to-project-root-path" class="headerlink" title="move github-trending.jar to project root path"></a>move github-trending.jar to project root path</h3><h3 id="将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar"><a href="#将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar" class="headerlink" title="将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar"></a>将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x rungit.sh</span><br><span class="line">chmon +x github-trending.jar</span><br><span class="line">nohup java -jar github-trending.jar &lt; /dev/null &gt; /data/logs/github-trending.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h2 id="how-it-works"><a href="#how-it-works" class="headerlink" title="how it works?"></a>how it works?</h2><p>using spring @Scheduled as daily task.<br>using Jsoup lib to get and parse page content<br>use java.io lib to create markdown file and append content to md file.<br>use java Runtime class to run a shell to commit and push to github.</p>
<p>tips: 这个功能本身使用简单的java application，再配合linux的cron定时执行shell，即可更简单的做到，但由于一些原因，我使用spring boot来构建这个程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java-github-trending&quot;&gt;&lt;a href=&quot;#java-github-trending&quot; class=&quot;headerlink&quot; title=&quot;java-github-trending&quot;&gt;&lt;/a&gt;java-github-trending&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
      <category term="github-trending" scheme="http://localhost:4000/tags/github-trending/"/>
    
      <category term="Runtime" scheme="http://localhost:4000/tags/Runtime/"/>
    
      <category term="github-repository" scheme="http://localhost:4000/tags/github-repository/"/>
    
  </entry>
  
  <entry>
    <title>动态报表模块设计</title>
    <link href="http://localhost:4000/2016/12/18/%E5%8A%A8%E6%80%81%E6%8A%A5%E8%A1%A8%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/"/>
    <id>http://localhost:4000/2016/12/18/动态报表模块设计/</id>
    <published>2016-12-18T07:49:16.000Z</published>
    <updated>2018-02-07T08:54:40.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态报表模块设计"><a href="#动态报表模块设计" class="headerlink" title="动态报表模块设计"></a>动态报表模块设计</h1><h2 id="1-需求概述"><a href="#1-需求概述" class="headerlink" title="1.需求概述"></a>1.需求概述</h2><ul>
<li>实现根据dba提供的sql语句，动态生成业务部门需要的报表展示页面</li>
</ul>
<h2 id="2-页面原型"><a href="#2-页面原型" class="headerlink" title="2.页面原型"></a>2.页面原型</h2><h3 id="1）报表展示和预览页面"><a href="#1）报表展示和预览页面" class="headerlink" title="1）报表展示和预览页面"></a>1）报表展示和预览页面</h3><p><img src="/images/ireport_design_ui_01.png" alt=""></p>
<ul>
<li>菜单栏，每个app代表一个应用，每个report代表一个具体报表</li>
<li>“添加报表”菜单，进入添加报表页面</li>
<li>查询框，通过’ireports_report_setting’表的’query_column’动态生成</li>
<li>报表table，通过’ireports_report_setting’表的’table_column_mapping’动态生成</li>
</ul>
<h3 id="2）报表添加与设置页面"><a href="#2）报表添加与设置页面" class="headerlink" title="2）报表添加与设置页面"></a>2）报表添加与设置页面</h3><p><img src="/images/ireport_design_ui_02.png" alt=""></p>
<ul>
<li>查询类型有：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1, = (等于)</span><br><span class="line">2, &gt; (大于)</span><br><span class="line">3, &lt; (小于)</span><br><span class="line">4, &gt;= (大于等于)</span><br><span class="line">5, &lt;= (小于等于)</span><br><span class="line">6, time (时间区间)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-模型设计"><a href="#3-模型设计" class="headerlink" title="3.模型设计"></a>3.模型设计</h2><h3 id="1）数据库模型图"><a href="#1）数据库模型图" class="headerlink" title="1）数据库模型图"></a>1）数据库模型图</h3><p><img src="/images/ireport_design_table.png" alt=""></p>
<h3 id="2）模型表说明"><a href="#2）模型表说明" class="headerlink" title="2）模型表说明"></a>2）模型表说明</h3><ul>
<li><p>ireports_app(报表所属应用或模块)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_app` (</span><br><span class="line">  `aid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(50) NOT NULL COMMENT &apos;应用名称&apos;,</span><br><span class="line">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class="line">  PRIMARY KEY (`aid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表所属应用或模块&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ireports_report(报表记录表)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_report` (</span><br><span class="line">  `rid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表id&apos;,</span><br><span class="line">  `rsid` int(11) DEFAULT &apos;0&apos; COMMENT &apos;报表详细设置id&apos;,</span><br><span class="line">  `report` varchar(50) NOT NULL COMMENT &apos;报表名称&apos;,</span><br><span class="line">  `sql` text NOT NULL COMMENT &apos;报表sql&apos;,</span><br><span class="line">  `type` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;报表类型&apos;,</span><br><span class="line">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class="line">  PRIMARY KEY (`rid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表记录表&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ireports_report_setting(报表详细设置表)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_report_setting` (</span><br><span class="line">  `rsid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表设置id&apos;,</span><br><span class="line">  `is_page` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;是否分页&apos;,</span><br><span class="line">  `table_column_mapping` longtext COMMENT &apos;报表表头字段映射&apos;,</span><br><span class="line">  `query_column` text COMMENT &apos;报表查询字段配置&apos;,</span><br><span class="line">  PRIMARY KEY (`rsid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表详细设置表&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ireports_query_type(查询类型表)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_query_type` (</span><br><span class="line">  `qtid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;查询类型id&apos;,</span><br><span class="line">  `type` varchar(20) NOT NULL COMMENT &apos;查询类型&apos;,</span><br><span class="line">  PRIMARY KEY (`qtid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;查询类型表&apos;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-技术实现"><a href="#4-技术实现" class="headerlink" title="4.技术实现"></a>4.技术实现</h2><h3 id="1-报表数据来源与连接：2个方案"><a href="#1-报表数据来源与连接：2个方案" class="headerlink" title="1)报表数据来源与连接：2个方案"></a>1)报表数据来源与连接：2个方案</h3><ul>
<li>只连接业务员库，每次当添加的报表需要数据时，从基础数据库中同步到业务员库</li>
<li>业务员系统添加对基础数据库的连接，添加一个内测or公测的基础数据库</li>
</ul>
<h3 id="2）数据连接层"><a href="#2）数据连接层" class="headerlink" title="2）数据连接层"></a>2）数据连接层</h3><ul>
<li>使用mybatis</li>
</ul>
<h3 id="3-动态报表展示"><a href="#3-动态报表展示" class="headerlink" title="3)动态报表展示"></a>3)动态报表展示</h3><ul>
<li>使用Freemarker + Jquery</li>
</ul>
<p>后台读取报表配置后，使用Freemarker模板生成页面框架与页面元素。</p>
<p>页面载入后，使用Jquery异步请求报表数据，并展现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态报表模块设计&quot;&gt;&lt;a href=&quot;#动态报表模块设计&quot; class=&quot;headerlink&quot; title=&quot;动态报表模块设计&quot;&gt;&lt;/a&gt;动态报表模块设计&lt;/h1&gt;&lt;h2 id=&quot;1-需求概述&quot;&gt;&lt;a href=&quot;#1-需求概述&quot; class=&quot;headerli
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ELK+Kafka企业日志收集平台搭建总结</title>
    <link href="http://localhost:4000/2016/09/09/ELK-Kafka%E4%BC%81%E4%B8%9A%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://localhost:4000/2016/09/09/ELK-Kafka企业日志收集平台搭建总结/</id>
    <published>2016-09-08T17:31:02.000Z</published>
    <updated>2018-02-07T08:54:40.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-ELK-Kafka-企业日志收集平台搭建总结"><a href="#3-ELK-Kafka-企业日志收集平台搭建总结" class="headerlink" title="3.ELK+Kafka 企业日志收集平台搭建总结"></a>3.ELK+Kafka 企业日志收集平台搭建总结</h1><h3 id="平台架构："><a href="#平台架构：" class="headerlink" title="平台架构："></a>平台架构：</h3><ul>
<li>1台生产应用服务器：192.168.1.119</li>
<li>3台zookeeper+kafka集群服务器：192.168.1.245, 192.168.1.246, 192.168.1.247</li>
<li>2台es+kibana集群服务器：192.168.1.162, 192.168.1.163</li>
<li>1台nginx服务器反向代理到kibana集群：192.168.1.244</li>
</ul>
<h3 id="软件选用"><a href="#软件选用" class="headerlink" title="软件选用"></a>软件选用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-1.7.3.tar.gz </span><br><span class="line">Logstash-2.3.*</span><br><span class="line">kibana-4.1.2-linux-x64.tar.gz</span><br><span class="line">以上软件都可以从官网下载:https://www.elastic.co/downloads</span><br><span class="line">java-1.8.65</span><br><span class="line">nginx采用yum安装</span><br></pre></td></tr></table></figure>
<h3 id="平台安装配置"><a href="#平台安装配置" class="headerlink" title="平台安装配置"></a>平台安装配置</h3><p>####部署步骤：<br>1.ES集群安装配置;<br>2.Logstash客户端配置(直接写入数据到ES集群，写入系统messages日志);<br>3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);<br>4.Kibana部署;<br>5.Nginx负载均衡Kibana请求;<br>6.案例：nginx日志收集以及MySQL慢日志收集;<br>7.Kibana报表基本使用;</p>
<h3 id="1-ES集群安装配置"><a href="#1-ES集群安装配置" class="headerlink" title="1.ES集群安装配置;"></a>1.ES集群安装配置;</h3><ul>
<li>需要先安装java1.8</li>
<li><p>2.获取es软件包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.3.tar.gz</span><br><span class="line">tar -xf elasticsearch-1.7.3.tar.gz -C /usr/local</span><br><span class="line">ln -sv /usr/local/elasticsearch-1.7.3 /usr/local/elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.修改配置文件</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# vim /usr/local/elasticsearch/config/elasticsearch.yml </span><br><span class="line">32 cluster.name: es-cluster                         #组播的名称地址</span><br><span class="line">40 node.name: &quot;es-node1 &quot;                           #节点名称，不能和其他节点重复</span><br><span class="line">47 node.master: true                                #节点能否被选举为master</span><br><span class="line">51 node.data: true                                  #节点是否存储数据</span><br><span class="line">107 index.number_of_shards: 5                       #索引分片的个数</span><br><span class="line">111 index.number_of_replicas: 1                     #分片的副本个数</span><br><span class="line">145 path.conf: /usr/local/elasticsearch/config/     #配置文件的路径</span><br><span class="line">149 path.data: /data/es/data                        #数据目录路径</span><br><span class="line">159 path.work: /data/es/worker                      #工作目录路径</span><br><span class="line">163 path.logs:  /usr/local/elasticsearch/logs/      #日志文件路径</span><br><span class="line">167 path.plugins:  /data/es/plugins                 #插件路径</span><br><span class="line">184 bootstrap.mlockall: true                        #内存不向swap交换</span><br><span class="line">232 http.enabled: true                              #启用http</span><br></pre></td></tr></table></figure>
<ul>
<li><p>4.创建相关目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/es/&#123;data,worker,plugins&#125; -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>5.获取es服务管理脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​[root@es1 ~]# git clone https://github.com/elastic/elasticsearch-servicewrapper.git</span><br><span class="line">[root@es1 ~]# mv elasticsearch-servicewrapper/service /usr/local/elasticsearch/bin/</span><br><span class="line">[root@es1 ~]# /usr/local/elasticsearch/bin/service/elasticsearch install </span><br><span class="line">Detected RHEL or Fedora:</span><br><span class="line">Installing the Elasticsearch daemon..</span><br><span class="line">[root@es1 ~]#</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这时就会在/etc/init.d/目录下安装上es的管理脚本啦</p>
<ul>
<li><p>修改其配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# </span><br><span class="line">set.default.ES_HOME=/usr/local/elasticsearch   #安装路径</span><br><span class="line">set.default.ES_HEAP_SIZE=1024</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.启动es ，并检查其服务是否正常<br>es启动方式是进入bin目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/elasticsearch/bin/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure></p>
<p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# netstat -nlpt | grep -E &quot;9200|&quot;9300</span><br><span class="line">tcp        0      0 0.0.0.0:9200                0.0.0.0:*                   LISTEN      1684/java           </span><br><span class="line">tcp        0      0 0.0.0.0:9300                0.0.0.0:*                   LISTEN      1684/java</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://192.168.2.18:9200/" target="_blank" rel="external">http://192.168.2.18:9200/</a> 返回es节点信息，说明安装配置完成.</p>
<ul>
<li>7.复制同样的步骤和配置到es2，只需要修改node.name即可，其他都与es1相同配置</li>
<li>8.安装es的管理插件<br>es官方提供一个用于管理es的插件，可清晰直观看到es集群的状态，以及对集群的操作管理，安装方法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 local]# /usr/local/elasticsearch/bin/plugin -i mobz/elasticsearch-head</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>安装好之后，访问方式为： <a href="http://192.168.2.18:9200/_plugin/head" target="_blank" rel="external">http://192.168.2.18:9200/_plugin/head</a></p>
<h3 id="2-Logstash客户端安装配置"><a href="#2-Logstash客户端安装配置" class="headerlink" title="2.Logstash客户端安装配置"></a>2.Logstash客户端安装配置</h3><ul>
<li>安装前，需要先安装java</li>
<li>YUM方式安装Logstash</li>
</ul>
<p>Download and install the public signing key:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></p>
<p>Add the following in your /etc/yum.repos.d/ directory in a file with a .repo suffix, for example logstash.repo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[logstash-2.3]</span><br><span class="line">name=Logstash repository for 2.3.x packages</span><br><span class="line">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p>
<p>And your repository is ready for use. You can install it with:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install logstash</span><br></pre></td></tr></table></figure></p>
<p>此时logstash会安装在目录：/opt/logstash/<br>进入/opt/logstash/bin/目录<br>vim logstash.conf<br>即可对这个logstash客户端进行设置，可以设置输入和输出<br>输入定义信息来源于何处，输出定义消息发送到哪里</p>
<ul>
<li><p>logstash一些操作：<br>检查配置是否正确<br>/opt/logstash/bin/logstash -f logstash.conf –configtest –verbose<br>启动logstash<br>/opt/logstash/bin/logstash -f logstash.conf</p>
</li>
<li><p>3.Logstash 向es集群写数据<br>编写一个logstash配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@webserver1 etc]# vi logstash.conf </span><br><span class="line">input &#123;              #数据的输入从标准输入</span><br><span class="line">  stdin &#123;&#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;             #数据的输出我们指向了es集群</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]　　　＃es主机的ip及端口</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令/opt/logstash/bin/logstash -f logstash.conf 启动后，如果有信息产生，就会向es集群写入数据，可以在es页面中看到</p>
</li>
<li><p>例子：将web app的log日志写入es中，使用如下脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class="line">    index =&gt; &quot;web-app-%&#123;+YYYY-MM&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-Kafka-zookeeper-集群配置-Logstash写入数据到Kafka消息系统"><a href="#3-Kafka-zookeeper-集群配置-Logstash写入数据到Kafka消息系统" class="headerlink" title="3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);"></a>3.Kafka(zookeeper)集群配置;(Logstash写入数据到Kafka消息系统);</h3><p>kafka的软件包中自带zookeeper，并且是解压即可使用。可以官网下载上传服务器，也可直接服务器下载</p>
<ul>
<li><p>1.获取软件包.官网：<a href="http://kafka.apache.org" target="_blank" rel="external">http://kafka.apache.org</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1 ~]# wget http://mirror.rise.ph/apache/kafka/0.8.2.1/kafka_2.11-0.8.2.1.tgz</span><br><span class="line">[root@kafka1 ~]# tar -xf kafka_2.11-0.8.2.1.tgz -C /usr/local/</span><br><span class="line">[root@kafka1 ~]# cd /usr/local/</span><br><span class="line">[root@kafka1 local]# ln -sv kafka_2.11-0.8.2.1 kafka</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.配置zookeeper集群，修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1 ~]# vim /usr/local/kafka/config/zookeeper.propertie</span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line">clienrtPort=2181</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=20</span><br><span class="line">syncLimit=10</span><br><span class="line">server.2=192.168.1.245:2888:3888</span><br><span class="line">server.3=192.168.1.246:2888:3888</span><br><span class="line">server.4=192.168.1.247:2888:3888</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.创建zookeeper所需要的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1 ~]# mkdir /data/zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.在/data/zookeeper目录下创建myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper是没法启动的哦</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1 ~]# echo 2 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>以上就是zookeeper集群的配置，下面等我配置好kafka之后直接复制到其他两个节点即可</p>
<ul>
<li><p>5.kafka配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1 ~]# vim /usr/local/kafka/config/server.properties </span><br><span class="line">broker.id=2    　　　　    ＃　唯一，填数字，本文中分别为2/3/4</span><br><span class="line">prot=9092　　　　　　　     ＃　这个broker监听的端口　</span><br><span class="line">host.name=192.168.2.22　  ＃　唯一，填服务器IP</span><br><span class="line">log.dir=/data/kafka-logs  #  该目录可以不用提前创建，在启动时自己会创建</span><br><span class="line">zookeeper.connect=192.168.2.22:2181,192.168.2.23:2181,192.168.2.24:2181　　＃这个就是zookeeper的ip及端口</span><br><span class="line">num.partitions=16         # 需要配置较大 分片影响读写速度</span><br><span class="line">log.dirs=/data/kafka-logs # 数据目录也要单独配置磁盘较大的地方</span><br><span class="line">log.retention.hours=168   # 时间按需求保留过期时间 避免磁盘满</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.将kafka(zookeeper)的程序目录全部拷贝至其他两个节点</p>
</li>
<li><p>7.修改两个借点的配置，注意这里除了以下两点不同外，都是相同的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）zookeeper的配置</span><br><span class="line">mkdir /data/zookeeper</span><br><span class="line">echo &quot;x&quot; &gt; /data/zookeeper/myid</span><br><span class="line">（2）kafka的配置</span><br><span class="line">broker.id=2</span><br><span class="line">host.name=192.168.2.22</span><br></pre></td></tr></table></figure>
</li>
<li><p>8.修改完毕配置之后我们就可以启动了，这里先要启动zookeeper集群，才能启动kafka</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;   #zookeeper启动命令</span><br><span class="line">[root@kafka1 ~]# /usr/local/kafka/bin/zookeeper-server-stop.sh                                                   #zookeeper停止的命令</span><br></pre></td></tr></table></figure>
</li>
<li><p>9.zookeeper服务检查</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1~]#  netstat -nlpt | grep -E &quot;2181|2888|3888&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>ok.  这时候zookeeper集群已经启动起来了，下面启动kafka，也是依次按照顺序启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@kafka1 ~]# nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;   #kafka启动的命令</span><br><span class="line">[root@kafka1 ~]#  /usr/local/kafka/bin/kafka-server-stop.sh                                                         #kafka停止的命令</span><br></pre></td></tr></table></figure></p>
<p>注意，跟zookeeper服务一样，如果kafka有问题 nohup的日志文件会非常大,把磁盘占满，这个kafka服务同样可以通过自己些服务脚本来管理服务的启动与关闭。</p>
<ul>
<li><p>10，下面我们将webs app上面的logstash的输出改到kafka上面，将数据写入到kafka中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">input &#123;             #这里的输入还是定义的是从日志文件输入</span><br><span class="line">  file &#123;</span><br><span class="line">    type =&gt; &quot;web-app&quot; </span><br><span class="line">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    #stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">    kafka &#123;</span><br><span class="line">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class="line">      topic_id =&gt; &quot;web-app-message&quot;</span><br><span class="line">      compression_type =&gt; &quot;snappy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后再每台kafka上安装logstash，把kafka的消息发送到es<br>使用logstash脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class="line">        topic_id =&gt; &quot;web-app-message&quot;</span><br><span class="line">        codec =&gt; plain</span><br><span class="line">        reset_beginning =&gt; false</span><br><span class="line">        consumer_threads =&gt; 5</span><br><span class="line">        decorate_events =&gt; true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class="line">      index =&gt; &quot;test-web-app-message-%&#123;+YYYY-MM&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-Kibana部署"><a href="#4-Kibana部署" class="headerlink" title="4.Kibana部署;"></a>4.Kibana部署;</h3><p>我们在两台es上面搭建两套kibana</p>
<ul>
<li><p>1.获取kibana软件包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# wget https://download.elastic.co/kibana/kibana/kibana-4.1.2-linux-x64.tar.gz</span><br><span class="line">[root@es1 ~]# tar -xf kibana-4.2.0-linux-x64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 ~]# cd /usr/local/</span><br><span class="line">[root@es1 local]# ln -sv kibana-4.1.2-linux-x64 kibana</span><br><span class="line">`kibana&apos; -&gt; `kibana-4.2.0-linux-x64&apos;</span><br><span class="line">[root@es1 local]# cd kibana</span><br><span class="line"></span><br><span class="line">[root@es1 kibana]# vim config/kibana.yml</span><br><span class="line">server.port: 5601      #默认端口可以修改的</span><br><span class="line">server.host: &quot;0.0.0.0&quot; #kibana监听的ip</span><br><span class="line">elasticsearch.url: &quot;http://localhost:9200&quot; #由于es在本地主机上面，所以这个选项打开注释即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>kibana安装后，直接进入kibana的安装目录<br>/user/local/kibana/bin<br>运行<br>./kibana<br>启动</p>
</li>
<li><p>5.服务检查</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@es1 config]# ss -tunl | grep &quot;5601&quot;</span><br><span class="line">tcp    LISTEN     0      511                    *:5601                  *:*</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>此时访问es1主机的5601端口，即可看见kibana的页面：<br><a href="http://192.168.1.163:5601" target="_blank" rel="external">http://192.168.1.163:5601</a></p>
<ul>
<li>6.es2上的kibana与es1一样</li>
</ul>
<h3 id="5-Nginx负载均衡Kibana请求"><a href="#5-Nginx负载均衡Kibana请求" class="headerlink" title="5.Nginx负载均衡Kibana请求;"></a>5.Nginx负载均衡Kibana请求;</h3><ul>
<li><p>1.在nginx-proxy上面yum安装nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nignx</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.编写配置文件es.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@saltstack-node1 conf.d]# pwd </span><br><span class="line">/etc/nginx/conf.d</span><br><span class="line">[root@saltstack-node1 conf.d]# cat es.conf </span><br><span class="line">upstream es &#123;</span><br><span class="line">    server 192.168.2.18:5601 max_fails=3 fail_timeout=30s;</span><br><span class="line">    server 192.168.2.19:5601 max_fails=3 fail_timeout=30s;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://es/;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        #auth</span><br><span class="line">        auth_basic &quot;ELK Private&quot;;</span><br><span class="line">        auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>3.创建认证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@saltstack-node1 conf.d]# htpasswd -cm /etc/nginx/.htpasswd elk</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user elk-user</span><br><span class="line">[root@saltstack-node1 conf.d]# /etc/init.d/nginx restart</span><br><span class="line">Stopping nginx:                                            [  OK  ]</span><br><span class="line">Starting nginx:                                            [  OK  ]</span><br><span class="line">[root@saltstack-node1 conf.d]#</span><br></pre></td></tr></table></figure></p>
<ul>
<li>4.直接输入认证用户及密码就可访问啦<a href="http://192.168.1.244/" target="_blank" rel="external">http://192.168.1.244/</a></li>
</ul>
<h3 id="6-案例：nginx日志收集以及MySQL慢日志收集"><a href="#6-案例：nginx日志收集以及MySQL慢日志收集" class="headerlink" title="6.案例：nginx日志收集以及MySQL慢日志收集;"></a>6.案例：nginx日志收集以及MySQL慢日志收集;</h3><ul>
<li><p>先在web app服务器上安装nginx和mysql</p>
</li>
<li><p>1.为了方便nginx日志的统计搜索，这里设置nginx访问日志格式为json</p>
</li>
</ul>
<p>(1)修改nginx主配置文件</p>
<p>说明：如果想实现日志的报表展示，最好将业务日志直接以json格式输出，这样可以极大减轻cpu负载，也省得运维需要写负载的filter过滤正则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@webserver1 nginx]# vim nginx.conf</span><br><span class="line">log_format json &apos;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&apos;</span><br><span class="line">                &apos;&quot;@version&quot;:&quot;1&quot;,&apos;</span><br><span class="line">                &apos;&quot;client&quot;:&quot;$remote_addr&quot;,&apos;</span><br><span class="line">                &apos;&quot;url&quot;:&quot;$uri&quot;,&apos;</span><br><span class="line">                &apos;&quot;status&quot;:&quot;$status&quot;,&apos;</span><br><span class="line">                &apos;&quot;domain&quot;:&quot;$host&quot;,&apos;</span><br><span class="line">                &apos;&quot;host&quot;:&quot;$server_addr&quot;,&apos;</span><br><span class="line">                &apos;&quot;size&quot;:$body_bytes_sent,&apos;</span><br><span class="line">                &apos;&quot;responsetime&quot;:$request_time,&apos;</span><br><span class="line">                &apos;&quot;referer&quot;: &quot;$http_referer&quot;,&apos;</span><br><span class="line">                &apos;&quot;ua&quot;: &quot;$http_user_agent&quot;&apos;</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">  access_log  /var/log/access_json.log  json;</span><br></pre></td></tr></table></figure>
<p>(2)收集nginx日志和MySQL日志到消息队列中；这个文件我们是定义在客户端，即生产服务器上面的Logstash文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    type =&gt; &quot;web-app&quot;</span><br><span class="line">    path =&gt; &quot;/usr/local/log.log&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    type =&gt; &quot;nginx-access&quot;</span><br><span class="line">    path =&gt; &quot;/var/log/nginx/access.log&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    codec =&gt; &quot;json&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">   type =&gt; &quot;slow-mysql&quot;</span><br><span class="line">   path =&gt; &quot;/var/run/mysqld/mysqld-slow.log&quot;</span><br><span class="line">   start_position =&gt; &quot;beginning&quot;</span><br><span class="line">   codec =&gt; multiline &#123;</span><br><span class="line">     pattern =&gt; &quot;^# User@Host&quot;</span><br><span class="line">     negate =&gt; true</span><br><span class="line">     what =&gt; &quot;previous&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  if [type] == &quot;nginx-access&quot; &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class="line">      topic_id =&gt; &quot;nginx-access&quot;</span><br><span class="line">      compression_type =&gt; &quot;snappy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [type] == &quot;slow-mysql&quot; &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class="line">      topic_id =&gt; &quot;slow-mysql&quot;</span><br><span class="line">      compression_type =&gt; &quot;snappy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [type] == &quot;web-app&quot; &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">      bootstrap_servers =&gt; &quot;192.168.1.245:9092,192.168.1.246:9092,192.168.1.247:9092&quot;</span><br><span class="line">      topic_id =&gt; &quot;web-app-message&quot;</span><br><span class="line">      compression_type =&gt; &quot;snappy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>/opt/logstash/bin/logstash -f logstash.conf –configtest –verbose</p>
<p>/opt/logstash/bin/logstash -f logstash.conf</p>
<p>(3)Logstash 从kafka集群中读取日志存储到es中，这里的定义logstash文件是在三台kafka服务器上面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class="line">        topic_id =&gt; &quot;web-app-message&quot;</span><br><span class="line">        codec =&gt; plain</span><br><span class="line">        reset_beginning =&gt; false</span><br><span class="line">        consumer_threads =&gt; 5</span><br><span class="line">        decorate_events =&gt; true</span><br><span class="line">    &#125;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class="line">        type =&gt; &quot;nginx-access&quot;</span><br><span class="line">        topic_id =&gt; &quot;nginx-access&quot;</span><br><span class="line">        codec =&gt; plain</span><br><span class="line">        reset_beginning =&gt; false</span><br><span class="line">        consumer_threads =&gt; 5</span><br><span class="line">        decorate_events =&gt; true</span><br><span class="line">    &#125;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;192.168.1.245:2181,192.168.1.246:2181,192.168.1.247:2181&quot;</span><br><span class="line">        type =&gt; &quot;slow-mysql&quot;</span><br><span class="line">        topic_id =&gt; &quot;slow-mysql&quot;</span><br><span class="line">        codec =&gt; plain</span><br><span class="line">        reset_beginning =&gt; false</span><br><span class="line">        consumer_threads =&gt; 5</span><br><span class="line">        decorate_events =&gt; true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    if [type] == &quot;nginx-access&quot; &#123;</span><br><span class="line">         elasticsearch &#123;</span><br><span class="line">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class="line">                 index =&gt; &quot;nginx-access-%&#123;+YYYY-MM&#125;&quot;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if [type] == &quot;slow-mysql&quot; &#123;</span><br><span class="line">         elasticsearch &#123;</span><br><span class="line">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class="line">                index =&gt; &quot;slow-mysql-%&#123;+YYYY-MM&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if [type] == &quot;web-app-message&quot; &#123;</span><br><span class="line">         elasticsearch &#123;</span><br><span class="line">                hosts =&gt; [&quot;192.168.1.162:9200&quot;,&quot;192.168.1.163:9200&quot;]</span><br><span class="line">                index =&gt; &quot;test-web-app-message-%&#123;+YYYY-MM&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(4)创建nginx-access 日志索引<br>(5)创建MySQL慢日志索引</p>
<p>这两个都是在kibana的页面上创建配置</p>
<h3 id="7-Kibana报表基本使用"><a href="#7-Kibana报表基本使用" class="headerlink" title="7.Kibana报表基本使用;"></a>7.Kibana报表基本使用;</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;3-ELK-Kafka-企业日志收集平台搭建总结&quot;&gt;&lt;a href=&quot;#3-ELK-Kafka-企业日志收集平台搭建总结&quot; class=&quot;headerlink&quot; title=&quot;3.ELK+Kafka 企业日志收集平台搭建总结&quot;&gt;&lt;/a&gt;3.ELK+Kafka 企业
    
    </summary>
    
    
      <category term="ELK" scheme="http://localhost:4000/tags/ELK/"/>
    
      <category term="elasticsearch" scheme="http://localhost:4000/tags/elasticsearch/"/>
    
      <category term="es" scheme="http://localhost:4000/tags/es/"/>
    
      <category term="kafka" scheme="http://localhost:4000/tags/kafka/"/>
    
      <category term="zookeeper" scheme="http://localhost:4000/tags/zookeeper/"/>
    
      <category term="kibana" scheme="http://localhost:4000/tags/kibana/"/>
    
      <category term="logstash" scheme="http://localhost:4000/tags/logstash/"/>
    
      <category term="nginx" scheme="http://localhost:4000/tags/nginx/"/>
    
      <category term="log" scheme="http://localhost:4000/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>[dev][collect][2016-08]collect-of-dev</title>
    <link href="http://localhost:4000/2016/09/06/dev-collect-2016-08-collect-of-dev/"/>
    <id>http://localhost:4000/2016/09/06/dev-collect-2016-08-collect-of-dev/</id>
    <published>2016-09-06T15:51:04.000Z</published>
    <updated>2018-02-07T08:54:40.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2016-08"><a href="#2016-08" class="headerlink" title="2016-08"></a>2016-08</h2><h3 id="2016-08-26"><a href="#2016-08-26" class="headerlink" title="2016-08-26"></a>2016-08-26</h3><ul>
<li><p>RabbitMQ Configuration<br><a href="https://www.rabbitmq.com/configure.html" target="_blank" rel="external">https://www.rabbitmq.com/configure.html</a></p>
</li>
<li><p>RabbitMQ用户角色及权限控制<br><a href="http://blog.csdn.net/zyz511919766/article/details/42292655" target="_blank" rel="external">http://blog.csdn.net/zyz511919766/article/details/42292655</a></p>
</li>
<li><p>RabbitMQ Installing on Windows<br><a href="https://www.rabbitmq.com/install-windows.html" target="_blank" rel="external">https://www.rabbitmq.com/install-windows.html</a></p>
</li>
<li><p>RabbitMQ Installing on RPM-based Linux (CentOS, Fedora, OpenSuse, RedHat)<br><a href="https://www.rabbitmq.com/install-rpm.html" target="_blank" rel="external">https://www.rabbitmq.com/install-rpm.html</a></p>
</li>
<li><p>CentOS6.5安装RabbitMQ<br><a href="http://www.jianshu.com/p/0d3bf6402e15" target="_blank" rel="external">http://www.jianshu.com/p/0d3bf6402e15</a></p>
</li>
</ul>
<h3 id="2016-08-25"><a href="#2016-08-25" class="headerlink" title="2016-08-25"></a>2016-08-25</h3><ul>
<li><p>ELK下载<br><a href="https://www.elastic.co/downloads" target="_blank" rel="external">https://www.elastic.co/downloads</a></p>
</li>
<li><p>ELK+Kafka 企业日志收集平台(一)<br><a href="http://blog.sctux.com/?p=445" target="_blank" rel="external">http://blog.sctux.com/?p=445</a></p>
</li>
<li><p>ELK+Kafka 企业日志收集平台(二)<br><a href="http://blog.sctux.com/?p=451" target="_blank" rel="external">http://blog.sctux.com/?p=451</a></p>
</li>
<li><p><a href="https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello" target="_blank" rel="external">https://www.quora.com/What-are-some-other-great-free-web-tools-like-Trello</a></p>
</li>
</ul>
<h3 id="2016-08-22"><a href="#2016-08-22" class="headerlink" title="2016-08-22"></a>2016-08-22</h3><ul>
<li><p>微服务架构下的开发部署实践(1)<br><a href="https://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21563604?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>
</li>
<li><p>领域驱动设计和实践<br><a href="http://www.infoq.com/cn/articles/cjq-ddd" target="_blank" rel="external">http://www.infoq.com/cn/articles/cjq-ddd</a></p>
</li>
<li><p>教你成为全栈工程师(Full Stack Developer) 四十五-一文读懂hadoop、hbase、hive、spark分布式系统架构<br><a href="http://www.shareditor.com/blogshow/?blogId=96&amp;hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">http://www.shareditor.com/blogshow/?blogId=96&amp;hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>
</li>
<li><p>聊一聊排序算法<br><a href="http://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&amp;mid=2455058728&amp;idx=1&amp;sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzAxMjA5ODQwMQ==&amp;mid=2455058728&amp;idx=1&amp;sn=6b0e55cc9a3c34775013f39ab08a6ac7#rd</a><br><a href="https://github.com/barretlee/algorithms" target="_blank" rel="external">https://github.com/barretlee/algorithms</a></p>
</li>
<li><p>最简MVP框架<br><a href="http://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">http://www.jianshu.com/p/e0feb16105f9?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a><br><a href="https://github.com/wolearn/MvpFrame" target="_blank" rel="external">https://github.com/wolearn/MvpFrame</a></p>
</li>
<li><p>可用性高达五个9！支付系统高可用架构设计实战<br><a href="http://dbaplus.cn/news-21-591-1.html" target="_blank" rel="external">http://dbaplus.cn/news-21-591-1.html</a></p>
</li>
<li><p>Gson源码分析以其所包含注解的用法<br><a href="http://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">http://lliuguangbo.github.io/2016/08/07/Gson-Source-Code-Analyze-One/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>
</li>
<li><p>React Native开源项目-嘎嘎商城客户端(持续更新中)<br><a href="http://www.lcode.org/react-native-source-gagamall/" target="_blank" rel="external">http://www.lcode.org/react-native-source-gagamall/</a><br><a href="https://github.com/jiangqqlmj/GaGaMall" target="_blank" rel="external">https://github.com/jiangqqlmj/GaGaMall</a></p>
</li>
<li><p>ActiveMQ高可用集群方案<br><a href="http://wosyingjun.iteye.com/blog/2314683" target="_blank" rel="external">http://wosyingjun.iteye.com/blog/2314683</a></p>
</li>
<li><p>gitbook Zookeeper:分布式进程协同<br><a href="https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details" target="_blank" rel="external">https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination/details</a></p>
</li>
</ul>
<h3 id="2016-08-16"><a href="#2016-08-16" class="headerlink" title="2016-08-16"></a>2016-08-16</h3><ul>
<li>全面分析 Spring 的编程式事务管理及声明式事务管理<br><a href="https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/</a></li>
</ul>
<h3 id="2016-08-16-1"><a href="#2016-08-16-1" class="headerlink" title="2016-08-16"></a>2016-08-16</h3><ul>
<li><p>Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos<br><a href="http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/" target="_blank" rel="external">http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/</a><br><a href="https://github.com/fabiomaffioletti/mul-at" target="_blank" rel="external">https://github.com/fabiomaffioletti/mul-at</a></p>
</li>
<li><p>JTA 深度历险 - 原理与实现<br><a href="http://www.ibm.com/developerworks/cn/java/j-lo-jta/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/j-lo-jta/</a></p>
</li>
<li><p>Java事务之八——分布式事务(Spring+JTA+Atomikos+Hibernate+JMS)<br><a href="http://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html" target="_blank" rel="external">http://www.cnblogs.com/davenkin/archive/2013/03/19/java-tranaction-8.html</a></p>
</li>
<li><p>如何实现XA式、非XA式Spring分布式事务<br><a href="http://www.importnew.com/15812.html" target="_blank" rel="external">http://www.importnew.com/15812.html</a></p>
</li>
<li><p>Java事务设计策略 微型书<br><a href="http://www.infoq.com/cn/minibooks/JTDS#idp_register" target="_blank" rel="external">http://www.infoq.com/cn/minibooks/JTDS#idp_register</a></p>
</li>
<li><p>【转】JDBC事务和JTA （XA）事务<br><a href="http://kazge.com/archives/962.html" target="_blank" rel="external">http://kazge.com/archives/962.html</a></p>
</li>
</ul>
<h3 id="2016-08-15"><a href="#2016-08-15" class="headerlink" title="2016-08-15"></a>2016-08-15</h3><ul>
<li><p>美团点评技术团队<br><a href="http://tech.meituan.com/" target="_blank" rel="external">http://tech.meituan.com/</a></p>
</li>
<li><p>消息队列设计精要<br><a href="http://tech.meituan.com/mq-design.html" target="_blank" rel="external">http://tech.meituan.com/mq-design.html</a></p>
</li>
<li><p>阿里中间件团队博客<br><a href="http://jm.taobao.org/" target="_blank" rel="external">http://jm.taobao.org/</a></p>
</li>
<li><p>Distributed transactions with multiple databases, Spring Boot, Spring Data JPA and Atomikos<br><a href="http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/" target="_blank" rel="external">http://fabiomaffioletti.me/blog/2014/04/15/distributed-transactions-multiple-databases-spring-boot-spring-data-jpa-atomikos/</a><br><a href="https://github.com/fabiomaffioletti/mul-at" target="_blank" rel="external">https://github.com/fabiomaffioletti/mul-at</a></p>
</li>
<li><p>GitHub 中国区前 100 名到底是什么样的人?<br><a href="http://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion" target="_blank" rel="external">http://mt.sohu.com/20160407/n443539407.shtml?qq-pf-to=pcqq.discussion</a></p>
</li>
<li><p>Spring分布式事务配置(atomikos)<br><a href="http://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://sadwxqezc.github.io/HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html?utm_source=tuicool&amp;utm_medium=referral</a></p>
</li>
<li><p>基于spring boot项目的多数据源配置与分布式事务处理总结<br><a href="http://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html" target="_blank" rel="external">http://hungryant.github.io/java/2015/11/26/java-spring-boot-jta.html</a></p>
</li>
</ul>
<h3 id="2016-08-13"><a href="#2016-08-13" class="headerlink" title="2016-08-13"></a>2016-08-13</h3><p>爬虫专题</p>
<ul>
<li>WebMagic<br><a href="http://webmagic.io/docs/zh/" target="_blank" rel="external">http://webmagic.io/docs/zh/</a><br><a href="https://github.com/YihuaWanglv/webmagic" target="_blank" rel="external">https://github.com/YihuaWanglv/webmagic</a></li>
</ul>
<ul>
<li>Maven 那点事儿<br><a href="http://my.oschina.net/huangyong/blog/194583" target="_blank" rel="external">http://my.oschina.net/huangyong/blog/194583</a></li>
</ul>
<h3 id="2016-08-12"><a href="#2016-08-12" class="headerlink" title="2016-08-12"></a>2016-08-12</h3><ul>
<li><p>Base: An Acid Alternative<br><a href="http://queue.acm.org/detail.cfm?id=1394128" target="_blank" rel="external">http://queue.acm.org/detail.cfm?id=1394128</a></p>
</li>
<li><p>分布式事务演进<br><a href="http://yongpoliu.com/distributed-tx-evolution/" target="_blank" rel="external">http://yongpoliu.com/distributed-tx-evolution/</a></p>
</li>
<li><p>系统幂等以及常用实现方式<br><a href="http://yongpoliu.com/idempotent/" target="_blank" rel="external">http://yongpoliu.com/idempotent/</a></p>
</li>
<li><p>实现maven依赖的全局排除<br><a href="http://maven.apache.org/enforcer/maven-enforcer-plugin/" target="_blank" rel="external">http://maven.apache.org/enforcer/maven-enforcer-plugin/</a><br><a href="http://yongpoliu.com/maven-global-exclude/" target="_blank" rel="external">http://yongpoliu.com/maven-global-exclude/</a></p>
</li>
<li><p>bi分析统计工具<br><a href="http://www.tableau.com/zh-cn/products/cloud-bi" target="_blank" rel="external">http://www.tableau.com/zh-cn/products/cloud-bi</a></p>
</li>
<li><p><strong>如何用消息系统避免分布式事务？</strong><br><a href="http://www.cnblogs.com/LBSer/p/4715395.html" target="_blank" rel="external">http://www.cnblogs.com/LBSer/p/4715395.html</a></p>
</li>
<li><p>MySQL两阶段提交<br><a href="http://blog.csdn.net/jesseyoung/article/details/37970271" target="_blank" rel="external">http://blog.csdn.net/jesseyoung/article/details/37970271</a></p>
</li>
</ul>
<h3 id="2016-08-11"><a href="#2016-08-11" class="headerlink" title="2016-08-11"></a>2016-08-11</h3><ul>
<li><p>Java自动化测试框架TestNG之入门篇<br><a href="http://www.jianshu.com/p/a74adec98eff" target="_blank" rel="external">http://www.jianshu.com/p/a74adec98eff</a></p>
</li>
<li><p>Arquillian Guides<br><a href="http://arquillian.org/guides/getting_started/?utm_source=cta" target="_blank" rel="external">http://arquillian.org/guides/getting_started/?utm_source=cta</a></p>
</li>
<li><p>自动化单元测试实践之路<br><a href="http://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices" target="_blank" rel="external">http://www.infoq.com/cn/articles/road-of-automated-unit-testing-practices</a></p>
</li>
<li><p>8个超实用的Java测试工具和框架<br><a href="http://www.imooc.com/article/1154" target="_blank" rel="external">http://www.imooc.com/article/1154</a></p>
</li>
<li><p>使用 Selenium 实现基于 Web 的自动化测试<br><a href="https://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/web/1209_caimin_seleniumweb/</a></p>
</li>
<li><p>用 STAF+Selenium 实现并行的自动化测试框架<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-parallelautotest/</a></p>
</li>
<li><p>Java Fluent Restful API自动化测试框架<br><a href="http://www.cnblogs.com/jinsdu/p/4606113.html" target="_blank" rel="external">http://www.cnblogs.com/jinsdu/p/4606113.html</a></p>
</li>
<li><p>HTTP API自动化测试从手工到平台的演变<br><a href="http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform" target="_blank" rel="external">http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform</a></p>
</li>
<li><p>快速入门测试驱动开发（TDD）<br><a href="http://wwsun.github.io/posts/tdd.html" target="_blank" rel="external">http://wwsun.github.io/posts/tdd.html</a></p>
</li>
<li><p>使用 REST-Assured 测试 REST API 的进阶技巧和最佳实践<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-rest-assured2/</a></p>
</li>
</ul>
<h3 id="2016-08-10"><a href="#2016-08-10" class="headerlink" title="2016-08-10"></a>2016-08-10</h3><ul>
<li><p>Sharding-JDBC<br><a href="http://dangdangdotcom.github.io/sharding-jdbc/" target="_blank" rel="external">http://dangdangdotcom.github.io/sharding-jdbc/</a></p>
</li>
<li><p>[blog]庄周梦蝶<br><a href="http://fnil.net/" target="_blank" rel="external">http://fnil.net/</a></p>
</li>
<li><p>Atlas是由 Qihoo 360公司Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目<br><a href="https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md" target="_blank" rel="external">https://github.com/Qihoo360/Atlas/blob/master/README_ZH.md</a><br><a href="https://github.com/Qihoo360/Atlas" target="_blank" rel="external">https://github.com/Qihoo360/Atlas</a></p>
</li>
<li><p>RDBMS分布式两阶段提交与Zookeeper的Paxos同步算法<br><a href="http://blog.csdn.net/victory0508/article/details/48003527" target="_blank" rel="external">http://blog.csdn.net/victory0508/article/details/48003527</a></p>
</li>
<li><p>分布式系统的事务处理<br><a href="http://coolshell.cn/articles/10910.html" target="_blank" rel="external">http://coolshell.cn/articles/10910.html</a></p>
</li>
<li><p>分布式事务 - 最终一致性(一)<br><a href="https://segmentfault.com/a/1190000005969526" target="_blank" rel="external">https://segmentfault.com/a/1190000005969526</a></p>
</li>
<li><p>介绍下用消息队列实现分布式事务<br><a href="http://blog.chinaunix.net/uid-20047304-id-4515035.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-20047304-id-4515035.html</a></p>
</li>
</ul>
<h3 id="2016-08-03"><a href="#2016-08-03" class="headerlink" title="2016-08-03"></a>2016-08-03</h3><ul>
<li><p>解放程序猿（媛）的双手—iOS UI自动化测试<br><a href="http://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">http://tmq.qq.com/2016/06/uitestingiosautomation/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>
</li>
<li><p>5小时搞定谷歌原生自动化框架UiAutomator1.0<br><a href="http://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/" target="_blank" rel="external">http://tmq.qq.com/2016/06/androidautotestframwork-uiautomator/</a></p>
</li>
<li><p>有赞延迟队列设计<br><a href="http://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">http://tech.youzan.com/queuing_delay/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2016-08&quot;&gt;&lt;a href=&quot;#2016-08&quot; class=&quot;headerlink&quot; title=&quot;2016-08&quot;&gt;&lt;/a&gt;2016-08&lt;/h2&gt;&lt;h3 id=&quot;2016-08-26&quot;&gt;&lt;a href=&quot;#2016-08-26&quot; class=&quot;head
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="android" scheme="http://localhost:4000/tags/android/"/>
    
      <category term="dev" scheme="http://localhost:4000/tags/dev/"/>
    
      <category term="collect" scheme="http://localhost:4000/tags/collect/"/>
    
      <category term="collect-of-dev" scheme="http://localhost:4000/tags/collect-of-dev/"/>
    
  </entry>
  
  <entry>
    <title>spring事务用法演进</title>
    <link href="http://localhost:4000/2016/08/18/spring%E4%BA%8B%E5%8A%A1%E7%94%A8%E6%B3%95%E6%BC%94%E8%BF%9B/"/>
    <id>http://localhost:4000/2016/08/18/spring事务用法演进/</id>
    <published>2016-08-18T04:13:57.000Z</published>
    <updated>2018-02-07T08:54:40.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring事务用法演进"><a href="#Spring事务用法演进" class="headerlink" title="Spring事务用法演进"></a>Spring事务用法演进</h1><ul>
<li>内容</li>
</ul>
<p><img src="/images/spring-transaction-001.png" alt=""></p>
<ul>
<li>事务用法演进</li>
</ul>
<p><img src="/images/spring-transaction-002.png" alt=""></p>
<h2 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h2><h3 id="基于底层-API-的编程式事务管理"><a href="#基于底层-API-的编程式事务管理" class="headerlink" title="基于底层 API 的编程式事务管理"></a>基于底层 API 的编程式事务管理</h3><ul>
<li><p>配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bankService&quot; class=&quot;footmark.spring.core.tx.programmatic.origin.BankServiceImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;txManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;txDefinition&quot;&gt;</span><br><span class="line">        &lt;bean class=&quot;org.springframework.transaction.support.DefaultTransactionDefinition&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;propagationBehaviorName&quot; value=&quot;PROPAGATION_REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TransactionDefinition 类型的属性，它用于定义一个事务</p>
</li>
<li><p>PlatformTransactionManager 类型的属性，用于执行事务管理操作</p>
</li>
<li><p>程序代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class BankServiceImpl implements BankService &#123;</span><br><span class="line">    private BankDao bankDao;</span><br><span class="line">    private TransactionDefinition txDefinition;</span><br><span class="line">    private PlatformTransactionManager txManager;</span><br><span class="line">    ......</span><br><span class="line">    public boolean transfer(Long fromId， Long toId， double amount) &#123;</span><br><span class="line">        TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class="line">        boolean result = false;</span><br><span class="line">        try &#123;</span><br><span class="line">            result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">            txManager.commit(txStatus);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            result = false;</span><br><span class="line">            txManager.rollback(txStatus);</span><br><span class="line">            System.out.println(&quot;Transfer Error!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。</p>
</li>
</ul>
<h3 id="基于TransactionTemplate的编程式事务管理"><a href="#基于TransactionTemplate的编程式事务管理" class="headerlink" title="基于TransactionTemplate的编程式事务管理"></a>基于TransactionTemplate的编程式事务管理</h3><ul>
<li><p>配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bankService&quot;</span><br><span class="line">class=&quot;footmark.spring.core.tx.programmatic.template.BankServiceImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;transactionTemplate&quot; ref=&quot;transactionTemplate&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>程序示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class BankServiceImpl implements BankService &#123;</span><br><span class="line">    private BankDao bankDao;</span><br><span class="line">    private TransactionTemplate transactionTemplate;</span><br><span class="line">    ......</span><br><span class="line">    public boolean transfer(final Long fromId， final Long toId， final double amount) &#123;</span><br><span class="line">        return (Boolean) transactionTemplate.execute(new TransactionCallback()&#123;</span><br><span class="line">            public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class="line">                Object result;</span><br><span class="line">                try &#123;</span><br><span class="line">                    result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    status.setRollbackOnly();</span><br><span class="line">                    result = false;</span><br><span class="line">                    System.out.println(&quot;Transfer Error!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在数据访问层非常常见的模板回调模式</p>
</li>
<li>以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码</li>
</ul>
<h2 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h2><ul>
<li>不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式）</li>
<li>声明式事务管理由Spring AOP实现</li>
</ul>
<h3 id="基于TransactionInterceptor的声明式事务管理"><a href="#基于TransactionInterceptor的声明式事务管理" class="headerlink" title="基于TransactionInterceptor的声明式事务管理"></a>基于TransactionInterceptor的声明式事务管理</h3><ul>
<li><p>示例配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans...&gt;</span><br><span class="line">    ......</span><br><span class="line">    &lt;bean id=&quot;transactionInterceptor&quot;</span><br><span class="line">    class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;bankServiceTarget&quot; class=&quot;footmark.spring.core.tx.declare.origin.BankServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;bankService&quot;</span><br><span class="line">    class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;target&quot; ref=&quot;bankServiceTarget&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;interceptorNames&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;idref bean=&quot;transactionInterceptor&quot;/&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    ......</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TransactionInterceptor定义相关的事务规则，有两个主要的属性：transactionManager和transactionAttributes</p>
</li>
<li>transactionManager，用来指定一个事务管理器，并将具体事务相关的操作委托给它；</li>
<li>transactionAttributes，Properties 类型，主要用来定义事务规则，该属性的每一个键值对中，键指定的是方法名，方法名可以使用通配符，而值就表示相应方法的所应用的事务属性。</li>
<li>ProxyFactoryBean, 组装 target 和advice. 通过 ProxyFactoryBean 生成的代理类就是织入了事务管理逻辑后的目标类。</li>
</ul>
<h4 id="事务属性取值的书写规则："><a href="#事务属性取值的书写规则：" class="headerlink" title="事务属性取值的书写规则："></a>事务属性取值的书写规则：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传播行为 [，隔离级别] [，只读属性] [，超时属性] [不影响提交的异常] [，导致回滚的异常]</span><br></pre></td></tr></table></figure>
<ul>
<li>传播行为是唯一必须设置的属性，其他都可以忽略，Spring为我们提供了合理的默认值</li>
<li>传播行为的取值必须以“PROPAGATION_”开头，具体包括：PROPAGATION_MANDATORY、PROPAGATION_NESTED、PROPAGATION_NEVER、PROPAGATION_NOT_SUPPORTED、PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_SUPPORTS，共七种取值。</li>
<li>隔离级别的取值必须以“ISOLATION_”开头，具体包括：ISOLATION_DEFAULT、ISOLATION_READ_COMMITTED、ISOLATION_READ_UNCOMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE，共五种取值。</li>
<li>如果事务是只读的，那么我们可以指定只读属性，使用“readOnly”指定。否则我们不需要设置该属性。</li>
<li>超时属性的取值必须以“TIMEOUT_”开头，后面跟一个int类型的值，表示超时时间，单位是秒。</li>
<li>不影响提交的异常是指，即使事务中抛出了这些类型的异常，事务任然正常提交。必须在每一个异常的名字前面加上“+”。异常的名字可以是类名的一部分。比如“+RuntimeException”、“+tion”等等。</li>
<li>导致回滚的异常是指，当事务中抛出这些类型的异常时，事务将回滚。必须在每一个异常的名字前面加上“-”。异常的名字可以是类名的全部或者部分，比如“-RuntimeException”、“-tion”等等。</li>
<li>两个示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;*Service&quot;&gt;</span><br><span class="line">    PROPAGATION_REQUIRED，ISOLATION_READ_COMMITTED，TIMEOUT_20，+AbcException，+DefException，-HijException</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>针对所有方法名以 Service 结尾的方法，使用 PROPAGATION_REQUIRED 事务传播行为，事务的隔离级别是 ISOLATION_READ_COMMITTED，超时时间为20秒，当事务抛出 AbcException 或者 DefException 类型的异常，则仍然提交，当抛出 HijException 类型的异常时必须回滚事务。这里没有指定”readOnly”，表示事务不是只读的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;test&quot;&gt;PROPAGATION_REQUIRED，readOnly&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>
<p>针对所有方法名为 test 的方法，使用 PROPAGATION_REQUIRED 事务传播行为，并且该事务是只读的。</p>
<h3 id="基于TransactionProxyFactoryBean的声明式事务管理"><a href="#基于TransactionProxyFactoryBean的声明式事务管理" class="headerlink" title="基于TransactionProxyFactoryBean的声明式事务管理"></a>基于TransactionProxyFactoryBean的声明式事务管理</h3><ul>
<li><p>示例配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans......&gt;</span><br><span class="line">    ......</span><br><span class="line">    &lt;bean id=&quot;bankServiceTarget&quot;</span><br><span class="line">    class=&quot;footmark.spring.core.tx.declare.classic.BankServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;bankDao&quot; ref=&quot;bankDao&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;bankService&quot;</span><br><span class="line">    class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;target&quot; ref=&quot;bankServiceTarget&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    ......</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显式为每一个业务类配置一个TransactionProxyFactoryBean的做法将使得代码显得过于刻板</p>
</li>
</ul>
<h3 id="基于命名空间的声明式事务管理"><a href="#基于命名空间的声明式事务管理" class="headerlink" title="基于命名空间的声明式事务管理"></a>基于<tx>命名空间的声明式事务管理</tx></h3><ul>
<li><p>示例配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans......&gt;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    &lt;tx:advice id=&quot;bankAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name=&quot;transfer&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:pointcut id=&quot;bankPointcut&quot; expression=&quot;execution(* *.transfer(..))&quot;/&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=&quot;bankAdvice&quot; pointcut-ref=&quot;bankPointcut&quot;/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">    ......</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果默认的事务属性就能满足要求，那么代码简化为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans......&gt;</span><br><span class="line">    ......</span><br><span class="line">    &lt;tx:advice id=&quot;bankAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:pointcut id=&quot;bankPointcut&quot; expression=&quot;execution(**.transfer(..))&quot;/&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=&quot;bankAdvice&quot; pointcut-ref=&quot;bankPointcut&quot;/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">    ......</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用切点表达式，就不需要针对每一个业务类创建一个代理对象.</p>
</li>
</ul>
<h3 id="基于注解-Transactional的声明式事务管理"><a href="#基于注解-Transactional的声明式事务管理" class="headerlink" title="基于注解@Transactional的声明式事务管理"></a>基于注解@Transactional的声明式事务管理</h3><ul>
<li>@Transactional 可以作用于接口、接口方法、类以及类方法上</li>
<li><p>当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>
</li>
<li><p>示例配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><br><span class="line">        p:dataSource-ref=&quot;dataSource&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- enables scanning for @Transactional annotations --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">public boolean transfer(Long fromId, Long toId, double amount) &#123;</span><br><span class="line">    return bankDao.transfer(fromId, toId, amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。</p>
</li>
<li>@Transactional 注解应该只被应用到 public 方法上. 在protected、private或者默认可见性的方法上使用@Transactional 注解，将被忽略，也不会抛出任何异常。</li>
</ul>
<h2 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h2><h3 id="Required（需要）"><a href="#Required（需要）" class="headerlink" title="Required（需要）"></a>Required（需要）</h3><ul>
<li>若事务上下文已存在，则使用，如果不存在，则为此方法开启一个新事务</li>
</ul>
<h3 id="Mandatory（强制必须）"><a href="#Mandatory（强制必须）" class="headerlink" title="Mandatory（强制必须）"></a>Mandatory（强制必须）</h3><ul>
<li>强制事务上下文必须存在，若不存在，则抛出TransactionRequiredException异常</li>
</ul>
<h3 id="RequiresNew（需要新的）"><a href="#RequiresNew（需要新的）" class="headerlink" title="RequiresNew（需要新的）"></a>RequiresNew（需要新的）</h3><ul>
<li>总是开启新事务，前一个事务若存在则会被挂起</li>
<li>此属性在此场景是很有用：一个事务如果需要与其外围包裹事务相独立，不受其执行结果的影响，自行完成提交(比如记录日志)</li>
</ul>
<h3 id="Supports（支持）"><a href="#Supports（支持）" class="headerlink" title="Supports（支持）"></a>Supports（支持）</h3><ul>
<li>告知容器，对象方法并不需要一个事务上下文，但当调用到这个方法而事务上下文恰巧存在时，则该方法会使用它</li>
<li>可用于查询的方法当中，如果此查询是在一个正在进行的事务中完成的，对目标方法应用Supports属性会让容器使用当前事务上下文，参考数据库操作记录，从而将事务中作出的各种修改液包括到查询结果中</li>
</ul>
<h3 id="NotSupported（不支持）"><a href="#NotSupported（不支持）" class="headerlink" title="NotSupported（不支持）"></a>NotSupported（不支持）</h3><ul>
<li>告知容器此方法不使用事务</li>
<li>若一个事务已存在，容器会将事务暂停直至此方法结束</li>
<li>此属性在方法逻辑中有排斥事务上下文代码存在时很有用，可以暂时屏蔽一些不需要或不能用事务的逻辑</li>
</ul>
<h3 id="Never（不用）"><a href="#Never（不用）" class="headerlink" title="Never（不用）"></a>Never（不用）</h3><ul>
<li>告知容器不允许有事务上下文存在。若调用方法前事务存在，则抛出异常</li>
</ul>
<h3 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h3><ul>
<li>告知spring进行事务嵌套，并采用Required属性</li>
</ul>
<h2 id="事务传播级别"><a href="#事务传播级别" class="headerlink" title="事务传播级别"></a>事务传播级别</h2><ul>
<li>这些事务隔离级别设置需要依赖于底层数据库。底层数据库支持，这些设置才会生效</li>
</ul>
<p><img src="/images/spring-transaction-003.png" alt=""></p>
<h3 id="TransactionReadUncommitted"><a href="#TransactionReadUncommitted" class="headerlink" title="TransactionReadUncommitted"></a>TransactionReadUncommitted</h3><ul>
<li>允许事务读取其他事务在提交到数据库之前产生的未提交更改。</li>
</ul>
<p><img src="/images/spring-transaction-004.png" alt=""></p>
<h3 id="TransactionReadCommitted"><a href="#TransactionReadCommitted" class="headerlink" title="TransactionReadCommitted"></a>TransactionReadCommitted</h3><ul>
<li>允许多个事务访问同一份数据，但将未提交的数据对其他事务隐藏，直至数据提交</li>
</ul>
<p><img src="/images/spring-transaction-005.png" alt=""></p>
<h3 id="TransactionRepeatableRead"><a href="#TransactionRepeatableRead" class="headerlink" title="TransactionRepeatableRead"></a>TransactionRepeatableRead</h3><ul>
<li>保持了事务彼此隔绝。</li>
<li>保证一旦在某一事务中服务了数据库的一个值集，在后续的每次查询操作中都读到同样的值（除非此事务拿到这些数据的读写锁，并自行更改了数据）</li>
<li>在此级别下，一个事务如果要更改数据，而这一数据被其他事务读取时，此事务需要等待占用数据事务提交的操作（或直接返回失败）</li>
</ul>
<p><img src="/images/spring-transaction-006.png" alt=""></p>
<h3 id="TransactionSerializable"><a href="#TransactionSerializable" class="headerlink" title="TransactionSerializable"></a>TransactionSerializable</h3><ul>
<li>java支持的最高的事务隔离级别</li>
<li>交错发生的事务被“堆迭”起来，以致同一时间点仅仅有一个事务具备访问目标数据的权力</li>
<li>性能会受到很大影响，而数据一致性将会极大提高</li>
</ul>
<p><img src="/images/spring-transaction-007.png" alt=""></p>
<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h3 id="JTA和JTS"><a href="#JTA和JTS" class="headerlink" title="JTA和JTS"></a>JTA和JTS</h3><h4 id="jta：java-transaction-api"><a href="#jta：java-transaction-api" class="headerlink" title="jta：java transaction api"></a>jta：java transaction api</h4><ul>
<li>开发人员用于事务管理的接口</li>
<li><p>UserTransaction接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin();</span><br><span class="line">commit();</span><br><span class="line">rollback();</span><br><span class="line">getStatus();</span><br></pre></td></tr></table></figure>
</li>
<li><p>TransactionManager接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">suspend();</span><br><span class="line">resume();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="jts：java-transaction-service"><a href="#jts：java-transaction-service" class="headerlink" title="jts：java transaction service"></a>jts：java transaction service</h4><ul>
<li>开源或商用的实现了jta的底层事务服务</li>
</ul>
<p><img src="/images/spring-transaction-008.png" alt=""></p>
<h4 id="要进行事务管理，我们需要两个东西：事务管理器和资源管理器"><a href="#要进行事务管理，我们需要两个东西：事务管理器和资源管理器" class="headerlink" title="要进行事务管理，我们需要两个东西：事务管理器和资源管理器"></a>要进行事务管理，我们需要两个东西：事务管理器和资源管理器</h4><ul>
<li>资源管理器（Resource Manager），对于数据库，就是数据源</li>
<li>事务管理器（Transaction Manager）<br><em>控制JTA事务，管理事务生命周期，并协调资源</em><br><em>在JTA中，事务管理器抽象为TransactionManager，并通过底层事务服务（JTS）实现</em><br><em>负责控制和管理实际资源（数据库或JMS队列）</em></li>
</ul>
<h3 id="分布式事务-XA事务"><a href="#分布式事务-XA事务" class="headerlink" title="分布式事务/XA事务"></a>分布式事务/XA事务</h3><ul>
<li>分布式事务和单机事务的区别就是，单机事务是事务管理器管理一个资源，而分布式事务则是事务管理器管理多个数据资源.</li>
</ul>
<h4 id="XA环境"><a href="#XA环境" class="headerlink" title="XA环境"></a>XA环境</h4><p>在同一个处理单元中，需要协调多个数据资源完成逻辑，并保证ACID准备，则需要XA事务保证</p>
<h4 id="XA接口"><a href="#XA接口" class="headerlink" title="XA接口"></a>XA接口</h4><p><img src="/images/spring-transaction-009.png" alt=""></p>
<ul>
<li>XA支持两阶段提交协议</li>
</ul>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><ul>
<li>使用spring boot + jta + atomikos实现分布式事务管理的代码例子</li>
<li>资金在库（atomikos_one），红包在库（atomikos_two）. 资金账号1转10元到资金账号2；红包账号2转10元到红包账号1</li>
</ul>
<h4 id="表数据"><a href="#表数据" class="headerlink" title="表数据"></a>表数据</h4><ul>
<li>capital_account</li>
</ul>
<p><img src="/images/spring-transaction-010.png" alt=""></p>
<ul>
<li>red_packet_account</li>
</ul>
<p><img src="/images/spring-transaction-011.png" alt=""></p>
<h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><ul>
<li>配置2个数据源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">order.datasource.url=jdbc:mysql://localhost:3306/atomikos_two</span><br><span class="line">order.datasource.username=root</span><br><span class="line">order.datasource.password=root</span><br><span class="line"></span><br><span class="line">customer.datasource.url=jdbc:mysql://localhost:3306/atomikos_one</span><br><span class="line">customer.datasource.username=root</span><br><span class="line">customer.datasource.password=root</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>atomikos的maven依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transactions&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transactions-jta&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.atomikos&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transactions-hibernate3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9.3&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;hibernate&lt;/artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>AtomikosJtaPlatform这个类指明了，Atomikos需要我们提供UserTransaction和TransactionManager的实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AtomikosJtaPlatform extends AbstractJtaPlatform &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    static TransactionManager transactionManager;</span><br><span class="line">    static UserTransaction transaction;</span><br><span class="line">    @Override</span><br><span class="line">    protected TransactionManager locateTransactionManager() &#123;</span><br><span class="line">        return transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected UserTransaction locateUserTransaction() &#123;</span><br><span class="line">        return transaction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>transactionManager等配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class MainConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() &#123;</span><br><span class="line">        return new PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public JpaVendorAdapter jpaVendorAdapter() &#123;</span><br><span class="line">        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = new HibernateJpaVendorAdapter();</span><br><span class="line">        hibernateJpaVendorAdapter.setShowSql(true);</span><br><span class="line">        hibernateJpaVendorAdapter.setGenerateDdl(true);</span><br><span class="line">        hibernateJpaVendorAdapter.setDatabase(Database.MYSQL);</span><br><span class="line">        return hibernateJpaVendorAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(name = &quot;userTransaction&quot;)</span><br><span class="line">    public UserTransaction userTransaction() throws Throwable &#123;</span><br><span class="line">        UserTransactionImp userTransactionImp = new UserTransactionImp();</span><br><span class="line">        userTransactionImp.setTransactionTimeout(10000);</span><br><span class="line">        return userTransactionImp;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(name = &quot;atomikosTransactionManager&quot;, initMethod = &quot;init&quot;</span><br><span class="line">    , destroyMethod = &quot;close&quot;)</span><br><span class="line">    public TransactionManager atomikosTransactionManager() throws Throwable &#123;</span><br><span class="line">        UserTransactionManager userTransactionManager = new UserTransactionManager();</span><br><span class="line">        userTransactionManager.setForceShutdown(false);</span><br><span class="line">        AtomikosJtaPlatform.transactionManager = userTransactionManager;</span><br><span class="line">        return userTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(name = &quot;transactionManager&quot;)</span><br><span class="line">    @DependsOn(&#123; &quot;userTransaction&quot;, &quot;atomikosTransactionManager&quot; &#125;)</span><br><span class="line">    public PlatformTransactionManager transactionManager() throws Throwable &#123;</span><br><span class="line">        UserTransaction userTransaction = userTransaction();</span><br><span class="line">        AtomikosJtaPlatform.transaction = userTransaction;</span><br><span class="line">        TransactionManager atomikosTransactionManager = atomikosTransactionManager();</span><br><span class="line">        return new JtaTransactionManager(userTransaction, atomikosTransactionManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>数据库1的数据源配置CustomerConfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@DependsOn(&quot;transactionManager&quot;)</span><br><span class="line">@EnableJpaRepositories(basePackages = &quot;com.iyihua.sample.repository.customer&quot;</span><br><span class="line">, entityManagerFactoryRef = &quot;customerEntityManager&quot;, transactionManagerRef = &quot;transactionManager&quot;)</span><br><span class="line">@EnableConfigurationProperties(CustomerDatasourceProperties.class)</span><br><span class="line">public class CustomerConfig &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private JpaVendorAdapter jpaVendorAdapter;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CustomerDatasourceProperties customerDatasourceProperties;</span><br><span class="line"></span><br><span class="line">    @Primary</span><br><span class="line">    @Bean(name = &quot;customerDataSource&quot;, initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)</span><br><span class="line">    public DataSource customerDataSource() &#123;</span><br><span class="line">        MysqlXADataSource mysqlXaDataSource = new MysqlXADataSource();</span><br><span class="line">        mysqlXaDataSource.setUrl(customerDatasourceProperties.getUrl());</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);</span><br><span class="line">        mysqlXaDataSource.setPassword(customerDatasourceProperties.getPassword());</span><br><span class="line">        mysqlXaDataSource.setUser(customerDatasourceProperties.getUsername());</span><br><span class="line">        mysqlXaDataSource.setPinGlobalTxToPhysicalConnection(true);</span><br><span class="line">        AtomikosDataSourceBean xaDataSource = new AtomikosDataSourceBean();</span><br><span class="line">        xaDataSource.setXaDataSource(mysqlXaDataSource);</span><br><span class="line">        xaDataSource.setUniqueResourceName(&quot;xads1&quot;);</span><br><span class="line">        return xaDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    @Primary</span><br><span class="line">    @Bean(name = &quot;customerEntityManager&quot;)</span><br><span class="line">    @DependsOn(&quot;transactionManager&quot;)</span><br><span class="line">    public LocalContainerEntityManagerFactoryBean customerEntityManager() throws Throwable &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; properties = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        properties.put(&quot;hibernate.transaction.jta.platform&quot;, AtomikosJtaPlatform.class.getName());</span><br><span class="line">        properties.put(&quot;javax.persistence.transactionType&quot;, &quot;JTA&quot;);</span><br><span class="line">        LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();</span><br><span class="line">        entityManager.setJtaDataSource(customerDataSource());</span><br><span class="line">        entityManager.setJpaVendorAdapter(jpaVendorAdapter);</span><br><span class="line">        entityManager.setPackagesToScan(&quot;com.iyihua.sample.domain.customer&quot;);</span><br><span class="line">        entityManager.setPersistenceUnitName(&quot;customerPersistenceUnit&quot;);</span><br><span class="line">        entityManager.setJpaPropertyMap(properties);</span><br><span class="line">        return entityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据库2的数据源配置OrderConfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@DependsOn(&quot;transactionManager&quot;)</span><br><span class="line">@EnableJpaRepositories(basePackages = &quot;com.iyihua.sample.repository.order&quot;</span><br><span class="line">, entityManagerFactoryRef = &quot;orderEntityManager&quot;, transactionManagerRef = &quot;transactionManager&quot;)</span><br><span class="line">@EnableConfigurationProperties(OrderDatasourceProperties.class)</span><br><span class="line">public class OrderConfig &#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>业务方法:资金在库（atomikos_one），红包在库（atomikos_two）资金账号1转10元到资金账号2；红包账号2转10元到红包账号1**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class StoreServiceImpl implements StoreService &#123;</span><br><span class="line">@Transactional()</span><br><span class="line">    public void transfer() &#123;</span><br><span class="line">        CapitalAccount ca1 = capitalAccountRepository.findOne(1l);</span><br><span class="line">        CapitalAccount ca2 = capitalAccountRepository.findOne(2l);</span><br><span class="line">        RedPacketAccount rp1 = redPacketAccountRepository.findOne(1l);</span><br><span class="line">        RedPacketAccount rp2 = redPacketAccountRepository.findOne(2l);</span><br><span class="line">        BigDecimal capital = BigDecimal.TEN;</span><br><span class="line">        BigDecimal red = BigDecimal.TEN;</span><br><span class="line">        ca1.transferFrom(capital);</span><br><span class="line">        ca2.transferTo(capital);</span><br><span class="line">        capitalAccountRepository.save(ca1);</span><br><span class="line">        capitalAccountRepository.save(ca2);</span><br><span class="line">        rp2.transferFrom(red);</span><br><span class="line">        rp1.transferTo(red);</span><br><span class="line">        redPacketAccountRepository.save(rp1);</span><br><span class="line">        redPacketAccountRepository.save(rp2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="get-and-run-demo："><a href="#get-and-run-demo：" class="headerlink" title="get and run demo："></a>get and run demo：</h3><p><a href="https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample" target="_blank" rel="external">https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample</a></p>
<ul>
<li>git clone <a href="https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git" target="_blank" rel="external">https://github.com/YihuaWanglv/spring-boot-jta-atomikos-sample.git</a></li>
<li>import db script in folder “docs”</li>
<li>import project into ide and run App.java or build project and run the jar</li>
<li>visit utl:<a href="http://localhost:8082/save">http://localhost:8082/save</a> to see saveTest</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring事务用法演进&quot;&gt;&lt;a href=&quot;#Spring事务用法演进&quot; class=&quot;headerlink&quot; title=&quot;Spring事务用法演进&quot;&gt;&lt;/a&gt;Spring事务用法演进&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img sr
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="分布式事务" scheme="http://localhost:4000/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="spring" scheme="http://localhost:4000/tags/spring/"/>
    
      <category term="transaction" scheme="http://localhost:4000/tags/transaction/"/>
    
      <category term="事务" scheme="http://localhost:4000/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>java自动化测试整理</title>
    <link href="http://localhost:4000/2016/08/12/java%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>http://localhost:4000/2016/08/12/java自动化测试整理/</id>
    <published>2016-08-12T05:14:27.000Z</published>
    <updated>2018-02-07T08:54:40.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java自动化测试整理"><a href="#java自动化测试整理" class="headerlink" title="java自动化测试整理"></a>java自动化测试整理</h2><h2 id="1-自动化测试的4个关键部分"><a href="#1-自动化测试的4个关键部分" class="headerlink" title="1. 自动化测试的4个关键部分"></a>1. 自动化测试的4个关键部分</h2><p><img src="/images/test-001.png" alt=""></p>
<ul>
<li>使用svn/git作为代码版本管理</li>
<li>使用maven构建项目，依赖和目录统一</li>
<li>使用junit/testng+mockito写单元测试</li>
<li>使用jenkins执行项目构建和测试任务</li>
<li>使用Sonar作为自动化单元测试反馈报告统一展现平台</li>
</ul>
<h2 id="2-web自动化测试管理工具"><a href="#2-web自动化测试管理工具" class="headerlink" title="2. web自动化测试管理工具"></a>2. web自动化测试管理工具</h2><ul>
<li>使用 Selenium 实现基于 Web 的自动化测试</li>
<li>使用 Rest-Assured 测试 REST API</li>
<li>api测试，从手工到平台的演变：运用web+httpclient实现，测试的可配置</li>
</ul>
<h2 id="3-restapi的自动化测试之路"><a href="#3-restapi的自动化测试之路" class="headerlink" title="3. restapi的自动化测试之路"></a>3. restapi的自动化测试之路</h2><ul>
<li>Rest-Assured或其他工具，编写针对api的单元测试；</li>
<li>新代码提交，自动触发构建，成功部署服务器；</li>
<li>自动运行使用 Rest-Assured 编写的单元测试，对 REST API 进行测试</li>
</ul>
<h2 id="4-自动化测试工具脑图"><a href="#4-自动化测试工具脑图" class="headerlink" title="4. 自动化测试工具脑图"></a>4. 自动化测试工具脑图</h2><p><img src="/images/test-002.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java自动化测试整理&quot;&gt;&lt;a href=&quot;#java自动化测试整理&quot; class=&quot;headerlink&quot; title=&quot;java自动化测试整理&quot;&gt;&lt;/a&gt;java自动化测试整理&lt;/h2&gt;&lt;h2 id=&quot;1-自动化测试的4个关键部分&quot;&gt;&lt;a href=&quot;#1-自
    
    </summary>
    
    
      <category term="Test" scheme="http://localhost:4000/tags/Test/"/>
    
      <category term="测试" scheme="http://localhost:4000/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="单元测试" scheme="http://localhost:4000/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="自动化测试" scheme="http://localhost:4000/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
