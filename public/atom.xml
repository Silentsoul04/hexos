<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iyihua</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2018-09-09T17:28:46.792Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>Wanglv Yihua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo生成的静态文件如何更新到自己的服务器上</title>
    <link href="http://localhost:4000/2018/09/10/hexo%E7%94%9F%E6%88%90%E7%9A%84%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
    <id>http://localhost:4000/2018/09/10/hexo生成的静态文件如何更新到自己的服务器上/</id>
    <published>2018-09-09T17:27:35.000Z</published>
    <updated>2018-09-09T17:28:46.792Z</updated>
    
    <content type="html"><![CDATA[<p>Waiting…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Waiting…&lt;/p&gt;

    
    </summary>
    
    
      <category term="hexo" scheme="http://localhost:4000/tags/hexo/"/>
    
      <category term="blog" scheme="http://localhost:4000/tags/blog/"/>
    
      <category term="自动发布" scheme="http://localhost:4000/tags/%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/"/>
    
      <category term="自动部署" scheme="http://localhost:4000/tags/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="云服务" scheme="http://localhost:4000/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Emacs快速指南</title>
    <link href="http://localhost:4000/2018/09/09/Emacs%E5%BF%AB%E9%80%9F%E6%8C%87%E5%8D%97/"/>
    <id>http://localhost:4000/2018/09/09/Emacs快速指南/</id>
    <published>2018-09-08T17:09:59.000Z</published>
    <updated>2018-09-08T17:13:18.962Z</updated>
    
    <content type="html"><![CDATA[<p>Emacs 快速指南.（查看版权声明请至本文末尾）</p>
<p>【注意：位于【】之间的内容是译注，比如本行，下同。】</p>
<p>Emacs 键盘命令通常包含 CONTROL 键（有时候以 CTRL 或 CTL 来标示）和<br>META 键（有时候用 EDIT 或 ALT 来标示）。为了避免每次都要写出全名，我们<br>约定使用下述缩写：</p>
<p> C-<chr>  表示当输入字符 <chr> 时按住 CONTROL 键。<br>          因此 C-f 就表示：按住 CONTROL 键再输入 f。</chr></chr></p>
<p> M-<chr>  表示当输入字符 <chr> 时按住 META（或 EDIT 或 ALT）键。<br>          如果你的键盘上没有 META 、EDIT 或 ALT 键，用下述方法也等效：<br>          先按一下 ESC 键然后放开，再输入 <chr>。我们用 <esc> 来表示<br>          ESC 键。</esc></chr></chr></chr></p>
<p>重要提示：要退出 Emacs，请用 C-x C-c（两个连续的组合键）。<br>要退出一个正在运行中的命令，请用 C-g。<br>下文中左边顶行的“&gt;&gt;”字样用来提示你尝试键盘命令。比如：</p>
<p>[本页当中特意留出一些空白是出于教学目的，请继续往后阅读]</p>
<blockquote>
<blockquote>
<p>现在输入 C-v （查看下一屏文字）移动到下一屏。<br>   （别紧张，在输入字符 v 的同时注意要按住 CONTROL 键）<br>   从现在开始，每读完当前一屏你都需要这样做一次。</p>
</blockquote>
</blockquote>
<p>值得注意的是，当你从上一屏滚到下一屏时，中间会有两行的重复；这样做是为<br>了维持滚屏的连续性，方便你顺畅、连续地阅读。</p>
<p>用编辑器，开门第一件事就是学会在文字中移动。你已经知道了 C-v 可以向下移<br>动一屏，要往上移，请用 M-v （也就是按住 META 键，然后输入v，如果你没有<br>META、EDIT 或 ALT 键那么就先按 <esc> 再按 v）。</esc></p>
<blockquote>
<blockquote>
<p> 试试 M-v，然后再试试 C-v，来回遛几次。</p>
</blockquote>
</blockquote>
<h2 id="小结（SUMMARY）"><a href="#小结（SUMMARY）" class="headerlink" title="* 小结（SUMMARY）"></a>* 小结（SUMMARY）</h2><p>以下命令在翻页浏览时相当有用：</p>
<pre><code>C-v     向前移动一屏
M-v     向后移动一屏
C-l     重绘屏幕，并将光标所在行置于屏幕的中央
        （注意是 CONTROL-L，不是 CONTROL-1）
</code></pre><blockquote>
<blockquote>
<p>找到光标，留意其附近的文字，然后输入 C-l。<br>   找找光标在哪里，你会发现其附近的文字与之前相同，位置却变为屏幕的中心。<br>   如果你再次输入 C-l ，附近的文字将移动到屏幕的顶端。再次输入 C-l ，<br>   文字将移动到底端。</p>
</blockquote>
</blockquote>
<p>如果你的键盘上有 PageUp 和 PageDn，也可以用这两个键来滚屏。不过使用<br>C-v 和 M-v 的效率要更高一些。</p>
<h2 id="基本的光标控制（BASIC-CURSOR-CONTROL）"><a href="#基本的光标控制（BASIC-CURSOR-CONTROL）" class="headerlink" title="* 基本的光标控制（BASIC CURSOR CONTROL）"></a>* 基本的光标控制（BASIC CURSOR CONTROL）</h2><p>整屏的移动很有用，但是如何在文字中精确定位呢？</p>
<p>有几种方式可以选择。用方向键当然可以，不过更有效率的方法是保持双手位于<br>主键盘区，然后使用 C-p 、 C-b 、 C-f 和 C-n 这四个命令。它们的功能和方<br>向键是一样的，如下图所示：</p>
<pre><code>                 上一行 C-p
                      :
                      :
向左移 C-b .... 目前光标位置 .... 向右移 C-f
                      :
                      :
                 下一行 C-n
</code></pre><blockquote>
<blockquote>
<p>用 C-n 或 C-p 将光标移到上图的中央。<br>   按 C-l，整幅图会被显示在屏幕的中央。</p>
</blockquote>
</blockquote>
<p>“P N B F”四个字母分别代表了四个词，用这四个词记忆这些组合键会更容易：<br>P 代表 previous（上一行），N 代表 next（下一行），B 代表 backward（回<br>退），而 F 则代表 forward（前进）。这些组合键今后将与你形影不离。</p>
<blockquote>
<blockquote>
<p>按几次 C-n 把光标往下挪到这里。</p>
<p>用 C-f 把光标移动到这一行，然后再用 C-p 往上挪。<br>   注意观察当光标在一行的中央时 C-p 命令的行为。</p>
</blockquote>
</blockquote>
<p>每行文字都以一个“换行符”结束，“换行符”把行与行区分开来。（通常情况下，<br>一个文件的最后一行会有一个换行符，但是 Emacs 不强制要求这一点。）</p>
<blockquote>
<blockquote>
<p>在一行的行头输入 C-b。<br>   光标应该会移动到前一行的行尾，因为光标在回退过程中越过了换行符。</p>
</blockquote>
</blockquote>
<p>同样 C-f 也可以像 C-b 一样越过换行符。</p>
<blockquote>
<blockquote>
<p>连按几次 C-b，感受一下光标的移动。<br>   然后按几次 C-f 回到本行的行尾。<br>   再按一次 C-f，光标会移动到下一行。</p>
</blockquote>
</blockquote>
<p>当你移动光标穿越屏幕的上下边界时，在边界外的文字会移动到屏幕内，这称为<br>“滚动”（scrolling）。滚动使得光标可以被移动到文字中的任何位置，并且还<br>不会让光标跑到屏幕外边去。</p>
<blockquote>
<blockquote>
<p>用 C-n 将光标下移，一直越过屏幕边界，同时观察发生了什么变化。</p>
</blockquote>
</blockquote>
<p>如果你嫌一个字符一个字符地挪光标太慢，你还可以一个词一个词地跳。M-f<br>(META-f) 可以将光标往前移动一个词，而 M-b 则是往后移。【这里的“词”指<br>英文单词，对中文来说，则是指移动到下一个标点符号。】</p>
<blockquote>
<blockquote>
<p>试试 M-f 和 M-b。</p>
</blockquote>
</blockquote>
<p>如果光标停在一个词的中间，M-f 会移动到这个词的末尾。如果光标处于词与词<br>之间的空白处，M-f 会移动到下一个词的末尾。M-b 的功能类似，只是方向相反。</p>
<blockquote>
<blockquote>
<p>按几次 M-f 和 M-b，中间夹杂一些 C-f 和 C-b。<br>   你可以观察到 M-f 和 M-b 在不同位置上所表现出来的不同行为。</p>
</blockquote>
</blockquote>
<p>请注意 C-f 、C-b 和 M-f 、M-b 两对之间的类比关系。通常的惯例是：META 系<br>列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 CONTROL<br>系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。</p>
<p>类似的惯例在“行”与“句子”之间也同样适用：C-a 和 C-e 可以将光标移动到<br>“一行”的头部和尾部；而 M-a 和 M-e 则将光标移动到“一句”的头部和尾部。</p>
<blockquote>
<blockquote>
<p>按两次 C-a，再按两次 C-e。<br>   按两次 M-a，再按两次 M-e。</p>
</blockquote>
</blockquote>
<p>想一想为什么重复的 C-a 命令会没有作用，而重复的 M-a 命令则会让光标不断<br>地回退到上一个句子。虽然这个类比规律并不严格，但是很自然。</p>
<p>光标停留的位置也可以称作“点位”（point）。或者干脆说，光标指示出了屏幕<br>上“点位”在文本中的位置。</p>
<p>这里对简单的光标移动命令做一个总结，其中也包括了整词和整句的移动：</p>
<pre><code>C-f     向右移动一个字符
C-b     向左移动一个字符

M-f     向右移动一个词【对中文是移动到下一个标点符号】
M-b     向左移动一个词【对中文是移动到上一个标点符号】

C-n     移动到下一行
C-p     移动到上一行

C-a     移动到行首
C-e     移动到行尾

M-a     移动到句首
M-e     移动到句尾
</code></pre><blockquote>
<blockquote>
<p>把上面所有的命令都练习几次，这些可都是最常用的命令。</p>
</blockquote>
</blockquote>
<p>这里还要介绍两个重要的光标移动命令：M-&lt; （META 小于号）可以将光标移动到<br>所有文字的最开头；M-&gt; （META 大于号）可以将光标移动到所有文字的最末尾。</p>
<p>注意，在大部分键盘上，小于号（&lt;）需要用上档键（Shift）来输入，所以在这<br>些键盘上你应该用 Shift 键来输入 M-&lt;，如果不按 Shift 键，你输入的会是<br>M-comma（META 逗号）。</p>
<blockquote>
<blockquote>
<p>试一试 M-&lt; ，移到本快速指南的最开始。<br>   然后再按几次 C-v 回到这里。</p>
<p>试一试 M-&gt; ，移到本快速指南的最末尾。<br>   然后再按几次 M-v 回到这里。</p>
</blockquote>
</blockquote>
<p>如果你的键盘上有方向键的话，也可以用它们来移动光标。不过我们有三个理由<br>推荐你学习 C-b 、C-f 、C-n 、和 C-p：（1）它们在任何键盘上都能用。（2）<br>当你熟练使用 Emacs 之后，你会发现用这些组合键比用方向键要快得多，因为你<br>的手不需要离开打字区。（3）一旦你习惯了使用这些组合键，你也可以很容易地<br>适应其它更高级的光标移动命令。</p>
<p>大部分的 Emacs 命令接受数字参数，并且对于多数命令而言，这些数字参数的作<br>用是指定命令的重复次数。为一个命令指定数字参数（也就是重复次数）的方法<br>是：先输入 C-u，然后输入数字作为参数，最后再输入命令。如果你有META （或<br>EDIT 或 ALT）键，那么还有另一种办法：按住 META 键不放，然后输入数字。不<br>过我们还是建议你用 C-u，因为它在任何终端机上都能用。这种数字参数也称为<br>“前缀参数”，意思是说这个参数是先于使用它的命令而输入的。</p>
<p>举例来说， C-u 8 C-f 会向前移动 8 个字符。</p>
<blockquote>
<blockquote>
<p>为 C-n 或者 C-p 指定一个数字参数，这样你可以只用一个命令就把光标移动<br>   到本行的附近。</p>
</blockquote>
</blockquote>
<p>虽然大部分命令把数字参数解释为其重复次数，但是也有些命令例外，它们将数<br>字参数另做它用。比如有些命令（我们目前还没学到）仅仅将前缀参数作为一个<br>标志――只要给出有一个前缀参数，不管其值为何，它都会改变命令的功能。</p>
<p>而 C-v 和 M-v 则属于另一种类型的例外。当给定一个参数时，它们将滚动你指<br>定的“行数”，而不是“屏数”。举例来说，C-u 8 C-v 将文本向下滚动 8 行。</p>
<blockquote>
<blockquote>
<p>现在试试看，输入 C-u 8 C-v。</p>
</blockquote>
</blockquote>
<p>这个命令应该已经将文字向上滚动了 8 行。如果你想将它再次地向下滚动，你可<br>以给定一个参数然后执行 M-v。</p>
<p>如果你正在使用图形界面，比如 X 或者微软的 Windows，那么在 Emacs窗<br>口的一边应该有一个长方形的区域叫“滚动条”。你可以用鼠标操纵滚动条来滚动<br>文字。</p>
<p>如果你的鼠标有滚轮的话，你也可以使用滚轮来滚动。</p>
<h2 id="如果-EMACS-失去响应（IF-EMACS-STOPS-RESPONDING）"><a href="#如果-EMACS-失去响应（IF-EMACS-STOPS-RESPONDING）" class="headerlink" title="* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）"></a>* 如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）</h2><p>如果 Emacs 对你的命令失去响应，你可以用 C-g 来安全地终止这条命令。C-g<br>也可以终止一条执行过久的命令。</p>
<p>C-g 还可以取消数字参数和只输入到一半的命令。</p>
<blockquote>
<blockquote>
<p>输入 C-u 100 设定一个值为 100 的数字参数，然后按 C-g。<br>   现在再按 C-f，光标应该只会移动一个字符，因为你已经用 C-g 取消了参数。</p>
</blockquote>
</blockquote>
<p>如果你不小心按了一下 <esc>，你也可以用 C-g 来取消它。<br>【这个说法似乎有问题，因为按照这个按键顺序输入的应该是 C-M-g。<br>  取消 <esc> 的正确做法是再连按两次 <esc>。】</esc></esc></esc></p>
<h2 id="被禁用的命令（DISABLED-COMMANDS）"><a href="#被禁用的命令（DISABLED-COMMANDS）" class="headerlink" title="* 被禁用的命令（DISABLED COMMANDS）"></a>* 被禁用的命令（DISABLED COMMANDS）</h2><p>有一些 Emacs 命令被“禁用”了，以避免初学者在不了解其确切功能的情况下误<br>用而造成麻烦。</p>
<p>如果你用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令<br>到底是干什么的，询问你是否要继续，并在得到你的肯定之后再执行这命令。</p>
<p>如果你真的想用这条命令，在 Emacs 询问你的时候应该按空格。一般来说，如果<br>你不想用，就按“n”。</p>
<blockquote>
<blockquote>
<p>试试 C-x C-l （这是一个被禁用的命令）<br>   然后用 n 来回答询问。</p>
</blockquote>
</blockquote>
<h2 id="窗格（WINDOWS）"><a href="#窗格（WINDOWS）" class="headerlink" title="* 窗格（WINDOWS）"></a>* 窗格（WINDOWS）</h2><p>Emacs 可以有多个“窗格”，每个窗格显示不同的文字。后面会介绍怎么对付多个窗<br>格，现在我们先学会如何关掉多余的窗格。其实也很简单：</p>
<pre><code>C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。
</code></pre><p>也就是先按 CONTROL-x 然后再按 1。C-x 1 会保留光标所在的窗格，并将其扩大<br>到整个屏幕，同时关掉所有其它的窗格。</p>
<blockquote>
<blockquote>
<p>把光标移到本行然后输入 C-u 0 C-l。</p>
<p>输入 C-h k C-f。观察当一个新窗格出现时当前窗格（用来显示<br>   C-f 命令的文档）是如何缩小的。</p>
<p>输入 C-x 1 关掉文档窗格。</p>
</blockquote>
</blockquote>
<p>有一系列命令是以 CONTROL-x 开始的，这些命令许多都跟“窗格、文件、缓冲区<br>【缓冲区（buffer）会在后文详细介绍】”等等诸如此类的东西有关，其中有些<br>命令可能包含了 2 个、3 个或者 4 个字符。</p>
<h2 id="插入与删除（INSERTING-AND-DELETING）"><a href="#插入与删除（INSERTING-AND-DELETING）" class="headerlink" title="* 插入与删除（INSERTING AND DELETING）"></a>* 插入与删除（INSERTING AND DELETING）</h2><p>插入文字很简单，直接敲键盘就可以了。普通的字符，比如 A、7、* 等等，会<br>随着你的输入而插入。要插入一个换行符，输入 <return>（这个键在键盘上有<br>时会被标注成“Enter”）。</return></p>
<p>你可以用 <del> 来删除光标左边的字符，这个键通常被标注为“Backspace”――跟<br>你在 Emacs 之外的用法应该一样，删除最后一个输入的字符。</del></p>
<p>你的键盘上可能有另外一个键，标注着 <delete>，但那个不是我们所说的 <del>。</del></delete></p>
<blockquote>
<blockquote>
<p>现在就来试试――敲点字，然后按几下 <del> 删除它们。<br>   不用担心文件被修改，你做什么都没关系，这里就是专给你练习用的。</del></p>
</blockquote>
</blockquote>
<p>如果一行文字很长、超出了窗格的宽度，显示不下的部分会在紧邻的下一行继续<br>显示。如果你使用的是图形界面，文本区域两边的狭窄区域（左右“边缘”）会出<br>现小小的转弯箭头，表明这是某一行的接续显示。如果你使用的是文本终端，接<br>续显示由屏幕最右边一列的一个反斜线（“\”）来表示。</p>
<blockquote>
<blockquote>
<p>输入文字，一直到屏幕的右边界，然后继续。<br>你会看到一个接续行出现。</p>
<p>用 <del> 删掉一些文字，直到此行长度小于窗格宽度，接续行就消失了。</del></p>
</blockquote>
</blockquote>
<p>换行符跟其它字符一样可以被删除。两行中间的换行符被删除后，这两行将会合<br>并成一行。如果合并后的这一行太长，超出了窗格宽度，它就会以一个接续行来<br>显示。</p>
<blockquote>
<blockquote>
<p>移动光标到某行的开头并输入 <del>。<br>   这时该行将与其前一行一起被合并为一行。</del></p>
<p>输入 <return> 重新插入你刚才删除的换行符。</return></p>
</blockquote>
</blockquote>
<p><return> 是一个特殊的键，因为按下这个键后，得到的可能不仅仅是一个换行<br>符。根据周围文本的不同，Emacs 可能会在换行符之后插入一些空白字符，这样，<br>当你在新的一行开始打字时，文本会自动与前一行对齐。</return></p>
<blockquote>
<blockquote>
<p>这是一个自动缩进的例子。<br>   在这一行的末尾输入 <return>。</return></p>
</blockquote>
</blockquote>
<p>可以看到，在插入换行符之后，Emacs 插入了空格，因此光标移动到了“在”这个<br>字的下面。</p>
<p>前面讲过，大部分的 Emacs 命令都可以指定重复次数，这其中也包括输入字符的<br>命令。重复执行输入字符的命令实际上就是输入多个相同的字符。</p>
<blockquote>
<blockquote>
<p> 试试 C-u 8 <em>，这将会插入 <strong><em>*</em></strong></em>。</p>
</blockquote>
</blockquote>
<p>好，现在你应该已经掌握了最基本的的文本插入和修改功能，其实删除还可以<br>“以词为单位”进行，下面是一个关于“删除”操作的小结：</p>
<pre><code>&lt;DEL&gt;        删除光标前的一个字符
C-d          删除光标后的一个字符

M-&lt;DEL&gt;      移除光标前的一个词
M-d          移除光标后的一个词

C-k          移除从光标到“行尾”间的字符
M-k          移除从光标到“句尾”间的字符
</code></pre><p>【可能你已经注意到了“删除（delete）”和“移除（kill）”的用词区别，后<br>文会有详细说明。】</p>
<p>注意“<del> 和 C-d”还有“M-<del> 和 M-d”是根据前述惯例从 C-f和 M-f 衍生<br>出来的（其实<del>不是控制字符，我们先忽略这一点）。C-k和 M-k 的关系在<br>某种程度上与 C-e 和 M-e 一样――如果把“一行”和“一句”作一个类比的话。</del></del></del></p>
<p>你也可以用一种通用的办法来移除缓冲区里的任何一部分：首先把光标移动到你<br>想要移除的区域的一端，然后按 C-<spc>（<spc>指空格）【注意，C-<spc> 往<br>往被中文用户设定成输入法热键，如果这样，C-<spc> 就被系统拦截而无法传递<br>给 Emacs 了，在这种情况下可以使用C-@。】，然后将光标移动到你准备移除的<br>文字的另一端。这个时候， Emacs 会高亮光标和你按下 C-<spc> 之间的文本。<br>最后，按下 C-w 。这样就可以把位于这两点之间的所有文字移除了。</spc></spc></spc></spc></spc></p>
<blockquote>
<blockquote>
<p>移动光标到上一段开头的“你”字。<br>输入 C-<spc> 。Emacs 应该会在屏幕的下方显示一个“Mark set”的消息。<br>移动光标到第二行中的“端”字。<br>输入 C-w，从“你”开始到“端”之前的文字被全部移除。</spc></p>
</blockquote>
</blockquote>
<p>注意,“移除（kill）”和“删除（delete）”的不同在于被移除的东西可以被重新<br>插入（在任何位置），而被删除的就不能使用相同的方法重新插入了（不过可以<br>通过撤销一个删除命令来做到，后文会提到）。【实际上，移除掉的东西虽然看<br>起来“消失”了，但实际上被 Emacs 记录了下来，因此还可以找回来；而删除掉<br>的东西虽然也可能还在内存里，但是已经被 Emacs“抛弃”了，所以就找不回来<br>了。】重新插入被移除的文字称为“召回（yank）”。一般而言，那些可能消除很<br>多文字的命令会把消除掉的文字记录下来（它们被设定成了“可召回”），而那些<br>只消除一个字符或者只消除空白的命令就不会记录被消除的内容（自然你也就无<br>法召回了）。</p>
<blockquote>
<blockquote>
<p>移动光标到一非空白行的行头，然后输入 C-k 移除那一行上的文字。</p>
<p>再次 C-k，你可以看到它移除了跟在那一行后面的换行符。</p>
</blockquote>
</blockquote>
<p>注意，单独的 C-k 会把一行的内容移除，而第二个 C-k 则会移除换行符，并使<br>其后所有的行都向上移动。C-k 处理数字参数的方式很特别，它会把参数指定的<br>那么多行连同其后的换行符一起移除，而不仅仅是重复 C-k 而已。比如 C-u 2<br>C-k 会把两行以及它们的换行符移除；而如果只是输入 C-k 两次显然不是这个结<br>果。</p>
<p>重新插入被移除的文字恢复的动作称为“召回（yanking）”。（就好像把别人从你身边<br>移走的东西又猛力地拉回来。）你可以在你删除文字的地方召回，也可以在别的<br>地方召回，还可以多次召回同样的文字以得到它的多个拷贝。很多其它的编辑器<br>把移除和召回叫做“剪切”和“粘贴” （详情可见 Emacs 使用手册里的术语表）。</p>
<p>召回的命令是 C-y。它会在光标所在处插入你最后移除的文字。</p>
<blockquote>
<blockquote>
<p>试试看，输入 C-y 将文字召回。</p>
</blockquote>
</blockquote>
<p>如果你一次连按了好几下 C-k，那么所有被移除的行会被存储在一起，只要一个<br>C-y 就可以把它们都召回。</p>
<blockquote>
<blockquote>
<p>在这里试试，连续按几次 C-k。</p>
</blockquote>
</blockquote>
<p>现在再来恢复刚刚被我们移除的文字：</p>
<blockquote>
<blockquote>
<p>按 C-y。然后把光标往下移动几行，再按一次 C-y。<br>   现在你应该知道怎么复制文字了。</p>
</blockquote>
</blockquote>
<p>C-y 可以召回最近一次移除的内容，那如何召回前几次移除的内容呢？它们当然<br>没有丢，你可以用 M-y 来召回它们。在用 C-y 召回最近移除的文字之后，紧接<br>着再按 M-y 就可以召回再前一次被移除的内容，再按一次 M-y 又可以召回再上<br>一次的……连续使用 M-y 直到找到你想要召回的东西，然后什么也不用做，继续<br>编辑就行了。</p>
<p>如果连续按 M-y 很多次，你可能会回到起始点，也就是最近移除的文字。<br>【看得出这实际上是一个环。】</p>
<blockquote>
<blockquote>
<p>移除一行，移动一下光标，然后再移除另外一行。<br>   按 C-y 将第二次移除的那行召回来。<br>   紧接着再按 M-y，它将会被第一次移除的那行取代。<br>   试着再按几下 M-y 看看会发生什么。<br>   再继续，直到第二行被召回来，然后再做个几次。<br>   如果感兴趣，你可以试着给 M-y 指定一个正的或负的参数。</p>
</blockquote>
</blockquote>
<h2 id="撤销（UNDO）"><a href="#撤销（UNDO）" class="headerlink" title="* 撤销（UNDO）"></a>* 撤销（UNDO）</h2><p>如果你修改了一段文字，又觉得改得不好，可以用 undo 命令进行撤销：C-/。</p>
<p>通常 C-/ 会消除一个命令所造成的所有改变；如果你在一行中连续多次地使用<br>C-/，你会把以前的命令也依次撤销。</p>
<p>但是有两个例外：<br>1） 没有改变文字的命令不算（包括光标移动命令和滚动命令）<br>2） 从键盘输入的字符以组为单位――每组最多 20 个字符――来进行处理。<br>    （这是为了减少你在撤销“插入文字”动作时需要输入 C-/ 的次数）</p>
<blockquote>
<blockquote>
<p>用 C-k 将这一行移除，然后输入 C-/ ，它会再次出现。</p>
</blockquote>
</blockquote>
<p>C-<em> 也是撤销命令；它的作用跟 C-/ 一样，但是它比较容易多次输入。在<br>某些终端上，输入 C-/ 实际上向 Emacs 发送的是 C-</em> 。<br>另外， C-x u 和 C-/ 完全一样，但是按起来有些麻烦。</p>
<p>数字参数对于 C-/ 、 C-_ 和 C-x u 的意义是执行撤销的重复次数。</p>
<h2 id="文件（FILE）"><a href="#文件（FILE）" class="headerlink" title="* 文件（FILE）"></a>* 文件（FILE）</h2><p>想保存工作成果就要记得存盘，否则一旦退出 Emacs 你编辑的文字就会丢失。要<br>存盘，就要在编辑前“寻找”到一个存盘文件。（这个过程通常也被称为“访问”<br>文件。）</p>
<p>寻找到一个文件意味着你可以在 Emacs 里查看这个文件的内容。从许多角度看，<br>这就等于你在直接编辑这个文件，只是你所做的修改只有在“存盘”的时候才会<br>被写入文件。也正因为如此，你可以丢弃一个写到一半的文件而不必把这个残缺<br>文件也保存到计算机上。在存盘的时候，Emacs 会把存盘前的文件重命名保存，<br>以防你改完之后又想反悔。</p>
<p>在屏幕的下方，你应该能够看到头部有短线“-”的一行，行首通常是一些诸如“<br>-:— TUTORIAL.cn”的文字，这些文字代表了你当前正在访问的文件。比如你现<br>在正在访问的文件是对 Emacs 快速指南的一份临时拷贝，叫做“TUTORIAL.cn”。<br>每当Emacs 寻找到一个文件，文件名就会出现在这个位置。</p>
<p>寻找文件的命令有一个特点，那就是你必须给出文件名。我们称这个命令“读入<br>了一个参数”（在这里，这个参数显然就是文件名）。在你输入这条命令之后：</p>
<pre><code>C-x C-f   寻找一个文件
</code></pre><p>Emacs 会提示你输入文件名。你输入的文件名会出现在屏幕最底端的一行，这一<br>行被称为小缓冲（minibuffer），在小缓冲里你可以使用通常的 Emacs 编辑命令<br>来编辑文件名。</p>
<p>在小缓冲里输入文件名（其实输入其它东西也一样）时可以用 C-g 取消。</p>
<blockquote>
<blockquote>
<p>输入 C-x C-f，然后输入 C-g<br>   这会关掉小缓冲，同时也会取消使用小缓冲的 C-x C-f 命令。<br>   当然了，你也没有找任何文件。</p>
</blockquote>
</blockquote>
<p>用 <return> 结束文件名的输入。之后，小缓冲会消失，C-x C-f 将会去寻找你<br>指定的文件。小缓冲在 C-x C-f 命令结束之后也会消失。</return></p>
<p>文件被显示在了屏幕上，你可以开始编辑了。存盘用这条命令：</p>
<pre><code>C-x C-s   储存这个文件
</code></pre><p>这条命令把 Emacs 中的文字存储到文件中。第一次存盘的时候 Emacs 会将原文<br>件重命名以备份。重命名的规则通常是在原文件名之后添加一个“~”字符。<br>【对许多人来说，这是一个烦人的特性，关掉文件备份可以用如下命令：<br>  M-x customize-variable <return> make-backup-files <return>】</return></return></p>
<p>存盘结束后，Emacs 会显示写入文件的文件名。你最好养成经常存盘的习惯，这<br>可以减少系统崩溃和死机给你带来的损失（也可参见下面的“自动保存”一节）。</p>
<blockquote>
<blockquote>
<p>输入 C-x C-s TUTORIAL.cn <return> 。<br>   这将会把该指南保存为一个名为 TUTORIAL.cn 的文件，并且在屏幕的下方显<br>   示一条消息：“Wrote …TUTORIAL.cn”。</return></p>
</blockquote>
</blockquote>
<p>你不但可以寻找一个已有的文件来查看或编辑，还可以寻找一个不存在的文件。<br>实际上这正是 Emacs 创建新文件的方法：找到不存在的新文件。事实上，只有<br>在存盘的时候，Emacs 才会真正创建这个文件。而在这之后的一切就跟编辑一个<br>已有文件没有区别了。</p>
<h2 id="缓冲区（BUFFER）"><a href="#缓冲区（BUFFER）" class="headerlink" title="* 缓冲区（BUFFER）"></a>* 缓冲区（BUFFER）</h2><p>你可以用 C-x C-f 找到并打开第二个文件，但第一个文件仍然在 Emacs 中。要<br>切回第一个文件，一种办法是再用一次 C-x C-f。这样，你就可以在 Emacs 中同<br>时打开多个文件。</p>
<p>Emacs 把每个编辑中的文件都放在一个称为“缓冲区（buffer）”的地方。每寻<br>找到一个文件，Emacs 就在其内部开辟一个缓冲区。用下面的命令可以列出当前<br>所有的缓冲区：</p>
<pre><code>C-x C-b   列出缓冲区
</code></pre><blockquote>
<blockquote>
<p>现在就试一下 C-x C-b</p>
</blockquote>
</blockquote>
<p>观察一下缓冲区是如何被命名的，它很可能跟与其对应的文件同名。实际上，一<br>个 Emacs 窗格里的任何文字都是某个缓冲区的一部分。</p>
<blockquote>
<blockquote>
<p>输入 C-x 1 离开缓冲区列表</p>
</blockquote>
</blockquote>
<p>不管存在多少缓冲区，任何时候都只能有一个“当前”缓冲区，也就是你正在编<br>辑的这个。如果你想编辑其它的缓冲区，就必须“切换”过去。上面讲过，用<br>C-x C-f 是一种办法。不过还有一个更简单的办法，那就是用 C-x b。用这条命<br>令，你必须输入缓冲区的名称。</p>
<blockquote>
<blockquote>
<p>通过输入 C-x C-f foo <return> 创建一个名为“foo”的文件。<br>   然后输入 C-x b TUTORIAL.cn <return> 回到这里。</return></return></p>
</blockquote>
</blockquote>
<p>大多数情况下，缓冲区与跟其对应的文件是同名的（不包括目录名），不过这也<br>不是绝对的。用 C-x C-b 得到的缓冲区列表总是显示缓冲区名。</p>
<p>缓冲区未必有对应文件。显示缓冲区列表的缓冲区（叫做“<em>Buffer List</em>”）就<br>是这样。这个 TUTORIAL.cn 缓冲区起初没有对应的文件，但是现在有了，因为<br>在前一节你输入了 C-x C-s ， 将它保存成了一个文件。</p>
<p>“<em>Messages</em>”缓冲区也没有对应文件，这个缓冲区里存放的都是在 Emacs 底部<br>出现的消息。</p>
<blockquote>
<blockquote>
<p>输入 C-x b <em>Messages</em> <return> 瞅瞅消息缓冲区里都有什么东西。<br>   然后再输入 C-x b TUTORIAL.cn <return> 回到这里。</return></return></p>
</blockquote>
</blockquote>
<p>如果你对某个文件做了些修改，然后切换到另一个文件，这个动作并不会帮你把<br>前一个文件存盘。对第一个文件的修改仍然仅存在于 Emacs 中，也就是在它对<br>应的缓冲区里。并且，对第二个文件的修改也不会影响到第一个文件。这很有用，<br>但也意味着你需要一个简便的办法来保存第一个文件的缓冲区。先切换回那个缓<br>冲区，再用 C-x C-s 存盘，太麻烦了。你需要一个更简便的方法，而 Emacs 已<br>经为你准备好了：</p>
<pre><code>C-x s   保存多个缓冲区
</code></pre><p>C-x s 会找出所有已被修改但尚未存盘的缓冲区，然后向你逐个询问：是否需要<br>存盘？</p>
<blockquote>
<blockquote>
<p>插入一行文字，然后输入 C-x s。<br>   它应该会问你，是否要储存名为 TUTORIAL.cn 的缓冲区？<br>   按“y”告诉它你想存盘。</p>
</blockquote>
</blockquote>
<h2 id="命令集扩展（EXTENDING-THE-COMMAND-SET）"><a href="#命令集扩展（EXTENDING-THE-COMMAND-SET）" class="headerlink" title="* 命令集扩展（EXTENDING THE COMMAND SET）"></a>* 命令集扩展（EXTENDING THE COMMAND SET）</h2><p>Emacs 的命令就像天上的星星，数也数不清。把它们都对应到 CONTROL 和 META<br>组合键上显然是不可能的。Emacs 用扩展（eXtend）命令来解决这个问题，扩展<br>命令有两种风格：</p>
<pre><code>C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。
M-x     命令名扩展。M-x 之后输入一个命令名。
</code></pre><p>很多扩展命令都相当有用，虽然与你已经学过的命令比起来，他们可能不那么常<br>用。我们早已经见过一些扩展命令了，比如用 C-x C-f 寻找文件和用 C-x C-s<br>保存文件；退出 Emacs 用的 C-x C-c 也是扩展命令。（不用担心退出 Emacs 会<br>给你带来什么损失，Emacs 会在退出之前提醒你存盘的。）</p>
<p>如果你使用图形界面，你不需要任何特殊的命令来切换 Emacs 和其他应用程序。<br>你可以使用鼠标或者窗口管理器的命令。然而，如果你使用只能同时显示一个应<br>用程序的文本终端，你需要“挂起” Emacs ，以切换到其他的应用程序。</p>
<p>C-z 可以暂时离开 Emacs――当然，你还可以再回来。在允许 C-z 的系统中，C-z<br>会把 Emacs“挂起”，也就是说，它会回到 shell但不杀死 Emacs 的进程。在常<br>用的 shell 中，通常可以用“fg”或者“%emacs”命令再次回到 Emacs 中。</p>
<p>你最好在打算退出登陆的时候再用 C-x C-c。在把 Emacs 当做一个临时的编辑<br>器的时候（比如被一个邮件处理程序调用），也可以用 C-x C-c 退出。</p>
<p>C-x 的扩展命令有很多，下面列出的是你已经学过的：</p>
<pre><code>C-x C-f         寻找文件。
C-x C-s         保存文件。
C-x C-b         列出缓冲区。
C-x C-c         离开 Emacs。
C-x 1           关掉其它所有窗格，只保留一个。
C-x u           撤销。
</code></pre><p>用命令名扩展的命令通常并不常用，或只用在部分模式下。比如<br>replace-string（字符串替换）这个命令，它会把一个字符串替换成另一个。在<br>输入 M-x 之后，Emacs 会在屏幕底端向你询问并等待你输入命令名。如果你想<br>输入“replace-string”，其实只需要敲“repl s<tab>”就行了，Emacs 会帮你自<br>动补齐。输入完之后按 <return> 提交。</return></tab></p>
<p>字符串替换命令需要两个参数――被替换的字符串和用来替换它的字符串。每个<br>参数的输入都以换行符来结束。</p>
<blockquote>
<blockquote>
<p>将光标移到本行下面第二行的空白处，然后输入<br>   M-x repl s<return>changed<return>altered<return>。</return></return></return></p>
</blockquote>
</blockquote>
<p>   【以下保留一行原文，以应练习之需：】<br>   Notice how this line has changed: you’ve replaced…</p>
<p>请注意这一行的变化：在光标之后的范围内，你已经将“changed”这个词――不<br>论它在哪里出现――全部用“altered”替换掉了。</p>
<h2 id="自动保存（AUTO-SAVE）"><a href="#自动保存（AUTO-SAVE）" class="headerlink" title="* 自动保存（AUTO SAVE）"></a>* 自动保存（AUTO SAVE）</h2><p>如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你<br>所做的修改就很可能会丢失。为了避免这样的不幸发生，Emacs 会定期将正在编<br>辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个<br>“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫<br>“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。</p>
<p>所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保<br>存文件）然后输入 M-x recover file <return> 来恢复你的自动保存文件。在<br>提示确认的时候，输入 yes<return>。</return></return></p>
<h2 id="回显区（ECHO-AREA）"><a href="#回显区（ECHO-AREA）" class="headerlink" title="* 回显区（ECHO AREA）"></a>* 回显区（ECHO AREA）</h2><p>如果 Emacs 发现你输入多字符命令的节奏很慢，它会在窗格的下方称为“回显区”<br>的地方给你提示。回显区位于屏幕的最下面一行。</p>
<h2 id="状态栏（MODE-LINE）"><a href="#状态栏（MODE-LINE）" class="headerlink" title="* 状态栏（MODE LINE）"></a>* 状态栏（MODE LINE）</h2><p>位于回显区正上方的一行被称为“状态栏”。状态栏上会显示一些信息，比如：</p>
<p> -:**- TUTORIAL.cn 63% L749 (Fundamental)</p>
<p>状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息。</p>
<p>你应该知道文件名的意思吧？就是你找到的那个文件嘛。-NN%– 显示的是光标在<br>全文中的位置。如果位于文件的开头，那么就显示 –Top– 而不是 –00%–；如<br>果位于文件的末尾，就显示 –Bot–。如果文件很小，一屏就足以显示全部内容，<br>那么状态栏会显示 –All–。</p>
<p>“L” 和其后的数字给出了光标所在行的行号。</p>
<p>最开头的星号（*）表示你已经对文字做过改动。刚刚打开的文件肯定没有被改动<br>过，所以状态栏上显示的不是星号而是短线（-）。</p>
<p>状态栏上小括号里的内容告诉你当前正在使用的编辑模式。缺省的模式是<br>Fundamental，就是你现在正在使用的这个。它是一种“主模式”。</p>
<p>Emacs 的主模式林林总总。有用来编辑程序代码的――比如 Lisp 模式；也有用<br>来编辑各种自然语言文本的――比如 Text 模式。任何情况下只能应用一个主模<br>式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方。</p>
<p>主模式通常会改变一些命令的行为。比方说，不管编辑什么语言的程序代码，你<br>都可以用一个相同的命令来添加注释。但是在不同的语言中注释的语法往往是不<br>同的，这时不同的主模式就会用各自不同的语法规则来添加注释。主模式都是可<br>以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental<br>模式。</p>
<p>编辑自然语言文本――比如现在――应该用 Text 模式。</p>
<blockquote>
<blockquote>
<p>输入 M-x text-mode <return>。</return></p>
</blockquote>
</blockquote>
<p>别担心，什么都没变。不过细心一些可以发现，M-f 和 M-b 现在把单引号（’）<br>视为词的一部分了。而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号<br>视为分隔单词的符号。</p>
<p>主模式通常都会搞一些类似的小动作，因为很多命令其实完成的是“相同的工<br>作”，只是在不同环境下会有不同的工作方式而已。【所谓“求同存异”，在<br>Emacs 里得到了很好的体现】</p>
<p>用 C-h m 可以查看当前主模式的文档。</p>
<blockquote>
<blockquote>
<p>把光标移动到下一行。<br>用 C-l C-l 将本行带到屏幕的最上方。<br>输入 C-h m，看看 Text 模式与 Fundamental 模式有哪些不同。<br>输入 C-x 1 关掉文档窗格。</p>
</blockquote>
</blockquote>
<p>主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minor<br>mode）存在。辅模式并不能替代主模式，而是提供一些辅助的功能。每个辅模式<br>都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关。所以你可以不<br>使用辅模式，也可以只使用一个或同时使用多个辅模式。</p>
<p>有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文本<br>的时候。启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行。</p>
<p>用 M-x auto-fill-mode <return> 启动自动折行模式。再用一次这条命令，自<br>动折行模式会被关闭。也就是说，如果自动折行模式没有被开启，这个命令会开<br>启它；如果已经开启了，这个命令会关闭它。所以我们说，这个命令可以用来<br>“开关（toggle）”模式。</return></p>
<blockquote>
<blockquote>
<p>现在输入 M-x auto-fill-mode <return>。然后随便敲点什么，直到你看到它<br>   分成两行。你必须敲一些空格，因为 Auto Fill 只在空白处进行断行。<br>   【输入空格对英文来说是必须的，而对中文则不必。】</return></p>
</blockquote>
</blockquote>
<p>行边界通常被设定为 70 个字符【这里指英文字符】，你可以用 C-x f 命令配合<br>数字参数来重新设定它。</p>
<blockquote>
<blockquote>
<p>输入 C-x f 并传递参数 20： C-u 2 0 C-x f。<br>   然后输入一些文字，观察 Emacs 的自动折行动作<br>   最后再用 C-x f 将边界设回 70。</p>
</blockquote>
</blockquote>
<p>如果你在段落的中间做了一些修改，那么自动折行模式不会替你把整个段落重新<br>折行，你需要用 M-q 手动折行。注意，光标必须位于你需要折行的那一段里。</p>
<blockquote>
<blockquote>
<p>移动光标到前一段中，然后输入 M-q。</p>
</blockquote>
</blockquote>
<h2 id="搜索（SEARCHING）"><a href="#搜索（SEARCHING）" class="headerlink" title="* 搜索（SEARCHING）"></a>* 搜索（SEARCHING）</h2><p>Emacs 可以向前或向后搜索字符串（“字符串”指的是一组连续的字符）。搜索命<br>令是一个移动光标的命令：搜索成功后，光标会停留在搜索目标出现的地方。</p>
<p>Emacs 的搜索命令是“渐进的（incremental）”。意思是搜索与输入同时进行：<br>你在键盘上一字一句地输入搜索词的过程中，Emacs 就已经开始替你搜索了。</p>
<p>C-s 是向前搜索，C-r 是向后搜索。不过手别这么快！别着急试。</p>
<p>在按下 C-s 之后，回显区里会有“I-search”字样出现，表明目前 Emacs 正处<br>于“渐进搜索”状态，并等待你输入搜索字串。按 <return> 可以结束搜索。</return></p>
<blockquote>
<blockquote>
<p>输入 C-s 开始一个搜索。注意敲慢一点，一次输入一个字符。<br>   慢慢输入“cursor”这个词，每敲一个字都停顿一下并观察光标。<br>   现在你应该已曾经找到“cursor”这个词了。<br>再按一次 C-s，搜索下一个“cursor”出现的位置。<br>现在按四次 <del> ，看看光标是如何移动的。<br>敲 <return> 结束搜索。</return></del></p>
</blockquote>
</blockquote>
<p>看仔细了么？在一次渐进式搜索中，Emacs 会尝试跳到搜索目标出现的位置。要<br>跳到下一个命中位置，就再按一次 C-s。如果找不到目标，Emacs 会发出“哔”<br>的一声，告诉你搜索失败。在整个过程中，都可以用 C-g 来终止搜索。【你会发<br>现 C-g 会让光标回到搜索开始的位置，而 <return> 则让光标留在搜索结果上，<br>这是很有用的功能。】</return></p>
<p>在渐进式搜索中，按 <del> 会“撤回”到最近一次搜索的命中位置。如果之前没<br>有一个命中， <del> 会抹去搜索字符串中的最后一个字符。比如你已经输入了<br>“c”，光标就停在“c”第一次出现的位置，再输入“u”，光标停在“cu”第一次出现<br>的位置，这时再按 <del> ，“u”就从搜索字串中消失了，然后光标会回到“c”第<br>一次出现的位置。</del></del></del></p>
<p>另外，如果你在搜索的时候输入了 control 或者 meta 组合键的话，搜索可能会<br>结束。（也有例外，比如 C-s 和 C-r 这些用于搜索的命令。）</p>
<p>前面说的都是“向下”搜索，如果想“向上”搜索，可以用 C-r。C-r 与 C-s<br>相比除了搜索方向相反之外，其余的操作都一样。</p>
<h2 id="多窗格（MULTIPLE-WINDOWS）"><a href="#多窗格（MULTIPLE-WINDOWS）" class="headerlink" title="* 多窗格（MULTIPLE WINDOWS）"></a>* 多窗格（MULTIPLE WINDOWS）</h2><p>Emacs 的迷人之处很多，能够在屏幕上同时显示多个窗格就是其中之一。</p>
<blockquote>
<blockquote>
<p>移动光标到这一行，然后输入 C-l C-l。</p>
<p>现在输入 C-x 2，它会将屏幕划分成两个窗格。<br>   这两个窗格里显示的都是本篇快速指南，而光标则停留在上方的窗格里。</p>
<p>试试用 C-M-v 滚动下方的窗格。<br>   （如果你并没有 META 键，用 ESC C-v 也可以。）<br>   【向上滚动是 C-M-S-v，也就是同时按住 CONTROL、META 和 SHIFT 再按 v】</p>
<p>输入 C-x o（“o”指的是“其它（other）”），<br>   将光标转移到下方的窗格。</p>
<p>在下方的窗格中，用 C-v 和 M-v 来滚动。<br>   同时继续在上方的窗格里阅读这些指导。</p>
<p>再输入 C-x o 将光标移回到上方的窗格里。<br>   光标会回到它在上方窗格中原本所在的位置。</p>
</blockquote>
</blockquote>
<p>连续使用 C-x o 可以遍历所有窗格。“被选中的窗格”，也就是绝大多数的编辑<br>操作所发生的地方，是在你不打字时闪烁光标的那个窗格。其他的窗格有它们自<br>己的光标位置； 如果你在图形界面下运行 Emacs ，这些光标是镂空的长方形。</p>
<p>当你在一个窗格中编辑，但用另一个窗格作为参考的时候，C-M-v 是很有用的命<br>令。无需离开被选中的窗格，你就可以用 C-M-v 命令滚动另外一个窗格中的文<br>字。【比如翻译和校对就很适合用这种方式进行。】</p>
<p>C-M-v 是一个 CONTROL-META 组合键。如果你有 META （或 Alt）键的话，可以<br>同时按住CONTROL 和 META 键并输入 v。CONTROL 和 META 键先按哪个都可以，<br>因为它们只是用来“修饰（modify）”你输入的字符的。</p>
<p>如果你并没有 META 键，你也可以用 ESC 来代替，不过这样的话就要注意按键顺<br>序了：你必须先输入 ESC ，然后再输入 CONTROL-v。CONTROL-ESC v 是没用的，<br>因为 ESC 本身是一个字符键，而不是一个修饰键（modifier key）。</p>
<blockquote>
<blockquote>
<p>（在上方窗格里）输入 C-x 1 关掉下方窗格。</p>
</blockquote>
</blockquote>
<p>（如果你在下方的窗格里输入 C-x 1，那么就会关掉上方的窗格。你可以把这个<br>命令看成是“只保留一个窗格”――就是我们正在编辑的这个。）</p>
<p>不同的窗格可以显示不同的缓冲区。如果你在一个窗格里用 C-x C-f 打开了一个<br>文件，另一个窗格并不会发生什么变化。任何一个窗格里都可以用来打开文件。</p>
<p>用下面的方法可以在一个新开窗格里打开文件：</p>
<blockquote>
<blockquote>
<p>输入 C-x 4 C-f，紧跟着输入一个文件名，再用 <return> 结束。<br>   可以看到你指定的文件出现在下方的窗格中，同时光标也跳到了那里。</return></p>
<p>输入 C-x o 回到上方的窗格，然后再用 C-x 1 关掉下方窗格。</p>
</blockquote>
</blockquote>
<h2 id="多窗口（MULTIPLE-FRAMES）"><a href="#多窗口（MULTIPLE-FRAMES）" class="headerlink" title="* 多窗口（MULTIPLE FRAMES）"></a>* 多窗口（MULTIPLE FRAMES）</h2><p>Emacs 可以创建多个窗口。窗口由许多窗格以及菜单、滚动条、回显区等组成。<br>在图形界面下，多个窗口可以同时显示出来。在文本终端中，只能同时显示一个<br>窗口。</p>
<blockquote>
<blockquote>
<p>输入 M-x make-frame <return>。<br> 可以看到一个新的窗口出现在了你的屏幕上。</return></p>
</blockquote>
</blockquote>
<p>你可以在新的窗口里做最初的窗口里可以做的任何事情。第一个窗口没有什么特<br>别的。</p>
<blockquote>
<blockquote>
<p>输入 M-x delete-frame <return>.<br> 这个命令将会关闭选中的窗口。</return></p>
</blockquote>
</blockquote>
<p>你也可以通过图形系统来关闭某个窗口（通常是在窗口上面的某个角落里的一个<br>“X”按钮）。如果你关闭的是 Emacs 进程的最后一个窗口， Emacs 将会退出。</p>
<h2 id="递归编辑（RECURSIVE-EDITING-LEVELS）"><a href="#递归编辑（RECURSIVE-EDITING-LEVELS）" class="headerlink" title="* 递归编辑（RECURSIVE EDITING LEVELS）"></a>* 递归编辑（RECURSIVE EDITING LEVELS）</h2><p>有时候你会进入所谓的“递归编辑”。递归编辑状态由位于状态栏的方括号所指<br>示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到<br>[(Fundamental)]，而不是 (Fundamental)。【比如在用 M-% 进行交互式替换的<br>时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模式，<br>这就是所谓的递归编辑。】</p>
<p>离开递归编辑可以用 ESC ESC ESC。这是一个最通用的“离开”命令，你甚至可<br>以使用它来关掉多余的窗格，或者离开小缓冲。</p>
<blockquote>
<blockquote>
<p>输入 M-x 进入小缓冲；然后输入 ESC ESC ESC 离开。</p>
</blockquote>
</blockquote>
<p>你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的<br>命令和其参数（arguments）。</p>
<h2 id="获得更多帮助（GETTING-MORE-HELP）"><a href="#获得更多帮助（GETTING-MORE-HELP）" class="headerlink" title="* 获得更多帮助（GETTING MORE HELP）"></a>* 获得更多帮助（GETTING MORE HELP）</h2><p>本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水，不至于束手无策望洋兴<br>叹。有关 Emacs 的话题可谓汗牛充栋，这里自然是难尽万一。不过 Emacs 很理<br>解你求知若渴的心情，因为它提供的强大功能实在是太多了。为此，Emacs 提供<br>了一些命令来查看 Emacs 的命令文档，这些命令都以 CONTROL-h 开头，这个字<br>符也因此被称为“帮助（Help）字符”。</p>
<p>要使用帮助（Help）功能，请先输入 C-h，然后再输入一个字符以说明你需要什<br>么帮助。如果你连自己到底需要什么帮助都不知道，那么就输入 C-h ?，Emacs<br>会告诉你它能提供了哪些帮助。如果你按了 C-h 又想反悔，可以用 C-g 取消。</p>
<p>（如果你按 C-h 之后没有任何帮助信息显示出来，那么试试 F1 键或者 M-x help <return> 。）</return></p>
<p>最基本的帮助功能是 C-h c。输入 C-h c 之后再输入一个组合键，Emacs 会给出<br>这个命令的简要说明。</p>
<blockquote>
<blockquote>
<p>输入 C-h c C-p。</p>
</blockquote>
</blockquote>
<p>显示的消息应该会是这样：</p>
<pre><code>C-p runs the command previous-line
</code></pre><p>这条消息显示了 C-p 命令对应的函数名。命令的功能由函数完成，所以函数名<br>本身也可以被看成是最简单的文档――至少对于你已经学过的命令来说，它们的函<br>数名足以解释它们的功能了。</p>
<p>多字符命令一样可以用 C-h c 来查看。</p>
<p>想得到更多的信息，请把 C-h c 换成 C-h k 试试看。</p>
<blockquote>
<blockquote>
<p>输入 C-h k C-p。</p>
</blockquote>
</blockquote>
<p>上面的命令会新打开一个 Emacs 窗格以显示函数的名称及其文档。你读完之后可<br>以用 C-x 1 关掉这个帮助窗格。当然你并不需要立即这样做，你完全可以先在编<br>辑窗格里做点别的事情，然后再关掉帮助窗格。</p>
<p>还有一些其它有用的 C-h 命令：</p>
<p>   C-h f        解释一个函数。需要输入函数名。</p>
<blockquote>
<blockquote>
<p>试试看，输入 C-h f previous-line <return>。<br>   Emacs 会给出它所知道的所有有关“实现 C-p 命令功能的函数”的信息。</return></p>
</blockquote>
</blockquote>
<p>C-h v 用来显示 Emacs 变量的文档。Emacs 变量可以被用来“定制 Emacs 的行<br>为”。同样，你需要输入变量的名称。</p>
<p>   C-h a        相关命令搜索（Command Apropos）。<br>                输入一个关键词然后 Emacs 会列出所有命令名中包含此关键词<br>                的命令。这些命令全都可以用 M-x 来启动。对于某些命令来说，<br>                相关命令搜索还会列出一两个组合键。</p>
<blockquote>
<blockquote>
<p>输入 C-h a file <return>。</return></p>
</blockquote>
</blockquote>
<p>Emacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中含<br>有“file”的命令。你可以看到像“C-x C-f”这样的组合键显示在“find-file”<br>这样的命令名的旁边。</p>
<blockquote>
<blockquote>
<p>用 C-M-v 来回滚动 help 窗格，多试几次。</p>
<p>输入 C-x 1 来删除 help 窗格。</p>
</blockquote>
</blockquote>
<p>   C-h i        阅读手册（也就是通常讲的 Info）。<br>                这个命令会打开一个称为“<em>info</em>”的特殊缓冲区，在那里，<br>                你可以阅读安装在系统里的软件包使用手册。要读 Emacs 的使<br>                用手册，按 m emacs <return> 就可以了。如果你之前从没用<br>                过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使<br>                用指南。在看完本快速指南之后，Emacs Info 会成为你的主要<br>                参考文档。</return></p>
<h2 id="更多精彩（MORE-FEATURES）"><a href="#更多精彩（MORE-FEATURES）" class="headerlink" title="* 更多精彩（MORE FEATURES）"></a>* 更多精彩（MORE FEATURES）</h2><p>想学习更多的使用技巧，Emacs 使用手册（manual）值得一读。你可以读纸版的<br>书，也可以在 Emacs 中读（可以从 Help 菜单进入或者按 C-h r）。提两个你<br>可能会很感兴趣的功能吧，一个是可以帮你少敲键盘的 completion（自动补全），<br>另一个是方便文件处理的 dired（目录编辑）。</p>
<p>Completion 可以替你节省不必要的键盘输入。比如说你想切换到 <em>Message</em> 缓<br>冲区，你就可以用 C-x b *M<tab> 来完成。只要 Emacs 能够根据你已经输入的<br>文字确定你想要输入的内容，它就会自动帮你补齐。Completion 也可用于命令<br>名和文件名。有关 Completion 的详细说明可以在 Emacs Info 中的<br>“Completion”一节里找到。</tab></p>
<p>Dired 能够在一个缓冲区里列出一个目录下的所有文件（可以选择是否也列出子<br>目录），然后你可以在这个文件列表上完成对文件的移动、访问、重命名或删除<br>等等操作。Dired 也在 Emacs 使用手册中有详细介绍，参见“Dired”一节。</p>
<p>Emacs 使用手册里还有许许多多的精彩功能等着你来了解。</p>
<h2 id="总结（CONCLUSION）"><a href="#总结（CONCLUSION）" class="headerlink" title="* 总结（CONCLUSION）"></a>* 总结（CONCLUSION）</h2><p>要退出 Emacs 请用 C-x C-c。</p>
<p>本文完全是为零起点新手所写的起步教程。如果你觉得哪里还看不明白，千万不<br>要怀疑自己，那一定是我们没有写好。我们永远欢迎你的不满和抱怨。</p>
<h2 id="翻译（TRANSLATION）"><a href="#翻译（TRANSLATION）" class="headerlink" title="* 翻译（TRANSLATION）"></a>* 翻译（TRANSLATION）</h2><p>翻译：孙一江 <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#58;&#x73;&#x75;&#x6e;&#121;&#x69;&#106;&#105;&#97;&#x6e;&#103;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#x73;&#x75;&#x6e;&#121;&#x69;&#106;&#105;&#97;&#x6e;&#103;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a><br>维护：薛富侨 <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#120;&#x66;&#x71;&#x2e;&#102;&#x72;&#x65;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#120;&#x66;&#x71;&#x2e;&#102;&#x72;&#x65;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a><br>校对：水木社区（www.newsmth.net）Emacs 板众多网友及众多 Emacs 中文用户</p>
<p>Emacs 快速指南（Tutorial）早有两个刘昭宏的中文译本，繁简各一。其简体版本<br>（TUTORIAL.cn）基本由繁体版本（TUTORIAL.zh）经词语替换而得。然而繁简中文<br>不仅在用词习惯上有所不同，更有诸多表达方式与句法方面的差异，因此一直以来<br>用户使用 TUTORIAL.cn 都会略觉生硬和晦涩。这次重新翻译 TUTORIAL.cn 的动机<br>正是源于这种体验，希望我们的工作能够让本文更好地发挥其作用。TUTORIAL.zh<br>的译文质量很高，在翻译过程中给予过我们许多借鉴和参考，在此对刘昭宏的工作<br>表示感谢。</p>
<p>翻译过程中最大的挑战莫过于术语译词的选择了。经过水木社区 Emacs 板热心<br>网友小范围内的讨论，我们选择了现在的译法。用户的广泛参与是自由软件生命<br>力的源泉，所以如果你有任何建议、勘误或想法，请用你喜欢的方式向我们提出。<br>你可以通过电子邮件直接联系维护者，也可以放到 GNU Emacs 的开发邮件列表<br>或者水木社区的 Emacs 板上进行讨论。</p>
<p>下面列出主要术语的译词对照，并给出注释说明：</p>
<pre><code>command               命令
cursor                光标
scrolling             滚动
numeric argument      数字参数
window                窗格 [1]
insert                插入
delete                删除 [2]
kill                  移除 [2]
yank                  召回 [2]
undo                  撤销
file                  文件
buffer                缓冲区
minibuffer            小缓冲
echo area             回显区
mode line             状态栏
search                搜索
incremental search    渐进式搜索 [3]
</code></pre><p>对于其他没有提到的术语，读者可以参考 Emacs 使用手册里的术语表。</p>
<p>[1] “window”一词在计算机相关的领域一般都被译为“窗口”。但是在 Emacs<br>    中，还有一个“frame”的概念。在被广泛使用的 X 窗口系统和微软的视窗<br>    （Windows）系列操作系统中，Emacs 的一个“frame”就是一个“窗口”，因<br>    此把 Emacs 中的“frame”译成“窗口”更加符合通常的习惯。这样，Emacs<br>    中的“window”就只能译成“窗格”了。我们认为 Emacs 中 window 和<br>    frame 的关系用窗格和窗口来类比是十分形象的。</p>
<pre><code>《学习GNU Emacs》（第二版）一书对“window”和“frame”的翻译与本教程
刚好相反（分别译作“窗口”和“窗格”）。在此特别注明，以消除可能产生
的疑惑。（感谢李旭章 &lt;lixuzhang@gmail.com&gt; 指出）
</code></pre><p>[2] 对于“delete”和“kill”的区别，正文已经给出了详细的说明。“删除”和<br>    “移除”相比较起来，前者更多地隐含着“破坏”和“不可恢复”的意思，而<br>    后者更多地隐含着“被转移”和“可恢复”的意思。因此分别选择它们作为上<br>    述两词的译词，希望能够体现出区别。“yank”在中文文档中鲜有对应译词出<br>    现，翻译的困难较大。究其本意是：“a strong sudden pull”（参见韦氏词<br>    典），即“猛然拉回”。在原文档中 yank 被引申为“将先前移除的东西再移<br>    回来”这个意思，所以我们选择了“召回”一词与其对应。</p>
<p>[3] “incremental”一词在计算机著作中广泛出现，被广泛接受的中文译词有两<br>    个：“增量的”和“渐进的”。“incremental search”翻译成“增量式搜索<br>    ”或者“渐进式搜索”都讲得通，且都有各自的形象之处。还是参考原文对其<br>    的解释：“… means that the search happens while you type in the<br>    string to search for”。意思是之所以称其为“incremental search”，是<br>    因为“在你输入搜索字符串的过程中，搜索就已经在进行了”。我们认为“增<br>    量的”更加强调在现有基础上的变化（比如“增量备份”，“增量编译”）；<br>    而“渐进的”更加强调过程的逐渐发展，也更加符合原文的意思。因此我们选<br>    择将“incremental search”译作“渐进式搜索”。</p>
<h2 id="版权声明（COPYING）"><a href="#版权声明（COPYING）" class="headerlink" title="* 版权声明（COPYING）"></a>* 版权声明（COPYING）</h2><p>This tutorial descends from a long line of Emacs tutorials<br>starting with the one written by Stuart Cracraft for the original Emacs.</p>
<p>This version of the tutorial is a part of GNU Emacs.  It is copyrighted<br>and comes with permission to distribute copies on certain conditions:</p>
<p>  Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,<br>  Inc.</p>
<p>  This file is part of GNU Emacs.</p>
<p>  GNU Emacs is free software: you can redistribute it and/or modify<br>  it under the terms of the GNU General Public License as published by<br>  the Free Software Foundation, either version 3 of the License, or<br>  (at your option) any later version.</p>
<p>  GNU Emacs is distributed in the hope that it will be useful,<br>  but WITHOUT ANY WARRANTY; without even the implied warranty of<br>  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>  GNU General Public License for more details.</p>
<p>  You should have received a copy of the GNU General Public License<br>  along with GNU Emacs.  If not, see <a href="https://www.gnu.org/licenses/" target="_blank" rel="external">https://www.gnu.org/licenses/</a>.</p>
<p>Please read the file COPYING and then do give copies of GNU Emacs to<br>your friends.  Help stamp out software obstructionism (“ownership”) by<br>using, writing, and sharing free software!</p>
<p>【下面为版权声明的译文，仅供参考。实际法律效力以英文原文为准。】</p>
<p>本快速指南沿袭自历史悠久的 Emacs 快速指南，可上溯至 Stuart Cracraft 为最<br>初的 Emacs 所作的版本。</p>
<p>本篇指南是 GNU Emacs 的一部分，并允许在下列条件的约束下发行其拷贝：</p>
<p>   Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,<br>   Inc.</p>
<p>   本文件为 GNU Emacs 的一部分。</p>
<p>   GNU Emacs 为自由软件；您可依据自由软件基金会所发表的GNU通用公共授权<br>   条款，对本程序再次发布和/或修改；无论您依据的是本授权的第三版，或<br>   （您可选的）任一日后发行的版本。</p>
<p>   GNU Emacs 是基于使用目的而加以发布，然而不负任何担保责任；亦无对适<br>   售性或特定目的适用性所为的默示性担保。详情请参照GNU通用公共授权。</p>
<p>   您应已收到附随于 GNU Emacs 的GNU通用公共授权的副本；如果没有，请参照<br>   <a href="https://www.gnu.org/licenses/" target="_blank" rel="external">https://www.gnu.org/licenses/</a>.</p>
<p>敬请阅读文件“COPYING”，然后向你的朋友们分发 GNU Emacs 拷贝。让我们以使<br>用、编写和分享自由软件的实际行动来共同祛除软件障碍主义（所谓的“所有<br>权”）！</p>
<p>;;; Local Variables:<br>;;; coding: utf-8<br>;;; End:</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emacs 快速指南.（查看版权声明请至本文末尾）&lt;/p&gt;
&lt;p&gt;【注意：位于【】之间的内容是译注，比如本行，下同。】&lt;/p&gt;
&lt;p&gt;Emacs 键盘命令通常包含 CONTROL 键（有时候以 CTRL 或 CTL 来标示）和&lt;br&gt;META 键（有时候用 EDIT 或 A
    
    </summary>
    
    
      <category term="Emacs" scheme="http://localhost:4000/tags/Emacs/"/>
    
      <category term="指南" scheme="http://localhost:4000/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="编辑器" scheme="http://localhost:4000/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS静态网站生成器-Gatsby</title>
    <link href="http://localhost:4000/2018/03/15/ReactJS%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8-Gatsby/"/>
    <id>http://localhost:4000/2018/03/15/ReactJS静态网站生成器-Gatsby/</id>
    <published>2018-03-15T09:50:43.000Z</published>
    <updated>2018-09-08T17:00:02.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactJS静态网站生成器-Gatsby"><a href="#ReactJS静态网站生成器-Gatsby" class="headerlink" title="ReactJS静态网站生成器-Gatsby"></a>ReactJS静态网站生成器-Gatsby</h1><p><img src="/images/post-gatsby-01" alt=""></p>
<h2 id="Gatsby-可以使用-React-js-把纯文本转换到动态博客或者网站上。"><a href="#Gatsby-可以使用-React-js-把纯文本转换到动态博客或者网站上。" class="headerlink" title="Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。"></a>Gatsby 可以使用 React.js 把纯文本转换到动态博客或者网站上。</h2><p>特点：</p>
<ul>
<li><p>无需重载页面转换</p>
</li>
<li><p>热重载编辑</p>
</li>
<li><p>为构建静态网站创建 React.js 组件模型和生态系统 </p>
</li>
<li><p>直观的基于目录的 URLs</p>
</li>
<li><p>支持 “Starters”</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ReactJS静态网站生成器-Gatsby&quot;&gt;&lt;a href=&quot;#ReactJS静态网站生成器-Gatsby&quot; class=&quot;headerlink&quot; title=&quot;ReactJS静态网站生成器-Gatsby&quot;&gt;&lt;/a&gt;ReactJS静态网站生成器-Gatsby&lt;/
    
    </summary>
    
    
      <category term="html" scheme="http://localhost:4000/tags/html/"/>
    
      <category term="reactjs" scheme="http://localhost:4000/tags/reactjs/"/>
    
      <category term="node" scheme="http://localhost:4000/tags/node/"/>
    
      <category term="npm" scheme="http://localhost:4000/tags/npm/"/>
    
      <category term="静态网站" scheme="http://localhost:4000/tags/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>文档写作与部署工具docsify</title>
    <link href="http://localhost:4000/2018/03/14/%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7docsify/"/>
    <id>http://localhost:4000/2018/03/14/文档写作与部署工具docsify/</id>
    <published>2018-03-14T10:01:27.000Z</published>
    <updated>2018-09-08T17:00:02.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docsify：一个文档展示与部署的工具"><a href="#docsify：一个文档展示与部署的工具" class="headerlink" title="docsify：一个文档展示与部署的工具"></a>docsify：一个文档展示与部署的工具</h1><p>基于md文档的写作，构建一个好看的文档展示样式，并启动服务提供访问。</p>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://docsify.js.org" target="_blank" rel="external">https://docsify.js.org</a></p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure></p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>如果想在项目的 ./docs 目录里写文档，直接通过 init 初始化项目。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure></p>
<h2 id="开始写文档"><a href="#开始写文档" class="headerlink" title="开始写文档"></a>开始写文档</h2><p>初始化成功后，可以看到 ./docs 目录下创建的几个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index.html 入口文件</span><br><span class="line">README.md 会做为主页内容渲染</span><br><span class="line">.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件</span><br><span class="line">直接编辑 docs/README.md 就能更新网站内容，当然也可以写多个页面。</span><br></pre></td></tr></table></figure></p>
<h2 id="本地预览网站"><a href="#本地预览网站" class="headerlink" title="本地预览网站"></a>本地预览网站</h2><p>运行一个本地服务器通过 docsify serve 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问 <a href="http://localhost:3000">http://localhost:3000</a> 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure></p>
<h2 id="多页文档"><a href="#多页文档" class="headerlink" title="多页文档"></a>多页文档</h2><p>如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 guide.md 文件，那么对应的路由就是 /#/guide。</p>
<p>假设你的目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-| docs/</span><br><span class="line">  -| README.md</span><br><span class="line">  -| guide.md</span><br><span class="line">  -| zh-cn/</span><br><span class="line">    -| README.md</span><br><span class="line">    -| guide.md</span><br></pre></td></tr></table></figure></p>
<p>那么对应的访问页面将是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docs/README.md        =&gt; http://domain.com</span><br><span class="line">docs/guide.md         =&gt; http://domain.com/guide</span><br><span class="line">docs/zh-cn/README.md  =&gt; http://domain.com/zh-cn/</span><br><span class="line">docs/zh-cn/guide.md   =&gt; http://domain.com/zh-cn/guide</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docsify：一个文档展示与部署的工具&quot;&gt;&lt;a href=&quot;#docsify：一个文档展示与部署的工具&quot; class=&quot;headerlink&quot; title=&quot;docsify：一个文档展示与部署的工具&quot;&gt;&lt;/a&gt;docsify：一个文档展示与部署的工具&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="doc" scheme="http://localhost:4000/tags/doc/"/>
    
      <category term="docs" scheme="http://localhost:4000/tags/docs/"/>
    
      <category term="markdown" scheme="http://localhost:4000/tags/markdown/"/>
    
      <category term="docsify" scheme="http://localhost:4000/tags/docsify/"/>
    
  </entry>
  
  <entry>
    <title>JavaError-The-temporary-upload-location-[/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT]-is-not-valid</title>
    <link href="http://localhost:4000/2018/02/25/JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid/"/>
    <id>http://localhost:4000/2018/02/25/JavaError-The-temporary-upload-location-tmp-tomcat-7104877156386249310-8070-work-Tomcat-localhost-ROOT-is-not-valid/</id>
    <published>2018-02-25T06:13:44.000Z</published>
    <updated>2018-09-08T17:00:02.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot内置Tomcat缓存文件目录被意外删除导致异常"><a href="#SpringBoot内置Tomcat缓存文件目录被意外删除导致异常" class="headerlink" title="SpringBoot内置Tomcat缓存文件目录被意外删除导致异常"></a>SpringBoot内置Tomcat缓存文件目录被意外删除导致异常</h1><p>在项目中，一般会将文件临时保存到缓存目录</p>
<p>当时使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File.createTempFile(&quot;tmp&quot;, ext,</span><br><span class="line">                        (File) request.getServletContext().getAttribute(ServletContext.TEMPDIR))</span><br></pre></td></tr></table></figure></p>
<p>创建临时文件时，项目一直运行正常，然而有一次报异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: </span><br><span class="line">    The temporary upload location [/tmp/tomcat.7104877156386249310.8070/work/Tomcat/localhost/ROOT] is not valid</span><br></pre></td></tr></table></figure>
<p>检查文件目录，文件确实不在，检查代码，也未发现问题。实在不知道原因，只有重启了服务器，问题也就不再出现。</p>
<p>今天偶然查看官方文档，发现问题所在，也提供了解决方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    If you choose to use Tomcat on CentOS be aware that, by default, a temporary directory is</span><br><span class="line">used to store compiled JSPs, file uploads etc. This directory may be deleted by tmpwatch</span><br><span class="line">while your application is running leading to failures. To avoid this, you may want to customize </span><br><span class="line">your tmpwatch configuration so that tomcat.* directories are not deleted, or configure</span><br><span class="line">server.tomcat.basedir so that embedded Tomcat uses a different location</span><br></pre></td></tr></table></figure></p>
<p>前往目录 /etc/cron.daily/ 中，修改 tmpwatch 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">flags=-umc</span><br><span class="line">/usr/sbin/tmpwatch &quot;$flags&quot; -x /tmp/.X11-unix -x /tmp/.XIM-unix \</span><br><span class="line">        -x /tmp/.font-unix -x /tmp/.ICE-unix -x /tmp/.Test-unix \</span><br><span class="line">        -X &apos;/tmp/hsperfdata_*&apos; 10d /tmp \</span><br><span class="line">        -X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br><span class="line">/usr/sbin/tmpwatch &quot;$flags&quot; 30d /var/tmp</span><br><span class="line">for d in /var/&#123;cache/man,catman&#125;/&#123;cat?,X11R6/cat?,local/cat?&#125;; do</span><br><span class="line">    if [ -d &quot;$d&quot; ]; then</span><br><span class="line">        /usr/sbin/tmpwatch &quot;$flags&quot; -f 30d &quot;$d&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>可以看到添加了一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-X &apos;/tmp/tomcat.*&apos; 10d /tmp</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot内置Tomcat缓存文件目录被意外删除导致异常&quot;&gt;&lt;a href=&quot;#SpringBoot内置Tomcat缓存文件目录被意外删除导致异常&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot内置Tomcat缓存文件目录被意
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="error" scheme="http://localhost:4000/tags/error/"/>
    
      <category term="tomcat" scheme="http://localhost:4000/tags/tomcat/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>mosquitto使用记录与服务器调试</title>
    <link href="http://localhost:4000/2018/02/25/mosquitto%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B0%83%E8%AF%95/"/>
    <id>http://localhost:4000/2018/02/25/mosquitto使用记录与服务器调试/</id>
    <published>2018-02-25T03:14:27.000Z</published>
    <updated>2018-09-08T17:00:02.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mosquitto使用记录："><a href="#mosquitto使用记录：" class="headerlink" title="mosquitto使用记录："></a>mosquitto使用记录：</h1><h2 id="mqtt："><a href="#mqtt：" class="headerlink" title="mqtt："></a>mqtt：</h2><h3 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/mosquitto.conf</span><br></pre></td></tr></table></figure>
<h3 id="加-d表示后台运行："><a href="#加-d表示后台运行：" class="headerlink" title="加-d表示后台运行："></a>加-d表示后台运行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/mosquitto.conf -d</span><br></pre></td></tr></table></figure>
<h3 id="sub一个主题："><a href="#sub一个主题：" class="headerlink" title="sub一个主题："></a>sub一个主题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_sub -h localhost -t test -d</span><br></pre></td></tr></table></figure>
<h3 id="pub一个消息到主题："><a href="#pub一个消息到主题：" class="headerlink" title="pub一个消息到主题："></a>pub一个消息到主题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_pub -h localhost -m &quot;中文 的mqtt&quot; -t test -d</span><br></pre></td></tr></table></figure>
<h3 id="重启：找到线程，kill"><a href="#重启：找到线程，kill" class="headerlink" title="重启：找到线程，kill"></a>重启：找到线程，kill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -A | grep mosquitto</span><br><span class="line">kill -9 xxx</span><br></pre></td></tr></table></figure>
<h2 id="linux最大连接数设置"><a href="#linux最大连接数设置" class="headerlink" title="linux最大连接数设置"></a>linux最大连接数设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n20000 -s512</span><br><span class="line"></span><br><span class="line">ulimit -f unlimited</span><br><span class="line">ulimit -t unlimited</span><br><span class="line">ulimit -v unlimited</span><br><span class="line">ulimit -n 1048576</span><br><span class="line">ulimit -m unlimited</span><br><span class="line">ulimit -u 1048576</span><br></pre></td></tr></table></figure>
<p>Till now I have achieved 74K concurrent connections on a broker. I have configured the ulimit of broker server by editing sysctl.conf and limit.conf file.</p>
<ul>
<li>vi /etc/sysctl.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 10000000 </span><br><span class="line">fs.nr_open = 10000000</span><br><span class="line">net.ipv4.tcp_mem = 786432 1697152 1945728</span><br><span class="line">net.ipv4.tcp_rmem = 4096 4096 16777216</span><br><span class="line">net.ipv4.tcp_wmem = 4096 4096 16777216</span><br><span class="line">net.ipv4.ip_local_port_range = 1000 65535</span><br></pre></td></tr></table></figure>
<ul>
<li>vi /etc/security/limits.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 10000000</span><br><span class="line">* hard nofile 10000000</span><br><span class="line">root soft nofile 10000000</span><br><span class="line">root hard nofile 10000000</span><br></pre></td></tr></table></figure>
<p>After this reboot your system.</p>
<h2 id="mqtt启动后，需要开放对应端口的，则处理如下"><a href="#mqtt启动后，需要开放对应端口的，则处理如下" class="headerlink" title="mqtt启动后，需要开放对应端口的，则处理如下"></a>mqtt启动后，需要开放对应端口的，则处理如下</h2><p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>
<p>1、直接关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line"></span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure>
<p>2、设置 iptables service</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install iptables-services</span><br></pre></td></tr></table></figure>
<p>如果要修改防火墙配置，如增加防火墙端口3306<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p>
<p>增加规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>保存退出后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart iptables.service #重启防火墙使配置生效</span><br><span class="line"></span><br><span class="line">systemctl enable iptables.service #设置防火墙开机启动</span><br></pre></td></tr></table></figure></p>
<p>最后重启系统使设置生效即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mosquitto使用记录：&quot;&gt;&lt;a href=&quot;#mosquitto使用记录：&quot; class=&quot;headerlink&quot; title=&quot;mosquitto使用记录：&quot;&gt;&lt;/a&gt;mosquitto使用记录：&lt;/h1&gt;&lt;h2 id=&quot;mqtt：&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="linux" scheme="http://localhost:4000/tags/linux/"/>
    
      <category term="mosquitto" scheme="http://localhost:4000/tags/mosquitto/"/>
    
      <category term="mqtt" scheme="http://localhost:4000/tags/mqtt/"/>
    
      <category term="服务器配置" scheme="http://localhost:4000/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>事务管理-spring事务使用注意点、数据库事务的隔离级别与锁</title>
    <link href="http://localhost:4000/2018/02/25/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86-spring%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E7%82%B9%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81/"/>
    <id>http://localhost:4000/2018/02/25/事务管理-spring事务使用注意点、数据库事务的隔离级别与锁/</id>
    <published>2018-02-25T02:43:01.000Z</published>
    <updated>2018-09-08T17:00:02.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-spring事务-Transactional的注意点"><a href="#1-spring事务-Transactional的注意点" class="headerlink" title="1. spring事务@Transactional的注意点"></a>1. spring事务@Transactional的注意点</h1><p>@Transactional注解可以标注在类和方法上，也可以标注在定义的接口和接口方法上。<br>如果我们在接口上标注@Transactional注解，会留下这样的隐患：因为注解不能被继承，所以业务接口中标注的@Transactional注解不会被业务实现类继承。所以可能会出现不启动事务的情况。所以，spring建议我们将@Transaction注解在实现类上。<br>在方法上的@Transactional注解会覆盖掉类上的@Transactional。</p>
<p>注意：</p>
<p>　　@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>
<p>　　虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p>
<p>　　默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰。</p>
<h1 id="2-数据库事务中的隔离级别和锁"><a href="#2-数据库事务中的隔离级别和锁" class="headerlink" title="2. 数据库事务中的隔离级别和锁"></a>2. 数据库事务中的隔离级别和锁</h1><p>数据库事务在后端开发中占非常重要的地位，如何确保数据读取的正确性、安全性也是我们需要研究的问题。</p>
<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>首先总结一下数据库事务正确执行的四个要素（ACID）：</p>
<p>原子性（Atomicity）：即事务是不可分割的最小工作单元，事务内的操作要么全做，要么全不做，不能只做一部分；<br>一致性（Consistency）：在事务执行前数据库的数据处于正确的状态，而事务执行完成后数据库的数据还是处于正确的状态，即数据完整性约束没有被破坏；比如我们做银行转账的相关业务，A转账给B，要求A转的钱B一定要收到。如果A转了钱而B没有收到，那么数据库数据的一致性就得不到保障，在做高并发业务时要注意合理的设计。<br>隔离性（Isolation）：并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性；<br>持久性（Durability）：事务一旦执行成功，它对数据库的数据的改变必须是永久的，不会因各种异常导致数据不一致或丢失。<br>事务隔离级别<br>大部分数据库事务操作都是并发执行的，这就可能遇到下面的几种问题：</p>
<p>丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，从而导致第一个事务更新的数据丢失，后果比较严重。一般是由于没加锁的原因造成的。<br>脏读（Dirty reads）：一个事务A读取到了另一个事务B还没有提交的数据，并在此基础上进行操作。如果B事务rollback，那么A事务所读取到的数据就是不正确的，会带来问题。<br>不可重复读（Non-repeatable reads）：在同一事务范围内读取两次相同的数据，所返回的结果不同。比如事务B第一次读数据后，事务A更新数据并commit，那么事务B第二次读取的数据就与第一次是不一样的。<br>幻读（Phantom reads）：一个事务A读取到了另一个事务B新提交的数据。比如，事务A对一个表中所有行的数据按照某规则进行修改（整表操作），同时，事务B向表中插入了一行原始数据，那么后面事务A再对表进行操作时，会发现表中居然还有一行数据没有被修改，就像发生了幻觉，飘飘欲仙一样。<br>注意：不可重复读和幻读的区别是，不可重复读对应的表的操作是更改(UPDATE)，而幻读对应的表的操作是插入(INSERT)，两种的应对策略不一样。对于不可重复读，只需要采用行级锁防止该记录被更新即可，而对于幻读必须加个表级锁，防止在表中插入数据。有关锁的问题，下面会讨论。</p>
<p>为了处理这几种问题，SQL定义了下面的4个等级的事务隔离级别：</p>
<p>未提交读（READ UNCOMMITTED ）：最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读；<br>提交读（READ COMMITTED）：一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不会出现丢失更新、脏读，但可能出现不可重复读、幻读；<br>可重复读（REPEATABLE READ）：保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读；<br>序列化（SERIALIZABLE）：最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读，但是效率最低。<br>隔离级别越高，数据库事务并发执行性能越差，能处理的操作越少。所以一般地，推荐使用REPEATABLE READ级别保证数据的读一致性。对于幻读的问题，可以通过加锁来防止。<br>MySQL支持这四种事务等级，默认事务隔离级别是REPEATABLE READ。Oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，所以Oracle数据库不支持脏读。Oracle数据库默认的事务隔离级别是READ COMMITTED。</p>
<h2 id="各种锁"><a href="#各种锁" class="headerlink" title="各种锁"></a>各种锁</h2><p>下面总结一下MySQL中的锁，有好几种分类。其它RDBMS也差不多是这样。</p>
<h3 id="首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。"><a href="#首先最重要的分类就是乐观锁-Optimistic-Lock-和悲观锁-Pessimistic-Lock-，这实际上是两种锁策略。" class="headerlink" title="首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。"></a>首先最重要的分类就是乐观锁(Optimistic Lock)和悲观锁(Pessimistic Lock)，这实际上是两种锁策略。</h3><p>乐观锁，顾名思义就是非常乐观，非常相信真善美，每次去读数据都认为其它事务没有在写数据，所以就不上锁，快乐的读取数据，而只在提交数据的时候判断其它事务是否搞过这个数据了，如果搞过就rollback。乐观锁相当于一种检测冲突的手段，可通过为记录添加版本或添加时间戳来实现。</p>
<p>悲观锁，对其它事务抱有保守的态度，每次去读数据都认为其它事务想要作祟，所以每次读数据的时候都会上锁，直到取出数据。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性，但随之而来的是各种开销。悲观锁相当于一种避免冲突的手段。<br>选择标准：如果并发量不大，或数据冲突的后果不严重，则可以使用乐观锁；而如果并发量大或数据冲突后果比较严重（对用户不友好），那么就使用悲观锁。</p>
<h3 id="从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。"><a href="#从读写角度，分共享锁（S锁，Shared-Lock）和排他锁（X锁，Exclusive-Lock），也叫读锁（Read-Lock）和写锁（Write-Lock）。" class="headerlink" title="从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。"></a>从读写角度，分共享锁（S锁，Shared Lock）和排他锁（X锁，Exclusive Lock），也叫读锁（Read Lock）和写锁（Write Lock）。</h3><p>理解：</p>
<p>持有S锁的事务只读不可写。如果事务A对数据D加上S锁后，其它事务只能对D加上S锁而不能加X锁。<br>持有X锁的事务可读可写。如果事务A对数据D加上X锁后，其它事务不能再对D加锁，直到A对D的锁解除。<br>从锁的粒度角度，主要分为表级锁（Table Lock）和行级锁（Row Lock）。<br>表级锁将整个表加锁，性能开销最小。用户可以同时进行读操作。当一个用户对表进行写操作时，用户可以获得一个写锁，写锁禁止其他的用户读写操作。写锁比读锁的优先级更高，即使有读操作已排在队列中，一个被申请的写锁仍可以排在所队列的前列。<br>行级锁仅对指定的记录进行加锁，这样其它进程可以对同一个表中的其它记录进行读写操作。行级锁粒度最小，开销大，能够支持高并发，可能会出现死锁。</p>
<h3 id="MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。"><a href="#MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。" class="headerlink" title="MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。"></a>MySQL的MyISAM引擎使用表级锁，而InnoDB支持表级锁和行级锁，默认是行级锁。</h3><p>还有BDB引擎使用页级锁，即一次锁定一组记录，并发性介于行级锁和表级锁之间。</p>
<h3 id="三级锁协议"><a href="#三级锁协议" class="headerlink" title="三级锁协议"></a>三级锁协议</h3><p>三级加锁协议是为了保证正确的事务并发操作，事务在读、写数据库对象是需要遵循的加锁规则。</p>
<p>一级封锁协议：事务T在修改数据R之前必须对它加X锁，直到事务结束方可释放。而若事务T只是读数据，不进行修改，则不需加锁，因此一级加锁协议下可能会出现脏读和不可重复读。<br>二级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加S锁，直到读取完毕以后释放。二级加锁协议下可能会出现不可重复读。<br>三级加锁协议：在一级加锁协议的基础上，加上这样一条规则——事务T在读取数据R之前必须对它加X锁，直到事务结束方可释放。三级加锁协议避免了脏读和不可重复读的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-spring事务-Transactional的注意点&quot;&gt;&lt;a href=&quot;#1-spring事务-Transactional的注意点&quot; class=&quot;headerlink&quot; title=&quot;1. spring事务@Transactional的注意点&quot;&gt;&lt;/a&gt;1
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring事务" scheme="http://localhost:4000/tags/spring%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="Transactional" scheme="http://localhost:4000/tags/Transactional/"/>
    
      <category term="数据库事务" scheme="http://localhost:4000/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="锁" scheme="http://localhost:4000/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>java并发学习(一)</title>
    <link href="http://localhost:4000/2017/09/06/java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://localhost:4000/2017/09/06/java并发学习-一/</id>
    <published>2017-09-06T15:33:27.000Z</published>
    <updated>2017-09-06T15:41:11.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h1><p>进程，是运行在自己地址空间内的自包容程序。</p>
<p>而java并发系统，会共享内存和IO这样的资源，因此需要协调不同线程驱动的任务之间对资源的使用。</p>
<p>线程机制是在执行程序表示的单一进程中创建任务。这样的好处是操作系统的透明性。</p>
<p>java线程机制，抢占式，调度机会周期性地中断程序，将上下文切换到另一个线程。</p>
<p>线程在设计上的好处是，简化了设计，同时具有松散耦合。</p>
<h1 id="2-基本线程机制"><a href="#2-基本线程机制" class="headerlink" title="2. 基本线程机制"></a>2. 基本线程机制</h1><p>一个线程是进程内的一个单一的顺序控制流，单进程可以同时拥有多个并发任务，其底层是切分CPU时间。</p>
<ul>
<li><p>定义任务： 继承Runnable，实现run方法。</p>
</li>
<li><p>yield()线程让步。</p>
</li>
<li><p>Thread类</p>
</li>
<li><p>使用Executor，可以管理一部任务的执行，而无需显式管理线程生命周期，是启动线程的优选方法。</p>
</li>
<li><p>ExecutorService：</p>
</li>
</ul>
<p>CachedThreadPool</p>
<p>FixedThreadPool：定义好有限的线程集，一次性预先执行代价高昂的线程分配，需要线程时从线程池中获取，省去了创建线程的开销。</p>
<p>SingleThreadPool：同时只有一条线程，顺序执行，序列化任务队列，可以省去贡献资源上的同步</p>
<ul>
<li><p>返回值，Callable接口，call()方法，Future对象，get()和isDone()方法。</p>
</li>
<li><p>休眠：sleep()</p>
</li>
<li><p>如果必须控制任务执行的顺序，最好的方式就是使用同步控制。</p>
</li>
<li><p>优先级：getPriority(),setPriority(),set优先级是在run的开头部分设置，由于不同系统的有限级别难以一一适配，所以，调整优先级最好是只用这3种：MAX_PRIORITY,NORM_PRIORITY,MIN_PRIORITY</p>
</li>
<li><p>让步：yield(),</p>
</li>
<li><p>后台线程：<br>当所有非后台线程结束时，程序终止，并且杀死所有后台线程。<br>setDeamon(true);<br>通过编写定制的ThreadFactory可以定制由Executor创建的线程的属性（后台、优先、名称）</p>
</li>
</ul>
<p>一个后台线程创建的任何线程，会自动设置为后台线程。<br>非后台的Executor通常是一种更好的方式，它控制所有任务可以同时被关闭。</p>
<ul>
<li><p>实现Runnable接口和使用Thread类的区别在于，使用接口，你可以继承另一个不同的类。</p>
</li>
<li><p>join(),在某个线程上调用，表示加入到某个线程，等待这个线程结束后，才开始执行。<br>可使用interrupt()中断。</p>
</li>
<li><p>interrupt()时会抛出异常，然后就清除了interrupt的标记，这时调用isInterrupted()检查时就会是false。</p>
</li>
<li><p>捕获异常：<br>main主体放到try-catch语句中没有作用。</p>
</li>
</ul>
<p>Thread.UncaughtExceptionHandler接口，允许你在每个Thread对象上都附上一个异常处理器。</p>
<p>Thread.UncaughtExceptionHandler.uncaughtExcetion()会在线程因未捕获的异常而临近死亡时被调用。</p>
<p>使用方法：</p>
<p>1，可以创建一个新的ThreadFactory，在每个新建的Thread对象上附上一个Thread.UncaughtExceptionHandler，然后将这个ThreadFactory传递给Executors创建新的ExecutorService。</p>
<p>2，如果知道要在代码中处处使用相同的异常处理，那么可以简单的在Thread类中设置一个静态域，并将这个处理器设置为默认的未捕获异常处理器。它只有在不存在线程专有的未捕获异常处理器时才被调用。</p>
<h1 id="3-共享受限资源"><a href="#3-共享受限资源" class="headerlink" title="3. 共享受限资源"></a>3. 共享受限资源</h1><ul>
<li><p>本质：基本上所有并发模式在解决线程冲突问题的时候，都是采用序列化访问共享资源的方案。</p>
</li>
<li><p>互斥量。<br>对于某个特定对象而言，其所有synchronized方法共享同一个锁，可防止多个任务同时访问被编码为对象内存。</p>
</li>
</ul>
<p>synchronized static方法可以在类的范围内防止对static数据的并发访问。</p>
<ul>
<li><p>Brian同步规则：如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。</p>
</li>
<li><p>重点：如果一个类中有超过一个方法在处理临界数据，那么必须同步所有相关方法。每个访问临界共享资源的方法都必须被同步，否则它们就不会正确工作。</p>
</li>
<li><p>使用显式的Lock对象：ReentrantLock</p>
</li>
</ul>
<p>Lock的好处是可以在finally子句中维护抛出异常后的清理，同时具有更细粒度的控制力。</p>
<ul>
<li><p>平时用synchronized，需要特殊情况时使用Lock。</p>
</li>
<li><p>原子性：原子性可以用于除long和double之外的所有基本类型之上的“简单操作”。<br>为什么long和double不行？因为jvm可以将64位的读取和写入当做两个分离的32位操作来执行，这就产生了读写两个操作之间发生上下文切换的可能。</p>
</li>
<li><p>volitle，用于定义变量，提供原子性。它提供了变量在内存中的可视性，即更改会刷新到内存中，可以让别的线程看到。</p>
</li>
<li><p>一般还是使用synchronized，只有在类中只有一个可变的域时，volitile才是安全的。</p>
</li>
<li><p>原子类：<br>Atomic<br>可以一定程度的去除一些别的同步方法，但同步锁通常更安全。</p>
</li>
<li><p>如何把一个不是线程安全的类变成线程安全？<br>可以创造一个对象的Manager类，Manager类持有该对象，并控制对它的一切访问，唯一的public方法是get()对象的方法，并且是synchronized的。</p>
</li>
<li><p>线程本地存储：ThreadLocal<br>根除线程间变量共享，线程隔离。</p>
</li>
</ul>
<h1 id="4-终结任务"><a href="#4-终结任务" class="headerlink" title="4. 终结任务"></a>4. 终结任务</h1><ul>
<li><p>cancle(),isCancled()</p>
</li>
<li><p>在阻塞时终结：</p>
</li>
</ul>
<p>进入阻塞几种方式：</p>
<p>1，sleep</p>
<p>2，wait</p>
<p>3，等待某个输入输出完成</p>
<p>4，视图获得对象锁而还没有获取到</p>
<ul>
<li><p>中断：interrupt()</p>
</li>
<li><p>安全离开线程run方法的方式：</p>
</li>
</ul>
<p>1，calcled标志，cancle()</p>
<p>2，interrupt()</p>
<p>3，Executor.shotdownNow()</p>
<p>4，Executor,submit(),Future,cancle()</p>
<ul>
<li><p>中断时要注意I/O的关闭等底层资源的关闭，因为不能中断正在试图获取synchronized锁或者I/O操作的线程。</p>
</li>
<li><p>一个任务应该能够调用在同一个对象中的其他synchronized方法，而这个任务已经持有锁了。</p>
</li>
<li><p>interrupt()，可以中断被互斥锁所阻塞的调用，并且，interrupt()只能在任务处于阻塞时有效。</p>
</li>
<li><p>清除中断状态：如果不清除，那么它可能会提醒你2次。</p>
</li>
<li><p>清理策略：try-finally子句</p>
</li>
</ul>
<h1 id="5-线程间协作"><a href="#5-线程间协作" class="headerlink" title="5. 线程间协作"></a>5. 线程间协作</h1><ul>
<li><p>wait(),notifyAll()</p>
</li>
<li><p>关键：wait()会释放锁，而sleep()和yield()则不会</p>
</li>
<li><p>要点：</p>
</li>
</ul>
<p>1，wait(),notifyAll()，notify()是基于类Object的，而不是属于Thread的一部分。而且，只能在同步控制方法或同步控制块里调用wait(),notifyAll()，notify()。</p>
<p>2，必须用一个检查感兴趣的条件的while循环包围wait()，也即是说，不满足我条件，我就继续等的意思。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-进程和线程&quot;&gt;&lt;a href=&quot;#1-进程和线程&quot; class=&quot;headerlink&quot; title=&quot;1. 进程和线程&quot;&gt;&lt;/a&gt;1. 进程和线程&lt;/h1&gt;&lt;p&gt;进程，是运行在自己地址空间内的自包容程序。&lt;/p&gt;
&lt;p&gt;而java并发系统，会共享内存和IO这
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="并发" scheme="http://localhost:4000/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="多线程" scheme="http://localhost:4000/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]01-Spring boot开发微服务</title>
    <link href="http://localhost:4000/2017/03/29/microservices-01-Spring-boot%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>http://localhost:4000/2017/03/29/microservices-01-Spring-boot开发微服务/</id>
    <published>2017-03-29T13:33:23.000Z</published>
    <updated>2017-03-29T13:43:43.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-boot开发微服务"><a href="#Spring-boot开发微服务" class="headerlink" title="Spring boot开发微服务"></a>Spring boot开发微服务</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-为什么使用spring-boot？"><a href="#1-为什么使用spring-boot？" class="headerlink" title="1. 为什么使用spring boot？"></a>1. 为什么使用spring boot？</h2><ul>
<li>1) spring boot有pivotal和netfix背书，是一套完整的企业级应用的开发方案，天然集成分布式云架构spring-cloud。</li>
<li>2) spring-boot的完全抛弃以往java项目配置文件过多的“陋习”，开启一个项目只需几行代码。</li>
<li>3) Sprinboot允许项目使用内嵌的tomcat像启动普通java程序一样启动一个web项目.由于有了这个特性，项目不再需要打war包部署到tomcat，而是打成jar包，直接使用java -jar命令启动.</li>
</ul>
<h2 id="2-开始第一个springboot项目"><a href="#2-开始第一个springboot项目" class="headerlink" title="2. 开始第一个springboot项目"></a>2. 开始第一个springboot项目</h2><p>在一切开始之前，我们首先要知道如何开始一个springboot项目。</p>
<h3 id="2-1-创建一个空的maven项目，pom-xml中添加maven依赖"><a href="#2-1-创建一个空的maven项目，pom-xml中添加maven依赖" class="headerlink" title="2.1. 创建一个空的maven项目，pom.xml中添加maven依赖"></a>2.1. 创建一个空的maven项目，pom.xml中添加maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-编写项目启动入口App-java"><a href="#2-2-编写项目启动入口App-java" class="headerlink" title="2.2. 编写项目启动入口App.java"></a>2.2. 编写项目启动入口App.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class App </span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ok! done!<br>这样就已经能直接使用spring boot了.<br>启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。</p>
<h3 id="2-3-再进一步，为应用引入spring-mvc"><a href="#2-3-再进一步，为应用引入spring-mvc" class="headerlink" title="2.3. 再进一步，为应用引入spring mvc"></a>2.3. 再进一步，为应用引入spring mvc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class SampleController &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    String home() &#123;</span><br><span class="line">        String data = &quot;&quot;;</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动App.java，访问localhost:8080, 即可遇见“Hello World!”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-boot开发微服务&quot;&gt;&lt;a href=&quot;#Spring-boot开发微服务&quot; class=&quot;headerlink&quot; title=&quot;Spring boot开发微服务&quot;&gt;&lt;/a&gt;Spring boot开发微服务&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;github项目
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]06-Jenkins执行自动化的构建</title>
    <link href="http://localhost:4000/2017/03/29/microservices-06-Jenkins%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <id>http://localhost:4000/2017/03/29/microservices-06-Jenkins执行自动化的构建/</id>
    <published>2017-03-29T13:01:58.000Z</published>
    <updated>2017-03-29T13:44:18.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-06-Jenkins执行自动化的构建"><a href="#microservices-06-Jenkins执行自动化的构建" class="headerlink" title="[microservices]06-Jenkins执行自动化的构建"></a>[microservices]06-Jenkins执行自动化的构建</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-Jenkins安装运行"><a href="#1-Jenkins安装运行" class="headerlink" title="1. Jenkins安装运行"></a>1. Jenkins安装运行</h2><h3 id="1-1-docker方式安装运行"><a href="#1-1-docker方式安装运行" class="headerlink" title="1.1 docker方式安装运行"></a>1.1 docker方式安装运行</h3><p>docker拉取镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkinsci/jenkings</span><br></pre></td></tr></table></figure></p>
<p>启动容器的方式运行jenkins：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -u root -m 500m -p 8080:8080 -v ~/jenkins:/var/jenkins_home --name jenkins jenkinsci/jenkins</span><br></pre></td></tr></table></figure></p>
<p>后台查看jenkins日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f jenkins</span><br></pre></td></tr></table></figure></p>
<p>会看到一条解锁jenkins的key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock jenkins:c1bbf6aaa7aa4bd99cfcc0fb4a56ec83</span><br></pre></td></tr></table></figure></p>
<p>访问：<a href="http://localhost:8080，首次访问，需要输入key">http://localhost:8080，首次访问，需要输入key</a><br>复制unlock jenkins key，输入，完成.</p>
<p>后面就是安装插件，可以根据自己需要安装，也可以安装jenkins建议的插件.</p>
<h3 id="1-2-war包方式部署运行"><a href="#1-2-war包方式部署运行" class="headerlink" title="1.2 war包方式部署运行"></a>1.2 war包方式部署运行</h3><p>jenkins官网，下载最新稳定版本jenkins的war包.</p>
<p>放进准备好的tomcat的webapps下，启动tomcat即可运行。</p>
<h3 id="1-3-Centos的yum安装"><a href="#1-3-Centos的yum安装" class="headerlink" title="1.3 Centos的yum安装"></a>1.3 Centos的yum安装</h3><p>设置yum源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br></pre></td></tr></table></figure></p>
<p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure></p>
<p>修改端口和用户(可选，如果有需要修改端口和运行jenkins用户的需要，可以修改):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure></p>
<p>启动jenkins：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure></p>
<p>设置开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig jenkins on</span><br></pre></td></tr></table></figure></p>
<h2 id="2-jenkins必要设置"><a href="#2-jenkins必要设置" class="headerlink" title="2. jenkins必要设置"></a>2. jenkins必要设置</h2><p>基本上安装后第一次运行按照jenkins建议的插件，基本够用。有特殊需要再添加。</p>
<p>要使用git，需要安装git相关插件。</p>
<p>新版本jenkins不再默认设置maven，有需要maven功能的，可以在设置的工具管理页面配置一个maven。</p>
<h2 id="3-Jenkins搭建持续集成系统"><a href="#3-Jenkins搭建持续集成系统" class="headerlink" title="3. Jenkins搭建持续集成系统"></a>3. Jenkins搭建持续集成系统</h2><p>这个步骤的目标是实现使用jenkins进行项目构建：从代码仓库gitlab/github/svn等拉源代码，通过maven进行编译打包，最后将构建成功输出的程序包进行归档。</p>
<h3 id="3-1-创建构建任务"><a href="#3-1-创建构建任务" class="headerlink" title="3.1 创建构建任务"></a>3.1 创建构建任务</h3><p>创建一个新任务，填任务名称，选择构建什么项目<br><img src="/images/microservice-jenkins-01.png" alt=""></p>
<p>配置git仓库。如果需要账号密码认证，填上。<br><img src="/images/microservice-jenkins-02.png" alt=""></p>
<p>添加一个构建步骤：<br><img src="/images/microservice-jenkins-03.png" alt=""></p>
<p>选择maven targets的选项：<br><img src="/images/microservice-jenkins-04.png" alt=""></p>
<p>添加一个构建后步骤，将jar包归档<br><img src="/images/microservice-jenkins-05.png" alt=""></p>
<p>输入框中输入需要存档的文件：<br><img src="/images/microservice-jenkins-06.png" alt=""></p>
<h3 id="3-2-手工构建"><a href="#3-2-手工构建" class="headerlink" title="3.2 手工构建"></a>3.2 手工构建</h3><p><img src="/images/microservice-jenkins-07.png" alt=""></p>
<h3 id="3-3-实现自动执行构建"><a href="#3-3-实现自动执行构建" class="headerlink" title="3.3 实现自动执行构建"></a>3.3 实现自动执行构建</h3><p>我们希望代码提交到git后，自动触发构建。</p>
<p>构建触发器，选择“Poll SCM”：<br><img src="/images/microservice-jenkins-08.png" alt=""></p>
<p>输入“H/10 <em> </em> <em> </em>”。表示有最新代码提交后，等10分钟就会触发自动构建<br><img src="/images/microservice-jenkins-09.png" alt=""></p>
<h2 id="4-使用jenkins实现自动化发布"><a href="#4-使用jenkins实现自动化发布" class="headerlink" title="4. 使用jenkins实现自动化发布"></a>4. 使用jenkins实现自动化发布</h2><h3 id="4-1-自动发布jar包"><a href="#4-1-自动发布jar包" class="headerlink" title="4.1 自动发布jar包"></a>4.1 自动发布jar包</h3><p><img src="/images/microservice-jenkins-10.png" alt=""></p>
<p>在输入框中输入shell命令来运行项目：<br><img src="/images/microservice-jenkins-11.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar $WORKSPACE/xxx/target/xxx.jar --server.port=10800</span><br></pre></td></tr></table></figure></p>
<p>仅仅是这样还不够，需要考虑正在运行中的应用的关闭、后台启动、生产环境如何部署发布等众多细节，继续完善的话，是一条路。另一条路是使用docker。</p>
<h3 id="4-2-自动发布Docker容器"><a href="#4-2-自动发布Docker容器" class="headerlink" title="4.2 自动发布Docker容器"></a>4.2 自动发布Docker容器</h3><p>使用docker容器发布项目，我们要达到的目标是：<br>1）开发人员将代码同步到git仓库，随后触发jenkins自动构建<br>2）jenkins调用maven进行构建，生成jar包。<br>3）根据当前构建过程，生成一个docker镜像，将其推送至局域网内的docker registry中，供生产环境随时获取并发布。<br>4）根据生成的docker镜像，运行一个docker容器（若当前存在该镜像，则先移除该镜像）</p>
<p>前2步在前面的步骤已实现，以下将完成后两步：</p>
<p>在构建后步骤中选择shell脚本，在脚本框中输入具体的docker镜像构建和推送：<br><img src="/images/microservice-jenkins-12.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">API_NAME=&quot;spring-boot-docker&quot;</span><br><span class="line">API_VERSION=&quot;1.0.0&quot;</span><br><span class="line">API_PORT=8101</span><br><span class="line">IMAGE_NAME=&quot;127.0.0.1:5000/com.iyihua/$API_NAME:$BUILD_NUMBER&quot;</span><br><span class="line">CONTAINER_NAME=$API_NAME-$API_VERSION</span><br><span class="line"></span><br><span class="line">cd $WORKSPACE/target</span><br><span class="line">cp classes/Dockerfile .</span><br><span class="line"></span><br><span class="line">docker build -t $IMAGE_NAME .</span><br><span class="line"></span><br><span class="line">docker push $IMAGE_NAME</span><br><span class="line"></span><br><span class="line">cid=$(docker ps | grep &quot;$CONTAINER_NAME&quot; | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">if [ &quot;$cid&quot; != &quot;&quot; ]; then</span><br><span class="line">  docker rm -f $cid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker run -d -p $API_PORT:$API_PORT --name $CONTAINER_NAME $IMAGE_NAME</span><br><span class="line"></span><br><span class="line">rm -f Dockerfile</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-06-Jenkins执行自动化的构建&quot;&gt;&lt;a href=&quot;#microservices-06-Jenkins执行自动化的构建&quot; class=&quot;headerlink&quot; title=&quot;[microservices]06-Jenkins执行自
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="jenkins" scheme="http://localhost:4000/tags/jenkins/"/>
    
      <category term="自动化" scheme="http://localhost:4000/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="构建" scheme="http://localhost:4000/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="docker" scheme="http://localhost:4000/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]05-Gitlab作为代码仓库</title>
    <link href="http://localhost:4000/2017/03/29/microservices-05-Gitlab%E4%BD%9C%E4%B8%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/"/>
    <id>http://localhost:4000/2017/03/29/microservices-05-Gitlab作为代码仓库/</id>
    <published>2017-03-29T13:01:26.000Z</published>
    <updated>2017-03-29T13:44:11.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-05-Gitlab作为代码仓库"><a href="#microservices-05-Gitlab作为代码仓库" class="headerlink" title="[microservices]05-Gitlab作为代码仓库"></a>[microservices]05-Gitlab作为代码仓库</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-Gitlab的Docker安装"><a href="#1-Gitlab的Docker安装" class="headerlink" title="1. Gitlab的Docker安装"></a>1. Gitlab的Docker安装</h2><p>gitlab安装的过程稍微麻烦，但如果使用docker安装的话，就会非常简单。</p>
<p>下载镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>
<p>下载镜像，并启动容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -m 512m -h gitlab.iyihua.com -p 22:22 -p 80:80 -v ~/gitlab/etc:/etc/gitlab -v ~/gitlab/log:/var/log/gitlab -v ~/gitlab/opt:/var/opt/gitlab --name gitlab gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></p>
<p>说明：<br>(1) -h， 设置gitlab访问域名<br>(2) -p， 指定映射端口，22表示ssh端口,80表示http端口，<br>(3) -m， 指定目录映射<br>(4) -v， 指定分配多少内存来运行容器</p>
<p>启动后，访问首页gitlab.iyihua.com，会定向到修改管理员密码页面，修改完管理员密码后，会重定向到登陆页面。</p>
<h2 id="2-git使用"><a href="#2-git使用" class="headerlink" title="2. git使用"></a>2. git使用</h2><p>gitlab安装好后，和github的使用并无二致。</p>
<p>git本地使用需要设置好git全局设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>
<p>如果要用ssh拉取和提交代码，需要设置好ssh公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;admin@example.com&quot;</span><br><span class="line"></span><br><span class="line">#可通过以下命令查看ssh key：</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">把得到的key进入gitlab ssh密钥管理界面，输入这个ssh key.</span><br></pre></td></tr></table></figure></p>
<h2 id="3-more"><a href="#3-more" class="headerlink" title="3. more"></a>3. more</h2><p>gitlab运行需要的资源比较多，一个800m的虚拟机用docker跑gitlab比较吃力，经常会出现页面502.建议最低内存是1G。</p>
<p>如果仅仅是个人使用，可以直接使用github代替，或者使用GOGS代替.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-05-Gitlab作为代码仓库&quot;&gt;&lt;a href=&quot;#microservices-05-Gitlab作为代码仓库&quot; class=&quot;headerlink&quot; title=&quot;[microservices]05-Gitlab作为代码仓库&quot;&gt;&lt;/
    
    </summary>
    
    
      <category term="git" scheme="http://localhost:4000/tags/git/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="docker" scheme="http://localhost:4000/tags/docker/"/>
    
      <category term="gitlab" scheme="http://localhost:4000/tags/gitlab/"/>
    
      <category term="代码仓库" scheme="http://localhost:4000/tags/%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]04-Docker作为服务运行容器</title>
    <link href="http://localhost:4000/2017/03/29/microservices-04-Docker%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8/"/>
    <id>http://localhost:4000/2017/03/29/microservices-04-Docker作为服务运行容器/</id>
    <published>2017-03-29T13:01:01.000Z</published>
    <updated>2017-03-29T13:44:06.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-04-Docker作为服务运行容器"><a href="#microservices-04-Docker作为服务运行容器" class="headerlink" title="[microservices]04-Docker作为服务运行容器"></a>[microservices]04-Docker作为服务运行容器</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-docker运行环境"><a href="#1-docker运行环境" class="headerlink" title="1. docker运行环境"></a>1. docker运行环境</h2><h3 id="1-1-操作系统选择"><a href="#1-1-操作系统选择" class="headerlink" title="1.1 操作系统选择"></a>1.1 操作系统选择</h3><p>对于linux系统，Docker 需要安装在 64 位的平台，并且内核版本不低于 3.10。 CentOS 7 满足最低内核的要求.<br>这里选用centos7系统作为docker的运行环境.</p>
<p>在windows系统下，可以使用vm虚拟机虚拟centos7，运行docker.</p>
<h3 id="1-2-linux操作系统配置"><a href="#1-2-linux操作系统配置" class="headerlink" title="1.2 linux操作系统配置"></a>1.2 linux操作系统配置</h3><h4 id="1-2-1-防火墙"><a href="#1-2-1-防火墙" class="headerlink" title="1.2.1 防火墙"></a>1.2.1 防火墙</h4><p>centos7使用firewall作为防火墙，docker向外提供服务，需要开通必要端口。<br>firewall开放端口命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#开放8080端口</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">#重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>
<p>当然，如果习惯于iptables防火墙，也可以关闭firewall，启用iptables防火墙：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#1、关闭firewall：</span><br><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line">#查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br><span class="line">firewall-cmd --state </span><br><span class="line"></span><br><span class="line">#2、iptables防火墙（这里iptables已经安装，下面进行配置）</span><br><span class="line">$ vi /etc/sysconfig/iptables #编辑防火墙配置文件</span><br><span class="line"></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT[0:0]</span><br><span class="line">:OUTPUT ACCEPT[0:0]</span><br><span class="line">-A INPUT -m state--state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -jACCEPT</span><br><span class="line">-A INPUT -i lo -jACCEPT</span><br><span class="line">-A INPUT -p tcp -mstate --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080-j ACCEPT</span><br><span class="line">-A INPUT -j REJECT--reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -jREJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br><span class="line">:wq! #保存退出</span><br></pre></td></tr></table></figure></p>
<h2 id="2-安装并启动docker"><a href="#2-安装并启动docker" class="headerlink" title="2. 安装并启动docker"></a>2. 安装并启动docker</h2><p>从2017-03-01起，新版的docker分为了CE和EE两个版本，CE是社区版，EE是企业版. 我们这里使用CE版即可.</p>
<h3 id="2-1-安装docker-ce"><a href="#2-1-安装docker-ce" class="headerlink" title="2.1 安装docker-ce"></a>2.1 安装docker-ce</h3><h4 id="2-1-1-Set-up-the-repository"><a href="#2-1-1-Set-up-the-repository" class="headerlink" title="2.1.1. Set up the repository"></a>2.1.1. Set up the repository</h4><p>Set up the Docker CE repository on CentOS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure></p>
<h4 id="2-1-2-Get-Docker-CE"><a href="#2-1-2-Get-Docker-CE" class="headerlink" title="2.1.2. Get Docker CE"></a>2.1.2. Get Docker CE</h4><p>Install the latest version of Docker CE on CentOS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure></p>
<p>Start Docker:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></p>
<p>docker开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  enable docker.service</span><br></pre></td></tr></table></figure></p>
<h4 id="2-1-3-Test-your-Docker-CE-installation"><a href="#2-1-3-Test-your-Docker-CE-installation" class="headerlink" title="2.1.3. Test your Docker CE installation"></a>2.1.3. Test your Docker CE installation</h4><p>Test your installation:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></p>
<h3 id="2-2-添加镜像加速"><a href="#2-2-添加镜像加速" class="headerlink" title="2.2 添加镜像加速"></a>2.2 添加镜像加速</h3><p>假如你有阿里云账号，可配置镜像加速<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></p>
<p>添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>“<a href="https://xxxxxxxx.mirror.aliyuncs.com" target="_blank" rel="external">https://xxxxxxxx.mirror.aliyuncs.com</a>“<br>是你的专属镜像加速地址，可以在阿里云管理页面找到.</p>
<p>重启docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p>
<h2 id="3-docker镜像操作和docker容器运行使用"><a href="#3-docker镜像操作和docker容器运行使用" class="headerlink" title="3. docker镜像操作和docker容器运行使用"></a>3. docker镜像操作和docker容器运行使用</h2><h3 id="3-1-拉取镜像，并启动容器"><a href="#3-1-拉取镜像，并启动容器" class="headerlink" title="3.1 拉取镜像，并启动容器"></a>3.1 拉取镜像，并启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前有什么镜像</span><br><span class="line">docker images</span><br><span class="line"># 拉取centos系统镜像</span><br><span class="line">docker pull centos</span><br><span class="line"># 启动刚刚拉取的镜像</span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="3-2-运行docker容器时的一些常用命令和选项"><a href="#3-2-运行docker容器时的一些常用命令和选项" class="headerlink" title="3.2 运行docker容器时的一些常用命令和选项"></a>3.2 运行docker容器时的一些常用命令和选项</h3><ul>
<li><p>列出当前运行中的容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要列出所有状态（包括已停止）的容器，添加-a参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入运行中的容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>将宿主机上的磁盘挂载到容器中，也即“目录映射”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>“-v /home/software:/mnt/software”表示将容器的/mnt/software目录挂载到宿主机的/home/software目录.</p>
<h2 id="4-手工制作java镜像"><a href="#4-手工制作java镜像" class="headerlink" title="4. 手工制作java镜像"></a>4. 手工制作java镜像</h2><h3 id="4-1-上传java-rpm安装包到-home-software目录"><a href="#4-1-上传java-rpm安装包到-home-software目录" class="headerlink" title="4.1 上传java rpm安装包到/home/software目录"></a>4.1 上传java rpm安装包到/home/software目录</h3><p>这里使用已下载好的java8 64位安装包：jdk-8u65-linux-x64.rpm</p>
<h3 id="4-2-启动容器"><a href="#4-2-启动容器" class="headerlink" title="4.2 启动容器"></a>4.2 启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -v /home/software:/mnt/software centos /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="4-3-运行安装包"><a href="#4-3-运行安装包" class="headerlink" title="4.3 运行安装包"></a>4.3 运行安装包</h3><p>/mnt/software映射到宿主机的/home/software，说明容器内的/mnt/software已有jdk-8u65-linux-x64.rpm文件，直接rpm运行安装java8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/software</span><br><span class="line">rpm -ivh jdk-8u65-linux-x64.rpm</span><br></pre></td></tr></table></figure></p>
<h3 id="4-4-查看是否安装成功"><a href="#4-4-查看是否安装成功" class="headerlink" title="4.4 查看是否安装成功"></a>4.4 查看是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h3 id="4-5-提交镜像"><a href="#4-5-提交镜像" class="headerlink" title="4.5 提交镜像"></a>4.5 提交镜像</h3><p>再打开一个终端，查看当前运行的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                                COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">3443c1097867        127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0   &quot;/bin/sh -c &apos;java ...&quot;   6 days ago          Up 6 days           0.0.0.0:18101-&gt;8101/tcp   objective_shannon</span><br></pre></td></tr></table></figure></p>
<p>获取容器id(3443c1097867)，提交镜像<br>docker commit 3443c1097867 iyihua/java</p>
<h3 id="4-6-验证镜像"><a href="#4-6-验证镜像" class="headerlink" title="4.6 验证镜像"></a>4.6 验证镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -rm iyihua/java java -version</span><br></pre></td></tr></table></figure>
<p>“-rm”参数表示不想保留容器，运行结束后即删除退出</p>
<h2 id="5-使用Dockerfile构建镜像"><a href="#5-使用Dockerfile构建镜像" class="headerlink" title="5. 使用Dockerfile构建镜像"></a>5. 使用Dockerfile构建镜像</h2><p>Dockerfile就是把手工构建镜像的过程写成一段自动执行的脚本，最终生成镜像。</p>
<h3 id="5-1-Dockerfile构建java镜像"><a href="#5-1-Dockerfile构建java镜像" class="headerlink" title="5.1 Dockerfile构建java镜像"></a>5.1 Dockerfile构建java镜像</h3><p>也就是把之前手工构建的java镜像的步骤放到脚本里，脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class="line">ADD jdk-8u65-linux-x64.rpm /usr/local</span><br><span class="line">RUN rpm -ivh /usr/local/jdk-8u65-linux-x64.rpm</span><br><span class="line">CMD java -version</span><br></pre></td></tr></table></figure></p>
<p>这个Dockerfile顺利运行要求Dockerfile所在宿主机目录含有一个准备好的java安装包jdk-8u65-linux-x64.rpm。</p>
<ul>
<li>如果构建的镜像与之前构建过的镜像的仓库名、标签名相同，之前的镜像的仓库名和标签名就会更新为<none>. 我们可以使用docker tag命令来修改镜像仓库名和标签名。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 3443c1097867 iyihua/java:1.0.0</span><br></pre></td></tr></table></figure>
</none></li>
</ul>
<h2 id="6-使用Docker-Registry管理镜像"><a href="#6-使用Docker-Registry管理镜像" class="headerlink" title="6. 使用Docker Registry管理镜像"></a>6. 使用Docker Registry管理镜像</h2><p>我们默认就是从Docker Hub下载公共镜像。官方的Docker Hub也为我们提供了一个私有仓库，可以让内部人员通过这个仓库上传下载内部镜像，不过免费用户只能创建一个私有仓库。</p>
<p>不过，我们可以通过Docker Registry开源项目，在内部搭建一个私有镜像注册中心。</p>
<h3 id="6-1-注册登录Docker-Hub"><a href="#6-1-注册登录Docker-Hub" class="headerlink" title="6.1 注册登录Docker Hub"></a>6.1 注册登录Docker Hub</h3><p>通过浏览器注册登录Docker Hub，手动创建一个私有仓库。</p>
<p>然后我们就可以通过客户端login并push镜像到仓库。</p>
<p>登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure></p>
<p>推送镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push iyihua/java</span><br></pre></td></tr></table></figure></p>
<h3 id="6-2-搭建Docker-Registry"><a href="#6-2-搭建Docker-Registry" class="headerlink" title="6.2 搭建Docker Registry"></a>6.2 搭建Docker Registry</h3><h4 id="6-2-1-启动"><a href="#6-2-1-启动" class="headerlink" title="6.2.1 启动"></a>6.2.1 启动</h4><p>通过docker本身的镜像，就可以简单的在本地搭建起Docker Registry：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry \</span><br><span class="line">  -v `pwd`/data:/var/lib/registry \</span><br><span class="line">  registry:2</span><br></pre></td></tr></table></figure></p>
<p>这样就会在127.0.0.1:5000的地址启动起Docker Registry服务.</p>
<ul>
<li>参数说明：<br>  （1）-d表示后台运行<br>  （2）-p是宿主机与容器的端口映射<br>  （3）-v是宿主机与容器的目录映射，也即目录挂载</li>
</ul>
<h4 id="6-2-2-重命名镜像标签"><a href="#6-2-2-重命名镜像标签" class="headerlink" title="6.2.2 重命名镜像标签"></a>6.2.2 重命名镜像标签</h4><p>docker push默认的镜像中心是Docker Hub，没有指明目标地址的镜像，其完整的镜像名称是“docker.io/iyihua/java”.<br>如果我们打算将iyihua/java推送到本地的Docker Registry，则需要将镜像名称修改为127.0.0.1:5000/iyihua/java.</p>
<p>使用docker tag命令更名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 3443c1097867 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>
<p>使用docker push命令推送：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 127.0.0.1:5000/iyihua/java</span><br></pre></td></tr></table></figure></p>
<h2 id="7-Spring-Boot与Docker整合"><a href="#7-Spring-Boot与Docker整合" class="headerlink" title="7. Spring Boot与Docker整合"></a>7. Spring Boot与Docker整合</h2><p>Spring Boot与Docker整合的目标是构建spring boot应用程序时可同时生成Docker镜像，并将此镜像推送至Docker Registry，整个构建过程依然使用maven来完成</p>
<p>现在假定已有一个普通spring boot应用spring-boot-docker.</p>
<h3 id="7-1-为spring-boot程序添加Dockerfile"><a href="#7-1-为spring-boot程序添加Dockerfile" class="headerlink" title="7.1 为spring boot程序添加Dockerfile"></a>7.1 为spring boot程序添加Dockerfile</h3><p>在resources目录下添加Dockerfile：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM java</span><br><span class="line">MAINTAINER &quot;iyihua&quot;&lt;wanglvyihua@gmail.com&gt;</span><br><span class="line">ADD spring-boot-docker-1.0.0.jar app.jar</span><br><span class="line">EXPOSE 8101</span><br><span class="line">CMD java -jar app.jar</span><br></pre></td></tr></table></figure></p>
<h3 id="7-2-使用maven构建Dockerfile"><a href="#7-2-使用maven构建Dockerfile" class="headerlink" title="7.2 使用maven构建Dockerfile"></a>7.2 使用maven构建Dockerfile</h3><p>在pom文件中添加docker相关插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.4.10&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;docker.registry&#125;/$&#123;project.groupId&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;$&#123;project.build.outputDirectory&#125;&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;!-- &lt;targetPath&gt;/&lt;/targetPath&gt; --&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>
<p>需要添加的属性配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;docker.registry&gt;127.0.0.1:5000&lt;/docker.registry&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="7-3-构建并推送"><a href="#7-3-构建并推送" class="headerlink" title="7.3 构建并推送"></a>7.3 构建并推送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn docker:build docker:push</span><br></pre></td></tr></table></figure>
<h3 id="7-4-docker容器启动应用"><a href="#7-4-docker容器启动应用" class="headerlink" title="7.4 docker容器启动应用"></a>7.4 docker容器启动应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 18101:8101 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure>
<ul>
<li>p参数指明宿主机和容器的端口映射</li>
<li>d参数指明要后台运行</li>
</ul>
<h3 id="7-5-调整docker容器内存"><a href="#7-5-调整docker容器内存" class="headerlink" title="7.5 调整docker容器内存"></a>7.5 调整docker容器内存</h3><p>查看docker容器运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure></p>
<p>运行应用时调整内存限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 18101:8101 -m 512m 127.0.0.1:5000/com.iyihua/spring-boot-docker:1.0.0</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>m参数指明内存调整为多少</p>
</li>
<li><p>demo代码可以在这里获取：<br><a href="https://github.com/YihuaWanglv/spring-boot-docker" target="_blank" rel="external">spring-boot-docker sample项目</a></p>
</li>
</ul>
<p>或者：<br><a href="https://github.com/YihuaWanglv/microservices/tree/master/services/spring-boot-docker" target="_blank" rel="external">microservices/spring-boot-docker</a></p>
<h2 id="附：常见问题："><a href="#附：常见问题：" class="headerlink" title="附：常见问题："></a>附：常见问题：</h2><h3 id="1-docker-iptables-failed-no-chain-target-match-by-that-name"><a href="#1-docker-iptables-failed-no-chain-target-match-by-that-name" class="headerlink" title="(1)docker iptables failed no chain/target/match by that name"></a>(1)docker iptables failed no chain/target/match by that name</h3><p>重启docker即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p>
<h3 id="2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”"><a href="#2-当docker-run-centos，出现：centos-exec-user-process-caused-“permission-denied”" class="headerlink" title="(2)当docker run centos，出现：centos exec user process caused “permission denied”"></a>(2)当docker run centos，出现：centos exec user process caused “permission denied”</h3><p>需要加一个参数：–privileged</p>
<p>结果命令变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged -i -t centos /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">大约在0.6版，privileged被引入docker。</span><br><span class="line">使用该参数，container内的root拥有真正的root权限。</span><br><span class="line">否则，container内的root只是外部的一个普通用户权限。</span><br><span class="line">privileged启动的容器，可以看到很多host上的设备，并且可以执行mount。</span><br><span class="line">甚至允许你在docker容器中启动docker容器。</span><br></pre></td></tr></table></figure></p>
<p>建议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果总是需要privileged才能正常运行docker，那么可能你安装的docker可能有问题，建议重新安装最新的docker-ce，将不再需要privileged参数.</span><br></pre></td></tr></table></figure></p>
<h3 id="3-docker-build-cannot-allocate-memory"><a href="#3-docker-build-cannot-allocate-memory" class="headerlink" title="(3)docker build cannot allocate memory"></a>(3)docker build cannot allocate memory</h3><p>这个问题的终极解决办法，还是重启docker，或者重启服务器；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-04-Docker作为服务运行容器&quot;&gt;&lt;a href=&quot;#microservices-04-Docker作为服务运行容器&quot; class=&quot;headerlink&quot; title=&quot;[microservices]04-Docker作为服务运行
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="docker" scheme="http://localhost:4000/tags/docker/"/>
    
      <category term="centos7" scheme="http://localhost:4000/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]03-Zookeeper注册发现服务</title>
    <link href="http://localhost:4000/2017/03/29/microservices-03-Zookeeper%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0%E6%9C%8D%E5%8A%A1/"/>
    <id>http://localhost:4000/2017/03/29/microservices-03-Zookeeper注册发现服务/</id>
    <published>2017-03-29T13:00:37.000Z</published>
    <updated>2017-03-29T13:44:00.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-03-Zookeeper注册发现服务"><a href="#microservices-03-Zookeeper注册发现服务" class="headerlink" title="[microservices]03-Zookeeper注册发现服务"></a>[microservices]03-Zookeeper注册发现服务</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-zookeeper原理介绍"><a href="#1-zookeeper原理介绍" class="headerlink" title="1. zookeeper原理介绍"></a>1. zookeeper原理介绍</h2><ul>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/" target="_blank" rel="external">分布式服务框架 Zookeeper – 管理分布式环境中的数据</a></li>
</ul>
<h2 id="2-基础微服务简单架构与demo说明"><a href="#2-基础微服务简单架构与demo说明" class="headerlink" title="2. 基础微服务简单架构与demo说明"></a>2. 基础微服务简单架构与demo说明</h2><p><img src="/images/framework-microservices.png" alt=""></p>
<ul>
<li>api-gateway实例：dispatcher(/microservices/api-gateway/dispatcher)</li>
<li>web-client实例：web-client(/microservices/apps/web-client)</li>
<li><p>api-service实例：api-demo(/microservices/services/api-demo)</p>
</li>
<li><p>zookeeper：注册中心</p>
</li>
<li>spring boot应用api-demo，作为一个service微服务实例，依赖一个服务注册组件service-registry(/microservices/services/service-registry)，实现服务向zookeeper注册。启动api-demo即可向外提供服务并注册到zookeeper。</li>
<li>Nodejs应用dispatcher，作为api网关，它使用一个node-zookeeper-client组件，连接zookeeper，根据client传递过来的service名称，发现服务，并转发请求到目标服务中。</li>
<li>web-client，即是前端web客户端，它只向api网关dispatcher发送请求，并且在请求的header中传递Service-Name字段，指明要请求的服务名称.</li>
</ul>
<h2 id="3-运行demo"><a href="#3-运行demo" class="headerlink" title="3. 运行demo"></a>3. 运行demo</h2><h3 id="3-1-bin-zkServer-sh-start启动zookeeper"><a href="#3-1-bin-zkServer-sh-start启动zookeeper" class="headerlink" title="3.1 bin/zkServer.sh start启动zookeeper"></a>3.1 bin/zkServer.sh start启动zookeeper</h3><p>没有zookeeper请先下载：<a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="external">http://zookeeper.apache.org/releases.html</a></p>
<h3 id="3-2-打包运行api-demo"><a href="#3-2-打包运行api-demo" class="headerlink" title="3.2 打包运行api-demo"></a>3.2 打包运行api-demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../microservices/services/api-demo</span><br><span class="line">mvn clean package</span><br><span class="line">java -jar api-demo-1.0.0.jar</span><br></pre></td></tr></table></figure>
<p>或者直接导入项目，运行ApiDemoApplication启动.</p>
<h3 id="3-3-运行api网关dispatcher"><a href="#3-3-运行api网关dispatcher" class="headerlink" title="3.3 运行api网关dispatcher"></a>3.3 运行api网关dispatcher</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../microservices/api-gateway/dispatcher</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>如果想每次更改代码后即刻生效，可使用supervisor模块启动应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install supervisor -g</span><br><span class="line">supervisor app.js</span><br></pre></td></tr></table></figure></p>
<p>如果需要Node应用在发生异常停止时能够重新启动，可使用forever模块启动应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install forever -g</span><br><span class="line">forever app.js</span><br></pre></td></tr></table></figure></p>
<p>forever app.js表示在前台启动，想要后台启动，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever start app.js</span><br></pre></td></tr></table></figure></p>
<h3 id="3-4-运行web-client，访问首页，进行服务请求"><a href="#3-4-运行web-client，访问首页，进行服务请求" class="headerlink" title="3.4 运行web-client，访问首页，进行服务请求."></a>3.4 运行web-client，访问首页，进行服务请求.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../microservices/api-gateway/dispatcher</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:9001/">http://localhost:9001/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-03-Zookeeper注册发现服务&quot;&gt;&lt;a href=&quot;#microservices-03-Zookeeper注册发现服务&quot; class=&quot;headerlink&quot; title=&quot;[microservices]03-Zookeeper注
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://localhost:4000/tags/zookeeper/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="微服务" scheme="http://localhost:4000/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="服务注册" scheme="http://localhost:4000/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
    
      <category term="服务发现" scheme="http://localhost:4000/tags/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>[microservices]02-Nodejs&amp;Express作为微服务api网关</title>
    <link href="http://localhost:4000/2017/03/29/microservices-02-Nodejs-Express%E4%BD%9C%E4%B8%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1api%E7%BD%91%E5%85%B3/"/>
    <id>http://localhost:4000/2017/03/29/microservices-02-Nodejs-Express作为微服务api网关/</id>
    <published>2017-03-29T12:54:07.000Z</published>
    <updated>2017-03-29T13:43:52.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="microservices-02-Nodejs-amp-Express作为微服务api网关"><a href="#microservices-02-Nodejs-amp-Express作为微服务api网关" class="headerlink" title="[microservices]02-Nodejs&amp;Express作为微服务api网关"></a>[microservices]02-Nodejs&amp;Express作为微服务api网关</h1><ul>
<li>github项目地址： <a href="https://github.com/YihuaWanglv/microservices" target="_blank" rel="external">microservices</a></li>
</ul>
<h2 id="1-安装Node、NPM和Express"><a href="#1-安装Node、NPM和Express" class="headerlink" title="1. 安装Node、NPM和Express"></a>1. 安装Node、NPM和Express</h2><p>安装Nodejs后，npm会一起安装，然后npm install express安装Express.</p>
<h2 id="2-使用Express框架开发web应用"><a href="#2-使用Express框架开发web应用" class="headerlink" title="2. 使用Express框架开发web应用"></a>2. 使用Express框架开发web应用</h2><p>express使用例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var port = 1234;</span><br><span class="line">var app = express();</span><br><span class="line">app.use(express.static(&apos;.&apos;));</span><br><span class="line">app.listen(port, function()&#123;</span><br><span class="line">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>express进行简易路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/hello&apos;, function(req, res)&#123;</span><br><span class="line">    res.send(&apos;Hello&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="3-搭建Nodejs集群环境"><a href="#3-搭建Nodejs集群环境" class="headerlink" title="3. 搭建Nodejs集群环境"></a>3. 搭建Nodejs集群环境</h2><p>利用服务器的多核CPU，让每个CPU都运行一个Node.js进程，例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var cluster = require(&apos;cluster&apos;);  </span><br><span class="line">var express = require(&apos;express&apos;);  </span><br><span class="line">var numCPUs = require(&apos;os&apos;).cpus().length;</span><br><span class="line"></span><br><span class="line">if (cluster.isMaster) &#123;  </span><br><span class="line">    for (var i = 0; i &lt; numCPUs; i++) &#123;</span><br><span class="line">        // Create a worker</span><br><span class="line">        cluster.fork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // Workers share the TCP connection in this server</span><br><span class="line">    var app = express();</span><br><span class="line"></span><br><span class="line">    app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">        res.send(&apos;Hello World!&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // All workers use this port</span><br><span class="line">    app.listen(8080);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-使用Node-js实现反向代理，作为统一服务网关"><a href="#4-使用Node-js实现反向代理，作为统一服务网关" class="headerlink" title="4. 使用Node.js实现反向代理，作为统一服务网关"></a>4. 使用Node.js实现反向代理，作为统一服务网关</h2><p>使用Node作为api网关，原理是利用Node的http-proxy模块来启动代理服务器，实现反向代理。<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var httpProxy = require(&apos;http-proxy&apos;);</span><br><span class="line">var PORT = 3000;</span><br><span class="line"></span><br><span class="line">var proxy = httpProxy.createProxyServer();</span><br><span class="line">proxy.on(&apos;error&apos;, function(err, req, res)&#123;</span><br><span class="line">    res.end();//当代理的请求发生错误时，输出空白的相应数据</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var app = http.createServer(function(req, res) &#123;</span><br><span class="line">    proxy.web(req, res, &#123;</span><br><span class="line">        target: &apos;http://localhost:8080&apos; //代理的目标地址</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(PORT, function()&#123;</span><br><span class="line">    console.log(&apos;server is running at %d&apos;, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>下一步，就是服务的注册和发现，Nodejs网关将需要增加服务发现的功能</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;microservices-02-Nodejs-amp-Express作为微服务api网关&quot;&gt;&lt;a href=&quot;#microservices-02-Nodejs-amp-Express作为微服务api网关&quot; class=&quot;headerlink&quot; title=&quot;[m
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://localhost:4000/tags/zookeeper/"/>
    
      <category term="microservices" scheme="http://localhost:4000/tags/microservices/"/>
    
      <category term="微服务" scheme="http://localhost:4000/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Node.js" scheme="http://localhost:4000/tags/Node-js/"/>
    
      <category term="Express" scheme="http://localhost:4000/tags/Express/"/>
    
      <category term="api网关" scheme="http://localhost:4000/tags/api%E7%BD%91%E5%85%B3/"/>
    
      <category term="api-gateway" scheme="http://localhost:4000/tags/api-gateway/"/>
    
  </entry>
  
  <entry>
    <title>shell-从svn更新代码maven打包后部署的一个简单脚本</title>
    <link href="http://localhost:4000/2017/03/11/shell-%E4%BB%8Esvn%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81maven%E6%89%93%E5%8C%85%E5%90%8E%E9%83%A8%E7%BD%B2%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%84%9A%E6%9C%AC/"/>
    <id>http://localhost:4000/2017/03/11/shell-从svn更新代码maven打包后部署的一个简单脚本/</id>
    <published>2017-03-11T07:48:45.000Z</published>
    <updated>2017-03-11T07:54:42.480Z</updated>
    
    <content type="html"><![CDATA[<p>shell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#build icms app</span><br><span class="line">path_src=/home/src/trunk/icms</span><br><span class="line">path_target=$&#123;path_src&#125;/target</span><br><span class="line">path_app=/home/app</span><br><span class="line">path_log=/data/logs/icms</span><br><span class="line">file_app=icms-1.4.1.RELEASE.jar</span><br><span class="line">url_app=localhost:8091</span><br><span class="line"></span><br><span class="line">cd /home/src/trunk/icms</span><br><span class="line">svn update</span><br><span class="line">mvn clean package -P pro -Dmaven.test.skip=true</span><br><span class="line"></span><br><span class="line">if [ -f $&#123;path_target&#125;/$&#123;file_app&#125; ]; then</span><br><span class="line">        echo &quot;build success, now begin to deploy...&quot;</span><br><span class="line">        curl -X POST $&#123;url_app&#125;/shutdown</span><br><span class="line">        yes | cp -rf $&#123;path_target&#125;/$&#123;file_app&#125; $&#123;path_app&#125;/</span><br><span class="line">        chmod +x $&#123;path_app&#125;/$&#123;file_app&#125;</span><br><span class="line">        nohup java -jar $&#123;path_app&#125;/$&#123;file_app&#125; &lt; /dev/null &gt; $&#123;path_log&#125;/icms.log 2&gt;&amp;1 &amp;</span><br><span class="line">else</span><br><span class="line">        echo &quot;build failed!&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;build process finish.&quot;</span><br></pre></td></tr></table></figure>
<p>脚本中的“curl -X POST ${url_app}/shutdown”这里是因为使用了spring boot的优雅关闭应用，需要在应用添加maven依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后在配置文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">endpoints.shutdown.enabled=true</span><br><span class="line">endpoints.shutdown.sensitive=false</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell是个好东西，服务器上面的操作做多了，就需要想想办法把手工做的事情让脚本帮我们处理。以下是一个针对spring boot项目从svn更新出最新代码，然后maven打包，最后启动发布的一个脚本例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
      <category term="shell" scheme="http://localhost:4000/tags/shell/"/>
    
      <category term="sh" scheme="http://localhost:4000/tags/sh/"/>
    
      <category term="linux" scheme="http://localhost:4000/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>git如何使用-记一些常用的git使用方法</title>
    <link href="http://localhost:4000/2017/03/11/git%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-%E8%AE%B0%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://localhost:4000/2017/03/11/git如何使用-记一些常用的git使用方法/</id>
    <published>2017-03-11T07:47:31.000Z</published>
    <updated>2017-03-11T07:49:37.872Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>git如何提交修改到远程仓库？</p>
<ul>
<li>$ git commit –m “desc..”  //对你更新或修改了哪些内容做一个描述</li>
<li>$ git remote add origin <a href="https://github.com/YihuaWanglv/post.git" target="_blank" rel="external">https://github.com/YihuaWanglv/post.git</a><br>//如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。</li>
<li>$ git push -u origin master  //将本地的项目提交到远程仓库中</li>
</ul>
</li>
<li><p>如果你是第一次想把github上面的项目克隆到本地或者要克隆别人的项目到地。</p>
<ul>
<li>$ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。</li>
</ul>
</li>
<li><p>假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？</p>
<ul>
<li>$ git fetch origin    //取得远程更新，这里可以看做是准备要取了</li>
<li>$ git merge origin/master  //把更新的内容合并到本地分支/master</li>
</ul>
</li>
<li><p>添加和提交</p>
<ul>
<li>git add *</li>
<li>git commit -m “代码提交信息”</li>
<li>git push origin master</li>
<li>输入用户名密码</li>
<li>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</li>
<li>git remote add origin <server></server></li>
</ul>
</li>
<li>重装系统后，git项目如何恢复？<ul>
<li>本地先进入原项目路径，git clone [path of project], 连接上</li>
<li>然后告诉git全局配置你是谁，输入你的邮箱和名称</li>
<li>git config –global user.email “you@example.com”</li>
<li>git config –global user.name “Your Name”</li>
<li>然后该干嘛干嘛</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;git如何提交修改到远程仓库？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$ git commit –m “desc..”  //对你更新或修改了哪些内容做一个描述&lt;/li&gt;
&lt;li&gt;$ git remote add origin &lt;a href=&quot;https://git
    
    </summary>
    
    
      <category term="git" scheme="http://localhost:4000/tags/git/"/>
    
      <category term="github" scheme="http://localhost:4000/tags/github/"/>
    
      <category term="使用方法" scheme="http://localhost:4000/tags/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx作为简单的图片服务器</title>
    <link href="http://localhost:4000/2017/03/10/%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://localhost:4000/2017/03/10/使用Nginx作为简单的图片服务器/</id>
    <published>2017-03-10T15:59:19.000Z</published>
    <updated>2017-03-10T16:11:13.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ul>
<li>为什么要用Nginx代理静态图片？</li>
</ul>
<p>图片服务器是我们经常要用到的，在开始的时候，当还没用上阿里云oss，并且觉得FastDFS略微重量级的时候，就可以使用Nginx作为简单的图片服务器。</p>
<p>一下就是Nginx的conf配置文件例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location /images &#123;</span><br><span class="line">            root   /data/icms;</span><br><span class="line">            add_header &apos;Access-Control-Allow-Origin&apos; *;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            charset utf-8;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>所有<a href="http://domain/image/xxx.png" target="_blank" rel="external">http://domain/image/xxx.png</a> 的图片都会请求到服务器/data/icms/images内对应的图片。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么要用Nginx代理静态图片？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图片服务器是我们经常要用到的，在开始的时候，当还没用上阿
    
    </summary>
    
    
      <category term="ngnix" scheme="http://localhost:4000/tags/ngnix/"/>
    
      <category term="picture" scheme="http://localhost:4000/tags/picture/"/>
    
      <category term="server" scheme="http://localhost:4000/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository</title>
    <link href="http://localhost:4000/2017/03/10/%E4%BD%BF%E7%94%A8java%E6%94%B6%E9%9B%86github-trending%E9%A1%B5%E9%9D%A2%E4%B8%AD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%B0%E5%8A%A8%E6%80%81%E5%B9%B6%E5%BD%92%E6%A1%A3%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84repository/"/>
    <id>http://localhost:4000/2017/03/10/使用java收集github-trending页面中感兴趣的语言的新动态并归档到自己的repository/</id>
    <published>2017-03-10T14:00:02.000Z</published>
    <updated>2017-03-10T14:49:43.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-github-trending"><a href="#java-github-trending" class="headerlink" title="java-github-trending"></a>java-github-trending</h1><h2 id="what-is-this"><a href="#what-is-this" class="headerlink" title="what is this?"></a>what is this?</h2><p><a href="https://github.com/trending" target="_blank" rel="external">github-trending</a> 展示了每天趋势较好的一些github项目。<br>java-github-trending项目的目的就是每天定时拉取github-trending页面中感兴趣的语言的流行项目，并以日期为分组归档到markdown文件里面，最后提交到github的repository。</p>
<ul>
<li>我的项目github地址：<a href="https://github.com/YihuaWanglv/github-trending" target="_blank" rel="external">github-trending</a></li>
</ul>
<h2 id="how-to-use"><a href="#how-to-use" class="headerlink" title="how to use?"></a>how to use?</h2><ul>
<li>@Before<br>首先要有一个github账号，然后要准备一个运行应用的环境.</li>
</ul>
<h3 id="在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中"><a href="#在你的运行环境中生成一个ssh-key，-然后保存到github的key列表中" class="headerlink" title="在你的运行环境中生成一个ssh key， 然后保存到github的key列表中."></a>在你的运行环境中生成一个ssh key， 然后保存到github的key列表中.</h3><h3 id="git-clone-project"><a href="#git-clone-project" class="headerlink" title="git clone project"></a>git clone project</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:YihuaWanglv/github-trending.git</span><br></pre></td></tr></table></figure>
<h3 id="maven-package"><a href="#maven-package" class="headerlink" title="maven package"></a>maven package</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd github-trending</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<h3 id="move-github-trending-jar-to-project-root-path"><a href="#move-github-trending-jar-to-project-root-path" class="headerlink" title="move github-trending.jar to project root path"></a>move github-trending.jar to project root path</h3><h3 id="将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar"><a href="#将jar和sh脚本设置为可执行，然后nohu-run-github-trending-jar" class="headerlink" title="将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar"></a>将jar和sh脚本设置为可执行，然后nohu  run github-trending.jar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x rungit.sh</span><br><span class="line">chmon +x github-trending.jar</span><br><span class="line">nohup java -jar github-trending.jar &lt; /dev/null &gt; /data/logs/github-trending.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h2 id="how-it-works"><a href="#how-it-works" class="headerlink" title="how it works?"></a>how it works?</h2><p>using spring @Scheduled as daily task.<br>using Jsoup lib to get and parse page content<br>use java.io lib to create markdown file and append content to md file.<br>use java Runtime class to run a shell to commit and push to github.</p>
<p>tips: 这个功能本身使用简单的java application，再配合linux的cron定时执行shell，即可更简单的做到，但由于一些原因，我使用spring boot来构建这个程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java-github-trending&quot;&gt;&lt;a href=&quot;#java-github-trending&quot; class=&quot;headerlink&quot; title=&quot;java-github-trending&quot;&gt;&lt;/a&gt;java-github-trending&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="java" scheme="http://localhost:4000/tags/java/"/>
    
      <category term="spring boot" scheme="http://localhost:4000/tags/spring-boot/"/>
    
      <category term="github-trending" scheme="http://localhost:4000/tags/github-trending/"/>
    
      <category term="Runtime" scheme="http://localhost:4000/tags/Runtime/"/>
    
      <category term="github-repository" scheme="http://localhost:4000/tags/github-repository/"/>
    
  </entry>
  
  <entry>
    <title>动态报表模块设计</title>
    <link href="http://localhost:4000/2016/12/18/%E5%8A%A8%E6%80%81%E6%8A%A5%E8%A1%A8%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/"/>
    <id>http://localhost:4000/2016/12/18/动态报表模块设计/</id>
    <published>2016-12-18T07:49:16.000Z</published>
    <updated>2016-12-18T07:50:16.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态报表模块设计"><a href="#动态报表模块设计" class="headerlink" title="动态报表模块设计"></a>动态报表模块设计</h1><h2 id="1-需求概述"><a href="#1-需求概述" class="headerlink" title="1.需求概述"></a>1.需求概述</h2><ul>
<li>实现根据dba提供的sql语句，动态生成业务部门需要的报表展示页面</li>
</ul>
<h2 id="2-页面原型"><a href="#2-页面原型" class="headerlink" title="2.页面原型"></a>2.页面原型</h2><h3 id="1）报表展示和预览页面"><a href="#1）报表展示和预览页面" class="headerlink" title="1）报表展示和预览页面"></a>1）报表展示和预览页面</h3><p><img src="/images/ireport_design_ui_01.png" alt=""></p>
<ul>
<li>菜单栏，每个app代表一个应用，每个report代表一个具体报表</li>
<li>“添加报表”菜单，进入添加报表页面</li>
<li>查询框，通过’ireports_report_setting’表的’query_column’动态生成</li>
<li>报表table，通过’ireports_report_setting’表的’table_column_mapping’动态生成</li>
</ul>
<h3 id="2）报表添加与设置页面"><a href="#2）报表添加与设置页面" class="headerlink" title="2）报表添加与设置页面"></a>2）报表添加与设置页面</h3><p><img src="/images/ireport_design_ui_02.png" alt=""></p>
<ul>
<li>查询类型有：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1, = (等于)</span><br><span class="line">2, &gt; (大于)</span><br><span class="line">3, &lt; (小于)</span><br><span class="line">4, &gt;= (大于等于)</span><br><span class="line">5, &lt;= (小于等于)</span><br><span class="line">6, time (时间区间)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-模型设计"><a href="#3-模型设计" class="headerlink" title="3.模型设计"></a>3.模型设计</h2><h3 id="1）数据库模型图"><a href="#1）数据库模型图" class="headerlink" title="1）数据库模型图"></a>1）数据库模型图</h3><p><img src="/images/ireport_design_table.png" alt=""></p>
<h3 id="2）模型表说明"><a href="#2）模型表说明" class="headerlink" title="2）模型表说明"></a>2）模型表说明</h3><ul>
<li><p>ireports_app(报表所属应用或模块)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_app` (</span><br><span class="line">  `aid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(50) NOT NULL COMMENT &apos;应用名称&apos;,</span><br><span class="line">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class="line">  PRIMARY KEY (`aid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表所属应用或模块&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ireports_report(报表记录表)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_report` (</span><br><span class="line">  `rid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表id&apos;,</span><br><span class="line">  `rsid` int(11) DEFAULT &apos;0&apos; COMMENT &apos;报表详细设置id&apos;,</span><br><span class="line">  `report` varchar(50) NOT NULL COMMENT &apos;报表名称&apos;,</span><br><span class="line">  `sql` text NOT NULL COMMENT &apos;报表sql&apos;,</span><br><span class="line">  `type` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;报表类型&apos;,</span><br><span class="line">  `status` tinyint(4) DEFAULT &apos;0&apos; COMMENT &apos;状态&apos;,</span><br><span class="line">  PRIMARY KEY (`rid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表记录表&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ireports_report_setting(报表详细设置表)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_report_setting` (</span><br><span class="line">  `rsid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;报表设置id&apos;,</span><br><span class="line">  `is_page` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;是否分页&apos;,</span><br><span class="line">  `table_column_mapping` longtext COMMENT &apos;报表表头字段映射&apos;,</span><br><span class="line">  `query_column` text COMMENT &apos;报表查询字段配置&apos;,</span><br><span class="line">  PRIMARY KEY (`rsid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;报表详细设置表&apos;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ireports_query_type(查询类型表)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `ireports_query_type` (</span><br><span class="line">  `qtid` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;查询类型id&apos;,</span><br><span class="line">  `type` varchar(20) NOT NULL COMMENT &apos;查询类型&apos;,</span><br><span class="line">  PRIMARY KEY (`qtid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;查询类型表&apos;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-技术实现"><a href="#4-技术实现" class="headerlink" title="4.技术实现"></a>4.技术实现</h2><h3 id="1-报表数据来源与连接：2个方案"><a href="#1-报表数据来源与连接：2个方案" class="headerlink" title="1)报表数据来源与连接：2个方案"></a>1)报表数据来源与连接：2个方案</h3><ul>
<li>只连接业务员库，每次当添加的报表需要数据时，从基础数据库中同步到业务员库</li>
<li>业务员系统添加对基础数据库的连接，添加一个内测or公测的基础数据库</li>
</ul>
<h3 id="2）数据连接层"><a href="#2）数据连接层" class="headerlink" title="2）数据连接层"></a>2）数据连接层</h3><ul>
<li>使用mybatis</li>
</ul>
<h3 id="3-动态报表展示"><a href="#3-动态报表展示" class="headerlink" title="3)动态报表展示"></a>3)动态报表展示</h3><ul>
<li>使用Freemarker + Jquery</li>
</ul>
<p>后台读取报表配置后，使用Freemarker模板生成页面框架与页面元素。</p>
<p>页面载入后，使用Jquery异步请求报表数据，并展现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态报表模块设计&quot;&gt;&lt;a href=&quot;#动态报表模块设计&quot; class=&quot;headerlink&quot; title=&quot;动态报表模块设计&quot;&gt;&lt;/a&gt;动态报表模块设计&lt;/h1&gt;&lt;h2 id=&quot;1-需求概述&quot;&gt;&lt;a href=&quot;#1-需求概述&quot; class=&quot;headerli
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://localhost:4000/2016/12/08/hello-world/"/>
    <id>http://localhost:4000/2016/12/08/hello-world/</id>
    <published>2016-12-08T15:46:29.737Z</published>
    <updated>2016-02-20T04:02:04.711Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
