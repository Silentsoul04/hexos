<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iyihua</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-08T09:00:12.177Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wanglv Yihua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[java][design-pattern]java设计模式之Builder模式</title>
    <link href="http://yoursite.com/2016/05/08/java-design-pattern-java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8BBuilder%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/05/08/java-design-pattern-java设计模式之Builder模式/</id>
    <published>2016-05-08T08:58:38.000Z</published>
    <updated>2016-05-08T09:00:12.177Z</updated>
    
    <content type="html">&lt;h2 id=&quot;java设计模式之Builder模式&quot;&gt;&lt;a href=&quot;#java设计模式之Builder模式&quot; class=&quot;headerlink&quot; title=&quot;java设计模式之Builder模式&quot;&gt;&lt;/a&gt;java设计模式之Builder模式&lt;/h2&gt;&lt;p&gt;设计模式模式很多，实际常用的很少。&lt;br&gt;《Effective Java》这本书里提到过的一种模式builder模式，个人认为非常值得推荐。&lt;br&gt;假设有一个entity(Entity)，有id，name两个字段，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package demo;&amp;#10;public class Entity &amp;#123;&amp;#10;    private int id;&amp;#10;    private String name;&amp;#10;    public int getId() &amp;#123;&amp;#10;        return id;&amp;#10;    &amp;#125;&amp;#10;    public void setId(int id) &amp;#123;&amp;#10;        this.id = id;&amp;#10;    &amp;#125;&amp;#10;    public String getName() &amp;#123;&amp;#10;        return name;&amp;#10;    &amp;#125;&amp;#10;    public void setName(String name) &amp;#123;&amp;#10;        this.name = name;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了不用每次初始化的时候，要一个一个的setxxx设置字段值，通常我们会创建构造函数，通过构造函数直接传入字段，初始化。&lt;br&gt;加入构造函数的实体代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Entity &amp;#123;&amp;#10;    private int id;&amp;#10;    private String name;&amp;#10;    public Entity() &amp;#123;&amp;#10;        super();&amp;#10;    &amp;#125;&amp;#10;    public Entity(int id, String name) &amp;#123;&amp;#10;        super();&amp;#10;        this.id = id;&amp;#10;        this.name = name;&amp;#10;    &amp;#125;&amp;#10;    public int getId() &amp;#123;&amp;#10;        return id;&amp;#10;    &amp;#125;&amp;#10;    public void setId(int id) &amp;#123;&amp;#10;        this.id = id;&amp;#10;    &amp;#125;&amp;#10;    public String getName() &amp;#123;&amp;#10;        return name;&amp;#10;    &amp;#125;&amp;#10;    public void setName(String name) &amp;#123;&amp;#10;        this.name = name;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后需要初始化实体的时候，我们这样做：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Entity entity = new Entity(1, &amp;#34;name&amp;#34;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种用法很常用，但是问题来了。&lt;br&gt;当实体Entity的字段需要增加变化的时候怎么办呢？&lt;br&gt;比如增加字段descr，这样构造函数和客户端初始化都需要更新：&lt;br&gt;实体增加：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private String descr;&amp;#10;public String getDescr() &amp;#123;&amp;#10;    return descr;&amp;#10;&amp;#125;&amp;#10;public void setDescr(String descr) &amp;#123;&amp;#10;    this.descr = descr;&amp;#10;&amp;#125;&amp;#10;public Entity(int id, String name, String descr) &amp;#123;&amp;#10;    super();&amp;#10;    this.id = id;&amp;#10;    this.name = name;&amp;#10;    this.descr = descr;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后原来调用构造函数初始化的代码也需要改动：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Entity entity = new Entity(1, &amp;#34;name&amp;#34;, &amp;#34;descr&amp;#34;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你的class是不确定的参数，后续可能经常变动，那么你的构造函数可能需要很多个，并且不停的变动，而且，构造函数参数多的时候，参数也很不容易记住。&lt;/p&gt;
&lt;p&gt;而Effective Java中则推荐一种builder模式来进行实体初始化&lt;br&gt;如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Entity &amp;#123;&amp;#10;    private int id;&amp;#10;    private String name;&amp;#10;    private String descr;&amp;#10;    public static class Builder &amp;#123;&amp;#10;        private int id;&amp;#10;        private String name;&amp;#10;        private String descr;&amp;#10;        public Builder(int id) &amp;#123;&amp;#10;            this.id = id;&amp;#10;        &amp;#125;&amp;#10;        public Builder name(String name) &amp;#123;&amp;#10;            this.name = name;&amp;#10;            return this;&amp;#10;        &amp;#125;&amp;#10;        public Builder descr(String descr) &amp;#123;&amp;#10;            this.descr = descr;&amp;#10;            return this;&amp;#10;        &amp;#125;&amp;#10;        public Entity build() &amp;#123;&amp;#10;            return new Entity(this);&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;    private Entity(Builder b) &amp;#123;&amp;#10;        this.id = b.id;&amp;#10;        this.name = b.name;&amp;#10;        this.descr = b.descr;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;初始化实例的时候，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Entity entity = new Entity.Builder(10).name(&amp;#34;name&amp;#34;).descr(&amp;#34;descr&amp;#34;).build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样的写法，好处是，假如实体Entity以后变化很大，加入很多字段，不会影响到之前客户端初始化的代码，而且，这个初始化的过程非常清晰简单。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java设计模式之Builder模式&quot;&gt;&lt;a href=&quot;#java设计模式之Builder模式&quot; class=&quot;headerlink&quot; title=&quot;java设计模式之Builder模式&quot;&gt;&lt;/a&gt;java设计模式之Builder模式&lt;/h2&gt;&lt;p&gt;设计模式模式
    
    </summary>
    
    
      <category term="Builder" scheme="http://yoursite.com/tags/Builder/"/>
    
      <category term="design pattern" scheme="http://yoursite.com/tags/design-pattern/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java-web知识体系</title>
    <link href="http://yoursite.com/2016/05/04/java-web%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2016/05/04/java-web知识体系/</id>
    <published>2016-05-04T15:05:21.000Z</published>
    <updated>2016-05-04T15:07:13.154Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一张java-web知识体系思维导图&quot;&gt;&lt;a href=&quot;#一张java-web知识体系思维导图&quot; class=&quot;headerlink&quot; title=&quot;一张java web知识体系思维导图&quot;&gt;&lt;/a&gt;一张java web知识体系思维导图&lt;/h2&gt;&lt;p&gt;就是稍微旧了点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/java-web.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一张java-web知识体系思维导图&quot;&gt;&lt;a href=&quot;#一张java-web知识体系思维导图&quot; class=&quot;headerlink&quot; title=&quot;一张java web知识体系思维导图&quot;&gt;&lt;/a&gt;一张java web知识体系思维导图&lt;/h2&gt;&lt;p&gt;就是稍微旧了
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java web" scheme="http://yoursite.com/tags/java-web/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>springmvc rest api versioning</title>
    <link href="http://yoursite.com/2016/05/03/springmvc-rest-api-versioning/"/>
    <id>http://yoursite.com/2016/05/03/springmvc-rest-api-versioning/</id>
    <published>2016-05-03T15:34:35.000Z</published>
    <updated>2016-05-03T15:37:38.979Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/mindhaq/restapi-versioning-spring.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mindhaq/restapi-versioning-spring.git&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/augusto/restVersioning.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/augusto/restVersioning.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这两个git项目里提供了4种在springmvc中进行api版本控制的处理方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;/api/v1/xxx&lt;br&gt;controller中的方法注解写法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ResponseBody&amp;#10;@RequestMapping(value = &amp;#34;/apiurl/&amp;#123;version&amp;#125;/hello&amp;#34;, method = GET, produces = APPLICATION_JSON_VALUE)&amp;#10;public Hello sayHelloWorldUrl(@PathVariable final ValidVersion version) &amp;#123;&amp;#10;    return new Hello();&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/api/xxx&lt;br&gt;在header中添加”X-API-Version”:”v1”来进行版本请求的区别&lt;br&gt;controller中的方法注解写法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ResponseBody&amp;#10;@RequestMapping(value = &amp;#34;/apiheader/hello&amp;#34;, method = GET, produces = APPLICATION_JSON_VALUE)&amp;#10;public Hello sayHelloWorldHeader(@RequestHeader(&amp;#34;X-API-Version&amp;#34;) final ValidVersion version) &amp;#123;&amp;#10;    return new Hello();&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/api/xxx&lt;br&gt;在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别&lt;br&gt;controller中的方法注解写法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ResponseBody&amp;#10;@RequestMapping(&amp;#10;    value = &amp;#34;/apiaccept/hello&amp;#34;, method = GET,&amp;#10;    produces = &amp;#123;&amp;#34;application/vnd.company.app-v1+json&amp;#34;, &amp;#34;application/vnd.company.app-v2+json&amp;#34;&amp;#125;&amp;#10;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/api/xxx&lt;br&gt;在header中添加Accept: “application/vnd.company.app-v1+json”来进行版本区别&lt;br&gt;controller写法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Controller&amp;#10;@VersionedResource(media = &amp;#34;application/vnd.app.resource&amp;#34;)&amp;#10;public class TestController &amp;#123;&amp;#10;&amp;#10;    @RequestMapping(value = &amp;#123;&amp;#34;/resource&amp;#34;&amp;#125;, method = RequestMethod.GET)&amp;#10;    @VersionedResource(from = &amp;#34;1.0&amp;#34;, to = &amp;#34;1.0&amp;#34;)&amp;#10;    @ResponseBody&amp;#10;    public Resource getResource_v1() &amp;#123;&amp;#10;        return new Resource(&amp;#34;1.0&amp;#34;);&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @RequestMapping(value = &amp;#123;&amp;#34;/resource&amp;#34;&amp;#125;, method = RequestMethod.GET)&amp;#10;    @VersionedResource(from = &amp;#34;2.0&amp;#34;)&amp;#10;    @ResponseBody&amp;#10;    public Resource getResource_v2_onwards() &amp;#123;&amp;#10;        return new Resource(&amp;#34;2.0&amp;#34;);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/mindhaq/restapi-versioning-spring.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mindhaq/restapi-vers
    
    </summary>
    
    
      <category term="api" scheme="http://yoursite.com/tags/api/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="rest" scheme="http://yoursite.com/tags/rest/"/>
    
      <category term="springmvc" scheme="http://yoursite.com/tags/springmvc/"/>
    
      <category term="versioning" scheme="http://yoursite.com/tags/versioning/"/>
    
  </entry>
  
  <entry>
    <title>centos6环境下配置mysql主从同步</title>
    <link href="http://yoursite.com/2016/04/25/centos6%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2016/04/25/centos6环境下配置mysql主从同步/</id>
    <published>2016-04-25T13:22:51.000Z</published>
    <updated>2016-04-25T13:25:33.126Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1、主从服务器分别作以下操作：&quot;&gt;&lt;a href=&quot;#1、主从服务器分别作以下操作：&quot; class=&quot;headerlink&quot; title=&quot;1、主从服务器分别作以下操作：&quot;&gt;&lt;/a&gt;1、主从服务器分别作以下操作：&lt;/h2&gt;&lt;p&gt;  1.1、版本一致&lt;br&gt;  1.2、初始化表，并在后台启动mysql&lt;br&gt;  1.3、修改root的密码&lt;/p&gt;
&lt;h2 id=&quot;2、修改主服务器master&quot;&gt;&lt;a href=&quot;#2、修改主服务器master&quot; class=&quot;headerlink&quot; title=&quot;2、修改主服务器master:&quot;&gt;&lt;/a&gt;2、修改主服务器master:&lt;/h2&gt;&lt;p&gt;   #vi /etc/my.cnf&lt;br&gt;       [mysqld]&lt;br&gt;       log-bin=mysql-bin   //[必须]启用二进制日志&lt;br&gt;       server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段&lt;/p&gt;
&lt;h2 id=&quot;3、修改从服务器slave&quot;&gt;&lt;a href=&quot;#3、修改从服务器slave&quot; class=&quot;headerlink&quot; title=&quot;3、修改从服务器slave:&quot;&gt;&lt;/a&gt;3、修改从服务器slave:&lt;/h2&gt;&lt;p&gt;   #vi /etc/my.cnf&lt;br&gt;       [mysqld]&lt;br&gt;       log-bin=mysql-bin   //[不是必须]启用二进制日志&lt;br&gt;       server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段&lt;/p&gt;
&lt;h2 id=&quot;4、重启两台服务器的mysql&quot;&gt;&lt;a href=&quot;#4、重启两台服务器的mysql&quot; class=&quot;headerlink&quot; title=&quot;4、重启两台服务器的mysql&quot;&gt;&lt;/a&gt;4、重启两台服务器的mysql&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/etc/init.d/mysql restart
or：
service mysqld restart
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;5、在主服务器上建立帐户并授权slave&quot;&gt;&lt;a href=&quot;#5、在主服务器上建立帐户并授权slave&quot; class=&quot;headerlink&quot; title=&quot;5、在主服务器上建立帐户并授权slave:&quot;&gt;&lt;/a&gt;5、在主服务器上建立帐户并授权slave:&lt;/h2&gt;&lt;p&gt;  #mysql -uroot -proot&lt;br&gt;   mysql&amp;gt;GRANT REPLICATION SLAVE ON &lt;em&gt;.&lt;/em&gt; to ‘mysync’@’%’ identified by ‘root’; //一般不用root帐号，%表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。&lt;/p&gt;
&lt;h2 id=&quot;6、登录主服务器的mysql，查询master的状态&quot;&gt;&lt;a href=&quot;#6、登录主服务器的mysql，查询master的状态&quot; class=&quot;headerlink&quot; title=&quot;6、登录主服务器的mysql，查询master的状态&quot;&gt;&lt;/a&gt;6、登录主服务器的mysql，查询master的状态&lt;/h2&gt;&lt;p&gt;   mysql&amp;gt;show master status;&lt;br&gt;   +——————+———-+————–+——————+&lt;br&gt;   | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |&lt;br&gt;   +——————+———-+————–+——————+&lt;br&gt;   | mysql-bin.000004 |      308 |              |                  |&lt;br&gt;   +——————+———-+————–+——————+&lt;br&gt;   1 row in set (0.00 sec)&lt;br&gt;   注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化&lt;/p&gt;
&lt;h2 id=&quot;7、配置从服务器Slave：&quot;&gt;&lt;a href=&quot;#7、配置从服务器Slave：&quot; class=&quot;headerlink&quot; title=&quot;7、配置从服务器Slave：&quot;&gt;&lt;/a&gt;7、配置从服务器Slave：&lt;/h2&gt;&lt;p&gt;   mysql&amp;gt;change master to master_host=’192.168.145.222’,master_user=’mysync’,master_password=’root’, master_log_file=’mysql-bin.000004’,master_log_pos=308;   //注意不要断开，308数字前后无单引号。&lt;/p&gt;
&lt;p&gt;   Mysql&amp;gt;start slave;    //启动从服务器复制功能&lt;/p&gt;
&lt;h2 id=&quot;8、检查从服务器复制功能状态：&quot;&gt;&lt;a href=&quot;#8、检查从服务器复制功能状态：&quot; class=&quot;headerlink&quot; title=&quot;8、检查从服务器复制功能状态：&quot;&gt;&lt;/a&gt;8、检查从服务器复制功能状态：&lt;/h2&gt;&lt;p&gt;   mysql&amp;gt; show slave status\G&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt; 1. row &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Slave_IO_State: Waiting for master to send event
Master_Host: 192.168.2.222  //主服务器地址
Master_User: mysync   //授权帐户名，尽量避免使用root
Master_Port: 3306    //数据库端口，部分版本没有此行
Connect_Retry: 60
Master_Log_File: mysql-bin.000004
Read_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos
Relay_Log_File: ddte-relay-bin.000003
Relay_Log_Pos: 251
Relay_Master_Log_File: mysql-bin.000004
Slave_IO_Running: Yes    //此状态必须YES
Slave_SQL_Running: Yes     //此状态必须YES
      ......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。&lt;/p&gt;
&lt;p&gt;以上操作过程，主从服务器配置完成。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、主从服务器分别作以下操作：&quot;&gt;&lt;a href=&quot;#1、主从服务器分别作以下操作：&quot; class=&quot;headerlink&quot; title=&quot;1、主从服务器分别作以下操作：&quot;&gt;&lt;/a&gt;1、主从服务器分别作以下操作：&lt;/h2&gt;&lt;p&gt;  1.1、版本一致&lt;br&gt;  1.
    
    </summary>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
      <category term="master-slave" scheme="http://yoursite.com/tags/master-slave/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="主从同步" scheme="http://yoursite.com/tags/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>centos6下安装配置mysql，并开启mysql的远程登录</title>
    <link href="http://yoursite.com/2016/04/25/centos6%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEmysql%EF%BC%8C%E5%B9%B6%E5%BC%80%E5%90%AFmysql%E7%9A%84%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2016/04/25/centos6下安装配置mysql，并开启mysql的远程登录/</id>
    <published>2016-04-25T13:00:38.000Z</published>
    <updated>2016-04-25T13:04:16.768Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h2&gt;&lt;h3 id=&quot;查看是否已安装mysql：&quot;&gt;&lt;a href=&quot;#查看是否已安装mysql：&quot; class=&quot;headerlink&quot; title=&quot;查看是否已安装mysql：&quot;&gt;&lt;/a&gt;查看是否已安装mysql：&lt;/h3&gt;&lt;p&gt;yum list installed | grep mysql&lt;/p&gt;
&lt;h3 id=&quot;如果已安装，如下一次卸载：&quot;&gt;&lt;a href=&quot;#如果已安装，如下一次卸载：&quot; class=&quot;headerlink&quot; title=&quot;如果已安装，如下一次卸载：&quot;&gt;&lt;/a&gt;如果已安装，如下一次卸载：&lt;/h3&gt;&lt;p&gt;yum -y remove mysql-libs.x86_64&lt;/p&gt;
&lt;h3 id=&quot;查看可用mysql：&quot;&gt;&lt;a href=&quot;#查看可用mysql：&quot; class=&quot;headerlink&quot; title=&quot;查看可用mysql：&quot;&gt;&lt;/a&gt;查看可用mysql：&lt;/h3&gt;&lt;p&gt;yum list | grep mysql 或 yum -y list mysql*&lt;/p&gt;
&lt;h3 id=&quot;安装mysql：&quot;&gt;&lt;a href=&quot;#安装mysql：&quot; class=&quot;headerlink&quot; title=&quot;安装mysql：&quot;&gt;&lt;/a&gt;安装mysql：&lt;/h3&gt;&lt;p&gt;yum -y install mysql-server mysql mysql-devel&lt;/p&gt;
&lt;h3 id=&quot;查看已安装的mysql状态：&quot;&gt;&lt;a href=&quot;#查看已安装的mysql状态：&quot; class=&quot;headerlink&quot; title=&quot;查看已安装的mysql状态：&quot;&gt;&lt;/a&gt;查看已安装的mysql状态：&lt;/h3&gt;&lt;p&gt;rpm -qi mysql-server&lt;/p&gt;
&lt;h3 id=&quot;安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示&quot;&gt;&lt;a href=&quot;#安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示&quot; class=&quot;headerlink&quot; title=&quot;安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:&quot;&gt;&lt;/a&gt;安装后一开始登陆不上的问题：在进入mysql工具时，总是有错误提示:&lt;/h3&gt;&lt;p&gt;mysql -u root -p&lt;br&gt;Enter password:&lt;br&gt;ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO)&lt;/p&gt;
&lt;h3 id=&quot;解决：方法操作很简单，如下：&quot;&gt;&lt;a href=&quot;#解决：方法操作很简单，如下：&quot; class=&quot;headerlink&quot; title=&quot;解决：方法操作很简单，如下：&quot;&gt;&lt;/a&gt;解决：方法操作很简单，如下：&lt;/h3&gt;&lt;p&gt;/etc/init.d/mysql stop&lt;br&gt;mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;amp;&lt;br&gt;mysql -u root mysql&lt;br&gt;mysql&amp;gt; UPDATE user SET Password=PASSWORD(‘root’) where USER=’root’ and host=’root’ or host=’localhost’;//把空的用户密码都修改成非空的密码就行了。&lt;br&gt;mysql&amp;gt; FLUSH PRIVILEGES;&lt;br&gt;mysql&amp;gt; quit&lt;br&gt;/etc/init.d/mysqld restart&lt;br&gt;mysql -uroot -p&lt;br&gt;Enter password: &amp;lt;输入新设的密码newpassword&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;开启远程连接&quot;&gt;&lt;a href=&quot;#开启远程连接&quot; class=&quot;headerlink&quot; title=&quot;开启远程连接&quot;&gt;&lt;/a&gt;开启远程连接&lt;/h2&gt;&lt;h3 id=&quot;设置任意ip可以使用root账户和root密码远程登录&quot;&gt;&lt;a href=&quot;#设置任意ip可以使用root账户和root密码远程登录&quot; class=&quot;headerlink&quot; title=&quot;设置任意ip可以使用root账户和root密码远程登录&quot;&gt;&lt;/a&gt;设置任意ip可以使用root账户和root密码远程登录&lt;/h3&gt;&lt;p&gt;grant all privileges  on &lt;em&gt;.&lt;/em&gt; to root@’%’ identified by “root”;&lt;/p&gt;
&lt;h3 id=&quot;刷新&quot;&gt;&lt;a href=&quot;#刷新&quot; class=&quot;headerlink&quot; title=&quot;刷新&quot;&gt;&lt;/a&gt;刷新&lt;/h3&gt;&lt;p&gt;FLUSH PRIVILEGES;&lt;/p&gt;
&lt;h3 id=&quot;重启：&quot;&gt;&lt;a href=&quot;#重启：&quot; class=&quot;headerlink&quot; title=&quot;重启：&quot;&gt;&lt;/a&gt;重启：&lt;/h3&gt;&lt;p&gt;service mysqld restart&lt;/p&gt;
&lt;p&gt;done！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h2&gt;&lt;h3 id=&quot;查看是否已安装mysql：&quot;&gt;&lt;a href=&quot;#查看是否已安装mysql：&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
      <category term="install" scheme="http://yoursite.com/tags/install/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>[springboot+shiro+redis+rediscluster+sso]在springboot项目中接入shiro</title>
    <link href="http://yoursite.com/2016/04/09/springboot-shiro-redis-rediscluster-sso-%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%8E%A5%E5%85%A5shiro/"/>
    <id>http://yoursite.com/2016/04/09/springboot-shiro-redis-rediscluster-sso-在springboot项目中接入shiro/</id>
    <published>2016-04-09T04:52:53.000Z</published>
    <updated>2016-04-09T22:44:27.345Z</updated>
    
    <content type="html">&lt;p&gt;在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实现一个跨域单点登录的方案。&lt;/p&gt;
&lt;p&gt;现在开始是第一篇：在springboot项目中接入shiro&lt;/p&gt;
&lt;h2 id=&quot;引入shiro的maven依赖&quot;&gt;&lt;a href=&quot;#引入shiro的maven依赖&quot; class=&quot;headerlink&quot; title=&quot;引入shiro的maven依赖&quot;&gt;&lt;/a&gt;引入shiro的maven依赖&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.apache.shiro&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;shiro-core&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;version&amp;#62;1.2.3&amp;#60;/version&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&amp;#10;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.apache.shiro&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;shiro-spring&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;version&amp;#62;1.2.3&amp;#60;/version&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&amp;#10;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.apache.shiro&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;shiro-web&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;version&amp;#62;1.2.3&amp;#60;/version&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&amp;#10;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.apache.shiro&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;shiro-ehcache&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;version&amp;#62;1.2.3&amp;#60;/version&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;程序具体实现&quot;&gt;&lt;a href=&quot;#程序具体实现&quot; class=&quot;headerlink&quot; title=&quot;程序具体实现&quot;&gt;&lt;/a&gt;程序具体实现&lt;/h2&gt;&lt;h3 id=&quot;首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml&quot;&gt;&lt;a href=&quot;#首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application-yml&quot; class=&quot;headerlink&quot; title=&quot;首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml&quot;&gt;&lt;/a&gt;首先，需要一个shiro的配置文件，这里使用的是ymal配置。配置文件：application.yml&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;shiro:&amp;#10;  realm: com.xxx.xxx.config.security.MyRealm&amp;#10;  loginUrl: /view/sign-in.html&amp;#10;  successUrl: /item.html&amp;#10;  unauthorizedUrl: /forbidden.html&amp;#10;  filterChainDefinitions:&amp;#10;    &amp;#34;/login&amp;#34;: anon&amp;#10;    &amp;#34;/static/**&amp;#34;: anon&amp;#10;    &amp;#34;/bower_components/**&amp;#34;: anon&amp;#10;    &amp;#34;/logout&amp;#34;: logout&amp;#10;    &amp;#34;/**&amp;#34;: authc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：&lt;br&gt;realm: com.xxx.xxx.config.security.MyRealm&lt;br&gt;Realm，在shiro中相当于数据源，shiro的其他核心组件需要获取用户和认证数据，就是从Realm获取。&lt;br&gt;为了获得更好的自定义功能，通常我们会自己实现一个Realm.&lt;br&gt;所以这里使用realm: com.xxx.xxx.config.security.MyRealm配置了一个自定义的Realm。&lt;br&gt;loginUrl，定义了需要认证用户时，跳转到的登录页面&lt;br&gt;successUrl，定义登录成功后跳转的页面。通常也可以在自己登录认证方法里redirect到需要的页面。&lt;br&gt;unauthorizedUrl，定义未认证时显示的页面。&lt;br&gt;filterChainDefinitions，定义哪些路径应该做何种过滤策略。&lt;br&gt;anon，logout，authc这些都是shiro默认实现的过滤器filter。&lt;br&gt;anon表示可以匿名访问的路径，authc表示需要登录认证的路径&lt;/p&gt;
&lt;p&gt;过滤器链使用最先匹配返回策略，所以我们需要把不需要认证即可访问的路径放在前面。&lt;/p&gt;
&lt;h3 id=&quot;下面是自己实现的自定义Realm：MyRealm&quot;&gt;&lt;a href=&quot;#下面是自己实现的自定义Realm：MyRealm&quot; class=&quot;headerlink&quot; title=&quot;下面是自己实现的自定义Realm：MyRealm&quot;&gt;&lt;/a&gt;下面是自己实现的自定义Realm：MyRealm&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import org.apache.shiro.authc.AuthenticationException;&amp;#10;import org.apache.shiro.authc.AuthenticationInfo;&amp;#10;import org.apache.shiro.authc.AuthenticationToken;&amp;#10;import org.apache.shiro.authc.SimpleAuthenticationInfo;&amp;#10;import org.apache.shiro.authc.UsernamePasswordToken;&amp;#10;import org.apache.shiro.authz.AuthorizationInfo;&amp;#10;import org.apache.shiro.authz.SimpleAuthorizationInfo;&amp;#10;import org.apache.shiro.realm.AuthorizingRealm;&amp;#10;import org.apache.shiro.subject.PrincipalCollection;&amp;#10;import org.springframework.beans.factory.annotation.Autowired;&amp;#10;&amp;#10;import com.xxx.model.base.UserDTO;&amp;#10;import com.xxx.remote.base.UserRemote;&amp;#10;&amp;#10;public class MyRealm extends AuthorizingRealm &amp;#123;&amp;#10;    @Autowired UserRemote userService;&amp;#10;&amp;#10;    @Override&amp;#10;    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &amp;#123;&amp;#10;        UserDTO user = (UserDTO) principals.getPrimaryPrincipal();&amp;#10;        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();&amp;#10;        List&amp;#60;String&amp;#62; roles = userService.findByUserId(user.getId());&amp;#10;        info.addRoles(roles);&amp;#10;        return info;&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Override&amp;#10;    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &amp;#123;&amp;#10;        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;&amp;#10;        String username = usernamePasswordToken.getUsername();&amp;#10;        UserDTO user = userService.findUserByName(username);&amp;#10;        if (null != user) &amp;#123;&amp;#10;            CredentialsInfoHolder cih = new CredentialsInfoHolder(user.getPassword(), user.getSalt());&amp;#10;            return new SimpleAuthenticationInfo(user, cih, getName());&amp;#10;        &amp;#125;&amp;#10;        return null;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;MyRealm集成AuthorizingRealm，需要重写AuthorizingRealm的两个方法：doGetAuthorizationInfo，doGetAuthenticationInfo。&lt;br&gt;AuthorizationInfo represents a single Subject’s stored authorization data (roles, permissions, etc) used during authorization (access control) checks only. &lt;/p&gt;
&lt;p&gt;doGetAuthorizationInfo方法返回一个AuthorizationInfo，AuthorizationInfo对象是一个单一的Subject对象，存储着用户的授权数据，只用于授权检查时使用。&lt;br&gt;doGetAuthenticationInfo方法，针对给定的用户，获取对应用户的认证数据，提供给认证用户身份时使用。&lt;/p&gt;
&lt;p&gt;例子中UserRemote userService是提供用户数据的具体service服务。&lt;/p&gt;
&lt;h3 id=&quot;有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器&quot;&gt;&lt;a href=&quot;#有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器&quot; class=&quot;headerlink&quot; title=&quot;有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器&quot;&gt;&lt;/a&gt;有了数据源realm和shiro配置文件，现在开始接入shiro配置到spring容器&lt;/h3&gt;&lt;h4 id=&quot;springboot-shiro配置类：ShiroAutoConfig-java&quot;&gt;&lt;a href=&quot;#springboot-shiro配置类：ShiroAutoConfig-java&quot; class=&quot;headerlink&quot; title=&quot;springboot shiro配置类：ShiroAutoConfig.java&quot;&gt;&lt;/a&gt;springboot shiro配置类：ShiroAutoConfig.java&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import org.apache.shiro.mgt.DefaultSecurityManager;&amp;#10;import org.apache.shiro.realm.Realm;&amp;#10;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;&amp;#10;import org.springframework.beans.BeanUtils;&amp;#10;import org.springframework.beans.factory.annotation.Autowired;&amp;#10;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;&amp;#10;import org.springframework.boot.context.properties.EnableConfigurationProperties;&amp;#10;import org.springframework.context.annotation.Bean;&amp;#10;import org.springframework.context.annotation.Configuration;&amp;#10;import org.springframework.context.annotation.DependsOn;&amp;#10;import org.springframework.context.annotation.Import;&amp;#10;&amp;#10;import com.xxx.xxx.config.security.MyRealm;&amp;#10;&amp;#10;@Configuration&amp;#10;@EnableConfigurationProperties(ShiroProperties.class)&amp;#10;@Import(ShiroManager.class)&amp;#10;public class ShiroAutoConfig &amp;#123;&amp;#10;    @Autowired private ShiroProperties properties;&amp;#10;&amp;#10;    @Bean(name = &amp;#34;realm&amp;#34;)&amp;#10;    @DependsOn(&amp;#34;lifecycleBeanPostProcessor&amp;#34;)&amp;#10;    @ConditionalOnMissingBean&amp;#10;    public MyRealm realm() &amp;#123;&amp;#10;        Class&amp;#60;?&amp;#62; relmClass = properties.getRealm();&amp;#10;        MyRealm r = (MyRealm) BeanUtils.instantiate(relmClass);&amp;#10;        HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();&amp;#10;        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);&amp;#10;        r.setCredentialsMatcher(credentialsMatcher);&amp;#10;        return r;&amp;#10;    &amp;#125;&amp;#10;&amp;#10;    @Bean(name = &amp;#34;shiroFilter&amp;#34;)&amp;#10;    @DependsOn(&amp;#34;securityManager&amp;#34;)&amp;#10;    @ConditionalOnMissingBean&amp;#10;    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultSecurityManager securityManager, Realm realm) &amp;#123;&amp;#10;        MyRealm myRealm = (MyRealm) realm;&amp;#10;        securityManager.setRealm(myRealm);&amp;#10;        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();&amp;#10;        shiroFilter.setSecurityManager(securityManager);&amp;#10;        shiroFilter.setLoginUrl(properties.getLoginUrl());&amp;#10;        shiroFilter.setSuccessUrl(properties.getSuccessUrl());&amp;#10;        shiroFilter.setUnauthorizedUrl(properties.getUnauthorizedUrl());&amp;#10;        shiroFilter.setFilterChainDefinitionMap(properties.getFilterChainDefinitions());&amp;#10;        return shiroFilter;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里例子里说明，我们需要提供realm和shiroFilter两个bean配置给spring容器。&lt;br&gt;getShiroFilterFactoryBean方法返回ShiroFilterFactoryBean，将会把yml里面的配置读取到ShiroFilterFactoryBean中，然后把realm设置进securityManager。&lt;br&gt;yml配置有ShiroProperties类持有并提供给ShiroFilterFactoryBean。&lt;br&gt;当然，还需要配置几个其他配置，都在ShiroManager配置好了。&lt;/p&gt;
&lt;h4 id=&quot;ShiroProperties：&quot;&gt;&lt;a href=&quot;#ShiroProperties：&quot; class=&quot;headerlink&quot; title=&quot;ShiroProperties：&quot;&gt;&lt;/a&gt;ShiroProperties：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.Map;&amp;#10;import org.springframework.boot.context.properties.ConfigurationProperties;&amp;#10;/**&amp;#10; * Configuration properties for Shiro.&amp;#10; */&amp;#10;@ConfigurationProperties(prefix = &amp;#34;shiro&amp;#34;)&amp;#10;public class ShiroProperties &amp;#123;&amp;#10;    private Class&amp;#60;?&amp;#62; realm;&amp;#10;    private String loginUrl;&amp;#10;    private String successUrl;&amp;#10;    private String unauthorizedUrl;&amp;#10;    private Map&amp;#60;String, String&amp;#62; filterChainDefinitions;&amp;#10;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;ShiroManager：&quot;&gt;&lt;a href=&quot;#ShiroManager：&quot; class=&quot;headerlink&quot; title=&quot;ShiroManager：&quot;&gt;&lt;/a&gt;ShiroManager：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import org.apache.shiro.cache.CacheManager;&amp;#10;import org.apache.shiro.mgt.DefaultSecurityManager;&amp;#10;import org.apache.shiro.session.mgt.SessionManager;&amp;#10;import org.apache.shiro.session.mgt.eis.SessionDAO;&amp;#10;import org.apache.shiro.spring.LifecycleBeanPostProcessor;&amp;#10;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;&amp;#10;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;&amp;#10;import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;&amp;#10;import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;&amp;#10;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;&amp;#10;import org.springframework.context.annotation.Bean;&amp;#10;import org.springframework.context.annotation.DependsOn;&amp;#10;&amp;#10;/**&amp;#10; * Shiro Config Manager.&amp;#10; */&amp;#10;public class ShiroManager &amp;#123;&amp;#10;    /**&amp;#10;     * &amp;#20445;&amp;#35777;&amp;#23454;&amp;#29616;&amp;#20102;Shiro&amp;#20869;&amp;#37096;lifecycle&amp;#20989;&amp;#25968;&amp;#30340;bean&amp;#25191;&amp;#34892;&amp;#10;     */&amp;#10;    @Bean(name = &amp;#34;lifecycleBeanPostProcessor&amp;#34;)&amp;#10;    @ConditionalOnMissingBean&amp;#10;    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &amp;#123;&amp;#10;        return new LifecycleBeanPostProcessor();&amp;#10;    &amp;#125;&amp;#10;    @Bean(name = &amp;#34;defaultAdvisorAutoProxyCreator&amp;#34;)&amp;#10;    @ConditionalOnMissingBean&amp;#10;    @DependsOn(&amp;#34;lifecycleBeanPostProcessor&amp;#34;)&amp;#10;    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() &amp;#123;&amp;#10;        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();&amp;#10;        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);&amp;#10;        return defaultAdvisorAutoProxyCreator;&amp;#10;&amp;#10;    &amp;#125;&amp;#10;    /**&amp;#10;     * &amp;#29992;&amp;#25143;&amp;#25480;&amp;#26435;&amp;#20449;&amp;#24687;Cache&amp;#10;     */&amp;#10;    @Bean(name = &amp;#34;cacheManager&amp;#34;)&amp;#10;    @ConditionalOnMissingBean&amp;#10;    public CacheManager cacheManager() &amp;#123;&amp;#10;        return new MemoryConstrainedCacheManager();&amp;#10;    &amp;#125;&amp;#10;    @Bean(name = &amp;#34;securityManager&amp;#34;)&amp;#10;    @ConditionalOnMissingBean&amp;#10;    public DefaultSecurityManager securityManager(CacheManager cacheManager) &amp;#123;&amp;#10;        DefaultSecurityManager sm = new DefaultWebSecurityManager();&amp;#10;        sm.setCacheManager(cacheManager);&amp;#10;        return sm;&amp;#10;    &amp;#125;&amp;#10;    @Bean&amp;#10;    @ConditionalOnMissingBean&amp;#10;    public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultSecurityManager securityManager) &amp;#123;&amp;#10;        AuthorizationAttributeSourceAdvisor aasa = new AuthorizationAttributeSourceAdvisor();&amp;#10;        aasa.setSecurityManager(securityManager);&amp;#10;        return new AuthorizationAttributeSourceAdvisor();&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;CacheManager负责缓存，这里简单的使用默认的内存缓存管理MemoryConstrainedCacheManager。&lt;br&gt;如果需要ehcache，或者使用redis作为缓存，则只需要实现自己的CacheManager和SessionManager即可。&lt;/p&gt;
&lt;p&gt;至此，springboot中引入shiro就完成了，其他更多具体使用方法，根据具体而定。&lt;/p&gt;
&lt;h3 id=&quot;这里简单的提供一下在mvc的controller中做登录和登出怎么做。&quot;&gt;&lt;a href=&quot;#这里简单的提供一下在mvc的controller中做登录和登出怎么做。&quot; class=&quot;headerlink&quot; title=&quot;这里简单的提供一下在mvc的controller中做登录和登出怎么做。&quot;&gt;&lt;/a&gt;这里简单的提供一下在mvc的controller中做登录和登出怎么做。&lt;/h3&gt;&lt;p&gt;LoginController：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import javax.servlet.ServletException;&amp;#10;import javax.servlet.http.HttpServletRequest;&amp;#10;import javax.servlet.http.HttpServletResponse;&amp;#10;&amp;#10;import org.apache.shiro.SecurityUtils;&amp;#10;import org.apache.shiro.authc.AuthenticationException;&amp;#10;import org.apache.shiro.authc.IncorrectCredentialsException;&amp;#10;import org.apache.shiro.authc.UnknownAccountException;&amp;#10;import org.apache.shiro.authc.UsernamePasswordToken;&amp;#10;import org.apache.shiro.subject.Subject;&amp;#10;import org.springframework.stereotype.Controller;&amp;#10;import org.springframework.web.bind.annotation.RequestMapping;&amp;#10;import org.springframework.web.bind.annotation.ResponseBody;&amp;#10;&amp;#10;@Controller&amp;#10;public class LoginController &amp;#123;&amp;#10;    @RequestMapping(&amp;#34;/login&amp;#34;)&amp;#10;    @ResponseBody&amp;#10;    public void login(HttpServletRequest req, HttpServletResponse resp, String username, String password) throws ServletException, IOException &amp;#123;&amp;#10;        Subject subject = SecurityUtils.getSubject();&amp;#10;        String error = null;&amp;#10;        UsernamePasswordToken token = new UsernamePasswordToken(username, password);&amp;#10;        try &amp;#123;&amp;#10;            subject.login(token);&amp;#10;        &amp;#125; catch (UnknownAccountException e) &amp;#123;&amp;#10;            error = &amp;#34;&amp;#29992;&amp;#25143;&amp;#21517;/&amp;#23494;&amp;#30721;&amp;#38169;&amp;#35823;&amp;#34;;&amp;#10;        &amp;#125; catch (IncorrectCredentialsException e) &amp;#123;&amp;#10;            error = &amp;#34;&amp;#29992;&amp;#25143;&amp;#21517;/&amp;#23494;&amp;#30721;&amp;#38169;&amp;#35823;&amp;#34;;&amp;#10;        &amp;#125; catch (AuthenticationException e) &amp;#123;&amp;#10;            // &amp;#20854;&amp;#20182;&amp;#38169;&amp;#35823;&amp;#65292;&amp;#27604;&amp;#22914;&amp;#38145;&amp;#23450;&amp;#65292;&amp;#22914;&amp;#26524;&amp;#24819;&amp;#21333;&amp;#29420;&amp;#22788;&amp;#29702;&amp;#35831;&amp;#21333;&amp;#29420;catch&amp;#22788;&amp;#29702;&amp;#10;            error = &amp;#34;&amp;#20854;&amp;#20182;&amp;#38169;&amp;#35823;&amp;#65306;&amp;#34; + e.getMessage();&amp;#10;        &amp;#125;&amp;#10;        if (error != null) &amp;#123;// &amp;#20986;&amp;#38169;&amp;#20102;&amp;#65292;&amp;#36820;&amp;#22238;&amp;#30331;&amp;#24405;&amp;#39029;&amp;#38754;&amp;#10;            req.setAttribute(&amp;#34;error&amp;#34;, error);&amp;#10;            resp.sendRedirect(&amp;#34;/forbidden.html&amp;#34;);&amp;#10;        &amp;#125; else &amp;#123;// &amp;#30331;&amp;#24405;&amp;#25104;&amp;#21151;&amp;#10;            resp.sendRedirect(&amp;#34;/index.html&amp;#34;);// &amp;#35774;&amp;#32622;&amp;#36339;&amp;#36716;&amp;#30340;&amp;#39029;&amp;#38754;&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;    @RequestMapping(value = &amp;#34;/logout&amp;#34;)&amp;#10;    @ResponseBody&amp;#10;    public void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException &amp;#123;&amp;#10;&amp;#10;        Subject currentUser = SecurityUtils.getSubject();&amp;#10;        currentUser.logout();&amp;#10;        resp.sendRedirect(&amp;#34;/index.html&amp;#34;);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;done!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的文章中，分别介绍了springboot启动，在springboot中使用redis作为缓存，在springboot中使用jpa和mybatis，现在将开始一个更大的综合工程：一步步介绍在springboot中使用shiro+redis-cluster+cookie实
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="shiro" scheme="http://yoursite.com/tags/shiro/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>[springboot]在spring项目中连接数据库以及spring-datajpa和mybatis的使用</title>
    <link href="http://yoursite.com/2016/04/09/springboot-%E5%9C%A8spring%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A5%E5%8F%8Aspring-datajpa%E5%92%8Cmybatis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/04/09/springboot-在spring项目中连接数据库以及spring-datajpa和mybatis的使用/</id>
    <published>2016-04-09T03:37:07.000Z</published>
    <updated>2016-04-09T04:30:03.524Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-在项目中添加数据库配置（添加数据源等配置）&quot;&gt;&lt;a href=&quot;#1-在项目中添加数据库配置（添加数据源等配置）&quot; class=&quot;headerlink&quot; title=&quot;1.在项目中添加数据库配置（添加数据源等配置）&quot;&gt;&lt;/a&gt;1.在项目中添加数据库配置（添加数据源等配置）&lt;/h2&gt;&lt;p&gt;spring boot推崇约定大于配置，即是说，即使你什么也配置，spring boot也会为你添加一些约定俗成的默认配置。&lt;br&gt;比如数据源dataSource就是，如果你的spring boot项目没有数据源配置，那么默认情况下项目启动会失败，提示你配置数据源。&lt;br&gt;如果你的项目真的不需要数据源，没有数据库url等配置，那么你需要显式的使用注解配置告诉spring boot。&lt;br&gt;在启动类添加注解：&lt;br&gt;@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}&lt;/p&gt;
&lt;p&gt;回到数据源配置上来。&lt;br&gt;首先,在配置文件application.properties里面配置数据库url&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.url=jdbc:mysql://localhost/dbname&amp;#10;spring.datasource.username=username&amp;#10;spring.datasource.password=password&amp;#10;spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用mysql数据库，还需要添加maven依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;mysql&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;mysql-connector-java&amp;#60;/artifactId&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，添加数据库配置类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import javax.sql.DataSource;&amp;#10;import org.apache.ibatis.session.ExecutorType;&amp;#10;import org.apache.ibatis.session.SqlSessionFactory;&amp;#10;import org.mybatis.spring.SqlSessionFactoryBean;&amp;#10;import org.mybatis.spring.SqlSessionTemplate;&amp;#10;import org.mybatis.spring.annotation.MapperScan;&amp;#10;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;&amp;#10;import org.springframework.context.annotation.Bean;&amp;#10;import org.springframework.context.annotation.Configuration;&amp;#10;import org.springframework.core.io.ClassPathResource;&amp;#10;&amp;#10;@Configuration&amp;#10;public class DatabaseConfig &amp;#123;&amp;#10;    @Bean&amp;#10;    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &amp;#123;&amp;#10;        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();&amp;#10;        sessionFactory.setDataSource(dataSource);&amp;#10;        return sessionFactory.getObject();&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此，项目中就有了数据源&lt;/p&gt;
&lt;h2 id=&quot;2-在项目中使用spring-data-jpa&quot;&gt;&lt;a href=&quot;#2-在项目中使用spring-data-jpa&quot; class=&quot;headerlink&quot; title=&quot;2.在项目中使用spring-data-jpa&quot;&gt;&lt;/a&gt;2.在项目中使用spring-data-jpa&lt;/h2&gt;&lt;p&gt;添加maven依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;spring-boot-starter-data-jpa&amp;#60;/artifactId&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加Repository类：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import org.springframework.data.domain.Page;&amp;#10;import org.springframework.data.domain.Pageable;&amp;#10;import org.springframework.data.repository.CrudRepository;&amp;#10;&amp;#10;import com.xxx.xxx.model.User;&amp;#10;&amp;#10;public interface UserRepository extends CrudRepository&amp;#60;User, Long&amp;#62; &amp;#123;&amp;#10;&amp;#10;    Page&amp;#60;User&amp;#62; findAll(Pageable pageable);&amp;#10;    Page&amp;#60;User&amp;#62; findByNameContainingAndTypeContainingAllIgnoringCase(String name, Integer type, Pageable pageable);&amp;#10;    User findByNameAndTypeAllIgnoringCase(String name, Integer type);&amp;#10;    User findByName(String name);&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;pring-data-jpa的使用极其简单，只需要配置好对应的Repository接口即可，不需要操作的具体实现&lt;br&gt;这个例子中，UserRepository继承了CrudRepository，默认即拥有基础的增删改查接口。&lt;br&gt;然后你只需添加一些你需要的额外接口方法。&lt;br&gt;同样你只需按照其约定的方式写好接口方法，而不需要具体实现。&lt;/p&gt;
&lt;p&gt;使用：&lt;br&gt;在需要的地方注解注入即可。&lt;br&gt;@Autowrite UserRepository userRepository;&lt;/p&gt;
&lt;h2 id=&quot;3-在项目中使用mybatis&quot;&gt;&lt;a href=&quot;#3-在项目中使用mybatis&quot; class=&quot;headerlink&quot; title=&quot;3.在项目中使用mybatis&quot;&gt;&lt;/a&gt;3.在项目中使用mybatis&lt;/h2&gt;&lt;p&gt;添加maven依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.mybatis&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;mybatis&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;version&amp;#62;3.2.3&amp;#60;/version&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&amp;#10;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.mybatis&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;mybatis-spring&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;version&amp;#62;1.2.2&amp;#60;/version&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mybatis的使用，和jpa一样，默认也是只需要定义Mapper接口即可，不需要实现类，但需要具体实现的sql。&lt;br&gt;你可以使用xml写sql，或者在接口上面使用注解注入sql两种方式。&lt;/p&gt;
&lt;p&gt;注解sql例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface ItemMapper &amp;#123;&amp;#10;    @Select(&amp;#34;select * from item&amp;#34;)&amp;#10;    List&amp;#60;Item&amp;#62; findAll();&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而如果是xml配置文件的话，则需要mapper xml中的sql id和Mapper接口中的接口方法名称一致。&lt;/p&gt;
&lt;p&gt;当然，如果习惯了使用具体实现，使用SqlSessionTemplate，也可以实现。&lt;br&gt;首先需要改一下DatabaseConfig配置类：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import javax.sql.DataSource;&amp;#10;import org.apache.ibatis.session.ExecutorType;&amp;#10;import org.apache.ibatis.session.SqlSessionFactory;&amp;#10;import org.mybatis.spring.SqlSessionFactoryBean;&amp;#10;import org.mybatis.spring.SqlSessionTemplate;&amp;#10;import org.mybatis.spring.annotation.MapperScan;&amp;#10;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;&amp;#10;import org.springframework.context.annotation.Bean;&amp;#10;import org.springframework.context.annotation.Configuration;&amp;#10;import org.springframework.core.io.ClassPathResource;&amp;#10;&amp;#10;@Configuration&amp;#10;@MapperScan(basePackages=&amp;#34;com.xxx.xxx.mapper&amp;#34;)&amp;#10;public class DatabaseConfig &amp;#123;&amp;#10;    @Bean&amp;#10;    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception &amp;#123;&amp;#10;        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();&amp;#10;        sessionFactory.setDataSource(dataSource);&amp;#10;        sessionFactory.setConfigLocation(new ClassPathResource(&amp;#34;mybatis-config.xml&amp;#34;));&amp;#10;        return sessionFactory.getObject();&amp;#10;    &amp;#125;&amp;#10;    @Bean&amp;#10;    @ConditionalOnMissingBean&amp;#10;    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &amp;#123;&amp;#10;        return new SqlSessionTemplate(sqlSessionFactory, ExecutorType.SIMPLE);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加mybatis配置文件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;#62;&amp;#10;&amp;#60;!DOCTYPE configuration&amp;#10;        PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.0//EN&amp;#34;&amp;#10;        &amp;#34;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;#34;&amp;#62;&amp;#10;&amp;#60;configuration&amp;#62;&amp;#10;    &amp;#60;typeAliases&amp;#62;&amp;#10;        &amp;#60;package name=&amp;#34;com.xxx.xxx.model&amp;#34;/&amp;#62;&amp;#10;    &amp;#60;/typeAliases&amp;#62;&amp;#10;    &amp;#60;mappers&amp;#62;&amp;#10;        &amp;#60;mapper resource=&amp;#34;mapper/xxxMapper.xml&amp;#34;/&amp;#62;&amp;#10;    &amp;#60;/mappers&amp;#62;&amp;#10;&amp;#60;/configuration&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体Mapper实现类：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component&amp;#10;public class ItemMapper &amp;#123;&amp;#10;    @Autowired private SqlSessionTemplate sqlSessionTemplate;&amp;#10;&amp;#10;    public Item selectItemById(long id) &amp;#123;&amp;#10;        return this.sqlSessionTemplate.selectOne(&amp;#34;selectItemById&amp;#34;, id);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;done！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-在项目中添加数据库配置（添加数据源等配置）&quot;&gt;&lt;a href=&quot;#1-在项目中添加数据库配置（添加数据源等配置）&quot; class=&quot;headerlink&quot; title=&quot;1.在项目中添加数据库配置（添加数据源等配置）&quot;&gt;&lt;/a&gt;1.在项目中添加数据库配置（添加数
    
    </summary>
    
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="spring data jpa" scheme="http://yoursite.com/tags/spring-data-jpa/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>[spring-boot]springboot实践之在项目中使用spring-cache和redis实现缓存</title>
    <link href="http://yoursite.com/2016/04/09/spring-boot-springboot%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8spring-cache%E5%92%8Credis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2016/04/09/spring-boot-springboot实践之在项目中使用spring-cache和redis实现缓存/</id>
    <published>2016-04-09T02:43:01.000Z</published>
    <updated>2016-04-09T03:25:57.600Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-首先需要准备一个redis服务端作为缓存&quot;&gt;&lt;a href=&quot;#1-首先需要准备一个redis服务端作为缓存&quot; class=&quot;headerlink&quot; title=&quot;1.首先需要准备一个redis服务端作为缓存&quot;&gt;&lt;/a&gt;1.首先需要准备一个redis服务端作为缓存&lt;/h2&gt;&lt;p&gt;redis下载安装启动，比较简单，请google之。&lt;/p&gt;
&lt;h2 id=&quot;2-项目依赖&quot;&gt;&lt;a href=&quot;#2-项目依赖&quot; class=&quot;headerlink&quot; title=&quot;2.项目依赖&quot;&gt;&lt;/a&gt;2.项目依赖&lt;/h2&gt;&lt;p&gt;使用spring boot和spring cache，需要springboot依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;spring-boot-starter&amp;#60;/artifactId&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;连接redis，需要spring data redis和jedis包&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.springframework.data&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;spring-data-redis&amp;#60;/artifactId&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&amp;#10;&amp;#60;dependency&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;redis.clients&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;jedis&amp;#60;/artifactId&amp;#62;&amp;#10;&amp;#60;/dependency&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-程序配置实现与使用&quot;&gt;&lt;a href=&quot;#3-程序配置实现与使用&quot; class=&quot;headerlink&quot; title=&quot;3.程序配置实现与使用&quot;&gt;&lt;/a&gt;3.程序配置实现与使用&lt;/h2&gt;&lt;p&gt;不同于spring使用xml配置文件来配置bean，spring boot使用java bean直接在java类中配置需要用到的Bean。&lt;/p&gt;
&lt;h3 id=&quot;添加redis-cache相关的config类，如下：&quot;&gt;&lt;a href=&quot;#添加redis-cache相关的config类，如下：&quot; class=&quot;headerlink&quot; title=&quot;添加redis cache相关的config类，如下：&quot;&gt;&lt;/a&gt;添加redis cache相关的config类，如下：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import org.springframework.cache.CacheManager;&amp;#10;import org.springframework.cache.annotation.CachingConfigurerSupport;&amp;#10;import org.springframework.cache.annotation.EnableCaching;&amp;#10;import org.springframework.context.annotation.Bean;&amp;#10;import org.springframework.context.annotation.Configuration;&amp;#10;import org.springframework.data.redis.cache.RedisCacheManager;&amp;#10;import org.springframework.data.redis.connection.RedisConnectionFactory;&amp;#10;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;&amp;#10;import org.springframework.data.redis.core.RedisTemplate;&amp;#10;&amp;#10;@Configuration&amp;#10;@EnableCaching&amp;#10;public class RedisCacheConfig extends CachingConfigurerSupport &amp;#123;&amp;#10;    @Bean&amp;#10;    public JedisConnectionFactory redisConnectionFactory() &amp;#123;&amp;#10;        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory();&amp;#10;        redisConnectionFactory.setHostName(&amp;#34;127.0.0.1&amp;#34;);&amp;#10;        redisConnectionFactory.setPort(6379);&amp;#10;        return redisConnectionFactory;&amp;#10;    &amp;#125;&amp;#10;    @Bean&amp;#10;    public RedisTemplate&amp;#60;String, String&amp;#62; redisTemplate(RedisConnectionFactory cf) &amp;#123;&amp;#10;        RedisTemplate&amp;#60;String, String&amp;#62; redisTemplate = new RedisTemplate&amp;#60;String, String&amp;#62;();&amp;#10;        redisTemplate.setConnectionFactory(cf);&amp;#10;        return redisTemplate;&amp;#10;    &amp;#125;&amp;#10;    @Bean(name = &amp;#34;redisCacheManager&amp;#34;)&amp;#10;    public CacheManager cacheManager(RedisTemplate redisTemplate) &amp;#123;&amp;#10;        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);&amp;#10;        cacheManager.setDefaultExpiration(300);&amp;#10;        return cacheManager;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;@Configuration标记此java类为spring boot的配置类&lt;br&gt;@EnableCaching标记为项目启用缓存&lt;br&gt;@Bean，每个被此注解标记的方法都会配置一个bean，等同于xml配置中的&lt;bean&gt;&lt;br&gt;从以上代码可以看到，使用spring cache和redis缓存，我们需要一个JedisConnectionFactory，一个RedisTemplate和一个CacheManager。&lt;br&gt;其中JedisConnectionFactory配置了redis服务的ip和端口，为了方便这里直接写在了程序里，可以移出去放到配置文件中读取。&lt;/bean&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何使用？&quot;&gt;&lt;a href=&quot;#如何使用？&quot; class=&quot;headerlink&quot; title=&quot;如何使用？&quot;&gt;&lt;/a&gt;如何使用？&lt;/h3&gt;&lt;p&gt;使用非常简单，只需要在我们想要缓存的方法前加一个@Cacheable注解即可&lt;br&gt;下面是一个例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Cacheable(value = &amp;#34;find&amp;#34;)&amp;#10;public List&amp;#60;Object&amp;#62; find(Long id) &amp;#123;&amp;#10;    ...&amp;#10;&amp;#125;&amp;#10;@CacheEvict(value = &amp;#34;find&amp;#34;, allEntries = true)&amp;#10;public Object saveProject(Object object) &amp;#123;&amp;#10;    ...&amp;#10;&amp;#125;&amp;#10;@CacheEvict(value = &amp;#34;find&amp;#34; , allEntries = true)&amp;#10;public void deleteProject(Long id) &amp;#123;&amp;#10;    ...&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里@Cacheable标记的方法在首次调用后，将会将读取到的内容缓存到redis中，以后每次只要缓存中存在该缓存，读取都会从缓存中读取。&lt;br&gt;但如果实际数据改变了怎么办？&lt;br&gt;我查看spring cache的api后，没有适用的动态更新缓存的方法，所以这里适用了一种不怎么优雅的解决方案：&lt;br&gt;每次会对模型数据改变的方法，都清除一次缓存。清除后的第一次，查询会读取数据库，之后再缓存。&lt;br&gt;@CacheEvict标记的方法，表示将会清除缓存，value属性中配置了“find”，表示清除key为“find”的缓存数据。&lt;/p&gt;
&lt;p&gt;这个方案不是很优雅，就是用起来简单，如果想更优雅的方案，应该要自己再实现一套自己可控的缓存程序。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-首先需要准备一个redis服务端作为缓存&quot;&gt;&lt;a href=&quot;#1-首先需要准备一个redis服务端作为缓存&quot; class=&quot;headerlink&quot; title=&quot;1.首先需要准备一个redis服务端作为缓存&quot;&gt;&lt;/a&gt;1.首先需要准备一个redis服务端作为
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="spring cache" scheme="http://yoursite.com/tags/spring-cache/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>为你的项目做合理的版本控制管理</title>
    <link href="http://yoursite.com/2016/04/07/%E4%B8%BA%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%90%88%E7%90%86%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2016/04/07/为你的项目做合理的版本控制管理/</id>
    <published>2016-04-07T15:32:15.000Z</published>
    <updated>2016-04-07T15:43:41.330Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一款经典的分支管理规范&quot;&gt;&lt;a href=&quot;#一款经典的分支管理规范&quot; class=&quot;headerlink&quot; title=&quot;一款经典的分支管理规范&quot;&gt;&lt;/a&gt;一款经典的分支管理规范&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/version.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;我们需要善用代码版本控制系统。上图就是一款经典的分支管理规范，实践如下。&lt;/p&gt;
&lt;p&gt;1.&lt;br&gt;最稳定的代码放在 master 分支上（相当于 SVN 的 trunk 分支），我们不要直接在 master 分支上提交代码，只能在该分支上进行代码合并操作，例如将其它分支的代码合并到 master 分支上。&lt;/p&gt;
&lt;p&gt;2.&lt;br&gt;我们日常开发中的代码需要从 master 分支拉一条 develop 分支出来，该分支所有人都能访问，但一般情况下，我们也不会直接在该分支上提交代码，代码同样是从其它分支合并到 develop 分支上去。&lt;/p&gt;
&lt;p&gt;3.&lt;br&gt;当我们需要开发某个特性时，需要从 develop 分支拉出一条 feature 分支，例如 feature-1 与 feature-2，在这些分支上并行地开发具体特性。&lt;/p&gt;
&lt;p&gt;4.&lt;br&gt;当特性开发完毕后，我们决定需要发布某个版本了，此时需要从 develop 分支上拉出一条 release 分支，例如 release-1.0.0，并将需要发布的特性从相关 feature 分支一同合并到 release 分支上，随后将针对 release 分支部署测试环境，测试工程师在该分支上做功能测试，开发工程师在该分支上修改 bug。待测试工程师无法找到任何 bug 时，我们可将该 release 分支部署到预发环境，再次验证以后，均无任何 bug，此时可将 release 分支部署到生产环境。待上线完成后，将 release 分支上的代码同时合并到 develop 分支与 master 分支，并在 master 分支上打一个 tag，例如 v1.0.0。&lt;/p&gt;
&lt;p&gt;5.&lt;br&gt;当生产环境发现 bug 时，我们需要从对应的 tag 上（例如 v1.0.0）拉出一条 hotfix 分支（例如 hotfix-1.0.1），并在该分支上做 bug 修复。待 bug 完全修复后，需将 hotfix 分支上的代码同时合并到 develop 分支与 master 分支。&lt;/p&gt;
&lt;p&gt;6.&lt;br&gt;对于版本号我们也有要求，格式为：x.y.z，其中，x 用于有重大重构时才会升级，y 用于有新的特性发布时才会升级，z 用于修改了某个 bug 后才会升级。针对每个微服务，我们都需要严格按照以上开发模式来执行。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一款经典的分支管理规范&quot;&gt;&lt;a href=&quot;#一款经典的分支管理规范&quot; class=&quot;headerlink&quot; title=&quot;一款经典的分支管理规范&quot;&gt;&lt;/a&gt;一款经典的分支管理规范&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/version.png&quot; alt
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="分支管理" scheme="http://yoursite.com/tags/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>在linux下部署spring boot项目过程记录</title>
    <link href="http://yoursite.com/2016/03/21/%E5%9C%A8linux%E4%B8%8B%E9%83%A8%E7%BD%B2spring-boot%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/03/21/在linux下部署spring-boot项目过程记录/</id>
    <published>2016-03-21T09:52:34.000Z</published>
    <updated>2016-04-07T15:28:36.659Z</updated>
    
    <content type="html">&lt;h1 id=&quot;在linux下部署spring-boot项目过程记录&quot;&gt;&lt;a href=&quot;#在linux下部署spring-boot项目过程记录&quot; class=&quot;headerlink&quot; title=&quot;在linux下部署spring boot项目过程记录&quot;&gt;&lt;/a&gt;在linux下部署spring boot项目过程记录&lt;/h1&gt;&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;本文章是在centos7下部署spring boot架构的java web项目的过程中的一些记录，记录了linux服务器中需要用到的软件服务的安装和使用&lt;/p&gt;
&lt;h2 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h2&gt;&lt;p&gt;linux版本：CentOs7&lt;br&gt;配备的开发环境软件服务：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- mysql（centos下默认使用mariadb，也可以，两者兼容）
- jdk
- ftp
- redis
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;1-linux下开放端口&quot;&gt;&lt;a href=&quot;#1-linux下开放端口&quot; class=&quot;headerlink&quot; title=&quot;1. linux下开放端口&quot;&gt;&lt;/a&gt;1. linux下开放端口&lt;/h3&gt;&lt;p&gt;先把一些已知要用到的端口放开了，省的后面要用到的时候连不上&lt;br&gt;由于centos7默认没有iptables服务，所以需要先安装&lt;br&gt;首先暂停防火墙&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop firewalld&amp;#10;systemctl mask firewalld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then, install the iptables-services package:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install iptables-services&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Enable the service at boot-time:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable iptables&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置要放开的端口&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -I INPUT -p tcp --dport 80 -j ACCEPT&amp;#10;iptables -I INPUT -p tcp --dport 22 -j ACCEPT&amp;#10;iptables -I INPUT -p tcp --dport 3306 -j ACCEPT&amp;#10;iptables -I INPUT -p tcp --dport 8080 -j ACCEPT&amp;#10;iptables -I INPUT -p tcp --dport 21 -j ACCEPT&amp;#10;iptables -I INPUT -p tcp --dport 8081 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;保存配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;service iptables save&amp;#10;or&amp;#10;/usr/libexec/iptables/iptables.init save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Managing the service开启停止防火墙服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl [stop|start|restart] iptables&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-linux下安装使用mysql&quot;&gt;&lt;a href=&quot;#2-linux下安装使用mysql&quot; class=&quot;headerlink&quot; title=&quot;2. linux下安装使用mysql&quot;&gt;&lt;/a&gt;2. linux下安装使用mysql&lt;/h3&gt;&lt;p&gt;一般的linux安装mysql，会使用yum install mysql mysql-server mysql-devel&lt;br&gt;然而，在centos7下这样安装的时候，却发现mysql-server安装不上。&lt;br&gt;原来，由于Oracle收购mysql后，开源社区担心mysql有闭源的风险，于是使用mysql的一个分支mariadb替代mysql。mariadb完全兼容mysql。 而centos7就是默认推荐使用mariadb代替mysql。&lt;br&gt;那么，centos7下安装mysql就有两种方式&lt;br&gt;1）使用mariadb；&lt;br&gt;2）卸载mariadb，安装mysql&lt;/p&gt;
&lt;h4 id=&quot;方法1-使用mariadb&quot;&gt;&lt;a href=&quot;#方法1-使用mariadb&quot; class=&quot;headerlink&quot; title=&quot;方法1:使用mariadb&quot;&gt;&lt;/a&gt;方法1:使用mariadb&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install mariadb-server mariadb&amp;#10;systemctl start mariadb&amp;#10;mysql -u root -p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;方法2-安装mysql：&quot;&gt;&lt;a href=&quot;#方法2-安装mysql：&quot; class=&quot;headerlink&quot; title=&quot;方法2:安装mysql：&quot;&gt;&lt;/a&gt;方法2:安装mysql：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm&amp;#10;# rpm -ivh mysql-community-release-el7-5.noarch.rpm&amp;#10;# yum install mysql-community-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功后重启mysql服务。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# service mysqld restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;初次安装mysql，root账户没有密码。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@yl-web yl]# mysql -u root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置密码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;#62; set password for &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; =password(&amp;#39;password&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。&quot;&gt;&lt;a href=&quot;#实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。&quot; class=&quot;headerlink&quot; title=&quot;实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。&quot;&gt;&lt;/a&gt;实践结论：如果不介意使用mariadb的话，就不用折腾安装mysql了，因为我在实际使用方法2安装MySQL的过程中，遇到不少需要折腾的问题。&lt;/h4&gt;&lt;p&gt;记录如下：&lt;br&gt;1）在进入mysql工具时，总是有错误提示:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mysql -u root -p&amp;#10;Enter password:&amp;#10;ERROR 1045 (28000): Access denied for user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; (using password: NO)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决：方法操作很简单，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# /etc/init.d/mysql stop&amp;#10;# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;#38;&amp;#10;# mysql -u root mysql&amp;#10;mysql&amp;#62; UPDATE user SET Password=PASSWORD(&amp;#39;newpassword&amp;#39;) where USER=&amp;#39;root&amp;#39; and host=&amp;#39;root&amp;#39; or host=&amp;#39;localhost&amp;#39;;//&amp;#25226;&amp;#31354;&amp;#30340;&amp;#29992;&amp;#25143;&amp;#23494;&amp;#30721;&amp;#37117;&amp;#20462;&amp;#25913;&amp;#25104;&amp;#38750;&amp;#31354;&amp;#30340;&amp;#23494;&amp;#30721;&amp;#23601;&amp;#34892;&amp;#20102;&amp;#12290;&amp;#10;mysql&amp;#62; FLUSH PRIVILEGES;&amp;#10;mysql&amp;#62; quit&amp;#10;# /etc/init.d/mysqld restart&amp;#10;# mysql -uroot -p&amp;#10;Enter password: &amp;#60;&amp;#36755;&amp;#20837;&amp;#26032;&amp;#35774;&amp;#30340;&amp;#23494;&amp;#30721;newpassword&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）MySQL服务在启动的时候，不能创建pid文件。&lt;/p&gt;
&lt;p&gt;在终端看一下该目录是否存在，果然，不存在。&lt;br&gt;于是，创建了/var/run/mysqld/目录，重启MySQL服务&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@spark01 ~]# mkdir -p /var/run/mysqld/&amp;#10;[root@spark01 ~]# /etc/init.d/mysqld start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果依旧不能成功启动，那有可能是/var/run/mysqld/的属主和属组还是root，mysql并不能在其中创建文件，那么修改该目录的属主和属组，应该就行了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@spark01 ~]# ls -ld /var/run/mysqld/&amp;#10;drwxr-xr-x 2 root root 40 Jan 20 18:28 /var/run/mysqld/&amp;#10;[root@spark01 ~]# chown mysql.mysql /var/run/mysqld/&amp;#10;[root@spark01 ~]# /etc/init.d/mysqld start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-linux下安装jdk&quot;&gt;&lt;a href=&quot;#3-linux下安装jdk&quot; class=&quot;headerlink&quot; title=&quot;3. linux下安装jdk&quot;&gt;&lt;/a&gt;3. linux下安装jdk&lt;/h3&gt;&lt;p&gt;一、卸载系统自带的openjdk&lt;br&gt;1、查询系统内置的jdk，使用命令如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -qa | grep java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时会列出系统中存在的jdk，如果存在就进行卸载，不存在就直接进行安装。&lt;br&gt;如下：&lt;br&gt;python-javapackages-3.4.1-11.el7.noarch&lt;br&gt;java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64&lt;br&gt;java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64&lt;br&gt;java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64&lt;br&gt;tzdata-java-2015g-1.el7.noarch&lt;br&gt;javapackages-tools-3.4.1-11.el7.noarch&lt;br&gt;java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64&lt;/p&gt;
&lt;p&gt;2、进行卸载，使用命令如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -e --nodeps jdk&amp;#30456;&amp;#20851;&amp;#21517;&amp;#31216;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;依次卸载如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -e --nodeps python-javapackages-3.4.1-11.el7.noarch&amp;#10;rpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64&amp;#10;rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64&amp;#10;rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64&amp;#10;rpm -e --nodeps tzdata-java-2015g-1.el7.noarch&amp;#10;rpm -e --nodeps javapackages-tools-3.4.1-11.el7.noarch&amp;#10;rpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;二、jdk安装&lt;br&gt;1、下载jdk并上传到/usr/java目录&lt;br&gt;jdk7下载地址为：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html&lt;/a&gt; 选择对应的linux版本，下载rpm文件。这里选择的是jdk-7u79-linux-x64.rpm。并上传到Linux的/urs/java目录下（java目录不存在则进行创建）。&lt;/p&gt;
&lt;p&gt;2、解压安装&lt;br&gt;进入/usr/java目录，运行如下命令进行解压(rpm -ivh rpm文件名称)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -ivh jdk-7u79-linux-x64.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、配置profile文件&lt;br&gt;运行如下命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将如下内容添加到profile文件末尾并保持&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME=/usr/java/jdk1.7.0_79&amp;#10;export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;/usr/java/jdk1.7.0_79 指的是jdk的路径&lt;/p&gt;
&lt;p&gt;保存之后，运行如下命令使配置生效&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source /etc/profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;检查jdk是否安装成功，运行如下命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-linux下安装redis&quot;&gt;&lt;a href=&quot;#4-linux下安装redis&quot; class=&quot;headerlink&quot; title=&quot;4. linux下安装redis&quot;&gt;&lt;/a&gt;4. linux下安装redis&lt;/h3&gt;&lt;p&gt;1）方法1：使用命令安装&lt;br&gt;安装redis:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动/停止/重启 Redis&lt;br&gt;启动服务：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl start redis.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;停止服务：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop redis.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重启服务：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl restart redis.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;检查状态：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl status redis.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;随系统启动服务：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable redis.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）方法二：编译安装&lt;br&gt;下载安装编译:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://download.redis.io/releases/redis-2.8.17.tar.gz&amp;#10;tar xzf redis-2.8.17.tar.gz&amp;#10;cd redis-2.8.17&amp;#10;make&amp;#10;make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置配置文件路径:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /etc/redis &amp;#38;&amp;#38; cp redis.conf /etc/redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改配置文件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/redis/redis.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改为： daemonize yes&lt;br&gt;启动Redis:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/redis-server /etc/redis/redis.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-linux配置ftp服务&quot;&gt;&lt;a href=&quot;#5-linux配置ftp服务&quot; class=&quot;headerlink&quot; title=&quot;5. linux配置ftp服务&quot;&gt;&lt;/a&gt;5. linux配置ftp服务&lt;/h3&gt;&lt;p&gt;在安装前查看是否已安装vsftpd&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# rpm -q vsftpd&amp;#10;vsftpd-3.0.2-9.el7.x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果有显示类似以上的信息，说明已经安装vsftpd，如果没有，用yum安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# yum -y install vsftpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看一下vsftpd安装在哪：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# whereis vsftpd&amp;#10;vsftpd: /usr/sbin/vsftpd /etc/vsftpd /usr/share/man/man8/vsftpd.8.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动vsftpd服务：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# systemctl start vsftpd.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/vsftpd/vsftpd.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改如下配置：&lt;br&gt;anonymous_enable=NO&lt;br&gt;chroot_local_user=YES&lt;br&gt;allow_writeable_chroot=YES #加上这行解决了无法登陆的问题&lt;/p&gt;
&lt;p&gt;启动／重新启动ftp&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;service vsftpd start&amp;#10;service vsftpd restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置开机启动ftp&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chkconfig vsftpd on&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置用户&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# useradd -g root -M -d /var/www/html -s /sbin/nologin ftpuser&amp;#10;[root@localhost ~]# passwd ftpuser&amp;#10;[root@localhost ~]# &amp;#36755;&amp;#20837;&amp;#23494;&amp;#30721;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把 /var/www/html 的所有权给ftpuser.root&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# chown -R ftpuser.root /var/www/html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动&quot;&gt;&lt;a href=&quot;#6-附：使用maven把java-project打成包含依赖包的jar包，上传到服务器，并启动&quot; class=&quot;headerlink&quot; title=&quot;6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动&quot;&gt;&lt;/a&gt;6. 附：使用maven把java project打成包含依赖包的jar包，上传到服务器，并启动&lt;/h3&gt;&lt;h4 id=&quot;编译打包：&quot;&gt;&lt;a href=&quot;#编译打包：&quot; class=&quot;headerlink&quot; title=&quot;编译打包：&quot;&gt;&lt;/a&gt;编译打包：&lt;/h4&gt;&lt;p&gt;方法1：使用maven-assembly-plugin插件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;plugin&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;maven-assembly-plugin&amp;#60;/artifactId&amp;#62; &amp;#10;    &amp;#60;configuration&amp;#62; &amp;#10;        &amp;#60;archive&amp;#62;&amp;#10;            &amp;#60;manifest&amp;#62;&amp;#10;                &amp;#60;mainClass&amp;#62;com.iyihua.itimes.App&amp;#60;/mainClass&amp;#62;&amp;#60;/manifest&amp;#62; &amp;#10;            &amp;#60;/archive&amp;#62;&amp;#10;        &amp;#60;descriptorRefs&amp;#62;&amp;#10;            &amp;#60;descriptorRef&amp;#62; jar-with-dependencies &amp;#60;/descriptorRef&amp;#62; &amp;#10;        &amp;#60;/descriptorRefs&amp;#62;&amp;#10;    &amp;#60;/configuration&amp;#62;&amp;#10;    &amp;#60;executions&amp;#62;&amp;#10;        &amp;#60;execution&amp;#62;&amp;#10;            &amp;#60;id&amp;#62;make-assembly&amp;#60;/id&amp;#62; &amp;#10;            &amp;#60;phase&amp;#62;package&amp;#60;/phase&amp;#62;&amp;#10;            &amp;#60;goals&amp;#62;&amp;#10;                &amp;#60;goal&amp;#62;single&amp;#60;/goal&amp;#62;&amp;#10;            &amp;#60;/goals&amp;#62;&amp;#10;        &amp;#60;/execution&amp;#62; &amp;#10;    &amp;#60;/executions&amp;#62;&amp;#10;&amp;#60;/plugin&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行命令：mvn assembly:assembly&lt;br&gt;或者命令：mvn package&lt;/p&gt;
&lt;p&gt;由于我使用这个方式，打出来的jar包里，依赖的jar和模块的class都正常，但是自己项目内的所有class都是空的class，用反编译看class文件，发现都是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解压出来取单个class查看又是正常的，这个问题一直百撕不得骑姐，所以我最后使用了方法2的方式解决了问题。&lt;/p&gt;
&lt;p&gt;方法2：使用spring-boot-maven-plugin插件&lt;br&gt;由于我的project是spring boot项目，所以可以使用此方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;plugin&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;spring-boot-maven-plugin&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;executions&amp;#62;&amp;#10;        &amp;#60;execution&amp;#62;&amp;#10;            &amp;#60;goals&amp;#62;&amp;#10;                &amp;#60;goal&amp;#62;repackage&amp;#60;/goal&amp;#62;&amp;#10;            &amp;#60;/goals&amp;#62;&amp;#10;        &amp;#60;/execution&amp;#62;&amp;#10;    &amp;#60;/executions&amp;#62;&amp;#10;&amp;#60;/plugin&amp;#62;&amp;#10;&amp;#60;plugin&amp;#62;&amp;#10;    &amp;#60;groupId&amp;#62;org.apache.maven.plugins&amp;#60;/groupId&amp;#62;&amp;#10;    &amp;#60;artifactId&amp;#62;maven-jar-plugin&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;configuration&amp;#62;&amp;#10;        &amp;#60;archive&amp;#62;&amp;#10;            &amp;#60;manifest&amp;#62;&amp;#10;                &amp;#60;addClasspath&amp;#62;true&amp;#60;/addClasspath&amp;#62;&amp;#10;                &amp;#60;mainClass&amp;#62;com.iyihua.itimes.App&amp;#60;/mainClass&amp;#62;&amp;#10;            &amp;#60;/manifest&amp;#62;&amp;#10;        &amp;#60;/archive&amp;#62;&amp;#10;    &amp;#60;/configuration&amp;#62;&amp;#10;&amp;#60;/plugin&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行mvn package打jar包，done！&lt;/p&gt;
&lt;h4 id=&quot;上传并启动&quot;&gt;&lt;a href=&quot;#上传并启动&quot; class=&quot;headerlink&quot; title=&quot;上传并启动&quot;&gt;&lt;/a&gt;上传并启动&lt;/h4&gt;&lt;p&gt;连接sftp&lt;br&gt;lcd 打开本地路径&lt;br&gt;cd 进入服务器目标路径&lt;br&gt;put xxx.jar 把目标jar包上传到服务器对应路径&lt;br&gt;java -jar xxx.jar 启动java程序&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在linux下部署spring-boot项目过程记录&quot;&gt;&lt;a href=&quot;#在linux下部署spring-boot项目过程记录&quot; class=&quot;headerlink&quot; title=&quot;在linux下部署spring boot项目过程记录&quot;&gt;&lt;/a&gt;在linux下部
    
    </summary>
    
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>集群监控初步整理</title>
    <link href="http://yoursite.com/2016/03/11/%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7%E5%88%9D%E6%AD%A5%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/03/11/集群监控初步整理/</id>
    <published>2016-03-11T01:53:20.000Z</published>
    <updated>2016-03-12T04:09:16.055Z</updated>
    
    <content type="html">&lt;h3 id=&quot;集群监控初步整理&quot;&gt;&lt;a href=&quot;#集群监控初步整理&quot; class=&quot;headerlink&quot; title=&quot;集群监控初步整理&quot;&gt;&lt;/a&gt;集群监控初步整理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/java-monitor.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;集群监控初步整理&quot;&gt;&lt;a href=&quot;#集群监控初步整理&quot; class=&quot;headerlink&quot; title=&quot;集群监控初步整理&quot;&gt;&lt;/a&gt;集群监控初步整理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/java-monitor.png&quot; alt=&quot;&quot;&gt;&lt;/p
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="monitor" scheme="http://yoursite.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="集群" scheme="http://yoursite.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>spring aop 知识体系整理</title>
    <link href="http://yoursite.com/2016/02/20/spring-aop-%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/02/20/spring-aop-知识体系整理/</id>
    <published>2016-02-20T04:48:30.000Z</published>
    <updated>2016-02-20T04:51:36.224Z</updated>
    
    <content type="html">&lt;p&gt;spring aop 整理&lt;br&gt;参考：&lt;br&gt;     1.&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/&lt;/a&gt;&lt;br&gt;     2.&lt;a href=&quot;http://blog.csdn.net/dreamrealised/article/details/12885739&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/dreamrealised/article/details/12885739&lt;/a&gt;&lt;br&gt;思维导图：&lt;br&gt;     &lt;a href=&quot;http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://naotu.baidu.com/file/b3c0f4b10b0af258be629adb3b3259a2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/java-spring-aop.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;spring aop 整理&lt;br&gt;参考：&lt;br&gt;     1.&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;h
    
    </summary>
    
    
      <category term="aop" scheme="http://yoursite.com/tags/aop/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>java-io体系整理</title>
    <link href="http://yoursite.com/2016/02/20/java-io%E4%BD%93%E7%B3%BB%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2016/02/20/java-io体系整理/</id>
    <published>2016-02-20T04:20:38.000Z</published>
    <updated>2016-02-20T04:39:58.973Z</updated>
    
    <content type="html">&lt;h3 id=&quot;java-io体系使用整理&quot;&gt;&lt;a href=&quot;#java-io体系使用整理&quot; class=&quot;headerlink&quot; title=&quot;java io体系使用整理&quot;&gt;&lt;/a&gt;java io体系使用整理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;来源：&lt;a href=&quot;http://www.importnew.com/17714.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.importnew.com/17714.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;思维导图：&lt;a href=&quot;http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://naotu.baidu.com/file/ef892698672800bd4e2a8306f946f91f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/java+io.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java-io体系使用整理&quot;&gt;&lt;a href=&quot;#java-io体系使用整理&quot; class=&quot;headerlink&quot; title=&quot;java io体系使用整理&quot;&gt;&lt;/a&gt;java io体系使用整理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;来源：&lt;a href=&quot;http://w
    
    </summary>
    
    
      <category term="io" scheme="http://yoursite.com/tags/io/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="思维导图" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="整理" scheme="http://yoursite.com/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/02/20/hello-world/"/>
    <id>http://yoursite.com/2016/02/20/hello-world/</id>
    <published>2016-02-20T04:02:04.711Z</published>
    <updated>2016-02-20T04:02:04.711Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[java]从代码中去除if-else</title>
    <link href="http://yoursite.com/2016/02/02/java-%E4%BB%8E%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%8E%BB%E9%99%A4if-else/"/>
    <id>http://yoursite.com/2016/02/02/java-从代码中去除if-else/</id>
    <published>2016-02-02T08:09:30.000Z</published>
    <updated>2016-02-20T04:02:04.715Z</updated>
    
    <content type="html">&lt;p&gt;有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？&lt;/p&gt;
&lt;p&gt;首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比较清楚简单，而且也没有预期到一些业务逻辑会产生变动，那么其实就并不需要，起码是并不急着需要去优化这个if else语句。&lt;/p&gt;
&lt;p&gt;当判断到确实需要优化if else，方法有很多，总结如下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用map.&lt;/li&gt;
&lt;li&gt;使用枚举.&lt;/li&gt;
&lt;li&gt;多态. 当然，设计模式实际上就是多态，而且理论上，大部分的设计模式都能用于优化if else，可以根据具体情况处理。&lt;br&gt;当if else代码段中的逻辑比较多和复杂的时候，可以适当的使用方法或者类封装好处理逻辑，然后使用反射来根据不同条件匹配对应处理方法或处理类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面举例。&lt;br&gt;要优化的原if else语句：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int code;&amp;#10;if(&amp;#34;Name&amp;#34;.equals(str))&amp;#10;    code = 0;&amp;#10;else if(&amp;#34;Age&amp;#34;.equals(str))&amp;#10;    code = 1;&amp;#10;else if(&amp;#34;Address&amp;#34;.equals(str))&amp;#10;    code = 2;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用map优化&quot;&gt;&lt;a href=&quot;#使用map优化&quot; class=&quot;headerlink&quot; title=&quot;使用map优化&quot;&gt;&lt;/a&gt;使用map优化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public final static Map map = new HashMap();  &amp;#10;static &amp;#123;  &amp;#10;    map.put(&amp;#34;Name&amp;#34;, 0);  &amp;#10;    map.put(&amp;#34;Age&amp;#34;, 1);&amp;#10;    map.put(&amp;#34;Address&amp;#34;, 2);  &amp;#10;&amp;#125;&amp;#10;&amp;#10;int code = map.get(type);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用枚举优化&quot;&gt;&lt;a href=&quot;#使用枚举优化&quot; class=&quot;headerlink&quot; title=&quot;使用枚举优化&quot;&gt;&lt;/a&gt;使用枚举优化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Codes &amp;#123;&amp;#10;    Name(0), Age(1), Address(2);&amp;#10;    public int code;&amp;#10;    Codes(int code)&amp;#123;&amp;#10;        this.code = code;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&amp;#10;&amp;#10;int code = Codes.valueOf(str).code;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用多态优化&quot;&gt;&lt;a href=&quot;#使用多态优化&quot; class=&quot;headerlink&quot; title=&quot;使用多态优化&quot;&gt;&lt;/a&gt;使用多态优化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ICode iCode = (ICode)Class.forName(&amp;#34;com.xxx.&amp;#34; + str).newInstance();&amp;#10;&amp;#10;int code = iCode.getCode();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;“责任链”如何优化if-else？&quot;&gt;&lt;a href=&quot;#“责任链”如何优化if-else？&quot; class=&quot;headerlink&quot; title=&quot;“责任链”如何优化if else？&quot;&gt;&lt;/a&gt;“责任链”如何优化if else？&lt;/h2&gt;&lt;p&gt;首先，既然每个if分支后面跟着一堆复杂的逻辑，每个分支里做的事情肯定不同，把它们堆在一个方法中并不妥当（如果楼主想讨论为什么不妥当，可以另外讨论，最常见的不妥当是因为各个分支的抽象层次不同导致阅读者思路混乱）。因此最好把各个分支的处理代码分别抽出来，分别形成独立的方法。这样每个分支处理都有明确的边界，而且我们可以在方法上写javadoc，形成良好的文档。&lt;/p&gt;
&lt;p&gt;好，现在你有了一个单纯含有if分支的主控方法和一堆执行处理的方法，你面临的第二个问题是每个方法上都要传入一大串参数，因为原来的复杂处理往往依赖大量的上下文状态。解决这个问题的最正统有效（未必优雅）的方法是创建一个上下文（Context）类，或者也可以叫请求（Request）类来携带传入参数。这样可以解决参数文档问题，默认值问题和参数顺序问题。但你有许多个执行方法，显然你不会傻到为每个方法都创建一个上下文，而会只创建一个上下文类，每个方法都接收这个上下文实例，只取自己真正关注的属性。毕竟既然这些执行方法都从一个if结构中抽取处理，这些属性之间逻辑上总有些关联，放在一起也不会有很大问题。&lt;/p&gt;
&lt;p&gt;现在你有了一堆参数一致，但名称不同的方法。如果你的需求变动不大，就这样就可以了。但如果你觉得需求可能会有变化，未来可能需要覆盖其中一些方法。你会发现，如果需求1需要你覆盖A，你需要创建一个子类。需求2需要你覆盖B，又要创建一个子类。需求3需要你同时具有需求A,需求B的特性，你又要创建一个子类。既然这样，何不把它们抽到独立的类中，可以分别扩展？ 抽取过程中，你发现现在每个处理类都只有一个方法，方法名和类名是重复的。而且本质上它们都是某种处理器（Handler），何不让它们实现统一的接口，方法名统一改为handle。强调一下，这一步是预期需求会有变化的情况才做，如果认为需求不太可能会变化，或者预计变化有足够时间重构，完全可以在前一步就停止。&lt;/p&gt;
&lt;p&gt;好，现在你有一个主控方法，这个方法创建一个上下文对象，再根据分支条件分别调用不同Handler子类上的handle方法，传入这个上下文。你注意到一个问题，分支条件本身和对应的处理逻辑是内聚的。如果条件发生变化，处理往往也要发生变化。反之依然。而且你读代码时，读到一个复杂的条件，往往不能轻易看出它要判断什么，这时最好的方法就是直接看看对应Handler的命名和文档，从处理方式反推这个条件对应的业务需求。既然这样，何不干脆把条件都搬到Handler里去，让每个Handler根据传入的上下文，看看在当前状态下自己是否应该执行处理。&lt;/p&gt;
&lt;p&gt;现在你得到了一个主控类，这个类持有一堆Handler实例，主控类创建一个上下文，然后把上下文依次传给各个Handler，Handler自行判断是否应该执行自己的处理。&lt;/p&gt;
&lt;p&gt;到了这一步，其实已经差不多了。不过对于某些人，他在进行前一步的重构时，就会醒悟：主控类现在已经变成了一个单纯的任务转发人（分配者）。它根本没有必要持有一个Handler的列表再分别逐个调用，还要管理该继续还是该中断等等逻辑（这些逻辑是依赖每个Handler返回的标志来决定的）。何不让Handler自己负责把控制向后分发，主控类只需要知道领头的那个Handler最终会把事情处理好就行了。这种结构还有一个好处，就是每个Handler可以自行决定是否该往下传递控制，还可以根据需要替换上下文实例的实现来影响后续的处理。（这一步与上一步是二选一，有些人喜欢在主控类中持有Handler队列，有些人喜欢链式Handler。我个人认为问题不大，两者的实现难度也没有差别，实现需求就行）&lt;/p&gt;
&lt;p&gt;最后，我们为了交流方便，把这种组合方式称为“责任链”。&lt;/p&gt;
&lt;h2 id=&quot;使用状态模式优化if-else&quot;&gt;&lt;a href=&quot;#使用状态模式优化if-else&quot; class=&quot;headerlink&quot; title=&quot;使用状态模式优化if else&quot;&gt;&lt;/a&gt;使用状态模式优化if else&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.blogjava.net/xzclog/archive/2006/10/16/75399.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有时候代码中会遇到大段的if else语句，灰常的不优雅，就算没有强迫症的人，也必定除之而后快。在java中，都有哪些方式能去除那些if else呢？&lt;/p&gt;
&lt;p&gt;首先要明确的是，实践而言，并不是只要有大段的if else语句就一定需要优化，在开始的时候，如果这里的逻辑比
    
    </summary>
    
    
      <category term="coding" scheme="http://yoursite.com/tags/coding/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="patten" scheme="http://yoursite.com/tags/patten/"/>
    
  </entry>
  
  <entry>
    <title>[springboot][items][项目使用实践]springboot get started</title>
    <link href="http://yoursite.com/2016/02/01/springboot-items-%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%B7%B5-springboot-get-started/"/>
    <id>http://yoursite.com/2016/02/01/springboot-items-项目使用实践-springboot-get-started/</id>
    <published>2016-02-01T09:10:18.000Z</published>
    <updated>2016-02-20T04:02:04.723Z</updated>
    
    <content type="html">&lt;p&gt;往后将通过一个时间记录web app项目，实践并记录spring boot的使用&lt;br&gt;为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。&lt;/p&gt;
&lt;h3 id=&quot;1-pom-xml中添加maven依赖&quot;&gt;&lt;a href=&quot;#1-pom-xml中添加maven依赖&quot; class=&quot;headerlink&quot; title=&quot;1.pom.xml中添加maven依赖&quot;&gt;&lt;/a&gt;1.pom.xml中添加maven依赖&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;dependencies&amp;#62;&amp;#10;    &amp;#60;dependency&amp;#62;&amp;#10;        &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;        &amp;#60;artifactId&amp;#62;spring-boot-starter&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;/dependency&amp;#62;&amp;#10;    &amp;#60;dependency&amp;#62;&amp;#10;        &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62;&amp;#10;        &amp;#60;artifactId&amp;#62;spring-boot-starter-web&amp;#60;/artifactId&amp;#62;&amp;#10;    &amp;#60;/dependency&amp;#62;&amp;#10;&amp;#60;/dependencies&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-编写项目启动入口App-java&quot;&gt;&lt;a href=&quot;#2-编写项目启动入口App-java&quot; class=&quot;headerlink&quot; title=&quot;2.编写项目启动入口App.java&quot;&gt;&lt;/a&gt;2.编写项目启动入口App.java&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@SpringBootApplication&amp;#10;public class App &amp;#10;&amp;#123;&amp;#10;    public static void main(String[] args) throws Exception &amp;#123;&amp;#10;        SpringApplication.run(App.class, args);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ok! done!&lt;br&gt;这样就已经能直接使用spring boot了.&lt;br&gt;启动App.java，spring boot就会使用内置的tomcat直接在本机的8080端口开启一个服务。&lt;/p&gt;
&lt;h3 id=&quot;再进一步，为应用引入spring-mvc&quot;&gt;&lt;a href=&quot;#再进一步，为应用引入spring-mvc&quot; class=&quot;headerlink&quot; title=&quot;再进一步，为应用引入spring mvc&quot;&gt;&lt;/a&gt;再进一步，为应用引入spring mvc&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Controller&amp;#10;public class SampleController &amp;#123;&amp;#10;&amp;#10;    &amp;#10;    @RequestMapping(&amp;#34;/&amp;#34;)&amp;#10;    @ResponseBody&amp;#10;    String home() &amp;#123;&amp;#10;        String data = &amp;#34;&amp;#34;;&amp;#10;        return &amp;#34;Hello World!&amp;#34;;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动App.java，访问localhost:8080, 即可遇见“Hello World!”&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;往后将通过一个时间记录web app项目，实践并记录spring boot的使用&lt;br&gt;为了快速实现，以及以后能更灵活的扩展，后台选用spring boot微服务框架。&lt;/p&gt;
&lt;h3 id=&quot;1-pom-xml中添加maven依赖&quot;&gt;&lt;a href=&quot;#1-pom-xml
    
    </summary>
    
    
      <category term="itime" scheme="http://yoursite.com/tags/itime/"/>
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>jquery-validate常用用法总结</title>
    <link href="http://yoursite.com/2016/01/04/jquery-validate%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/01/04/jquery-validate常用用法总结/</id>
    <published>2016-01-04T09:05:28.000Z</published>
    <updated>2016-02-20T04:02:04.719Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;juqry validate中，如何对使用ajax提交的方式进行校验？&lt;br&gt;有两种方式&lt;br&gt; 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用ajax提交。&lt;br&gt; 2)使用valid方法，监听form的submit事件，当$(‘#form’).valid()返回true的时候再提交。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#36890;&amp;#36807;&amp;#30417;&amp;#21548;form&amp;#30340;submit&amp;#20107;&amp;#20214;&amp;#65292;&amp;#23545;form&amp;#36827;&amp;#34892;ajax&amp;#25552;&amp;#20132;&amp;#12290;&amp;#10; $(&amp;#39;#formId&amp;#39;).submit(function() &amp;#123;&amp;#10;     if (!$(&amp;#34;#formId&amp;#34;).valid()) &amp;#10;         return false;&amp;#10;     $(this).omAjaxSubmit(&amp;#123;&amp;#125;);&amp;#10;     return false; //&amp;#27492;&amp;#22788;&amp;#24517;&amp;#39035;&amp;#36820;&amp;#22238;false&amp;#65292;&amp;#38459;&amp;#27490;&amp;#24120;&amp;#35268;&amp;#30340;form&amp;#25552;&amp;#20132;&amp;#10; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;juqry validate中，如何对校验错误的提示信息位置和样式进行更改？&lt;br&gt; 1）js代码：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(function()&amp;#123;  &amp;#10;    $(&amp;#34;#form1&amp;#34;).validate(&amp;#123;  &amp;#10;        errorPlacement: function (error, element) &amp;#123;  &amp;#10;            error.appendTo(element.parent(&amp;#34;td&amp;#34;));  &amp;#10;        &amp;#125;,  &amp;#10;        rules:&amp;#123;              &amp;#10;        &amp;#125;  &amp;#10;    &amp;#125;);  &amp;#10;    $(&amp;#34;[name$=&amp;#39;.sign&amp;#39;]&amp;#34;).each(function()&amp;#123;  &amp;#10;        $(this).rules(&amp;#34;add&amp;#34;,&amp;#123;required:true,messages:&amp;#123;required:&amp;#34;&amp;#33267;&amp;#23569;&amp;#36873;&amp;#25321;&amp;#19968;&amp;#20010;&amp;#36873;&amp;#39033;&amp;#34;&amp;#125;&amp;#125;);  &amp;#10;    &amp;#125;);  &amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 2）validate会默认追加一个label，样式默认是error，所以我们做的就是写一个class为error的css就可以了&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;style&amp;#62;  &amp;#10;label.error &amp;#123;   &amp;#10;    color:Red;   &amp;#10;    font-size:13px;   &amp;#10;    margin-left:5px;   &amp;#10;    padding-left:16px;   &amp;#10;&amp;#125;   &amp;#10;&amp;#60;/style&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 3) 校验时机，可以自定义在js中想要的时候去校验&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&amp;#39;.selector&amp;#39;).click(function() &amp;#123;&amp;#10;    if ($(&amp;#34;selector of you form&amp;#34;).valid()) &amp;#123;&amp;#10;        alert(&amp;#39;in&amp;#39;);&amp;#10;    &amp;#125; else &amp;#123;&amp;#10;        alert(&amp;#39;out&amp;#39;);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;);&amp;#10;$(&amp;#34;selector of you form&amp;#34;).validate(&amp;#123;&amp;#10;    rules: &amp;#123;&amp;#10;        receiveDayFrom: &amp;#123;&amp;#10;            required: true&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 4) 例子：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&amp;#34;#form&amp;#34;).validate(&amp;#123;&amp;#10;    rules: &amp;#123;&amp;#10;        name: &amp;#123;&amp;#10;            required: true&amp;#10;        &amp;#125;,&amp;#10;        firstname: &amp;#123;&amp;#10;            required: true&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;,&amp;#10;    messages: &amp;#123;&amp;#10;        name: &amp;#123;&amp;#10;            required: &amp;#34;Enter name&amp;#34;&amp;#10;        &amp;#125;,&amp;#10;        firstname: &amp;#123;&amp;#10;            required: &amp;#34;Enter firstname&amp;#34;&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;,&amp;#10;    errorPlacement: function ($error, $element) &amp;#123;&amp;#10;        var name = $element.attr(&amp;#34;name&amp;#34;);&amp;#10;        $(&amp;#34;#error&amp;#34; + name).append($error);&amp;#10;    &amp;#125;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;or:
&lt;/code&gt;&lt;/pre&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&amp;#34;#form&amp;#34;).validate(&amp;#123;&amp;#10;    errorLabelContainer: &amp;#34;#errors&amp;#34;,&amp;#10;    rules: &amp;#123;&amp;#10;        name: &amp;#123;&amp;#10;            required: true&amp;#10;        &amp;#125;,&amp;#10;        firstname: &amp;#123;&amp;#10;            required: true&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;,&amp;#10;    messages: &amp;#123;&amp;#10;        name: &amp;#123;&amp;#10;            required: &amp;#34;Enter name&amp;#34;&amp;#10;        &amp;#125;,&amp;#10;        firstname: &amp;#123;&amp;#10;            required: &amp;#34;Enter firstname&amp;#34;&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何添加自定义的校验？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加一个方法&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// &amp;#23383;&amp;#31526;&amp;#39564;&amp;#35777;&amp;#65292;&amp;#21482;&amp;#33021;&amp;#21253;&amp;#21547;&amp;#33521;&amp;#25991;&amp;#12289;&amp;#25968;&amp;#23383;&amp;#12289;&amp;#19979;&amp;#21010;&amp;#32447;&amp;#31561;&amp;#23383;&amp;#31526;&amp;#12290;    &amp;#10;jQuery.validator.addMethod(&amp;#34;nameStringCheck&amp;#34;, function(value, element) &amp;#123;   &amp;#10;     return this.optional(element) || /^[a-zA-Z0-9-_]+$/.test(value); &amp;#10;&amp;#125;, &amp;#34;&amp;#21482;&amp;#33021;&amp;#21253;&amp;#21547;&amp;#33521;&amp;#25991;&amp;#12289;&amp;#25968;&amp;#23383;&amp;#12289;&amp;#19979;&amp;#21010;&amp;#32447;&amp;#31561;&amp;#23383;&amp;#31526;&amp;#34;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在validate配置中使用新加的方法&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&amp;#39;#form selector&amp;#39;).validate(&amp;#123;&amp;#10;    rules: &amp;#123;&amp;#10;        username: &amp;#123;&amp;#10;            required: true,&amp;#10;            nameStringCheck: true&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如何使用ajax请求进行远程校验&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jQuery.validator.addMethod(&amp;#34;checkUnique&amp;#34;, function(value, element) &amp;#123;&amp;#10;    return validateUsernameByAjax(value, element.name, &amp;#39;ajax&amp;#35831;&amp;#27714;&amp;#22320;&amp;#22336;&amp;#39;);&amp;#10;&amp;#125;, &amp;#34;&amp;#27492;&amp;#36755;&amp;#20837;&amp;#30340;&amp;#20540;&amp;#19981;&amp;#21487;&amp;#29992;&amp;#34;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&amp;#10; * &amp;#21516;&amp;#27493;&amp;#20570;&amp;#29992;&amp;#25143;&amp;#21517;&amp;#25110;&amp;#37038;&amp;#31665;&amp;#30340;&amp;#35831;&amp;#27714;&amp;#65292;&amp;#26816;&amp;#26597;&amp;#21040;&amp;#19981;&amp;#21487;&amp;#29992;&amp;#65292;&amp;#21017;&amp;#36820;&amp;#22238;false&amp;#65292;&amp;#21542;&amp;#21017;&amp;#36820;&amp;#22238;true&amp;#10; */&amp;#10;function validateUsernameByAjax(value, fieldname, url) &amp;#123;&amp;#10;    var _request = url + &amp;#34;?&amp;#34;+fieldname+&amp;#34;=&amp;#34;+value;&amp;#10;    var deferred = $.Deferred();//&amp;#21019;&amp;#24314;&amp;#19968;&amp;#20010;&amp;#24310;&amp;#36831;&amp;#23545;&amp;#35937;&amp;#10;    $.ajax(&amp;#123;&amp;#10;        url:_request,&amp;#10;        async:false,//&amp;#35201;&amp;#25351;&amp;#23450;&amp;#19981;&amp;#33021;&amp;#24322;&amp;#27493;,&amp;#24517;&amp;#39035;&amp;#31561;&amp;#24453;&amp;#21518;&amp;#21488;&amp;#26381;&amp;#21153;&amp;#26657;&amp;#39564;&amp;#23436;&amp;#25104;&amp;#20877;&amp;#25191;&amp;#34892;&amp;#21518;&amp;#32493;&amp;#20195;&amp;#30721;&amp;#10;        dataType:&amp;#34;json&amp;#34;,&amp;#10;        success:function(data) &amp;#123;&amp;#10;            if (data.status === &amp;#34;error&amp;#34; || data.status === &amp;#34;fail&amp;#34;) &amp;#123;&amp;#10;                deferred.reject();&amp;#10;            &amp;#125; else&amp;#123;&amp;#10;                deferred.resolve();  &amp;#10;            &amp;#125;&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;);&amp;#10;    //deferred.state()&amp;#26377;3&amp;#20010;&amp;#29366;&amp;#24577;:pending:&amp;#36824;&amp;#26410;&amp;#32467;&amp;#26463;,rejected:&amp;#22833;&amp;#36133;,resolved:&amp;#25104;&amp;#21151;&amp;#10;    return deferred.state() == &amp;#34;resolved&amp;#34; ? true : false;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&amp;#39;#form selector&amp;#39;).validate(&amp;#123;&amp;#10;    rules: &amp;#123;&amp;#10;        username: &amp;#123;&amp;#10;            checkUnique: true&amp;#10;        &amp;#125;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;juqry validate中，如何对使用ajax提交的方式进行校验？&lt;br&gt;有两种方式&lt;br&gt; 1)使用submitHandler属性配置ajax提交，submithandler：当表单全部校验通过之后会回调配置的代码，此处也就是当校验通过之后调用aja
    
    </summary>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="validate" scheme="http://yoursite.com/tags/validate/"/>
    
  </entry>
  
  <entry>
    <title>[git]git常用-把本地项目提交到github</title>
    <link href="http://yoursite.com/2015/12/31/git-git%E5%B8%B8%E7%94%A8-%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0github/"/>
    <id>http://yoursite.com/2015/12/31/git-git常用-把本地项目提交到github/</id>
    <published>2015-12-31T10:04:12.000Z</published>
    <updated>2016-02-20T04:02:04.710Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1-把本地项目提交到github&quot;&gt;&lt;a href=&quot;#1-把本地项目提交到github&quot; class=&quot;headerlink&quot; title=&quot;1.把本地项目提交到github&quot;&gt;&lt;/a&gt;1.把本地项目提交到github&lt;/h3&gt;&lt;p&gt;touch README.md //新建说明文件&lt;br&gt;git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录&lt;br&gt;git add . //添加当前目录中的所有文件到索引&lt;br&gt;git commit -m “first commit” //提交到本地源码库，并附加提交注释&lt;br&gt;git remote add origin &lt;a href=&quot;https://github.com/chape/test.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/chape/test.git&lt;/a&gt; //添加到远程项目，别名为origin&lt;br&gt;git push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交&lt;/p&gt;
&lt;h3 id=&quot;2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘&quot;&gt;&lt;a href=&quot;#2-如果有error-failed-to-push-some-refs-to-‘https-github-com-YihuaWanglv-myhexo-git‘&quot; class=&quot;headerlink&quot; title=&quot;2.如果有error: failed to push some refs to ‘https://github.com/YihuaWanglv/myhexo.git‘&quot;&gt;&lt;/a&gt;2.如果有error: failed to push some refs to ‘&lt;a href=&quot;https://github.com/YihuaWanglv/myhexo.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/YihuaWanglv/myhexo.git&lt;/a&gt;‘&lt;/h3&gt;&lt;p&gt;有如下几种解决方法：&lt;/p&gt;
&lt;p&gt;1.使用强制push的方法：&lt;br&gt;$ git push -u origin master -f&lt;br&gt;这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。&lt;br&gt;2.push前先将远程repository修改pull下来&lt;br&gt;$ git pull origin master&lt;br&gt;$ git push -u origin master&lt;br&gt;3.若不想merge远程和本地修改，可以先创建新的分支：&lt;br&gt;$ git branch [name]&lt;br&gt;然后push&lt;br&gt;$ git push -u origin [name]&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-把本地项目提交到github&quot;&gt;&lt;a href=&quot;#1-把本地项目提交到github&quot; class=&quot;headerlink&quot; title=&quot;1.把本地项目提交到github&quot;&gt;&lt;/a&gt;1.把本地项目提交到github&lt;/h3&gt;&lt;p&gt;touch README.m
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo-deploy直接发布到github</title>
    <link href="http://yoursite.com/2015/12/31/%E4%BD%BF%E7%94%A8hexo-deploy%E7%9B%B4%E6%8E%A5%E5%8F%91%E5%B8%83%E5%88%B0github/"/>
    <id>http://yoursite.com/2015/12/31/使用hexo-deploy直接发布到github/</id>
    <published>2015-12-31T09:08:52.000Z</published>
    <updated>2016-02-20T04:02:04.726Z</updated>
    
    <content type="html">&lt;p&gt;本文说明如何使用hexo deploy直接提交到github发布文章。&lt;/p&gt;
&lt;h3 id=&quot;1-npm安装需要的东西&quot;&gt;&lt;a href=&quot;#1-npm安装需要的东西&quot; class=&quot;headerlink&quot; title=&quot;1.npm安装需要的东西&quot;&gt;&lt;/a&gt;1.npm安装需要的东西&lt;/h3&gt;&lt;p&gt;$ npm install hexo-deployer-git –save&lt;br&gt;$ npm install hexo-deployer-heroku –save&lt;br&gt;$ npm install hexo-deployer-rsync –save&lt;br&gt;$ npm install hexo-deployer-openshift –save&lt;br&gt;$ npm install hexo-deployer-ftpsync –save&lt;/p&gt;
&lt;h3 id=&quot;2-修改配置文件-config-yml&quot;&gt;&lt;a href=&quot;#2-修改配置文件-config-yml&quot; class=&quot;headerlink&quot; title=&quot;2.修改配置文件_config.yml&quot;&gt;&lt;/a&gt;2.修改配置文件_config.yml&lt;/h3&gt;&lt;p&gt;deploy:&lt;br&gt;  type: git&lt;br&gt;  repository: &lt;a href=&quot;https://github.com/YihuaWanglv/yihuawanglv.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/YihuaWanglv/yihuawanglv.github.io.git&lt;/a&gt;&lt;br&gt;  branch: master&lt;/p&gt;
&lt;h3 id=&quot;3-执行命令提交发布&quot;&gt;&lt;a href=&quot;#3-执行命令提交发布&quot; class=&quot;headerlink&quot; title=&quot;3.执行命令提交发布&quot;&gt;&lt;/a&gt;3.执行命令提交发布&lt;/h3&gt;&lt;p&gt;$ hexo clean&lt;br&gt;$ hexo generate&lt;br&gt;$ hexo deploy&lt;/p&gt;
&lt;p&gt;over.&lt;/p&gt;
&lt;h3 id=&quot;参考：https-hexo-io-zh-cn-docs-deployment-html&quot;&gt;&lt;a href=&quot;#参考：https-hexo-io-zh-cn-docs-deployment-html&quot; class=&quot;headerlink&quot; title=&quot;参考：https://hexo.io/zh-cn/docs/deployment.html&quot;&gt;&lt;/a&gt;参考：&lt;a href=&quot;https://hexo.io/zh-cn/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/docs/deployment.html&lt;/a&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;本文说明如何使用hexo deploy直接提交到github发布文章。&lt;/p&gt;
&lt;h3 id=&quot;1-npm安装需要的东西&quot;&gt;&lt;a href=&quot;#1-npm安装需要的东西&quot; class=&quot;headerlink&quot; title=&quot;1.npm安装需要的东西&quot;&gt;&lt;/a&gt;1.npm安装
    
    </summary>
    
    
      <category term="deploy" scheme="http://yoursite.com/tags/deploy/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用github-pages和hexo搭建简单blog</title>
    <link href="http://yoursite.com/2015/12/31/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github-pages%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95blog/"/>
    <id>http://yoursite.com/2015/12/31/如何使用github-pages和hexo搭建简单blog/</id>
    <published>2015-12-31T07:41:30.000Z</published>
    <updated>2016-02-20T04:02:04.729Z</updated>
    
    <content type="html">&lt;p&gt;前言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github，写代码必备&lt;/li&gt;
&lt;li&gt;hexo，一个很方便的静态blog生成系统&lt;/li&gt;
&lt;li&gt;还不太熟悉，暂时不放图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤&lt;/p&gt;
&lt;h3 id=&quot;1-首先得有一个github账号&quot;&gt;&lt;a href=&quot;#1-首先得有一个github账号&quot; class=&quot;headerlink&quot; title=&quot;1.首先得有一个github账号&quot;&gt;&lt;/a&gt;1.首先得有一个github账号&lt;/h3&gt;&lt;p&gt;没有的得先上github创建一个&lt;/p&gt;
&lt;h3 id=&quot;2-创建一个repositories&quot;&gt;&lt;a href=&quot;#2-创建一个repositories&quot; class=&quot;headerlink&quot; title=&quot;2.创建一个repositories&quot;&gt;&lt;/a&gt;2.创建一个repositories&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Repository name的填写格式是xxx.github.io&lt;/li&gt;
&lt;li&gt;xxx要与你github的用户名一致（这样创建好后，可以直接通过xxx.github.io访问）&lt;/li&gt;
&lt;li&gt;创建Repository后，接着是对它进行设置，点击Repository的“setting”进行设置&lt;/li&gt;
&lt;li&gt;使用默认设置即可，最后点击“Launch automatic page generator”启动自动生成blog&lt;/li&gt;
&lt;li&gt;接下来是编辑用户界面，点击绿色的“continue to layouts”按钮配置布局和样式&lt;/li&gt;
&lt;li&gt;最后，点击“Publish page”，你的页面就公布出来了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-安装hexo&quot;&gt;&lt;a href=&quot;#3-安装hexo&quot; class=&quot;headerlink&quot; title=&quot;3.安装hexo&quot;&gt;&lt;/a&gt;3.安装hexo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先安装git&lt;/li&gt;
&lt;li&gt;安装node&lt;/li&gt;
&lt;li&gt;安装npm&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装hexo&lt;br&gt;npm install hexo-cli -g&lt;br&gt;npm install hexo –save&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo初始化&lt;br&gt;**根据自己需要创建一个hexo文件夹&lt;br&gt;$ hexo init &lt;folder&gt;&lt;br&gt;$ cd &lt;folder&gt;&lt;br&gt;$ npm install&lt;br&gt;新建完成后，指定文件夹的目录如下&lt;br&gt;.&lt;br&gt;├── _config.yml&lt;br&gt;├── package.json&lt;br&gt;├── scaffolds&lt;br&gt;├── scripts&lt;br&gt;├── source&lt;br&gt;|      ├── _drafts&lt;br&gt;|      └── _posts&lt;br&gt;└── themes&lt;/folder&gt;&lt;/folder&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Hexo插件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-index --save&amp;#10;npm install hexo-generator-archive --save&amp;#10;npm install hexo-generator-category --save&amp;#10;npm install hexo-generator-tag --save&amp;#10;npm install hexo-server --save&amp;#10;npm install hexo-deployer-git --save&amp;#10;npm install hexo-deployer-heroku --save&amp;#10;npm install hexo-deployer-rsync --save&amp;#10;npm install hexo-deployer-openshift --save&amp;#10;npm install hexo-renderer-marked@0.2 --save&amp;#10;npm install hexo-renderer-stylus@0.2 --save&amp;#10;npm install hexo-generator-feed@1 --save&amp;#10;npm install hexo-generator-sitemap@1 --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地查看效果&lt;br&gt;执行hexo server命令启动，然后访问localhost:4000查看效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-创建一篇文章&quot;&gt;&lt;a href=&quot;#4-创建一篇文章&quot; class=&quot;headerlink&quot; title=&quot;4.创建一篇文章&quot;&gt;&lt;/a&gt;4.创建一篇文章&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git shell进入之前创建的hexo文件夹，hexo new “hello world”创建一篇新的文章&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-同步并发布&quot;&gt;&lt;a href=&quot;#5-同步并发布&quot; class=&quot;headerlink&quot; title=&quot;5.同步并发布&quot;&gt;&lt;/a&gt;5.同步并发布&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;hexo g 生成静态文件&lt;/li&gt;
&lt;li&gt;git clone &lt;a href=&quot;https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/YihuaWanglv/yihuawanglv.github.io.git（替换成你之前在github上创建的Repository的地址）把项目clone到本地&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;复制生成的public文件夹内所有文件到clone到本地的yihuawanglv.github.io文件夹内&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6-提交更改到github&quot;&gt;&lt;a href=&quot;#6-提交更改到github&quot; class=&quot;headerlink&quot; title=&quot;6.提交更改到github&quot;&gt;&lt;/a&gt;6.提交更改到github&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git add *&lt;/li&gt;
&lt;li&gt;git commit -m “代码提交信息”&lt;/li&gt;
&lt;li&gt;git push origin master&lt;/li&gt;
&lt;li&gt;输入用户名密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样再次访问你github上的blog地址，即可发现内容已更新&lt;/p&gt;
&lt;h3 id=&quot;7-使用hexo别的主题美化blog样式&quot;&gt;&lt;a href=&quot;#7-使用hexo别的主题美化blog样式&quot; class=&quot;headerlink&quot; title=&quot;7.使用hexo别的主题美化blog样式&quot;&gt;&lt;/a&gt;7.使用hexo别的主题美化blog样式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我这里选用的是简介美观的next主题&lt;/li&gt;
&lt;li&gt;在终端窗口下，定位到 Hexo 站点目录下&lt;br&gt;$ cd your-hexo-site&lt;br&gt;$ git clone &lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iissnan/hexo-theme-next&lt;/a&gt; themes/next&lt;/li&gt;
&lt;li&gt;启用 NexT 主题&lt;br&gt;克隆/下载 完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。&lt;/li&gt;
&lt;li&gt;验证主题是否启用&lt;br&gt;运行 hexo s –debug，并访问 &lt;a href=&quot;http://localhost:4000，确保站点正确运行&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000，确保站点正确运行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;8-同步新的更改&quot;&gt;&lt;a href=&quot;#8-同步新的更改&quot; class=&quot;headerlink&quot; title=&quot;8.同步新的更改&quot;&gt;&lt;/a&gt;8.同步新的更改&lt;/h3&gt;&lt;p&gt;现在要把新的更改同步上github，重新执行步骤5和6即可。&lt;br&gt;当然把更新从hexo public文件夹同步到本地的Repository xxx.github.io文件夹内可以使用beyongcompare此类同步软件执行&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github，写代码必备&lt;/li&gt;
&lt;li&gt;hexo，一个很方便的静态blog生成系统&lt;/li&gt;
&lt;li&gt;还不太熟悉，暂时不放图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤&lt;/p&gt;
&lt;h3 id=&quot;1-首先得有一个github账号&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github pages" scheme="http://yoursite.com/tags/github-pages/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
